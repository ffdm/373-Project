
Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009504  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080096c8  080096c8  000196c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b50  08009b50  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b58  08009b58  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b58  08009b58  00019b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b5c  08009b5c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08009b60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000200  08009d60  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08009d60  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122ba  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002351  00000000  00000000  0003252d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00034880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ccc  00000000  00000000  000358d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b1bc  00000000  00000000  000365a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013841  00000000  00000000  00061760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109fdc  00000000  00000000  00074fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056d0  00000000  00000000  0017ef80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00184650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000200 	.word	0x20000200
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080096ac 	.word	0x080096ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000204 	.word	0x20000204
 80001fc:	080096ac 	.word	0x080096ac

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <setCameraY>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setCameraY(int val) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	*TIM4CCR4 = val; // up and down
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <setCameraY+0x1c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	2000000c 	.word	0x2000000c

08000f34 <setCameraX>:

void setCameraX(int val) {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	*TIM5CCR3 = val; // side to side
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <setCameraX+0x1c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	20000008 	.word	0x20000008
 8000f54:	00000000 	.word	0x00000000

08000f58 <setRightWheel>:

// val is between -1 and 1
#define MAX_SPEED 999;
void setRightWheel(double val) {
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	ed87 0b00 	vstr	d0, [r7]
	//*TIM3CCR2 = 1999;
	if(val > 0.10) { // FORWARD
 8000f62:	a339      	add	r3, pc, #228	; (adr r3, 8001048 <setRightWheel+0xf0>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f6c:	f7ff fdec 	bl	8000b48 <__aeabi_dcmpgt>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d01c      	beq.n	8000fb0 <setRightWheel+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2108      	movs	r1, #8
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f001 fe59 	bl	8002c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2101      	movs	r1, #1
 8000f86:	482e      	ldr	r0, [pc, #184]	; (8001040 <setRightWheel+0xe8>)
 8000f88:	f001 fe54 	bl	8002c34 <HAL_GPIO_WritePin>
		*TIM3CCR2 = val * MAX_SPEED;
 8000f8c:	a328      	add	r3, pc, #160	; (adr r3, 8001030 <setRightWheel+0xd8>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f96:	f7ff fb47 	bl	8000628 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4929      	ldr	r1, [pc, #164]	; (8001044 <setRightWheel+0xec>)
 8000fa0:	680c      	ldr	r4, [r1, #0]
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fe17 	bl	8000bd8 <__aeabi_d2uiz>
 8000faa:	4603      	mov	r3, r0
 8000fac:	6023      	str	r3, [r4, #0]
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
		*TIM3CCR2 = 0;
	}
}
 8000fae:	e039      	b.n	8001024 <setRightWheel+0xcc>
	} else if(val < -0.10) { // BACKWARD
 8000fb0:	a321      	add	r3, pc, #132	; (adr r3, 8001038 <setRightWheel+0xe0>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fba:	f7ff fda7 	bl	8000b0c <__aeabi_dcmplt>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d020      	beq.n	8001006 <setRightWheel+0xae>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f001 fe32 	bl	8002c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	481a      	ldr	r0, [pc, #104]	; (8001040 <setRightWheel+0xe8>)
 8000fd6:	f001 fe2d 	bl	8002c34 <HAL_GPIO_WritePin>
		*TIM3CCR2 = -val * MAX_SPEED;
 8000fda:	683c      	ldr	r4, [r7, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000fe2:	a313      	add	r3, pc, #76	; (adr r3, 8001030 <setRightWheel+0xd8>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	4620      	mov	r0, r4
 8000fea:	4629      	mov	r1, r5
 8000fec:	f7ff fb1c 	bl	8000628 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4913      	ldr	r1, [pc, #76]	; (8001044 <setRightWheel+0xec>)
 8000ff6:	680c      	ldr	r4, [r1, #0]
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fdec 	bl	8000bd8 <__aeabi_d2uiz>
 8001000:	4603      	mov	r3, r0
 8001002:	6023      	str	r3, [r4, #0]
}
 8001004:	e00e      	b.n	8001024 <setRightWheel+0xcc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2108      	movs	r1, #8
 800100a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100e:	f001 fe11 	bl	8002c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2101      	movs	r1, #1
 8001016:	480a      	ldr	r0, [pc, #40]	; (8001040 <setRightWheel+0xe8>)
 8001018:	f001 fe0c 	bl	8002c34 <HAL_GPIO_WritePin>
		*TIM3CCR2 = 0;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <setRightWheel+0xec>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bdb0      	pop	{r4, r5, r7, pc}
 800102c:	f3af 8000 	nop.w
 8001030:	00000000 	.word	0x00000000
 8001034:	408f3800 	.word	0x408f3800
 8001038:	9999999a 	.word	0x9999999a
 800103c:	bfb99999 	.word	0xbfb99999
 8001040:	48000800 	.word	0x48000800
 8001044:	20000004 	.word	0x20000004
 8001048:	9999999a 	.word	0x9999999a
 800104c:	3fb99999 	.word	0x3fb99999

08001050 <setLeftWheel>:

void setLeftWheel(double val) {
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	ed87 0b00 	vstr	d0, [r7]
	//*TIM2CCR1 = 1999;
	if(val > 0.10) { // FORWARD
 800105a:	a337      	add	r3, pc, #220	; (adr r3, 8001138 <setLeftWheel+0xe8>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001064:	f7ff fd70 	bl	8000b48 <__aeabi_dcmpgt>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d01b      	beq.n	80010a6 <setLeftWheel+0x56>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	2108      	movs	r1, #8
 8001072:	482f      	ldr	r0, [pc, #188]	; (8001130 <setLeftWheel+0xe0>)
 8001074:	f001 fdde 	bl	8002c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2102      	movs	r1, #2
 800107c:	482c      	ldr	r0, [pc, #176]	; (8001130 <setLeftWheel+0xe0>)
 800107e:	f001 fdd9 	bl	8002c34 <HAL_GPIO_WritePin>
		*TIM2CCR1 = val * MAX_SPEED;
 8001082:	a327      	add	r3, pc, #156	; (adr r3, 8001120 <setLeftWheel+0xd0>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800108c:	f7ff facc 	bl	8000628 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4927      	ldr	r1, [pc, #156]	; (8001134 <setLeftWheel+0xe4>)
 8001096:	680c      	ldr	r4, [r1, #0]
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fd9c 	bl	8000bd8 <__aeabi_d2uiz>
 80010a0:	4603      	mov	r3, r0
 80010a2:	6023      	str	r3, [r4, #0]
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
		*TIM2CCR1 = 0;
	}
}
 80010a4:	e037      	b.n	8001116 <setLeftWheel+0xc6>
	} else if(val < -0.10) { // BACKWARD
 80010a6:	a320      	add	r3, pc, #128	; (adr r3, 8001128 <setLeftWheel+0xd8>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010b0:	f7ff fd2c 	bl	8000b0c <__aeabi_dcmplt>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d01f      	beq.n	80010fa <setLeftWheel+0xaa>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2108      	movs	r1, #8
 80010be:	481c      	ldr	r0, [pc, #112]	; (8001130 <setLeftWheel+0xe0>)
 80010c0:	f001 fdb8 	bl	8002c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2102      	movs	r1, #2
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <setLeftWheel+0xe0>)
 80010ca:	f001 fdb3 	bl	8002c34 <HAL_GPIO_WritePin>
		*TIM2CCR1 = -val * MAX_SPEED;
 80010ce:	683c      	ldr	r4, [r7, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80010d6:	a312      	add	r3, pc, #72	; (adr r3, 8001120 <setLeftWheel+0xd0>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff faa2 	bl	8000628 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4912      	ldr	r1, [pc, #72]	; (8001134 <setLeftWheel+0xe4>)
 80010ea:	680c      	ldr	r4, [r1, #0]
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fd72 	bl	8000bd8 <__aeabi_d2uiz>
 80010f4:	4603      	mov	r3, r0
 80010f6:	6023      	str	r3, [r4, #0]
}
 80010f8:	e00d      	b.n	8001116 <setLeftWheel+0xc6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2108      	movs	r1, #8
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <setLeftWheel+0xe0>)
 8001100:	f001 fd98 	bl	8002c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2102      	movs	r1, #2
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <setLeftWheel+0xe0>)
 800110a:	f001 fd93 	bl	8002c34 <HAL_GPIO_WritePin>
		*TIM2CCR1 = 0;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <setLeftWheel+0xe4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bdb0      	pop	{r4, r5, r7, pc}
 800111e:	bf00      	nop
 8001120:	00000000 	.word	0x00000000
 8001124:	408f3800 	.word	0x408f3800
 8001128:	9999999a 	.word	0x9999999a
 800112c:	bfb99999 	.word	0xbfb99999
 8001130:	48000800 	.word	0x48000800
 8001134:	20000000 	.word	0x20000000
 8001138:	9999999a 	.word	0x9999999a
 800113c:	3fb99999 	.word	0x3fb99999

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001144:	b0a6      	sub	sp, #152	; 0x98
 8001146:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f001 fa87 	bl	800265a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 fa46 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 fd00 	bl	8001b54 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001154:	f000 fb20 	bl	8001798 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001158:	f000 fb94 	bl	8001884 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800115c:	f000 fad0 	bl	8001700 <MX_USART2_UART_Init>
  MX_LPUART1_UART_Init();
 8001160:	f000 fa82 	bl	8001668 <MX_LPUART1_UART_Init>
  MX_TIM5_Init();
 8001164:	f000 fc7e 	bl	8001a64 <MX_TIM5_Init>
  MX_TIM4_Init();
 8001168:	f000 fc04 	bl	8001974 <MX_TIM4_Init>
  	  // 3A to ground, 4A to VCC

  // ENA = Timer 2 Channel 1 (PA5)
  // ENB = Timer 3 Channel 2 (PA7)

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800116c:	2100      	movs	r1, #0
 800116e:	4885      	ldr	r0, [pc, #532]	; (8001384 <main+0x244>)
 8001170:	f003 faf4 	bl	800475c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001174:	2104      	movs	r1, #4
 8001176:	4884      	ldr	r0, [pc, #528]	; (8001388 <main+0x248>)
 8001178:	f003 faf0 	bl	800475c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800117c:	2108      	movs	r1, #8
 800117e:	4883      	ldr	r0, [pc, #524]	; (800138c <main+0x24c>)
 8001180:	f003 faec 	bl	800475c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001184:	210c      	movs	r1, #12
 8001186:	4882      	ldr	r0, [pc, #520]	; (8001390 <main+0x250>)
 8001188:	f003 fae8 	bl	800475c <HAL_TIM_PWM_Start>
  {

	  //#define DEBUG_MODE 1;

	  // Receive data from Transmitter XBEE
	  HAL_StatusTypeDef ControllerStatus = HAL_UART_Receive(&huart2, rx_data, 6, 10);
 800118c:	f107 010c 	add.w	r1, r7, #12
 8001190:	230a      	movs	r3, #10
 8001192:	2206      	movs	r2, #6
 8001194:	487f      	ldr	r0, [pc, #508]	; (8001394 <main+0x254>)
 8001196:	f004 fb5c 	bl	8005852 <HAL_UART_Receive>
 800119a:	4603      	mov	r3, r0
 800119c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			  printf("%2x ", rx_data[i]);
		  }
		  printf("\n");
	  #endif

	  uint8_t buttons1 = rx_data[0];
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	  uint8_t buttons2 = rx_data[1];
 80011a6:	7b7b      	ldrb	r3, [r7, #13]
 80011a8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	  int Rx = rx_data[2];
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	66bb      	str	r3, [r7, #104]	; 0x68
	  int Ry = rx_data[3];
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	667b      	str	r3, [r7, #100]	; 0x64
	  int Lx = rx_data[4];
 80011b4:	7c3b      	ldrb	r3, [r7, #16]
 80011b6:	663b      	str	r3, [r7, #96]	; 0x60
	  int Ly = rx_data[5];
 80011b8:	7c7b      	ldrb	r3, [r7, #17]
 80011ba:	65fb      	str	r3, [r7, #92]	; 0x5c

	  // Digital Buttons from Controller
	  uint8_t L1, L2, R1, R2, Left, Up, Right, Down, Triangle, Circle, X, Square, Start, Select, RightPress, LeftPress;

	  Left = !((buttons1 & (1 << 7)) >> 7);
 80011bc:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 80011c0:	43db      	mvns	r3, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	09db      	lsrs	r3, r3, #7
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	  Down = !((buttons1 & (1 << 6)) >> 6);
 80011cc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80011d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bf0c      	ite	eq
 80011d8:	2301      	moveq	r3, #1
 80011da:	2300      	movne	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	  Right = !((buttons1 & (1 << 5)) >> 5);
 80011e2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	  Up = !((buttons1 & (1 << 4)) >> 4);
 80011f8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	  Start = !((buttons1 & (1 << 3)) >> 3);
 800120e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  RightPress = !((buttons1 & (1 << 2)) >> 2);
 8001224:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	  LeftPress = !((buttons1 & (1 << 1)) >> 1);
 800123a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf0c      	ite	eq
 8001246:	2301      	moveq	r3, #1
 8001248:	2300      	movne	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	  Select = !((buttons1 & (1 << 0)) >> 0);
 8001250:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf0c      	ite	eq
 800125c:	2301      	moveq	r3, #1
 800125e:	2300      	movne	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

	  Square = !((buttons2 & (1 << 7)) >> 7);
 8001266:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
 800126a:	43db      	mvns	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	09db      	lsrs	r3, r3, #7
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  X = !((buttons2 & (1 << 6)) >> 6);
 8001276:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800127a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf0c      	ite	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	2300      	movne	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	  Circle = !((buttons2 & (1 << 5)) >> 5);
 800128c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	  Triangle = !((buttons2 & (1 << 4)) >> 4);
 80012a2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf0c      	ite	eq
 80012ae:	2301      	moveq	r3, #1
 80012b0:	2300      	movne	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	  R1 = !((buttons2 & (1 << 3)) >> 3);
 80012b8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  L1 = !((buttons2 & (1 << 2)) >> 2);
 80012ce:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	  R2 = !((buttons2 & (1 << 1)) >> 1);
 80012e4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf0c      	ite	eq
 80012f0:	2301      	moveq	r3, #1
 80012f2:	2300      	movne	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	  L2 = !((buttons2 & (1 << 0)) >> 0);
 80012fa:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf0c      	ite	eq
 8001306:	2301      	moveq	r3, #1
 8001308:	2300      	movne	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	  Lx = Lx - 128;
 8001310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001312:	3b80      	subs	r3, #128	; 0x80
 8001314:	663b      	str	r3, [r7, #96]	; 0x60
	  Ly = Ly - 128;
 8001316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001318:	3b80      	subs	r3, #128	; 0x80
 800131a:	65fb      	str	r3, [r7, #92]	; 0x5c
	  Ly = -1 * Ly;
 800131c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131e:	425b      	negs	r3, r3
 8001320:	65fb      	str	r3, [r7, #92]	; 0x5c
	  Rx = Rx - 128;
 8001322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001324:	3b80      	subs	r3, #128	; 0x80
 8001326:	66bb      	str	r3, [r7, #104]	; 0x68
	  Ry = Ry - 128;
 8001328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800132a:	3b80      	subs	r3, #128	; 0x80
 800132c:	667b      	str	r3, [r7, #100]	; 0x64
	  Ry = -1 * Ry;
 800132e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001330:	425b      	negs	r3, r3
 8001332:	667b      	str	r3, [r7, #100]	; 0x64

	  // Map Left joystick to Camera Panning
	  // MIN: 60, MAX: 240

	  //printf("Ly: %d, Lx: %d, Ry: %d, Rx: %d\n", Ly, Lx, Ry, Rx);
	  if(Ly > 20 && camY < 215) {
 8001334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001336:	2b14      	cmp	r3, #20
 8001338:	dd09      	ble.n	800134e <main+0x20e>
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <main+0x258>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2bd6      	cmp	r3, #214	; 0xd6
 8001340:	dc05      	bgt.n	800134e <main+0x20e>
		  camY +=1 ;
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <main+0x258>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <main+0x258>)
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e00c      	b.n	8001368 <main+0x228>
	  } else if(Ly < -20 && camY > 75) {
 800134e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001350:	f113 0f14 	cmn.w	r3, #20
 8001354:	da08      	bge.n	8001368 <main+0x228>
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <main+0x258>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b4b      	cmp	r3, #75	; 0x4b
 800135c:	dd04      	ble.n	8001368 <main+0x228>
		  camY -=1 ;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <main+0x258>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <main+0x258>)
 8001366:	6013      	str	r3, [r2, #0]
	  }
	  if(Lx > 20 && camX < 225) {
 8001368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800136a:	2b14      	cmp	r3, #20
 800136c:	dd18      	ble.n	80013a0 <main+0x260>
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <main+0x25c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2be0      	cmp	r3, #224	; 0xe0
 8001374:	dc14      	bgt.n	80013a0 <main+0x260>
		  camX +=3 ;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <main+0x25c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3303      	adds	r3, #3
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <main+0x25c>)
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e01b      	b.n	80013ba <main+0x27a>
 8001382:	bf00      	nop
 8001384:	20000344 	.word	0x20000344
 8001388:	20000390 	.word	0x20000390
 800138c:	20000428 	.word	0x20000428
 8001390:	200003dc 	.word	0x200003dc
 8001394:	200002b0 	.word	0x200002b0
 8001398:	20000010 	.word	0x20000010
 800139c:	20000014 	.word	0x20000014
	  } else if(Lx < -20 && camX > 65) {
 80013a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a2:	f113 0f14 	cmn.w	r3, #20
 80013a6:	da08      	bge.n	80013ba <main+0x27a>
 80013a8:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <main+0x480>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b41      	cmp	r3, #65	; 0x41
 80013ae:	dd04      	ble.n	80013ba <main+0x27a>
		  camX -=3 ;
 80013b0:	4b83      	ldr	r3, [pc, #524]	; (80015c0 <main+0x480>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	4a82      	ldr	r2, [pc, #520]	; (80015c0 <main+0x480>)
 80013b8:	6013      	str	r3, [r2, #0]
	  }
	  setCameraX(camX);
 80013ba:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <main+0x480>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fdb8 	bl	8000f34 <setCameraX>
	  setCameraY(camY);
 80013c4:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <main+0x484>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fda3 	bl	8000f14 <setCameraY>
	  printf("\n");*/

	  // Buttons1: Left, Down, Right, Up, start, right joystick click, left joystick click, select
	  // Buttons2: square, x, circle, triangle, R1, L1, R2, L2

	  double dRx = (double) Rx / 128;
 80013ce:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80013d0:	f7ff f8c0 	bl	8000554 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b7b      	ldr	r3, [pc, #492]	; (80015c8 <main+0x488>)
 80013da:	f7ff fa4f 	bl	800087c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  double dRy = (double) Ry / 128;
 80013e6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80013e8:	f7ff f8b4 	bl	8000554 <__aeabi_i2d>
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b75      	ldr	r3, [pc, #468]	; (80015c8 <main+0x488>)
 80013f2:	f7ff fa43 	bl	800087c <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	  double raw_dist = sqrt(dRx*dRx + dRy*dRy);
 80013fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001402:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001406:	f7ff f90f 	bl	8000628 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4690      	mov	r8, r2
 8001410:	4699      	mov	r9, r3
 8001412:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001416:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800141a:	f7ff f905 	bl	8000628 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4640      	mov	r0, r8
 8001424:	4649      	mov	r1, r9
 8001426:	f7fe ff49 	bl	80002bc <__adddf3>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	ec43 2b17 	vmov	d7, r2, r3
 8001432:	eeb0 0a47 	vmov.f32	s0, s14
 8001436:	eef0 0a67 	vmov.f32	s1, s15
 800143a:	f007 fdbd 	bl	8008fb8 <sqrt>
 800143e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	  double dist = (raw_dist >= 1.0) ? 1.0 : raw_dist;
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b61      	ldr	r3, [pc, #388]	; (80015cc <main+0x48c>)
 8001448:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800144c:	f7ff fb72 	bl	8000b34 <__aeabi_dcmpge>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <main+0x31e>
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b5c      	ldr	r3, [pc, #368]	; (80015cc <main+0x48c>)
 800145c:	e001      	b.n	8001462 <main+0x322>
 800145e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001462:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	  double scaled_dist; // TODO
	  double theta = atan2(dRy, dRx);
 8001466:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 800146a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800146e:	f007 fda1 	bl	8008fb4 <atan2>
 8001472:	ed87 0b08 	vstr	d0, [r7, #32]

	  double R, L;
	  // Figure out quadrants
	  if(Rx >=0 && Ry >= 0) { // Quadrant 1
 8001476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001478:	2b00      	cmp	r3, #0
 800147a:	db18      	blt.n	80014ae <main+0x36e>
 800147c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800147e:	2b00      	cmp	r3, #0
 8001480:	db15      	blt.n	80014ae <main+0x36e>
		  L = 1.0 * dist;
 8001482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001486:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		  R = (theta/1.57079632679) * dist;
 800148a:	a34b      	add	r3, pc, #300	; (adr r3, 80015b8 <main+0x478>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001494:	f7ff f9f2 	bl	800087c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014a0:	f7ff f8c2 	bl	8000628 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 80014ac:	e064      	b.n	8001578 <main+0x438>

	  } else if(Rx >= 0 && Ry < 0) { // Quadrant 2
 80014ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db1a      	blt.n	80014ea <main+0x3aa>
 80014b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	da17      	bge.n	80014ea <main+0x3aa>
		  L = -1.0 * dist;
 80014ba:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014c2:	e9c7 451c 	strd	r4, r5, [r7, #112]	; 0x70
		  R = (theta / 1.57079632679) * dist;
 80014c6:	a33c      	add	r3, pc, #240	; (adr r3, 80015b8 <main+0x478>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014d0:	f7ff f9d4 	bl	800087c <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014dc:	f7ff f8a4 	bl	8000628 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 80014e8:	e046      	b.n	8001578 <main+0x438>

	  } else if(Rx < 0 && Ry < 0) { // Quadrant 3
 80014ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da26      	bge.n	800153e <main+0x3fe>
 80014f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da23      	bge.n	800153e <main+0x3fe>
		  R = -1.0 * dist;
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	ed97 7b00 	vldr	d7, [r7]
 8001506:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
		  L = (-2.0 - (theta / 1.57079632679)) * dist;
 800150a:	a32b      	add	r3, pc, #172	; (adr r3, 80015b8 <main+0x478>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001514:	f7ff f9b2 	bl	800087c <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001524:	f7fe fec8 	bl	80002b8 <__aeabi_dsub>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001530:	f7ff f87a 	bl	8000628 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800153c:	e01c      	b.n	8001578 <main+0x438>

	  } else { // Quadrant 4
		  R = 1.0 * dist;
 800153e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001542:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		  L = (2.0 - (theta / 1.57079632679)) * dist;
 8001546:	a31c      	add	r3, pc, #112	; (adr r3, 80015b8 <main+0x478>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001550:	f7ff f994 	bl	800087c <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	f04f 0000 	mov.w	r0, #0
 800155c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001560:	f7fe feaa 	bl	80002b8 <__aeabi_dsub>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800156c:	f7ff f85c 	bl	8000628 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	  }

	  setLeftWheel(L);
 8001578:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 800157c:	f7ff fd68 	bl	8001050 <setLeftWheel>
	  setRightWheel(R);
 8001580:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 8001584:	f7ff fce8 	bl	8000f58 <setRightWheel>

	  printf("dist %f, L %f, R %f, leftccr %d, rightccr%d\n", dist, L, R, *TIM2CCR1, *TIM3CCR2);
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <main+0x490>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <main+0x494>)
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	9205      	str	r2, [sp, #20]
 8001596:	9304      	str	r3, [sp, #16]
 8001598:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800159c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015a0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015a4:	e9cd 2300 	strd	r2, r3, [sp]
 80015a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <main+0x498>)
 80015ae:	f005 fd59 	bl	8007064 <iprintf>
  {
 80015b2:	e5eb      	b.n	800118c <main+0x4c>
 80015b4:	f3af 8000 	nop.w
 80015b8:	5443d6f4 	.word	0x5443d6f4
 80015bc:	3ff921fb 	.word	0x3ff921fb
 80015c0:	20000014 	.word	0x20000014
 80015c4:	20000010 	.word	0x20000010
 80015c8:	40600000 	.word	0x40600000
 80015cc:	3ff00000 	.word	0x3ff00000
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000004 	.word	0x20000004
 80015d8:	080096c8 	.word	0x080096c8

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b096      	sub	sp, #88	; 0x58
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2244      	movs	r2, #68	; 0x44
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 fd8f 	bl	800710e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001602:	f001 fb4f 	bl	8002ca4 <HAL_PWREx_ControlVoltageScaling>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800160c:	f000 fcaa 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001610:	2310      	movs	r3, #16
 8001612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001614:	2301      	movs	r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800161c:	2360      	movs	r3, #96	; 0x60
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001620:	2300      	movs	r3, #0
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4618      	mov	r0, r3
 800162a:	f001 fbef 	bl	8002e0c <HAL_RCC_OscConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001634:	f000 fc96 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001638:	230f      	movs	r3, #15
 800163a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f001 fff5 	bl	8003640 <HAL_RCC_ClockConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800165c:	f000 fc82 	bl	8001f64 <Error_Handler>
  }
}
 8001660:	bf00      	nop
 8001662:	3758      	adds	r7, #88	; 0x58
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <MX_LPUART1_UART_Init+0x94>)
 8001670:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016b0:	4811      	ldr	r0, [pc, #68]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 80016b2:	f003 ffef 	bl	8005694 <HAL_UART_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80016bc:	f000 fc52 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c0:	2100      	movs	r1, #0
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 80016c4:	f004 fedc 	bl	8006480 <HAL_UARTEx_SetTxFifoThreshold>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016ce:	f000 fc49 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d2:	2100      	movs	r1, #0
 80016d4:	4808      	ldr	r0, [pc, #32]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 80016d6:	f004 ff11 	bl	80064fc <HAL_UARTEx_SetRxFifoThreshold>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016e0:	f000 fc40 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_LPUART1_UART_Init+0x90>)
 80016e6:	f004 fe92 	bl	800640e <HAL_UARTEx_DisableFifoMode>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016f0:	f000 fc38 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000021c 	.word	0x2000021c
 80016fc:	40008000 	.word	0x40008000

08001700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001706:	4a23      	ldr	r2, [pc, #140]	; (8001794 <MX_USART2_UART_Init+0x94>)
 8001708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001748:	4811      	ldr	r0, [pc, #68]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800174a:	f003 ffa3 	bl	8005694 <HAL_UART_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001754:	f000 fc06 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001758:	2100      	movs	r1, #0
 800175a:	480d      	ldr	r0, [pc, #52]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800175c:	f004 fe90 	bl	8006480 <HAL_UARTEx_SetTxFifoThreshold>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001766:	f000 fbfd 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176a:	2100      	movs	r1, #0
 800176c:	4808      	ldr	r0, [pc, #32]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800176e:	f004 fec5 	bl	80064fc <HAL_UARTEx_SetRxFifoThreshold>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001778:	f000 fbf4 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800177c:	4804      	ldr	r0, [pc, #16]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800177e:	f004 fe46 	bl	800640e <HAL_UARTEx_DisableFifoMode>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001788:	f000 fbec 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200002b0 	.word	0x200002b0
 8001794:	40004400 	.word	0x40004400

08001798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	; 0x38
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b8:	463b      	mov	r3, r7
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
 80017c6:	615a      	str	r2, [r3, #20]
 80017c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <MX_TIM2_Init+0xe8>)
 80017cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <MX_TIM2_Init+0xe8>)
 80017d4:	22c7      	movs	r2, #199	; 0xc7
 80017d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <MX_TIM2_Init+0xe8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <MX_TIM2_Init+0xe8>)
 80017e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <MX_TIM2_Init+0xe8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <MX_TIM2_Init+0xe8>)
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f2:	4823      	ldr	r0, [pc, #140]	; (8001880 <MX_TIM2_Init+0xe8>)
 80017f4:	f002 fefa 	bl	80045ec <HAL_TIM_Base_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017fe:	f000 fbb1 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001808:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180c:	4619      	mov	r1, r3
 800180e:	481c      	ldr	r0, [pc, #112]	; (8001880 <MX_TIM2_Init+0xe8>)
 8001810:	f003 f9be 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800181a:	f000 fba3 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800181e:	4818      	ldr	r0, [pc, #96]	; (8001880 <MX_TIM2_Init+0xe8>)
 8001820:	f002 ff3b 	bl	800469a <HAL_TIM_PWM_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800182a:	f000 fb9b 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	4810      	ldr	r0, [pc, #64]	; (8001880 <MX_TIM2_Init+0xe8>)
 800183e:	f003 fea1 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001848:	f000 fb8c 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184c:	2360      	movs	r3, #96	; 0x60
 800184e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	4619      	mov	r1, r3
 8001862:	4807      	ldr	r0, [pc, #28]	; (8001880 <MX_TIM2_Init+0xe8>)
 8001864:	f003 f880 	bl	8004968 <HAL_TIM_PWM_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800186e:	f000 fb79 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001872:	4803      	ldr	r0, [pc, #12]	; (8001880 <MX_TIM2_Init+0xe8>)
 8001874:	f000 fd1e 	bl	80022b4 <HAL_TIM_MspPostInit>

}
 8001878:	bf00      	nop
 800187a:	3738      	adds	r7, #56	; 0x38
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000344 	.word	0x20000344

08001884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08e      	sub	sp, #56	; 0x38
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a4:	463b      	mov	r3, r7
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <MX_TIM3_Init+0xe8>)
 80018b8:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <MX_TIM3_Init+0xec>)
 80018ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <MX_TIM3_Init+0xe8>)
 80018be:	22c7      	movs	r2, #199	; 0xc7
 80018c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <MX_TIM3_Init+0xe8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <MX_TIM3_Init+0xe8>)
 80018ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b26      	ldr	r3, [pc, #152]	; (800196c <MX_TIM3_Init+0xe8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018d6:	4b25      	ldr	r3, [pc, #148]	; (800196c <MX_TIM3_Init+0xe8>)
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018dc:	4823      	ldr	r0, [pc, #140]	; (800196c <MX_TIM3_Init+0xe8>)
 80018de:	f002 fe85 	bl	80045ec <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018e8:	f000 fb3c 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f6:	4619      	mov	r1, r3
 80018f8:	481c      	ldr	r0, [pc, #112]	; (800196c <MX_TIM3_Init+0xe8>)
 80018fa:	f003 f949 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001904:	f000 fb2e 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001908:	4818      	ldr	r0, [pc, #96]	; (800196c <MX_TIM3_Init+0xe8>)
 800190a:	f002 fec6 	bl	800469a <HAL_TIM_PWM_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001914:	f000 fb26 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4811      	ldr	r0, [pc, #68]	; (800196c <MX_TIM3_Init+0xe8>)
 8001928:	f003 fe2c 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001932:	f000 fb17 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001936:	2360      	movs	r3, #96	; 0x60
 8001938:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001946:	463b      	mov	r3, r7
 8001948:	2204      	movs	r2, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4807      	ldr	r0, [pc, #28]	; (800196c <MX_TIM3_Init+0xe8>)
 800194e:	f003 f80b 	bl	8004968 <HAL_TIM_PWM_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001958:	f000 fb04 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <MX_TIM3_Init+0xe8>)
 800195e:	f000 fca9 	bl	80022b4 <HAL_TIM_MspPostInit>

}
 8001962:	bf00      	nop
 8001964:	3738      	adds	r7, #56	; 0x38
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000390 	.word	0x20000390
 8001970:	40000400 	.word	0x40000400

08001974 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08e      	sub	sp, #56	; 0x38
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001994:	463b      	mov	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <MX_TIM4_Init+0xe8>)
 80019a8:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <MX_TIM4_Init+0xec>)
 80019aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <MX_TIM4_Init+0xe8>)
 80019ae:	2227      	movs	r2, #39	; 0x27
 80019b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <MX_TIM4_Init+0xe8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <MX_TIM4_Init+0xe8>)
 80019ba:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80019be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <MX_TIM4_Init+0xe8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <MX_TIM4_Init+0xe8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019cc:	4823      	ldr	r0, [pc, #140]	; (8001a5c <MX_TIM4_Init+0xe8>)
 80019ce:	f002 fe0d 	bl	80045ec <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80019d8:	f000 fac4 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e6:	4619      	mov	r1, r3
 80019e8:	481c      	ldr	r0, [pc, #112]	; (8001a5c <MX_TIM4_Init+0xe8>)
 80019ea:	f003 f8d1 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80019f4:	f000 fab6 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019f8:	4818      	ldr	r0, [pc, #96]	; (8001a5c <MX_TIM4_Init+0xe8>)
 80019fa:	f002 fe4e 	bl	800469a <HAL_TIM_PWM_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001a04:	f000 faae 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	4811      	ldr	r0, [pc, #68]	; (8001a5c <MX_TIM4_Init+0xe8>)
 8001a18:	f003 fdb4 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001a22:	f000 fa9f 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a26:	2360      	movs	r3, #96	; 0x60
 8001a28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a36:	463b      	mov	r3, r7
 8001a38:	220c      	movs	r2, #12
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4807      	ldr	r0, [pc, #28]	; (8001a5c <MX_TIM4_Init+0xe8>)
 8001a3e:	f002 ff93 	bl	8004968 <HAL_TIM_PWM_ConfigChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001a48:	f000 fa8c 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <MX_TIM4_Init+0xe8>)
 8001a4e:	f000 fc31 	bl	80022b4 <HAL_TIM_MspPostInit>

}
 8001a52:	bf00      	nop
 8001a54:	3738      	adds	r7, #56	; 0x38
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200003dc 	.word	0x200003dc
 8001a60:	40000800 	.word	0x40000800

08001a64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08e      	sub	sp, #56	; 0x38
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	615a      	str	r2, [r3, #20]
 8001a94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001a98:	4a2d      	ldr	r2, [pc, #180]	; (8001b50 <MX_TIM5_Init+0xec>)
 8001a9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 39;
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001a9e:	2227      	movs	r2, #39	; 0x27
 8001aa0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8001aa8:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001aaa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001aae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001abc:	4823      	ldr	r0, [pc, #140]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001abe:	f002 fd95 	bl	80045ec <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001ac8:	f000 fa4c 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481c      	ldr	r0, [pc, #112]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001ada:	f003 f859 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001ae4:	f000 fa3e 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ae8:	4818      	ldr	r0, [pc, #96]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001aea:	f002 fdd6 	bl	800469a <HAL_TIM_PWM_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001af4:	f000 fa36 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	4811      	ldr	r0, [pc, #68]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001b08:	f003 fd3c 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001b12:	f000 fa27 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b16:	2360      	movs	r3, #96	; 0x60
 8001b18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b26:	463b      	mov	r3, r7
 8001b28:	2208      	movs	r2, #8
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4807      	ldr	r0, [pc, #28]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001b2e:	f002 ff1b 	bl	8004968 <HAL_TIM_PWM_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001b38:	f000 fa14 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <MX_TIM5_Init+0xe8>)
 8001b3e:	f000 fbb9 	bl	80022b4 <HAL_TIM_MspPostInit>

}
 8001b42:	bf00      	nop
 8001b44:	3738      	adds	r7, #56	; 0x38
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000428 	.word	0x20000428
 8001b50:	40000c00 	.word	0x40000c00

08001b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08e      	sub	sp, #56	; 0x38
 8001b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6a:	4bb3      	ldr	r3, [pc, #716]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4ab2      	ldr	r2, [pc, #712]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b76:	4bb0      	ldr	r3, [pc, #704]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	623b      	str	r3, [r7, #32]
 8001b80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	4bad      	ldr	r3, [pc, #692]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4aac      	ldr	r2, [pc, #688]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8e:	4baa      	ldr	r3, [pc, #680]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b9a:	4ba7      	ldr	r3, [pc, #668]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4aa6      	ldr	r2, [pc, #664]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001ba0:	f043 0320 	orr.w	r3, r3, #32
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4ba4      	ldr	r3, [pc, #656]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb2:	4ba1      	ldr	r3, [pc, #644]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4aa0      	ldr	r2, [pc, #640]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b9e      	ldr	r3, [pc, #632]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b9b      	ldr	r3, [pc, #620]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a9a      	ldr	r2, [pc, #616]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b98      	ldr	r3, [pc, #608]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b95      	ldr	r3, [pc, #596]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a94      	ldr	r2, [pc, #592]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b92      	ldr	r3, [pc, #584]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfa:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a8e      	ldr	r2, [pc, #568]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b8c      	ldr	r3, [pc, #560]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a88      	ldr	r2, [pc, #544]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b86      	ldr	r3, [pc, #536]	; (8001e38 <MX_GPIO_Init+0x2e4>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001c2a:	f001 f8df 	bl	8002dec <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	210b      	movs	r1, #11
 8001c32:	4882      	ldr	r0, [pc, #520]	; (8001e3c <MX_GPIO_Init+0x2e8>)
 8001c34:	f000 fffe 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2108      	movs	r1, #8
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f000 fff8 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c44:	230c      	movs	r3, #12
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c54:	230d      	movs	r3, #13
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4878      	ldr	r0, [pc, #480]	; (8001e40 <MX_GPIO_Init+0x2ec>)
 8001c60:	f000 fe56 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c64:	2307      	movs	r3, #7
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c68:	2312      	movs	r3, #18
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c74:	2304      	movs	r3, #4
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4871      	ldr	r0, [pc, #452]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001c80:	f000 fe46 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c94:	230d      	movs	r3, #13
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4869      	ldr	r0, [pc, #420]	; (8001e44 <MX_GPIO_Init+0x2f0>)
 8001ca0:	f000 fe36 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001ca4:	230b      	movs	r3, #11
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4860      	ldr	r0, [pc, #384]	; (8001e3c <MX_GPIO_Init+0x2e8>)
 8001cbc:	f000 fe28 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8001cc0:	2334      	movs	r3, #52	; 0x34
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cc4:	230b      	movs	r3, #11
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	485a      	ldr	r0, [pc, #360]	; (8001e3c <MX_GPIO_Init+0x2e8>)
 8001cd4:	f000 fe1c 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cdc:	230b      	movs	r3, #11
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f000 fe0f 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0c:	f000 fe00 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d10:	2350      	movs	r3, #80	; 0x50
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d20:	2305      	movs	r3, #5
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2e:	f000 fdef 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d32:	2302      	movs	r3, #2
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d36:	230b      	movs	r3, #11
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d42:	4619      	mov	r1, r3
 8001d44:	4840      	ldr	r0, [pc, #256]	; (8001e48 <MX_GPIO_Init+0x2f4>)
 8001d46:	f000 fde3 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001d4a:	2344      	movs	r3, #68	; 0x44
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	483a      	ldr	r0, [pc, #232]	; (8001e48 <MX_GPIO_Init+0x2f4>)
 8001d5e:	f000 fdd7 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001d62:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d74:	2301      	movs	r3, #1
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4830      	ldr	r0, [pc, #192]	; (8001e40 <MX_GPIO_Init+0x2ec>)
 8001d80:	f000 fdc6 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001d96:	2303      	movs	r3, #3
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4827      	ldr	r0, [pc, #156]	; (8001e40 <MX_GPIO_Init+0x2ec>)
 8001da2:	f000 fdb5 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001da6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001db8:	230d      	movs	r3, #13
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4821      	ldr	r0, [pc, #132]	; (8001e48 <MX_GPIO_Init+0x2f4>)
 8001dc4:	f000 fda4 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001dc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001dda:	230e      	movs	r3, #14
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de2:	4619      	mov	r1, r3
 8001de4:	4818      	ldr	r0, [pc, #96]	; (8001e48 <MX_GPIO_Init+0x2f4>)
 8001de6:	f000 fd93 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	4811      	ldr	r0, [pc, #68]	; (8001e4c <MX_GPIO_Init+0x2f8>)
 8001e08:	f000 fd82 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e0c:	2340      	movs	r3, #64	; 0x40
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001e1c:	230d      	movs	r3, #13
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_GPIO_Init+0x2e8>)
 8001e28:	f000 fd72 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e2c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e36:	e00b      	b.n	8001e50 <MX_GPIO_Init+0x2fc>
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	48000800 	.word	0x48000800
 8001e40:	48001000 	.word	0x48001000
 8001e44:	48001400 	.word	0x48001400
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e58:	230c      	movs	r3, #12
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	4619      	mov	r1, r3
 8001e62:	4834      	ldr	r0, [pc, #208]	; (8001f34 <MX_GPIO_Init+0x3e0>)
 8001e64:	f000 fd54 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001e68:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e82:	4619      	mov	r1, r3
 8001e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e88:	f000 fd42 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea4:	f000 fd34 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001eb8:	2309      	movs	r3, #9
 8001eba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	481d      	ldr	r0, [pc, #116]	; (8001f38 <MX_GPIO_Init+0x3e4>)
 8001ec4:	f000 fd24 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ed8:	230c      	movs	r3, #12
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4815      	ldr	r0, [pc, #84]	; (8001f38 <MX_GPIO_Init+0x3e4>)
 8001ee4:	f000 fd14 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ee8:	2338      	movs	r3, #56	; 0x38
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ef8:	2306      	movs	r3, #6
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f00:	4619      	mov	r1, r3
 8001f02:	480e      	ldr	r0, [pc, #56]	; (8001f3c <MX_GPIO_Init+0x3e8>)
 8001f04:	f000 fd04 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f0e:	2312      	movs	r3, #18
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f22:	4619      	mov	r1, r3
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_GPIO_Init+0x3e8>)
 8001f26:	f000 fcf3 	bl	8002910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f2a:	bf00      	nop
 8001f2c:	3738      	adds	r7, #56	; 0x38
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	48000800 	.word	0x48000800
 8001f38:	48000c00 	.word	0x48000c00
 8001f3c:	48000400 	.word	0x48000400

08001f40 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001f48:	1d39      	adds	r1, r7, #4
 8001f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4803      	ldr	r0, [pc, #12]	; (8001f60 <__io_putchar+0x20>)
 8001f52:	f003 fbef 	bl	8005734 <HAL_UART_Transmit>
  return ch;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2000021c 	.word	0x2000021c

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <Error_Handler+0x8>
	...

08001f70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6613      	str	r3, [r2, #96]	; 0x60
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0b0      	sub	sp, #192	; 0xc0
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	2294      	movs	r2, #148	; 0x94
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f005 f898 	bl	800710e <memset>
  if(huart->Instance==LPUART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_UART_MspInit+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d13e      	bne.n	8002066 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff0:	f107 0318 	add.w	r3, r7, #24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 fde1 	bl	8003bbc <HAL_RCCEx_PeriphCLKConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002000:	f7ff ffb0 	bl	8001f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002010:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800201c:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	4a34      	ldr	r2, [pc, #208]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 8002022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002028:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 800202a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8002034:	f000 feda 	bl	8002dec <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002038:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800203c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002052:	2308      	movs	r3, #8
 8002054:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002058:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800205c:	4619      	mov	r1, r3
 800205e:	4826      	ldr	r0, [pc, #152]	; (80020f8 <HAL_UART_MspInit+0x140>)
 8002060:	f000 fc56 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002064:	e03f      	b.n	80020e6 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a24      	ldr	r2, [pc, #144]	; (80020fc <HAL_UART_MspInit+0x144>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d13a      	bne.n	80020e6 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002070:	2302      	movs	r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002074:	2300      	movs	r3, #0
 8002076:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002078:	f107 0318 	add.w	r3, r7, #24
 800207c:	4618      	mov	r0, r3
 800207e:	f001 fd9d 	bl	8003bbc <HAL_RCCEx_PeriphCLKConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002088:	f7ff ff6c 	bl	8001f64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 8002092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_UART_MspInit+0x13c>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80020bc:	2378      	movs	r3, #120	; 0x78
 80020be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d4:	2307      	movs	r3, #7
 80020d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020de:	4619      	mov	r1, r3
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <HAL_UART_MspInit+0x148>)
 80020e2:	f000 fc15 	bl	8002910 <HAL_GPIO_Init>
}
 80020e6:	bf00      	nop
 80020e8:	37c0      	adds	r7, #192	; 0xc0
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40008000 	.word	0x40008000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	48001800 	.word	0x48001800
 80020fc:	40004400 	.word	0x40004400
 8002100:	48000c00 	.word	0x48000c00

08002104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b090      	sub	sp, #64	; 0x40
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002124:	d129      	bne.n	800217a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002126:	4b5c      	ldr	r3, [pc, #368]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a5b      	ldr	r2, [pc, #364]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
 8002132:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	4b56      	ldr	r3, [pc, #344]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	4a55      	ldr	r2, [pc, #340]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214a:	4b53      	ldr	r3, [pc, #332]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002168:	2301      	movs	r3, #1
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002170:	4619      	mov	r1, r3
 8002172:	484a      	ldr	r0, [pc, #296]	; (800229c <HAL_TIM_Base_MspInit+0x198>)
 8002174:	f000 fbcc 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002178:	e089      	b.n	800228e <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM3)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a48      	ldr	r2, [pc, #288]	; (80022a0 <HAL_TIM_Base_MspInit+0x19c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d128      	bne.n	80021d6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	4a43      	ldr	r2, [pc, #268]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	6593      	str	r3, [r2, #88]	; 0x58
 8002190:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219c:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021b4:	2301      	movs	r3, #1
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c4:	2302      	movs	r3, #2
 80021c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021cc:	4619      	mov	r1, r3
 80021ce:	4833      	ldr	r0, [pc, #204]	; (800229c <HAL_TIM_Base_MspInit+0x198>)
 80021d0:	f000 fb9e 	bl	8002910 <HAL_GPIO_Init>
}
 80021d4:	e05b      	b.n	800228e <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM4)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a32      	ldr	r2, [pc, #200]	; (80022a4 <HAL_TIM_Base_MspInit+0x1a0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d145      	bne.n	800226c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6593      	str	r3, [r2, #88]	; 0x58
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	4a26      	ldr	r2, [pc, #152]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002214:	4a20      	ldr	r2, [pc, #128]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002216:	f043 0310 	orr.w	r3, r3, #16
 800221a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002228:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800223a:	2302      	movs	r3, #2
 800223c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002242:	4619      	mov	r1, r3
 8002244:	4818      	ldr	r0, [pc, #96]	; (80022a8 <HAL_TIM_Base_MspInit+0x1a4>)
 8002246:	f000 fb63 	bl	8002910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800224a:	2301      	movs	r3, #1
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800225a:	2302      	movs	r3, #2
 800225c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800225e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002262:	4619      	mov	r1, r3
 8002264:	4811      	ldr	r0, [pc, #68]	; (80022ac <HAL_TIM_Base_MspInit+0x1a8>)
 8002266:	f000 fb53 	bl	8002910 <HAL_GPIO_Init>
}
 800226a:	e010      	b.n	800228e <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM5)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <HAL_TIM_Base_MspInit+0x1ac>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d10b      	bne.n	800228e <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	4a07      	ldr	r2, [pc, #28]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	6593      	str	r3, [r2, #88]	; 0x58
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_TIM_Base_MspInit+0x194>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
}
 800228e:	bf00      	nop
 8002290:	3740      	adds	r7, #64	; 0x40
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	48000400 	.word	0x48000400
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800
 80022a8:	48000c00 	.word	0x48000c00
 80022ac:	48001000 	.word	0x48001000
 80022b0:	40000c00 	.word	0x40000c00

080022b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	; 0x30
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d11d      	bne.n	8002312 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	4b45      	ldr	r3, [pc, #276]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	4a44      	ldr	r2, [pc, #272]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e2:	4b42      	ldr	r3, [pc, #264]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022ee:	2320      	movs	r3, #32
 80022f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022fe:	2301      	movs	r3, #1
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	4619      	mov	r1, r3
 8002308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230c:	f000 fb00 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002310:	e067      	b.n	80023e2 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a36      	ldr	r2, [pc, #216]	; (80023f0 <HAL_TIM_MspPostInit+0x13c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d11d      	bne.n	8002358 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231c:	4b33      	ldr	r3, [pc, #204]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	4a32      	ldr	r2, [pc, #200]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002328:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002344:	2302      	movs	r3, #2
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002352:	f000 fadd 	bl	8002910 <HAL_GPIO_Init>
}
 8002356:	e044      	b.n	80023e2 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <HAL_TIM_MspPostInit+0x140>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d11d      	bne.n	800239e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	4a21      	ldr	r2, [pc, #132]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800237a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800238c:	2302      	movs	r3, #2
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	4619      	mov	r1, r3
 8002396:	4818      	ldr	r0, [pc, #96]	; (80023f8 <HAL_TIM_MspPostInit+0x144>)
 8002398:	f000 faba 	bl	8002910 <HAL_GPIO_Init>
}
 800239c:	e021      	b.n	80023e2 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM5)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_TIM_MspPostInit+0x148>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d11c      	bne.n	80023e2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ac:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 80023ae:	f043 0320 	orr.w	r3, r3, #32
 80023b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_TIM_MspPostInit+0x138>)
 80023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023d2:	2302      	movs	r3, #2
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023d6:	f107 031c 	add.w	r3, r7, #28
 80023da:	4619      	mov	r1, r3
 80023dc:	4808      	ldr	r0, [pc, #32]	; (8002400 <HAL_TIM_MspPostInit+0x14c>)
 80023de:	f000 fa97 	bl	8002910 <HAL_GPIO_Init>
}
 80023e2:	bf00      	nop
 80023e4:	3730      	adds	r7, #48	; 0x30
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	40000c00 	.word	0x40000c00
 8002400:	48001400 	.word	0x48001400

08002404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002408:	e7fe      	b.n	8002408 <NMI_Handler+0x4>

0800240a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <HardFault_Handler+0x4>

08002410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <MemManage_Handler+0x4>

08002416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241a:	e7fe      	b.n	800241a <BusFault_Handler+0x4>

0800241c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <UsageFault_Handler+0x4>

08002422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002450:	f000 f958 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_kill>:

int _kill(int pid, int sig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002472:	f004 fe9f 	bl	80071b4 <__errno>
 8002476:	4603      	mov	r3, r0
 8002478:	2216      	movs	r2, #22
 800247a:	601a      	str	r2, [r3, #0]
  return -1;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_exit>:

void _exit (int status)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe7 	bl	8002468 <_kill>
  while (1) {}    /* Make sure we hang here */
 800249a:	e7fe      	b.n	800249a <_exit+0x12>

0800249c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e00a      	b.n	80024c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ae:	f3af 8000 	nop.w
 80024b2:	4601      	mov	r1, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	60ba      	str	r2, [r7, #8]
 80024ba:	b2ca      	uxtb	r2, r1
 80024bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbf0      	blt.n	80024ae <_read+0x12>
  }

  return len;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e009      	b.n	80024fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	60ba      	str	r2, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fd25 	bl	8001f40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	dbf1      	blt.n	80024e8 <_write+0x12>
  }
  return len;
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_close>:

int _close(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002536:	605a      	str	r2, [r3, #4]
  return 0;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_isatty>:

int _isatty(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f004 fe04 	bl	80071b4 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200a0000 	.word	0x200a0000
 80025d8:	00000400 	.word	0x00000400
 80025dc:	20000474 	.word	0x20000474
 80025e0:	200005c8 	.word	0x200005c8

080025e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <SystemInit+0x20>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <SystemInit+0x20>)
 80025f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002640 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800260c:	f7ff ffea 	bl	80025e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <LoopForever+0x6>)
  ldr r1, =_edata
 8002612:	490d      	ldr	r1, [pc, #52]	; (8002648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002614:	4a0d      	ldr	r2, [pc, #52]	; (800264c <LoopForever+0xe>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002628:	4c0a      	ldr	r4, [pc, #40]	; (8002654 <LoopForever+0x16>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002636:	f004 fdc3 	bl	80071c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800263a:	f7fe fd81 	bl	8001140 <main>

0800263e <LoopForever>:

LoopForever:
    b LoopForever
 800263e:	e7fe      	b.n	800263e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002640:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800264c:	08009b60 	.word	0x08009b60
  ldr r2, =_sbss
 8002650:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002654:	200005c8 	.word	0x200005c8

08002658 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC1_IRQHandler>

0800265a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002664:	2003      	movs	r0, #3
 8002666:	f000 f91f 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266a:	2000      	movs	r0, #0
 800266c:	f000 f80e 	bl	800268c <HAL_InitTick>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	71fb      	strb	r3, [r7, #7]
 800267a:	e001      	b.n	8002680 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800267c:	f7ff fc78 	bl	8001f70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002680:	79fb      	ldrb	r3, [r7, #7]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002698:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_InitTick+0x6c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d023      	beq.n	80026e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_InitTick+0x70>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_InitTick+0x6c>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f91d 	bl	80028f6 <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10f      	bne.n	80026e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d809      	bhi.n	80026dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c8:	2200      	movs	r2, #0
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f000 f8f5 	bl	80028be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026d4:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <HAL_InitTick+0x74>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e007      	b.n	80026ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	e004      	b.n	80026ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
 80026e6:	e001      	b.n	80026ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000020 	.word	0x20000020
 80026fc:	20000018 	.word	0x20000018
 8002700:	2000001c 	.word	0x2000001c

08002704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_IncTick+0x20>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_IncTick+0x24>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_IncTick+0x24>)
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000020 	.word	0x20000020
 8002728:	20000478 	.word	0x20000478

0800272c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return uwTick;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_GetTick+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000478 	.word	0x20000478

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	; (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	; (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
         );
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	d301      	bcc.n	800287a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <SysTick_Config+0x40>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002882:	210f      	movs	r1, #15
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f7ff ff8e 	bl	80027a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <SysTick_Config+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <SysTick_Config+0x40>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff47 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff5c 	bl	800278c <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff8e 	bl	80027fc <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5d 	bl	80027a8 <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffb0 	bl	8002864 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800291e:	e166      	b.n	8002bee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8158 	beq.w	8002be8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d005      	beq.n	8002950 <HAL_GPIO_Init+0x40>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d130      	bne.n	80029b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002986:	2201      	movs	r2, #1
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 0201 	and.w	r2, r3, #1
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d017      	beq.n	80029ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2203      	movs	r2, #3
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d123      	bne.n	8002a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	08da      	lsrs	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3208      	adds	r2, #8
 8002a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	6939      	ldr	r1, [r7, #16]
 8002a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0203 	and.w	r2, r3, #3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80b2 	beq.w	8002be8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a84:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <HAL_GPIO_Init+0x2fc>)
 8002a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a88:	4a60      	ldr	r2, [pc, #384]	; (8002c0c <HAL_GPIO_Init+0x2fc>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6613      	str	r3, [r2, #96]	; 0x60
 8002a90:	4b5e      	ldr	r3, [pc, #376]	; (8002c0c <HAL_GPIO_Init+0x2fc>)
 8002a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a9c:	4a5c      	ldr	r2, [pc, #368]	; (8002c10 <HAL_GPIO_Init+0x300>)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ac6:	d02b      	beq.n	8002b20 <HAL_GPIO_Init+0x210>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_GPIO_Init+0x304>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d025      	beq.n	8002b1c <HAL_GPIO_Init+0x20c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_GPIO_Init+0x308>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d01f      	beq.n	8002b18 <HAL_GPIO_Init+0x208>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a50      	ldr	r2, [pc, #320]	; (8002c1c <HAL_GPIO_Init+0x30c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d019      	beq.n	8002b14 <HAL_GPIO_Init+0x204>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a4f      	ldr	r2, [pc, #316]	; (8002c20 <HAL_GPIO_Init+0x310>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <HAL_GPIO_Init+0x200>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a4e      	ldr	r2, [pc, #312]	; (8002c24 <HAL_GPIO_Init+0x314>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00d      	beq.n	8002b0c <HAL_GPIO_Init+0x1fc>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a4d      	ldr	r2, [pc, #308]	; (8002c28 <HAL_GPIO_Init+0x318>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d007      	beq.n	8002b08 <HAL_GPIO_Init+0x1f8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a4c      	ldr	r2, [pc, #304]	; (8002c2c <HAL_GPIO_Init+0x31c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_GPIO_Init+0x1f4>
 8002b00:	2307      	movs	r3, #7
 8002b02:	e00e      	b.n	8002b22 <HAL_GPIO_Init+0x212>
 8002b04:	2308      	movs	r3, #8
 8002b06:	e00c      	b.n	8002b22 <HAL_GPIO_Init+0x212>
 8002b08:	2306      	movs	r3, #6
 8002b0a:	e00a      	b.n	8002b22 <HAL_GPIO_Init+0x212>
 8002b0c:	2305      	movs	r3, #5
 8002b0e:	e008      	b.n	8002b22 <HAL_GPIO_Init+0x212>
 8002b10:	2304      	movs	r3, #4
 8002b12:	e006      	b.n	8002b22 <HAL_GPIO_Init+0x212>
 8002b14:	2303      	movs	r3, #3
 8002b16:	e004      	b.n	8002b22 <HAL_GPIO_Init+0x212>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e002      	b.n	8002b22 <HAL_GPIO_Init+0x212>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_GPIO_Init+0x212>
 8002b20:	2300      	movs	r3, #0
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	f002 0203 	and.w	r2, r2, #3
 8002b28:	0092      	lsls	r2, r2, #2
 8002b2a:	4093      	lsls	r3, r2
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b32:	4937      	ldr	r1, [pc, #220]	; (8002c10 <HAL_GPIO_Init+0x300>)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	089b      	lsrs	r3, r3, #2
 8002b38:	3302      	adds	r3, #2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b40:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b64:	4a32      	ldr	r2, [pc, #200]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b6a:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b8e:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002be2:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <HAL_GPIO_Init+0x320>)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	3301      	adds	r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f47f ae91 	bne.w	8002920 <HAL_GPIO_Init+0x10>
  }
}
 8002bfe:	bf00      	nop
 8002c00:	bf00      	nop
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40010000 	.word	0x40010000
 8002c14:	48000400 	.word	0x48000400
 8002c18:	48000800 	.word	0x48000800
 8002c1c:	48000c00 	.word	0x48000c00
 8002c20:	48001000 	.word	0x48001000
 8002c24:	48001400 	.word	0x48001400
 8002c28:	48001800 	.word	0x48001800
 8002c2c:	48001c00 	.word	0x48001c00
 8002c30:	40010400 	.word	0x40010400

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c74:	d102      	bne.n	8002c7c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7a:	e00b      	b.n	8002c94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8a:	d102      	bne.n	8002c92 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c90:	e000      	b.n	8002c94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002c92:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40007000 	.word	0x40007000

08002ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d141      	bne.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cb2:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbe:	d131      	bne.n	8002d24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cc0:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc6:	4a46      	ldr	r2, [pc, #280]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ccc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd0:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd8:	4a41      	ldr	r2, [pc, #260]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ce0:	4b40      	ldr	r3, [pc, #256]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2232      	movs	r2, #50	; 0x32
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	4a3f      	ldr	r2, [pc, #252]	; (8002de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	0c9b      	lsrs	r3, r3, #18
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf6:	e002      	b.n	8002cfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cfe:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0a:	d102      	bne.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f2      	bne.n	8002cf8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d12:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1e:	d158      	bne.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e057      	b.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d24:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2a:	4a2d      	ldr	r2, [pc, #180]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d34:	e04d      	b.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3c:	d141      	bne.n	8002dc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4a:	d131      	bne.n	8002db0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d4c:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d52:	4a23      	ldr	r2, [pc, #140]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d64:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2232      	movs	r2, #50	; 0x32
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	0c9b      	lsrs	r3, r3, #18
 8002d7e:	3301      	adds	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d82:	e002      	b.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d96:	d102      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f2      	bne.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002daa:	d112      	bne.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e011      	b.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002dc0:	e007      	b.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40007000 	.word	0x40007000
 8002de4:	20000018 	.word	0x20000018
 8002de8:	431bde83 	.word	0x431bde83

08002dec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfa:	6053      	str	r3, [r2, #4]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40007000 	.word	0x40007000

08002e0c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f000 bc08 	b.w	8003630 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e20:	4b96      	ldr	r3, [pc, #600]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e2a:	4b94      	ldr	r3, [pc, #592]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80e4 	beq.w	800300a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4c>
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	f040 808b 	bne.w	8002f66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	f040 8087 	bne.w	8002f66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e58:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_OscConfig+0x64>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e3df      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	4b81      	ldr	r3, [pc, #516]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_RCC_OscConfig+0x7e>
 8002e80:	4b7e      	ldr	r3, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e88:	e005      	b.n	8002e96 <HAL_RCC_OscConfig+0x8a>
 8002e8a:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d223      	bcs.n	8002ee2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fdcc 	bl	8003a3c <RCC_SetFlashLatencyFromMSIRange>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e3c0      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eae:	4b73      	ldr	r3, [pc, #460]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a72      	ldr	r2, [pc, #456]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002eb4:	f043 0308 	orr.w	r3, r3, #8
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	4b70      	ldr	r3, [pc, #448]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	496d      	ldr	r1, [pc, #436]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ecc:	4b6b      	ldr	r3, [pc, #428]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	4968      	ldr	r1, [pc, #416]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
 8002ee0:	e025      	b.n	8002f2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee2:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ee8:	f043 0308 	orr.w	r3, r3, #8
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4960      	ldr	r1, [pc, #384]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f00:	4b5e      	ldr	r3, [pc, #376]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	495b      	ldr	r1, [pc, #364]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fd8c 	bl	8003a3c <RCC_SetFlashLatencyFromMSIRange>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e380      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f2e:	f000 fcc1 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b51      	ldr	r3, [pc, #324]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4950      	ldr	r1, [pc, #320]	; (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <HAL_RCC_OscConfig+0x278>)
 8002f4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f4e:	4b4e      	ldr	r3, [pc, #312]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fb9a 	bl	800268c <HAL_InitTick>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d052      	beq.n	8003008 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	e364      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d032      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f6e:	4b43      	ldr	r3, [pc, #268]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a42      	ldr	r2, [pc, #264]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f7a:	f7ff fbd7 	bl	800272c <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f82:	f7ff fbd3 	bl	800272c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e34d      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f94:	4b39      	ldr	r3, [pc, #228]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa0:	4b36      	ldr	r3, [pc, #216]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a35      	ldr	r2, [pc, #212]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fa6:	f043 0308 	orr.w	r3, r3, #8
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b33      	ldr	r3, [pc, #204]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4930      	ldr	r1, [pc, #192]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	492b      	ldr	r1, [pc, #172]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
 8002fd2:	e01a      	b.n	800300a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fd4:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a28      	ldr	r2, [pc, #160]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fda:	f023 0301 	bic.w	r3, r3, #1
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fe0:	f7ff fba4 	bl	800272c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe8:	f7ff fba0 	bl	800272c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e31a      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ffa:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1dc>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d073      	beq.n	80030fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d005      	beq.n	8003028 <HAL_RCC_OscConfig+0x21c>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d10e      	bne.n	8003040 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d10b      	bne.n	8003040 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <HAL_RCC_OscConfig+0x270>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d063      	beq.n	80030fc <HAL_RCC_OscConfig+0x2f0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d15f      	bne.n	80030fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e2f7      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d106      	bne.n	8003058 <HAL_RCC_OscConfig+0x24c>
 800304a:	4b0c      	ldr	r3, [pc, #48]	; (800307c <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a0b      	ldr	r2, [pc, #44]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e025      	b.n	80030a4 <HAL_RCC_OscConfig+0x298>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003060:	d114      	bne.n	800308c <HAL_RCC_OscConfig+0x280>
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a05      	ldr	r2, [pc, #20]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a02      	ldr	r2, [pc, #8]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e013      	b.n	80030a4 <HAL_RCC_OscConfig+0x298>
 800307c:	40021000 	.word	0x40021000
 8003080:	080096f8 	.word	0x080096f8
 8003084:	20000018 	.word	0x20000018
 8003088:	2000001c 	.word	0x2000001c
 800308c:	4ba0      	ldr	r3, [pc, #640]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a9f      	ldr	r2, [pc, #636]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b9d      	ldr	r3, [pc, #628]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a9c      	ldr	r2, [pc, #624]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7ff fb3e 	bl	800272c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7ff fb3a 	bl	800272c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e2b4      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c6:	4b92      	ldr	r3, [pc, #584]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2a8>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7ff fb2a 	bl	800272c <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7ff fb26 	bl	800272c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e2a0      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x2d0>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d060      	beq.n	80031cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d005      	beq.n	800311c <HAL_RCC_OscConfig+0x310>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b0c      	cmp	r3, #12
 8003114:	d119      	bne.n	800314a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d116      	bne.n	800314a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800311c:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_OscConfig+0x328>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e27d      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b76      	ldr	r3, [pc, #472]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	4973      	ldr	r1, [pc, #460]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003148:	e040      	b.n	80031cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d023      	beq.n	800319a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003152:	4b6f      	ldr	r3, [pc, #444]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6e      	ldr	r2, [pc, #440]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7ff fae5 	bl	800272c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7ff fae1 	bl	800272c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e25b      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003178:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b62      	ldr	r3, [pc, #392]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	495f      	ldr	r1, [pc, #380]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
 8003198:	e018      	b.n	80031cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b5d      	ldr	r3, [pc, #372]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5c      	ldr	r2, [pc, #368]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7ff fac1 	bl	800272c <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ae:	f7ff fabd 	bl	800272c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e237      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d03c      	beq.n	8003252 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01c      	beq.n	800321a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e0:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e6:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7ff fa9c 	bl	800272c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f7ff fa98 	bl	800272c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e212      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800320a:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ef      	beq.n	80031f8 <HAL_RCC_OscConfig+0x3ec>
 8003218:	e01b      	b.n	8003252 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800321c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003220:	4a3b      	ldr	r2, [pc, #236]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7ff fa7f 	bl	800272c <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003232:	f7ff fa7b 	bl	800272c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1f5      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1ef      	bne.n	8003232 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a6 	beq.w	80033ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003264:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	4a26      	ldr	r2, [pc, #152]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327a:	6593      	str	r3, [r2, #88]	; 0x58
 800327c:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003288:	2301      	movs	r3, #1
 800328a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d118      	bne.n	80032ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a4:	f7ff fa42 	bl	800272c <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7ff fa3e 	bl	800272c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1b8      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d108      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4d8>
 80032d2:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e2:	e029      	b.n	8003338 <HAL_RCC_OscConfig+0x52c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d115      	bne.n	8003318 <HAL_RCC_OscConfig+0x50c>
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	4a07      	ldr	r2, [pc, #28]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032f4:	f043 0304 	orr.w	r3, r3, #4
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	4a03      	ldr	r2, [pc, #12]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800330c:	e014      	b.n	8003338 <HAL_RCC_OscConfig+0x52c>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
 8003318:	4b9d      	ldr	r3, [pc, #628]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	4a9c      	ldr	r2, [pc, #624]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003328:	4b99      	ldr	r3, [pc, #612]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	4a98      	ldr	r2, [pc, #608]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d016      	beq.n	800336e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7ff f9f4 	bl	800272c <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003346:	e00a      	b.n	800335e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003348:	f7ff f9f0 	bl	800272c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e168      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335e:	4b8c      	ldr	r3, [pc, #560]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ed      	beq.n	8003348 <HAL_RCC_OscConfig+0x53c>
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7ff f9dd 	bl	800272c <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7ff f9d9 	bl	800272c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e151      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800338c:	4b80      	ldr	r3, [pc, #512]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ed      	bne.n	8003376 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339a:	7ffb      	ldrb	r3, [r7, #31]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b7b      	ldr	r3, [pc, #492]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4a7a      	ldr	r2, [pc, #488]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d03c      	beq.n	8003432 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01c      	beq.n	80033fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033c0:	4b73      	ldr	r3, [pc, #460]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80033c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c6:	4a72      	ldr	r2, [pc, #456]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7ff f9ac 	bl	800272c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d8:	f7ff f9a8 	bl	800272c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e122      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ea:	4b69      	ldr	r3, [pc, #420]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80033ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ef      	beq.n	80033d8 <HAL_RCC_OscConfig+0x5cc>
 80033f8:	e01b      	b.n	8003432 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033fa:	4b65      	ldr	r3, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80033fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003400:	4a63      	ldr	r2, [pc, #396]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7ff f98f 	bl	800272c <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003412:	f7ff f98b 	bl	800272c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e105      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003424:	4b5a      	ldr	r3, [pc, #360]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 8003426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ef      	bne.n	8003412 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80f9 	beq.w	800362e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	2b02      	cmp	r3, #2
 8003442:	f040 80cf 	bne.w	80035e4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003446:	4b52      	ldr	r3, [pc, #328]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0203 	and.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	429a      	cmp	r2, r3
 8003458:	d12c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	3b01      	subs	r3, #1
 8003466:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d123      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d11b      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d113      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	3b01      	subs	r3, #1
 800349a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d109      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	3b01      	subs	r3, #1
 80034ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d071      	beq.n	8003598 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d068      	beq.n	800358c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034ba:	4b35      	ldr	r3, [pc, #212]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d105      	bne.n	80034d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034c6:	4b32      	ldr	r3, [pc, #200]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0ac      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034d6:	4b2e      	ldr	r3, [pc, #184]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2d      	ldr	r2, [pc, #180]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80034dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e2:	f7ff f923 	bl	800272c <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7ff f91f 	bl	800272c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e099      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fc:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_RCC_OscConfig+0x788>)
 800350e:	4013      	ands	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003518:	3a01      	subs	r2, #1
 800351a:	0112      	lsls	r2, r2, #4
 800351c:	4311      	orrs	r1, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003522:	0212      	lsls	r2, r2, #8
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800352a:	0852      	lsrs	r2, r2, #1
 800352c:	3a01      	subs	r2, #1
 800352e:	0552      	lsls	r2, r2, #21
 8003530:	4311      	orrs	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003536:	0852      	lsrs	r2, r2, #1
 8003538:	3a01      	subs	r2, #1
 800353a:	0652      	lsls	r2, r2, #25
 800353c:	4311      	orrs	r1, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003542:	06d2      	lsls	r2, r2, #27
 8003544:	430a      	orrs	r2, r1
 8003546:	4912      	ldr	r1, [pc, #72]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 8003548:	4313      	orrs	r3, r2
 800354a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0f      	ldr	r2, [pc, #60]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 8003552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003556:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 800355e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003562:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003564:	f7ff f8e2 	bl	800272c <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356c:	f7ff f8de 	bl	800272c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e058      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800358a:	e050      	b.n	800362e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e04f      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
 8003590:	40021000 	.word	0x40021000
 8003594:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003598:	4b27      	ldr	r3, [pc, #156]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d144      	bne.n	800362e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035a4:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a23      	ldr	r2, [pc, #140]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b0:	4b21      	ldr	r3, [pc, #132]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a20      	ldr	r2, [pc, #128]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 80035b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035bc:	f7ff f8b6 	bl	800272c <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7ff f8b2 	bl	800272c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e02c      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x7b8>
 80035e2:	e024      	b.n	800362e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d01f      	beq.n	800362a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a12      	ldr	r2, [pc, #72]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 80035f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7ff f899 	bl	800272c <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fe:	f7ff f895 	bl	800272c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e00f      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800361c:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4905      	ldr	r1, [pc, #20]	; (8003638 <HAL_RCC_OscConfig+0x82c>)
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_OscConfig+0x830>)
 8003624:	4013      	ands	r3, r2
 8003626:	60cb      	str	r3, [r1, #12]
 8003628:	e001      	b.n	800362e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3720      	adds	r7, #32
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	feeefffc 	.word	0xfeeefffc

08003640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e11d      	b.n	8003894 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b90      	ldr	r3, [pc, #576]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d910      	bls.n	8003688 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b8d      	ldr	r3, [pc, #564]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 020f 	bic.w	r2, r3, #15
 800366e:	498b      	ldr	r1, [pc, #556]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b89      	ldr	r3, [pc, #548]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e105      	b.n	8003894 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d010      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	4b81      	ldr	r3, [pc, #516]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d908      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b7e      	ldr	r3, [pc, #504]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	497b      	ldr	r1, [pc, #492]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d079      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d11e      	bne.n	8003708 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	4b75      	ldr	r3, [pc, #468]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0dc      	b.n	8003894 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80036da:	f000 fa09 	bl	8003af0 <RCC_GetSysClockFreqFromPLLSource>
 80036de:	4603      	mov	r3, r0
 80036e0:	4a70      	ldr	r2, [pc, #448]	; (80038a4 <HAL_RCC_ClockConfig+0x264>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d946      	bls.n	8003774 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036e6:	4b6e      	ldr	r3, [pc, #440]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d140      	bne.n	8003774 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036f2:	4b6b      	ldr	r3, [pc, #428]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036fa:	4a69      	ldr	r2, [pc, #420]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80036fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003700:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e035      	b.n	8003774 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d107      	bne.n	8003720 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003710:	4b63      	ldr	r3, [pc, #396]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d115      	bne.n	8003748 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0b9      	b.n	8003894 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003728:	4b5d      	ldr	r3, [pc, #372]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0ad      	b.n	8003894 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003738:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0a5      	b.n	8003894 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003748:	f000 f8b4 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800374c:	4603      	mov	r3, r0
 800374e:	4a55      	ldr	r2, [pc, #340]	; (80038a4 <HAL_RCC_ClockConfig+0x264>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d90f      	bls.n	8003774 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003754:	4b52      	ldr	r3, [pc, #328]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003760:	4b4f      	ldr	r3, [pc, #316]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003768:	4a4d      	ldr	r2, [pc, #308]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 800376a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003774:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f023 0203 	bic.w	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4947      	ldr	r1, [pc, #284]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003786:	f7fe ffd1 	bl	800272c <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378e:	f7fe ffcd 	bl	800272c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e077      	b.n	8003894 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a4:	4b3e      	ldr	r3, [pc, #248]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 020c 	and.w	r2, r3, #12
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d1eb      	bne.n	800378e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d105      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037bc:	4b38      	ldr	r3, [pc, #224]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a37      	ldr	r2, [pc, #220]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80037c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037c6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d010      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d208      	bcs.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e4:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	492b      	ldr	r1, [pc, #172]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f6:	4b29      	ldr	r3, [pc, #164]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d210      	bcs.n	8003826 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 020f 	bic.w	r2, r3, #15
 800380c:	4923      	ldr	r1, [pc, #140]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d001      	beq.n	8003826 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e036      	b.n	8003894 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4918      	ldr	r1, [pc, #96]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003840:	4313      	orrs	r3, r2
 8003842:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4910      	ldr	r1, [pc, #64]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003864:	f000 f826 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	490c      	ldr	r1, [pc, #48]	; (80038a8 <HAL_RCC_ClockConfig+0x268>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <HAL_RCC_ClockConfig+0x26c>)
 8003882:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_RCC_ClockConfig+0x270>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7fe feff 	bl	800268c <HAL_InitTick>
 800388e:	4603      	mov	r3, r0
 8003890:	73fb      	strb	r3, [r7, #15]

  return status;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40022000 	.word	0x40022000
 80038a0:	40021000 	.word	0x40021000
 80038a4:	04c4b400 	.word	0x04c4b400
 80038a8:	080096f8 	.word	0x080096f8
 80038ac:	20000018 	.word	0x20000018
 80038b0:	2000001c 	.word	0x2000001c

080038b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	4b3e      	ldr	r3, [pc, #248]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038cc:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x34>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b0c      	cmp	r3, #12
 80038e0:	d121      	bne.n	8003926 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d11e      	bne.n	8003926 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038f4:	4b31      	ldr	r3, [pc, #196]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	e005      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003904:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003910:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003918:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10d      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003924:	e00a      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d102      	bne.n	8003932 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	e004      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d101      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800393a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d134      	bne.n	80039ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d003      	beq.n	800395a <HAL_RCC_GetSysClockFreq+0xa6>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d003      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0xac>
 8003958:	e005      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800395a:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800395c:	617b      	str	r3, [r7, #20]
      break;
 800395e:	e005      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003962:	617b      	str	r3, [r7, #20]
      break;
 8003964:	e002      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	617b      	str	r3, [r7, #20]
      break;
 800396a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3301      	adds	r3, #1
 8003978:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	fb03 f202 	mul.w	r2, r3, r2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	0e5b      	lsrs	r3, r3, #25
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	3301      	adds	r3, #1
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039ac:	69bb      	ldr	r3, [r7, #24]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	08009710 	.word	0x08009710
 80039c4:	00f42400 	.word	0x00f42400
 80039c8:	007a1200 	.word	0x007a1200

080039cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000018 	.word	0x20000018

080039e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039e8:	f7ff fff0 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	4904      	ldr	r1, [pc, #16]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	08009708 	.word	0x08009708

08003a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a14:	f7ff ffda 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0adb      	lsrs	r3, r3, #11
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4904      	ldr	r1, [pc, #16]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	08009708 	.word	0x08009708

08003a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a48:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a54:	f7ff f906 	bl	8002c64 <HAL_PWREx_GetVoltageRange>
 8003a58:	6178      	str	r0, [r7, #20]
 8003a5a:	e014      	b.n	8003a86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6593      	str	r3, [r2, #88]	; 0x58
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a74:	f7ff f8f6 	bl	8002c64 <HAL_PWREx_GetVoltageRange>
 8003a78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a8c:	d10b      	bne.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d913      	bls.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2ba0      	cmp	r3, #160	; 0xa0
 8003a98:	d902      	bls.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	e00d      	b.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	e00a      	b.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8003aaa:	d902      	bls.n	8003ab2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003aac:	2302      	movs	r3, #2
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	e004      	b.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b70      	cmp	r3, #112	; 0x70
 8003ab6:	d101      	bne.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ab8:	2301      	movs	r3, #1
 8003aba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 020f 	bic.w	r2, r3, #15
 8003ac4:	4909      	ldr	r1, [pc, #36]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d001      	beq.n	8003ade <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40022000 	.word	0x40022000

08003af0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d00b      	beq.n	8003b1e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d825      	bhi.n	8003b58 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d008      	beq.n	8003b24 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d11f      	bne.n	8003b58 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b1a:	613b      	str	r3, [r7, #16]
    break;
 8003b1c:	e01f      	b.n	8003b5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003b1e:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003b20:	613b      	str	r3, [r7, #16]
    break;
 8003b22:	e01c      	b.n	8003b5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b30:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e005      	b.n	8003b4c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003b4c:	4a1a      	ldr	r2, [pc, #104]	; (8003bb8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	613b      	str	r3, [r7, #16]
    break;
 8003b56:	e002      	b.n	8003b5e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
    break;
 8003b5c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	3301      	adds	r3, #1
 8003b6a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	fb03 f202 	mul.w	r2, r3, r2
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	0e5b      	lsrs	r3, r3, #25
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003b9e:	683b      	ldr	r3, [r7, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	007a1200 	.word	0x007a1200
 8003bb8:	08009710 	.word	0x08009710

08003bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bc8:	2300      	movs	r3, #0
 8003bca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d040      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d02a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003be0:	2b80      	cmp	r3, #128	; 0x80
 8003be2:	d825      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003be4:	2b60      	cmp	r3, #96	; 0x60
 8003be6:	d026      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003be8:	2b60      	cmp	r3, #96	; 0x60
 8003bea:	d821      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d006      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d81d      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d010      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003bfc:	e018      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bfe:	4b89      	ldr	r3, [pc, #548]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4a88      	ldr	r2, [pc, #544]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c0a:	e015      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fb02 	bl	800421c <RCCEx_PLLSAI1_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c1c:	e00c      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3320      	adds	r3, #32
 8003c22:	2100      	movs	r1, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fbed 	bl	8004404 <RCCEx_PLLSAI2_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c2e:	e003      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	74fb      	strb	r3, [r7, #19]
      break;
 8003c34:	e000      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c3e:	4b79      	ldr	r3, [pc, #484]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c44:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c4c:	4975      	ldr	r1, [pc, #468]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c54:	e001      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d047      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6e:	d030      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c74:	d82a      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c7a:	d02a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c80:	d824      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8c:	d81e      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c96:	d010      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c98:	e018      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c9a:	4b62      	ldr	r3, [pc, #392]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	4a61      	ldr	r2, [pc, #388]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca6:	e015      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fab4 	bl	800421c <RCCEx_PLLSAI1_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cb8:	e00c      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3320      	adds	r3, #32
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fb9f 	bl	8004404 <RCCEx_PLLSAI2_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cca:	e003      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	74fb      	strb	r3, [r7, #19]
      break;
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cda:	4b52      	ldr	r3, [pc, #328]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	494e      	ldr	r1, [pc, #312]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003cf0:	e001      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 809f 	beq.w	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d04:	2300      	movs	r3, #0
 8003d06:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d08:	4b46      	ldr	r3, [pc, #280]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00d      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1e:	4b41      	ldr	r3, [pc, #260]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d22:	4a40      	ldr	r2, [pc, #256]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2a:	4b3e      	ldr	r3, [pc, #248]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d36:	2301      	movs	r3, #1
 8003d38:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a3a      	ldr	r2, [pc, #232]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d46:	f7fe fcf1 	bl	800272c <HAL_GetTick>
 8003d4a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d4c:	e009      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fe fced 	bl	800272c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d902      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	74fb      	strb	r3, [r7, #19]
        break;
 8003d60:	e005      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ef      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d15b      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d74:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01f      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d019      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d9e:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dbe:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d016      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fe fcac 	bl	800272c <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd8:	f7fe fca8 	bl	800272c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d902      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	74fb      	strb	r3, [r7, #19]
            break;
 8003dee:	e006      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0ec      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10c      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	4903      	ldr	r1, [pc, #12]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e1c:	e008      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e1e:	7cfb      	ldrb	r3, [r7, #19]
 8003e20:	74bb      	strb	r3, [r7, #18]
 8003e22:	e005      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e30:	7c7b      	ldrb	r3, [r7, #17]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d105      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e36:	4ba0      	ldr	r3, [pc, #640]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	4a9f      	ldr	r2, [pc, #636]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e4e:	4b9a      	ldr	r3, [pc, #616]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f023 0203 	bic.w	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5c:	4996      	ldr	r1, [pc, #600]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e70:	4b91      	ldr	r3, [pc, #580]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	f023 020c 	bic.w	r2, r3, #12
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	498e      	ldr	r1, [pc, #568]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e92:	4b89      	ldr	r3, [pc, #548]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	4985      	ldr	r1, [pc, #532]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eb4:	4b80      	ldr	r3, [pc, #512]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec2:	497d      	ldr	r1, [pc, #500]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ed6:	4b78      	ldr	r3, [pc, #480]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee4:	4974      	ldr	r1, [pc, #464]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ef8:	4b6f      	ldr	r3, [pc, #444]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f06:	496c      	ldr	r1, [pc, #432]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f1a:	4b67      	ldr	r3, [pc, #412]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f28:	4963      	ldr	r1, [pc, #396]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f3c:	4b5e      	ldr	r3, [pc, #376]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4a:	495b      	ldr	r1, [pc, #364]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f5e:	4b56      	ldr	r3, [pc, #344]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	4952      	ldr	r1, [pc, #328]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f80:	4b4d      	ldr	r3, [pc, #308]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	494a      	ldr	r1, [pc, #296]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fa2:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	4941      	ldr	r1, [pc, #260]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fc4:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fca:	f023 0203 	bic.w	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	4939      	ldr	r1, [pc, #228]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d028      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fe6:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff4:	4930      	ldr	r1, [pc, #192]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004004:	d106      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004006:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	4a2b      	ldr	r2, [pc, #172]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004010:	60d3      	str	r3, [r2, #12]
 8004012:	e011      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800401c:	d10c      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	2101      	movs	r1, #1
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f8f9 	bl	800421c <RCCEx_PLLSAI1_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800402e:	7cfb      	ldrb	r3, [r7, #19]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d04d      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800404c:	d108      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004050:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004054:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800405a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800405e:	e012      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004060:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004066:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800406c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800407e:	490e      	ldr	r1, [pc, #56]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408e:	d106      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800409a:	60d3      	str	r3, [r2, #12]
 800409c:	e020      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a6:	d109      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a02      	ldr	r2, [pc, #8]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b2:	60d3      	str	r3, [r2, #12]
 80040b4:	e014      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3304      	adds	r3, #4
 80040ca:	2101      	movs	r1, #1
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 f8a5 	bl	800421c <RCCEx_PLLSAI1_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040d6:	7cfb      	ldrb	r3, [r7, #19]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d028      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040ec:	4b4a      	ldr	r3, [pc, #296]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fa:	4947      	ldr	r1, [pc, #284]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800410a:	d106      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800410c:	4b42      	ldr	r3, [pc, #264]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4a41      	ldr	r2, [pc, #260]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004116:	60d3      	str	r3, [r2, #12]
 8004118:	e011      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800411e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004122:	d10c      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f000 f876 	bl	800421c <RCCEx_PLLSAI1_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800413a:	7cfb      	ldrb	r3, [r7, #19]
 800413c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01e      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800414a:	4b33      	ldr	r3, [pc, #204]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415a:	492f      	ldr	r1, [pc, #188]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416c:	d10c      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	2102      	movs	r1, #2
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f851 	bl	800421c <RCCEx_PLLSAI1_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800417e:	7cfb      	ldrb	r3, [r7, #19]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004194:	4b20      	ldr	r3, [pc, #128]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004196:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800419a:	f023 0204 	bic.w	r2, r3, #4
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a4:	491c      	ldr	r1, [pc, #112]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041b8:	4b17      	ldr	r3, [pc, #92]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041be:	f023 0218 	bic.w	r2, r3, #24
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	4913      	ldr	r1, [pc, #76]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d017      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041dc:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ec:	490a      	ldr	r1, [pc, #40]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041fe:	d105      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800420a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800420c:	7cbb      	ldrb	r3, [r7, #18]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000

0800421c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800422a:	4b72      	ldr	r3, [pc, #456]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00e      	beq.n	8004254 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004236:	4b6f      	ldr	r3, [pc, #444]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0203 	and.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d103      	bne.n	800424e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
       ||
 800424a:	2b00      	cmp	r3, #0
 800424c:	d142      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	e03f      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d018      	beq.n	800428e <RCCEx_PLLSAI1_Config+0x72>
 800425c:	2b03      	cmp	r3, #3
 800425e:	d825      	bhi.n	80042ac <RCCEx_PLLSAI1_Config+0x90>
 8004260:	2b01      	cmp	r3, #1
 8004262:	d002      	beq.n	800426a <RCCEx_PLLSAI1_Config+0x4e>
 8004264:	2b02      	cmp	r3, #2
 8004266:	d009      	beq.n	800427c <RCCEx_PLLSAI1_Config+0x60>
 8004268:	e020      	b.n	80042ac <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800426a:	4b62      	ldr	r3, [pc, #392]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11d      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800427a:	e01a      	b.n	80042b2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800427c:	4b5d      	ldr	r3, [pc, #372]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004284:	2b00      	cmp	r3, #0
 8004286:	d116      	bne.n	80042b6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428c:	e013      	b.n	80042b6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800428e:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800429a:	4b56      	ldr	r3, [pc, #344]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042aa:	e006      	b.n	80042ba <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      break;
 80042b0:	e004      	b.n	80042bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80042ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d108      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80042c2:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4949      	ldr	r1, [pc, #292]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f040 8086 	bne.w	80043e8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042dc:	4b45      	ldr	r3, [pc, #276]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a44      	ldr	r2, [pc, #272]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e8:	f7fe fa20 	bl	800272c <HAL_GetTick>
 80042ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042ee:	e009      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f0:	f7fe fa1c 	bl	800272c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d902      	bls.n	8004304 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	73fb      	strb	r3, [r7, #15]
        break;
 8004302:	e005      	b.n	8004310 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004304:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1ef      	bne.n	80042f0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d168      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d113      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800431c:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	4b35      	ldr	r3, [pc, #212]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004322:	4013      	ands	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6892      	ldr	r2, [r2, #8]
 8004328:	0211      	lsls	r1, r2, #8
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	68d2      	ldr	r2, [r2, #12]
 800432e:	06d2      	lsls	r2, r2, #27
 8004330:	4311      	orrs	r1, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6852      	ldr	r2, [r2, #4]
 8004336:	3a01      	subs	r2, #1
 8004338:	0112      	lsls	r2, r2, #4
 800433a:	430a      	orrs	r2, r1
 800433c:	492d      	ldr	r1, [pc, #180]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	610b      	str	r3, [r1, #16]
 8004342:	e02d      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d115      	bne.n	8004376 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800434a:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004350:	4013      	ands	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	0211      	lsls	r1, r2, #8
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6912      	ldr	r2, [r2, #16]
 800435c:	0852      	lsrs	r2, r2, #1
 800435e:	3a01      	subs	r2, #1
 8004360:	0552      	lsls	r2, r2, #21
 8004362:	4311      	orrs	r1, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6852      	ldr	r2, [r2, #4]
 8004368:	3a01      	subs	r2, #1
 800436a:	0112      	lsls	r2, r2, #4
 800436c:	430a      	orrs	r2, r1
 800436e:	4921      	ldr	r1, [pc, #132]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004370:	4313      	orrs	r3, r2
 8004372:	610b      	str	r3, [r1, #16]
 8004374:	e014      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004376:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	4b21      	ldr	r3, [pc, #132]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6892      	ldr	r2, [r2, #8]
 8004382:	0211      	lsls	r1, r2, #8
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6952      	ldr	r2, [r2, #20]
 8004388:	0852      	lsrs	r2, r2, #1
 800438a:	3a01      	subs	r2, #1
 800438c:	0652      	lsls	r2, r2, #25
 800438e:	4311      	orrs	r1, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6852      	ldr	r2, [r2, #4]
 8004394:	3a01      	subs	r2, #1
 8004396:	0112      	lsls	r2, r2, #4
 8004398:	430a      	orrs	r2, r1
 800439a:	4916      	ldr	r1, [pc, #88]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fe f9be 	bl	800272c <HAL_GetTick>
 80043b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043b2:	e009      	b.n	80043c8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b4:	f7fe f9ba 	bl	800272c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d902      	bls.n	80043c8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	73fb      	strb	r3, [r7, #15]
          break;
 80043c6:	e005      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ef      	beq.n	80043b4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	4904      	ldr	r1, [pc, #16]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	07ff800f 	.word	0x07ff800f
 80043fc:	ff9f800f 	.word	0xff9f800f
 8004400:	f9ff800f 	.word	0xf9ff800f

08004404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004412:	4b72      	ldr	r3, [pc, #456]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00e      	beq.n	800443c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800441e:	4b6f      	ldr	r3, [pc, #444]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0203 	and.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d103      	bne.n	8004436 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
       ||
 8004432:	2b00      	cmp	r3, #0
 8004434:	d142      	bne.n	80044bc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e03f      	b.n	80044bc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d018      	beq.n	8004476 <RCCEx_PLLSAI2_Config+0x72>
 8004444:	2b03      	cmp	r3, #3
 8004446:	d825      	bhi.n	8004494 <RCCEx_PLLSAI2_Config+0x90>
 8004448:	2b01      	cmp	r3, #1
 800444a:	d002      	beq.n	8004452 <RCCEx_PLLSAI2_Config+0x4e>
 800444c:	2b02      	cmp	r3, #2
 800444e:	d009      	beq.n	8004464 <RCCEx_PLLSAI2_Config+0x60>
 8004450:	e020      	b.n	8004494 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004452:	4b62      	ldr	r3, [pc, #392]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11d      	bne.n	800449a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004462:	e01a      	b.n	800449a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004464:	4b5d      	ldr	r3, [pc, #372]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	2b00      	cmp	r3, #0
 800446e:	d116      	bne.n	800449e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004474:	e013      	b.n	800449e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004476:	4b59      	ldr	r3, [pc, #356]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004482:	4b56      	ldr	r3, [pc, #344]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004492:	e006      	b.n	80044a2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      break;
 8004498:	e004      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80044a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80044aa:	4b4c      	ldr	r3, [pc, #304]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f023 0203 	bic.w	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4949      	ldr	r1, [pc, #292]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 8086 	bne.w	80045d0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044c4:	4b45      	ldr	r3, [pc, #276]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a44      	ldr	r2, [pc, #272]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d0:	f7fe f92c 	bl	800272c <HAL_GetTick>
 80044d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044d6:	e009      	b.n	80044ec <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044d8:	f7fe f928 	bl	800272c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d902      	bls.n	80044ec <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	73fb      	strb	r3, [r7, #15]
        break;
 80044ea:	e005      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044ec:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1ef      	bne.n	80044d8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d168      	bne.n	80045d0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d113      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004504:	4b35      	ldr	r3, [pc, #212]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800450a:	4013      	ands	r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6892      	ldr	r2, [r2, #8]
 8004510:	0211      	lsls	r1, r2, #8
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68d2      	ldr	r2, [r2, #12]
 8004516:	06d2      	lsls	r2, r2, #27
 8004518:	4311      	orrs	r1, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6852      	ldr	r2, [r2, #4]
 800451e:	3a01      	subs	r2, #1
 8004520:	0112      	lsls	r2, r2, #4
 8004522:	430a      	orrs	r2, r1
 8004524:	492d      	ldr	r1, [pc, #180]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004526:	4313      	orrs	r3, r2
 8004528:	614b      	str	r3, [r1, #20]
 800452a:	e02d      	b.n	8004588 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d115      	bne.n	800455e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004532:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6892      	ldr	r2, [r2, #8]
 800453e:	0211      	lsls	r1, r2, #8
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6912      	ldr	r2, [r2, #16]
 8004544:	0852      	lsrs	r2, r2, #1
 8004546:	3a01      	subs	r2, #1
 8004548:	0552      	lsls	r2, r2, #21
 800454a:	4311      	orrs	r1, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6852      	ldr	r2, [r2, #4]
 8004550:	3a01      	subs	r2, #1
 8004552:	0112      	lsls	r2, r2, #4
 8004554:	430a      	orrs	r2, r1
 8004556:	4921      	ldr	r1, [pc, #132]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004558:	4313      	orrs	r3, r2
 800455a:	614b      	str	r3, [r1, #20]
 800455c:	e014      	b.n	8004588 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800455e:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6892      	ldr	r2, [r2, #8]
 800456a:	0211      	lsls	r1, r2, #8
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6952      	ldr	r2, [r2, #20]
 8004570:	0852      	lsrs	r2, r2, #1
 8004572:	3a01      	subs	r2, #1
 8004574:	0652      	lsls	r2, r2, #25
 8004576:	4311      	orrs	r1, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6852      	ldr	r2, [r2, #4]
 800457c:	3a01      	subs	r2, #1
 800457e:	0112      	lsls	r2, r2, #4
 8004580:	430a      	orrs	r2, r1
 8004582:	4916      	ldr	r1, [pc, #88]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004584:	4313      	orrs	r3, r2
 8004586:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800458e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fe f8ca 	bl	800272c <HAL_GetTick>
 8004598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800459a:	e009      	b.n	80045b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800459c:	f7fe f8c6 	bl	800272c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d902      	bls.n	80045b0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	73fb      	strb	r3, [r7, #15]
          break;
 80045ae:	e005      	b.n	80045bc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ef      	beq.n	800459c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	4904      	ldr	r1, [pc, #16]	; (80045dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
 80045e0:	07ff800f 	.word	0x07ff800f
 80045e4:	ff9f800f 	.word	0xff9f800f
 80045e8:	f9ff800f 	.word	0xf9ff800f

080045ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e049      	b.n	8004692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fd fd76 	bl	8002104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f000 fb7a 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e049      	b.n	8004740 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f841 	bl	8004748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f000 fb23 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <HAL_TIM_PWM_Start+0x24>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e03c      	b.n	80047fa <HAL_TIM_PWM_Start+0x9e>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b04      	cmp	r3, #4
 8004784:	d109      	bne.n	800479a <HAL_TIM_PWM_Start+0x3e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e02f      	b.n	80047fa <HAL_TIM_PWM_Start+0x9e>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d109      	bne.n	80047b4 <HAL_TIM_PWM_Start+0x58>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e022      	b.n	80047fa <HAL_TIM_PWM_Start+0x9e>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d109      	bne.n	80047ce <HAL_TIM_PWM_Start+0x72>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e015      	b.n	80047fa <HAL_TIM_PWM_Start+0x9e>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d109      	bne.n	80047e8 <HAL_TIM_PWM_Start+0x8c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e008      	b.n	80047fa <HAL_TIM_PWM_Start+0x9e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e09c      	b.n	800493c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start+0xb6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004810:	e023      	b.n	800485a <HAL_TIM_PWM_Start+0xfe>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b04      	cmp	r3, #4
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Start+0xc6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004820:	e01b      	b.n	800485a <HAL_TIM_PWM_Start+0xfe>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Start+0xd6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004830:	e013      	b.n	800485a <HAL_TIM_PWM_Start+0xfe>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b0c      	cmp	r3, #12
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Start+0xe6>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004840:	e00b      	b.n	800485a <HAL_TIM_PWM_Start+0xfe>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b10      	cmp	r3, #16
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start+0xf6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004850:	e003      	b.n	800485a <HAL_TIM_PWM_Start+0xfe>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2201      	movs	r2, #1
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fe68 	bl	8005538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a35      	ldr	r2, [pc, #212]	; (8004944 <HAL_TIM_PWM_Start+0x1e8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <HAL_TIM_PWM_Start+0x13e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a34      	ldr	r2, [pc, #208]	; (8004948 <HAL_TIM_PWM_Start+0x1ec>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00e      	beq.n	800489a <HAL_TIM_PWM_Start+0x13e>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a32      	ldr	r2, [pc, #200]	; (800494c <HAL_TIM_PWM_Start+0x1f0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d009      	beq.n	800489a <HAL_TIM_PWM_Start+0x13e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a31      	ldr	r2, [pc, #196]	; (8004950 <HAL_TIM_PWM_Start+0x1f4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d004      	beq.n	800489a <HAL_TIM_PWM_Start+0x13e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a2f      	ldr	r2, [pc, #188]	; (8004954 <HAL_TIM_PWM_Start+0x1f8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_TIM_PWM_Start+0x142>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_TIM_PWM_Start+0x144>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a22      	ldr	r2, [pc, #136]	; (8004944 <HAL_TIM_PWM_Start+0x1e8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01d      	beq.n	80048fa <HAL_TIM_PWM_Start+0x19e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d018      	beq.n	80048fa <HAL_TIM_PWM_Start+0x19e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a22      	ldr	r2, [pc, #136]	; (8004958 <HAL_TIM_PWM_Start+0x1fc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_TIM_PWM_Start+0x19e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a21      	ldr	r2, [pc, #132]	; (800495c <HAL_TIM_PWM_Start+0x200>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_TIM_PWM_Start+0x19e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <HAL_TIM_PWM_Start+0x204>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_TIM_PWM_Start+0x19e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_TIM_PWM_Start+0x1ec>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_TIM_PWM_Start+0x19e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <HAL_TIM_PWM_Start+0x1f0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d115      	bne.n	8004926 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4b18      	ldr	r3, [pc, #96]	; (8004964 <HAL_TIM_PWM_Start+0x208>)
 8004902:	4013      	ands	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b06      	cmp	r3, #6
 800490a:	d015      	beq.n	8004938 <HAL_TIM_PWM_Start+0x1dc>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004912:	d011      	beq.n	8004938 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	e008      	b.n	8004938 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e000      	b.n	800493a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004938:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40012c00 	.word	0x40012c00
 8004948:	40013400 	.word	0x40013400
 800494c:	40014000 	.word	0x40014000
 8004950:	40014400 	.word	0x40014400
 8004954:	40014800 	.word	0x40014800
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	00010007 	.word	0x00010007

08004968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004982:	2302      	movs	r3, #2
 8004984:	e0ff      	b.n	8004b86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b14      	cmp	r3, #20
 8004992:	f200 80f0 	bhi.w	8004b76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004996:	a201      	add	r2, pc, #4	; (adr r2, 800499c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049f1 	.word	0x080049f1
 80049a0:	08004b77 	.word	0x08004b77
 80049a4:	08004b77 	.word	0x08004b77
 80049a8:	08004b77 	.word	0x08004b77
 80049ac:	08004a31 	.word	0x08004a31
 80049b0:	08004b77 	.word	0x08004b77
 80049b4:	08004b77 	.word	0x08004b77
 80049b8:	08004b77 	.word	0x08004b77
 80049bc:	08004a73 	.word	0x08004a73
 80049c0:	08004b77 	.word	0x08004b77
 80049c4:	08004b77 	.word	0x08004b77
 80049c8:	08004b77 	.word	0x08004b77
 80049cc:	08004ab3 	.word	0x08004ab3
 80049d0:	08004b77 	.word	0x08004b77
 80049d4:	08004b77 	.word	0x08004b77
 80049d8:	08004b77 	.word	0x08004b77
 80049dc:	08004af5 	.word	0x08004af5
 80049e0:	08004b77 	.word	0x08004b77
 80049e4:	08004b77 	.word	0x08004b77
 80049e8:	08004b77 	.word	0x08004b77
 80049ec:	08004b35 	.word	0x08004b35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fa2e 	bl	8004e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0208 	orr.w	r2, r2, #8
 8004a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0204 	bic.w	r2, r2, #4
 8004a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6999      	ldr	r1, [r3, #24]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	619a      	str	r2, [r3, #24]
      break;
 8004a2e:	e0a5      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fa9e 	bl	8004f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6999      	ldr	r1, [r3, #24]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	021a      	lsls	r2, r3, #8
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	619a      	str	r2, [r3, #24]
      break;
 8004a70:	e084      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fb07 	bl	800508c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0208 	orr.w	r2, r2, #8
 8004a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0204 	bic.w	r2, r2, #4
 8004a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69d9      	ldr	r1, [r3, #28]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	61da      	str	r2, [r3, #28]
      break;
 8004ab0:	e064      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fb6f 	bl	800519c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69d9      	ldr	r1, [r3, #28]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	021a      	lsls	r2, r3, #8
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	61da      	str	r2, [r3, #28]
      break;
 8004af2:	e043      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fbb8 	bl	8005270 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0208 	orr.w	r2, r2, #8
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0204 	bic.w	r2, r2, #4
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b32:	e023      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fbfc 	bl	8005338 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	021a      	lsls	r2, r3, #8
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b74:	e002      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]
      break;
 8004b7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop

08004b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_TIM_ConfigClockSource+0x1c>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e0b6      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x18a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be8:	d03e      	beq.n	8004c68 <HAL_TIM_ConfigClockSource+0xd8>
 8004bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bee:	f200 8087 	bhi.w	8004d00 <HAL_TIM_ConfigClockSource+0x170>
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	f000 8086 	beq.w	8004d06 <HAL_TIM_ConfigClockSource+0x176>
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfe:	d87f      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x170>
 8004c00:	2b70      	cmp	r3, #112	; 0x70
 8004c02:	d01a      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0xaa>
 8004c04:	2b70      	cmp	r3, #112	; 0x70
 8004c06:	d87b      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x170>
 8004c08:	2b60      	cmp	r3, #96	; 0x60
 8004c0a:	d050      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x11e>
 8004c0c:	2b60      	cmp	r3, #96	; 0x60
 8004c0e:	d877      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x170>
 8004c10:	2b50      	cmp	r3, #80	; 0x50
 8004c12:	d03c      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xfe>
 8004c14:	2b50      	cmp	r3, #80	; 0x50
 8004c16:	d873      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x170>
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d058      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x13e>
 8004c1c:	2b40      	cmp	r3, #64	; 0x40
 8004c1e:	d86f      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x170>
 8004c20:	2b30      	cmp	r3, #48	; 0x30
 8004c22:	d064      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15e>
 8004c24:	2b30      	cmp	r3, #48	; 0x30
 8004c26:	d86b      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x170>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d060      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15e>
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d867      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x170>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d05c      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15e>
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d05a      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15e>
 8004c38:	e062      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c4a:	f000 fc55 	bl	80054f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	609a      	str	r2, [r3, #8]
      break;
 8004c66:	e04f      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c78:	f000 fc3e 	bl	80054f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c8a:	609a      	str	r2, [r3, #8]
      break;
 8004c8c:	e03c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 fbb2 	bl	8005404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2150      	movs	r1, #80	; 0x50
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fc0b 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004cac:	e02c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f000 fbd1 	bl	8005462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2160      	movs	r1, #96	; 0x60
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fbfb 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004ccc:	e01c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f000 fb92 	bl	8005404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2140      	movs	r1, #64	; 0x40
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fbeb 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004cec:	e00c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f000 fbe2 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004cfe:	e003      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
      break;
 8004d04:	e000      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a40      	ldr	r2, [pc, #256]	; (8004e38 <TIM_Base_SetConfig+0x114>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d00f      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3d      	ldr	r2, [pc, #244]	; (8004e3c <TIM_Base_SetConfig+0x118>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3c      	ldr	r2, [pc, #240]	; (8004e40 <TIM_Base_SetConfig+0x11c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a3b      	ldr	r2, [pc, #236]	; (8004e44 <TIM_Base_SetConfig+0x120>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a3a      	ldr	r2, [pc, #232]	; (8004e48 <TIM_Base_SetConfig+0x124>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d108      	bne.n	8004d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <TIM_Base_SetConfig+0x114>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01f      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d84:	d01b      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2c      	ldr	r2, [pc, #176]	; (8004e3c <TIM_Base_SetConfig+0x118>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d017      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2b      	ldr	r2, [pc, #172]	; (8004e40 <TIM_Base_SetConfig+0x11c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <TIM_Base_SetConfig+0x120>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a29      	ldr	r2, [pc, #164]	; (8004e48 <TIM_Base_SetConfig+0x124>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a28      	ldr	r2, [pc, #160]	; (8004e4c <TIM_Base_SetConfig+0x128>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a27      	ldr	r2, [pc, #156]	; (8004e50 <TIM_Base_SetConfig+0x12c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <TIM_Base_SetConfig+0x130>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <TIM_Base_SetConfig+0x114>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00f      	beq.n	8004e1c <TIM_Base_SetConfig+0xf8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a12      	ldr	r2, [pc, #72]	; (8004e48 <TIM_Base_SetConfig+0x124>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <TIM_Base_SetConfig+0xf8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a11      	ldr	r2, [pc, #68]	; (8004e4c <TIM_Base_SetConfig+0x128>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0xf8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a10      	ldr	r2, [pc, #64]	; (8004e50 <TIM_Base_SetConfig+0x12c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0xf8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a0f      	ldr	r2, [pc, #60]	; (8004e54 <TIM_Base_SetConfig+0x130>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40013400 	.word	0x40013400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800

08004e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	f023 0201 	bic.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f023 0302 	bic.w	r3, r3, #2
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <TIM_OC1_SetConfig+0x10c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00f      	beq.n	8004ed8 <TIM_OC1_SetConfig+0x80>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a2b      	ldr	r2, [pc, #172]	; (8004f68 <TIM_OC1_SetConfig+0x110>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00b      	beq.n	8004ed8 <TIM_OC1_SetConfig+0x80>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <TIM_OC1_SetConfig+0x114>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d007      	beq.n	8004ed8 <TIM_OC1_SetConfig+0x80>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <TIM_OC1_SetConfig+0x118>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_OC1_SetConfig+0x80>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a28      	ldr	r2, [pc, #160]	; (8004f74 <TIM_OC1_SetConfig+0x11c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d10c      	bne.n	8004ef2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0308 	bic.w	r3, r3, #8
 8004ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f023 0304 	bic.w	r3, r3, #4
 8004ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a1b      	ldr	r2, [pc, #108]	; (8004f64 <TIM_OC1_SetConfig+0x10c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00f      	beq.n	8004f1a <TIM_OC1_SetConfig+0xc2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1a      	ldr	r2, [pc, #104]	; (8004f68 <TIM_OC1_SetConfig+0x110>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_OC1_SetConfig+0xc2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a19      	ldr	r2, [pc, #100]	; (8004f6c <TIM_OC1_SetConfig+0x114>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_OC1_SetConfig+0xc2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <TIM_OC1_SetConfig+0x118>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_OC1_SetConfig+0xc2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a17      	ldr	r2, [pc, #92]	; (8004f74 <TIM_OC1_SetConfig+0x11c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d111      	bne.n	8004f3e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	621a      	str	r2, [r3, #32]
}
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40013400 	.word	0x40013400
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40014400 	.word	0x40014400
 8004f74:	40014800 	.word	0x40014800

08004f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f023 0210 	bic.w	r2, r3, #16
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0320 	bic.w	r3, r3, #32
 8004fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a28      	ldr	r2, [pc, #160]	; (8005078 <TIM_OC2_SetConfig+0x100>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_OC2_SetConfig+0x6c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a27      	ldr	r2, [pc, #156]	; (800507c <TIM_OC2_SetConfig+0x104>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d10d      	bne.n	8005000 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <TIM_OC2_SetConfig+0x100>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00f      	beq.n	8005028 <TIM_OC2_SetConfig+0xb0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1c      	ldr	r2, [pc, #112]	; (800507c <TIM_OC2_SetConfig+0x104>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00b      	beq.n	8005028 <TIM_OC2_SetConfig+0xb0>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <TIM_OC2_SetConfig+0x108>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_OC2_SetConfig+0xb0>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <TIM_OC2_SetConfig+0x10c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC2_SetConfig+0xb0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a19      	ldr	r2, [pc, #100]	; (8005088 <TIM_OC2_SetConfig+0x110>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d113      	bne.n	8005050 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800502e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40013400 	.word	0x40013400
 8005080:	40014000 	.word	0x40014000
 8005084:	40014400 	.word	0x40014400
 8005088:	40014800 	.word	0x40014800

0800508c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0303 	bic.w	r3, r3, #3
 80050c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a27      	ldr	r2, [pc, #156]	; (8005188 <TIM_OC3_SetConfig+0xfc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_OC3_SetConfig+0x6a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a26      	ldr	r2, [pc, #152]	; (800518c <TIM_OC3_SetConfig+0x100>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10d      	bne.n	8005112 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <TIM_OC3_SetConfig+0xfc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00f      	beq.n	800513a <TIM_OC3_SetConfig+0xae>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1b      	ldr	r2, [pc, #108]	; (800518c <TIM_OC3_SetConfig+0x100>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_OC3_SetConfig+0xae>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a1a      	ldr	r2, [pc, #104]	; (8005190 <TIM_OC3_SetConfig+0x104>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <TIM_OC3_SetConfig+0xae>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a19      	ldr	r2, [pc, #100]	; (8005194 <TIM_OC3_SetConfig+0x108>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_OC3_SetConfig+0xae>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a18      	ldr	r2, [pc, #96]	; (8005198 <TIM_OC3_SetConfig+0x10c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d113      	bne.n	8005162 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	621a      	str	r2, [r3, #32]
}
 800517c:	bf00      	nop
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40013400 	.word	0x40013400
 8005190:	40014000 	.word	0x40014000
 8005194:	40014400 	.word	0x40014400
 8005198:	40014800 	.word	0x40014800

0800519c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	031b      	lsls	r3, r3, #12
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a18      	ldr	r2, [pc, #96]	; (800525c <TIM_OC4_SetConfig+0xc0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00f      	beq.n	8005220 <TIM_OC4_SetConfig+0x84>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a17      	ldr	r2, [pc, #92]	; (8005260 <TIM_OC4_SetConfig+0xc4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_OC4_SetConfig+0x84>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a16      	ldr	r2, [pc, #88]	; (8005264 <TIM_OC4_SetConfig+0xc8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_OC4_SetConfig+0x84>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a15      	ldr	r2, [pc, #84]	; (8005268 <TIM_OC4_SetConfig+0xcc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_OC4_SetConfig+0x84>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a14      	ldr	r2, [pc, #80]	; (800526c <TIM_OC4_SetConfig+0xd0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d109      	bne.n	8005234 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	019b      	lsls	r3, r3, #6
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40013400 	.word	0x40013400
 8005264:	40014000 	.word	0x40014000
 8005268:	40014400 	.word	0x40014400
 800526c:	40014800 	.word	0x40014800

08005270 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a17      	ldr	r2, [pc, #92]	; (8005324 <TIM_OC5_SetConfig+0xb4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00f      	beq.n	80052ea <TIM_OC5_SetConfig+0x7a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a16      	ldr	r2, [pc, #88]	; (8005328 <TIM_OC5_SetConfig+0xb8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00b      	beq.n	80052ea <TIM_OC5_SetConfig+0x7a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a15      	ldr	r2, [pc, #84]	; (800532c <TIM_OC5_SetConfig+0xbc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d007      	beq.n	80052ea <TIM_OC5_SetConfig+0x7a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a14      	ldr	r2, [pc, #80]	; (8005330 <TIM_OC5_SetConfig+0xc0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d003      	beq.n	80052ea <TIM_OC5_SetConfig+0x7a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a13      	ldr	r2, [pc, #76]	; (8005334 <TIM_OC5_SetConfig+0xc4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d109      	bne.n	80052fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40013400 	.word	0x40013400
 800532c:	40014000 	.word	0x40014000
 8005330:	40014400 	.word	0x40014400
 8005334:	40014800 	.word	0x40014800

08005338 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800537e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	051b      	lsls	r3, r3, #20
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <TIM_OC6_SetConfig+0xb8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00f      	beq.n	80053b4 <TIM_OC6_SetConfig+0x7c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a17      	ldr	r2, [pc, #92]	; (80053f4 <TIM_OC6_SetConfig+0xbc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00b      	beq.n	80053b4 <TIM_OC6_SetConfig+0x7c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a16      	ldr	r2, [pc, #88]	; (80053f8 <TIM_OC6_SetConfig+0xc0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d007      	beq.n	80053b4 <TIM_OC6_SetConfig+0x7c>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a15      	ldr	r2, [pc, #84]	; (80053fc <TIM_OC6_SetConfig+0xc4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_OC6_SetConfig+0x7c>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a14      	ldr	r2, [pc, #80]	; (8005400 <TIM_OC6_SetConfig+0xc8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d109      	bne.n	80053c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	029b      	lsls	r3, r3, #10
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40013400 	.word	0x40013400
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40014400 	.word	0x40014400
 8005400:	40014800 	.word	0x40014800

08005404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f023 0201 	bic.w	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800542e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 030a 	bic.w	r3, r3, #10
 8005440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005462:	b480      	push	{r7}
 8005464:	b087      	sub	sp, #28
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f023 0210 	bic.w	r2, r3, #16
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800548c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	031b      	lsls	r3, r3, #12
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800549e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	f043 0307 	orr.w	r3, r3, #7
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	021a      	lsls	r2, r3, #8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	431a      	orrs	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4313      	orrs	r3, r2
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	609a      	str	r2, [r3, #8]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2201      	movs	r2, #1
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1a      	ldr	r2, [r3, #32]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	43db      	mvns	r3, r3
 800555a:	401a      	ands	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1a      	ldr	r2, [r3, #32]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	431a      	orrs	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005598:	2302      	movs	r3, #2
 800559a:	e068      	b.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2e      	ldr	r2, [pc, #184]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2d      	ldr	r2, [pc, #180]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d108      	bne.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1e      	ldr	r2, [pc, #120]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01d      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560e:	d018      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d013      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1a      	ldr	r2, [pc, #104]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00e      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a18      	ldr	r2, [pc, #96]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d009      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a13      	ldr	r2, [pc, #76]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d004      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a14      	ldr	r2, [pc, #80]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10c      	bne.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4313      	orrs	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40013400 	.word	0x40013400
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40014000 	.word	0x40014000

08005694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e042      	b.n	800572c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fc fc7d 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2224      	movs	r2, #36	; 0x24
 80056c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fc7c 	bl	8005fdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f97d 	bl	80059e4 <UART_SetConfig>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e01b      	b.n	800572c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fcfb 	bl	8006120 <UART_CheckIdleState>
 800572a:	4603      	mov	r3, r0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	4613      	mov	r3, r2
 8005742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	2b20      	cmp	r3, #32
 800574c:	d17c      	bne.n	8005848 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_UART_Transmit+0x26>
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e075      	b.n	800584a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2221      	movs	r2, #33	; 0x21
 800576a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800576e:	f7fc ffdd 	bl	800272c <HAL_GetTick>
 8005772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	88fa      	ldrh	r2, [r7, #6]
 8005778:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578c:	d108      	bne.n	80057a0 <HAL_UART_Transmit+0x6c>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d104      	bne.n	80057a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	e003      	b.n	80057a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057a8:	e031      	b.n	800580e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2200      	movs	r2, #0
 80057b2:	2180      	movs	r1, #128	; 0x80
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fd5d 	bl	8006274 <UART_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e03e      	b.n	800584a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10b      	bne.n	80057ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	881a      	ldrh	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057de:	b292      	uxth	r2, r2
 80057e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	3302      	adds	r3, #2
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	e008      	b.n	80057fc <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	781a      	ldrb	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	b292      	uxth	r2, r2
 80057f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	3301      	adds	r3, #1
 80057fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1c7      	bne.n	80057aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2200      	movs	r2, #0
 8005822:	2140      	movs	r1, #64	; 0x40
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fd25 	bl	8006274 <UART_WaitOnFlagUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e006      	b.n	800584a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b08a      	sub	sp, #40	; 0x28
 8005856:	af02      	add	r7, sp, #8
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	603b      	str	r3, [r7, #0]
 800585e:	4613      	mov	r3, r2
 8005860:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005868:	2b20      	cmp	r3, #32
 800586a:	f040 80b6 	bne.w	80059da <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <HAL_UART_Receive+0x28>
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0ae      	b.n	80059dc <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2222      	movs	r2, #34	; 0x22
 800588a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005894:	f7fc ff4a 	bl	800272c <HAL_GetTick>
 8005898:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	88fa      	ldrh	r2, [r7, #6]
 80058a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b2:	d10e      	bne.n	80058d2 <HAL_UART_Receive+0x80>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <HAL_UART_Receive+0x76>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058c6:	e02d      	b.n	8005924 <HAL_UART_Receive+0xd2>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	22ff      	movs	r2, #255	; 0xff
 80058cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058d0:	e028      	b.n	8005924 <HAL_UART_Receive+0xd2>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10d      	bne.n	80058f6 <HAL_UART_Receive+0xa4>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <HAL_UART_Receive+0x9a>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	22ff      	movs	r2, #255	; 0xff
 80058e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058ea:	e01b      	b.n	8005924 <HAL_UART_Receive+0xd2>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	227f      	movs	r2, #127	; 0x7f
 80058f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058f4:	e016      	b.n	8005924 <HAL_UART_Receive+0xd2>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058fe:	d10d      	bne.n	800591c <HAL_UART_Receive+0xca>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <HAL_UART_Receive+0xc0>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	227f      	movs	r2, #127	; 0x7f
 800590c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005910:	e008      	b.n	8005924 <HAL_UART_Receive+0xd2>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	223f      	movs	r2, #63	; 0x3f
 8005916:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800591a:	e003      	b.n	8005924 <HAL_UART_Receive+0xd2>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800592a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005934:	d108      	bne.n	8005948 <HAL_UART_Receive+0xf6>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e003      	b.n	8005950 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005950:	e037      	b.n	80059c2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2200      	movs	r2, #0
 800595a:	2120      	movs	r1, #32
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fc89 	bl	8006274 <UART_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e033      	b.n	80059dc <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10c      	bne.n	8005994 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005980:	b29a      	uxth	r2, r3
 8005982:	8a7b      	ldrh	r3, [r7, #18]
 8005984:	4013      	ands	r3, r2
 8005986:	b29a      	uxth	r2, r3
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	3302      	adds	r3, #2
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	e00d      	b.n	80059b0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800599a:	b29b      	uxth	r3, r3
 800599c:	b2da      	uxtb	r2, r3
 800599e:	8a7b      	ldrh	r3, [r7, #18]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	4013      	ands	r3, r2
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3301      	adds	r3, #1
 80059ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1c1      	bne.n	8005952 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e000      	b.n	80059dc <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
  }
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e8:	b08c      	sub	sp, #48	; 0x30
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	431a      	orrs	r2, r3
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4baa      	ldr	r3, [pc, #680]	; (8005cbc <UART_SetConfig+0x2d8>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a9f      	ldr	r2, [pc, #636]	; (8005cc0 <UART_SetConfig+0x2dc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005a5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	6812      	ldr	r2, [r2, #0]
 8005a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	f023 010f 	bic.w	r1, r3, #15
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a90      	ldr	r2, [pc, #576]	; (8005cc4 <UART_SetConfig+0x2e0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d125      	bne.n	8005ad4 <UART_SetConfig+0xf0>
 8005a88:	4b8f      	ldr	r3, [pc, #572]	; (8005cc8 <UART_SetConfig+0x2e4>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d81a      	bhi.n	8005acc <UART_SetConfig+0xe8>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <UART_SetConfig+0xb8>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005abd 	.word	0x08005abd
 8005aa4:	08005ab5 	.word	0x08005ab5
 8005aa8:	08005ac5 	.word	0x08005ac5
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab2:	e116      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aba:	e112      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005abc:	2304      	movs	r3, #4
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac2:	e10e      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aca:	e10a      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005acc:	2310      	movs	r3, #16
 8005ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ad2:	e106      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a7c      	ldr	r2, [pc, #496]	; (8005ccc <UART_SetConfig+0x2e8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d138      	bne.n	8005b50 <UART_SetConfig+0x16c>
 8005ade:	4b7a      	ldr	r3, [pc, #488]	; (8005cc8 <UART_SetConfig+0x2e4>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	f003 030c 	and.w	r3, r3, #12
 8005ae8:	2b0c      	cmp	r3, #12
 8005aea:	d82d      	bhi.n	8005b48 <UART_SetConfig+0x164>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <UART_SetConfig+0x110>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b29 	.word	0x08005b29
 8005af8:	08005b49 	.word	0x08005b49
 8005afc:	08005b49 	.word	0x08005b49
 8005b00:	08005b49 	.word	0x08005b49
 8005b04:	08005b39 	.word	0x08005b39
 8005b08:	08005b49 	.word	0x08005b49
 8005b0c:	08005b49 	.word	0x08005b49
 8005b10:	08005b49 	.word	0x08005b49
 8005b14:	08005b31 	.word	0x08005b31
 8005b18:	08005b49 	.word	0x08005b49
 8005b1c:	08005b49 	.word	0x08005b49
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b41 	.word	0x08005b41
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2e:	e0d8      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005b30:	2302      	movs	r3, #2
 8005b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b36:	e0d4      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b3e:	e0d0      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005b40:	2308      	movs	r3, #8
 8005b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b46:	e0cc      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b4e:	e0c8      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a5e      	ldr	r2, [pc, #376]	; (8005cd0 <UART_SetConfig+0x2ec>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d125      	bne.n	8005ba6 <UART_SetConfig+0x1c2>
 8005b5a:	4b5b      	ldr	r3, [pc, #364]	; (8005cc8 <UART_SetConfig+0x2e4>)
 8005b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b64:	2b30      	cmp	r3, #48	; 0x30
 8005b66:	d016      	beq.n	8005b96 <UART_SetConfig+0x1b2>
 8005b68:	2b30      	cmp	r3, #48	; 0x30
 8005b6a:	d818      	bhi.n	8005b9e <UART_SetConfig+0x1ba>
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d00a      	beq.n	8005b86 <UART_SetConfig+0x1a2>
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d814      	bhi.n	8005b9e <UART_SetConfig+0x1ba>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <UART_SetConfig+0x19a>
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d008      	beq.n	8005b8e <UART_SetConfig+0x1aa>
 8005b7c:	e00f      	b.n	8005b9e <UART_SetConfig+0x1ba>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b84:	e0ad      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005b86:	2302      	movs	r3, #2
 8005b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8c:	e0a9      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005b8e:	2304      	movs	r3, #4
 8005b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b94:	e0a5      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005b96:	2308      	movs	r3, #8
 8005b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b9c:	e0a1      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005b9e:	2310      	movs	r3, #16
 8005ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ba4:	e09d      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a4a      	ldr	r2, [pc, #296]	; (8005cd4 <UART_SetConfig+0x2f0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d125      	bne.n	8005bfc <UART_SetConfig+0x218>
 8005bb0:	4b45      	ldr	r3, [pc, #276]	; (8005cc8 <UART_SetConfig+0x2e4>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bba:	2bc0      	cmp	r3, #192	; 0xc0
 8005bbc:	d016      	beq.n	8005bec <UART_SetConfig+0x208>
 8005bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8005bc0:	d818      	bhi.n	8005bf4 <UART_SetConfig+0x210>
 8005bc2:	2b80      	cmp	r3, #128	; 0x80
 8005bc4:	d00a      	beq.n	8005bdc <UART_SetConfig+0x1f8>
 8005bc6:	2b80      	cmp	r3, #128	; 0x80
 8005bc8:	d814      	bhi.n	8005bf4 <UART_SetConfig+0x210>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <UART_SetConfig+0x1f0>
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	d008      	beq.n	8005be4 <UART_SetConfig+0x200>
 8005bd2:	e00f      	b.n	8005bf4 <UART_SetConfig+0x210>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bda:	e082      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be2:	e07e      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bea:	e07a      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf2:	e076      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bfa:	e072      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a35      	ldr	r2, [pc, #212]	; (8005cd8 <UART_SetConfig+0x2f4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d12a      	bne.n	8005c5c <UART_SetConfig+0x278>
 8005c06:	4b30      	ldr	r3, [pc, #192]	; (8005cc8 <UART_SetConfig+0x2e4>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c14:	d01a      	beq.n	8005c4c <UART_SetConfig+0x268>
 8005c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c1a:	d81b      	bhi.n	8005c54 <UART_SetConfig+0x270>
 8005c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c20:	d00c      	beq.n	8005c3c <UART_SetConfig+0x258>
 8005c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c26:	d815      	bhi.n	8005c54 <UART_SetConfig+0x270>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <UART_SetConfig+0x250>
 8005c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c30:	d008      	beq.n	8005c44 <UART_SetConfig+0x260>
 8005c32:	e00f      	b.n	8005c54 <UART_SetConfig+0x270>
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3a:	e052      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c42:	e04e      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005c44:	2304      	movs	r3, #4
 8005c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c4a:	e04a      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c52:	e046      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005c54:	2310      	movs	r3, #16
 8005c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c5a:	e042      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a17      	ldr	r2, [pc, #92]	; (8005cc0 <UART_SetConfig+0x2dc>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d13a      	bne.n	8005cdc <UART_SetConfig+0x2f8>
 8005c66:	4b18      	ldr	r3, [pc, #96]	; (8005cc8 <UART_SetConfig+0x2e4>)
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c74:	d01a      	beq.n	8005cac <UART_SetConfig+0x2c8>
 8005c76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c7a:	d81b      	bhi.n	8005cb4 <UART_SetConfig+0x2d0>
 8005c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c80:	d00c      	beq.n	8005c9c <UART_SetConfig+0x2b8>
 8005c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c86:	d815      	bhi.n	8005cb4 <UART_SetConfig+0x2d0>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <UART_SetConfig+0x2b0>
 8005c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c90:	d008      	beq.n	8005ca4 <UART_SetConfig+0x2c0>
 8005c92:	e00f      	b.n	8005cb4 <UART_SetConfig+0x2d0>
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9a:	e022      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca2:	e01e      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005caa:	e01a      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005cac:	2308      	movs	r3, #8
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb2:	e016      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cba:	e012      	b.n	8005ce2 <UART_SetConfig+0x2fe>
 8005cbc:	cfff69f3 	.word	0xcfff69f3
 8005cc0:	40008000 	.word	0x40008000
 8005cc4:	40013800 	.word	0x40013800
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40004400 	.word	0x40004400
 8005cd0:	40004800 	.word	0x40004800
 8005cd4:	40004c00 	.word	0x40004c00
 8005cd8:	40005000 	.word	0x40005000
 8005cdc:	2310      	movs	r3, #16
 8005cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4aae      	ldr	r2, [pc, #696]	; (8005fa0 <UART_SetConfig+0x5bc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	f040 8097 	bne.w	8005e1c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d823      	bhi.n	8005d3e <UART_SetConfig+0x35a>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0x318>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d3f 	.word	0x08005d3f
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d3f 	.word	0x08005d3f
 8005d0c:	08005d2f 	.word	0x08005d2f
 8005d10:	08005d3f 	.word	0x08005d3f
 8005d14:	08005d3f 	.word	0x08005d3f
 8005d18:	08005d3f 	.word	0x08005d3f
 8005d1c:	08005d37 	.word	0x08005d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d20:	f7fd fe60 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8005d24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d26:	e010      	b.n	8005d4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d28:	4b9e      	ldr	r3, [pc, #632]	; (8005fa4 <UART_SetConfig+0x5c0>)
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d2c:	e00d      	b.n	8005d4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d2e:	f7fd fdc1 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8005d32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d34:	e009      	b.n	8005d4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d3c:	e005      	b.n	8005d4a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 8130 	beq.w	8005fb2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	4a94      	ldr	r2, [pc, #592]	; (8005fa8 <UART_SetConfig+0x5c4>)
 8005d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	4413      	add	r3, r2
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d305      	bcc.n	8005d82 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d903      	bls.n	8005d8a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d88:	e113      	b.n	8005fb2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	60fa      	str	r2, [r7, #12]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	4a84      	ldr	r2, [pc, #528]	; (8005fa8 <UART_SetConfig+0x5c4>)
 8005d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2200      	movs	r2, #0
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005da8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005dac:	f7fa ff34 	bl	8000c18 <__aeabi_uldivmod>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4610      	mov	r0, r2
 8005db6:	4619      	mov	r1, r3
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	020b      	lsls	r3, r1, #8
 8005dc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dc6:	0202      	lsls	r2, r0, #8
 8005dc8:	6979      	ldr	r1, [r7, #20]
 8005dca:	6849      	ldr	r1, [r1, #4]
 8005dcc:	0849      	lsrs	r1, r1, #1
 8005dce:	2000      	movs	r0, #0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	eb12 0804 	adds.w	r8, r2, r4
 8005dd8:	eb43 0905 	adc.w	r9, r3, r5
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	469a      	mov	sl, r3
 8005de4:	4693      	mov	fp, r2
 8005de6:	4652      	mov	r2, sl
 8005de8:	465b      	mov	r3, fp
 8005dea:	4640      	mov	r0, r8
 8005dec:	4649      	mov	r1, r9
 8005dee:	f7fa ff13 	bl	8000c18 <__aeabi_uldivmod>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4613      	mov	r3, r2
 8005df8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e00:	d308      	bcc.n	8005e14 <UART_SetConfig+0x430>
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e08:	d204      	bcs.n	8005e14 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6a3a      	ldr	r2, [r7, #32]
 8005e10:	60da      	str	r2, [r3, #12]
 8005e12:	e0ce      	b.n	8005fb2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e1a:	e0ca      	b.n	8005fb2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e24:	d166      	bne.n	8005ef4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005e26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d827      	bhi.n	8005e7e <UART_SetConfig+0x49a>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <UART_SetConfig+0x450>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e61 	.word	0x08005e61
 8005e3c:	08005e69 	.word	0x08005e69
 8005e40:	08005e7f 	.word	0x08005e7f
 8005e44:	08005e6f 	.word	0x08005e6f
 8005e48:	08005e7f 	.word	0x08005e7f
 8005e4c:	08005e7f 	.word	0x08005e7f
 8005e50:	08005e7f 	.word	0x08005e7f
 8005e54:	08005e77 	.word	0x08005e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e58:	f7fd fdc4 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8005e5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e5e:	e014      	b.n	8005e8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e60:	f7fd fdd6 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8005e64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e66:	e010      	b.n	8005e8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e68:	4b4e      	ldr	r3, [pc, #312]	; (8005fa4 <UART_SetConfig+0x5c0>)
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e6c:	e00d      	b.n	8005e8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e6e:	f7fd fd21 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8005e72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e74:	e009      	b.n	8005e8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e7c:	e005      	b.n	8005e8a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8090 	beq.w	8005fb2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	4a44      	ldr	r2, [pc, #272]	; (8005fa8 <UART_SetConfig+0x5c4>)
 8005e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ea4:	005a      	lsls	r2, r3, #1
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	441a      	add	r2, r3
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	2b0f      	cmp	r3, #15
 8005ebc:	d916      	bls.n	8005eec <UART_SetConfig+0x508>
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec4:	d212      	bcs.n	8005eec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f023 030f 	bic.w	r3, r3, #15
 8005ece:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	8bfb      	ldrh	r3, [r7, #30]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	8bfa      	ldrh	r2, [r7, #30]
 8005ee8:	60da      	str	r2, [r3, #12]
 8005eea:	e062      	b.n	8005fb2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ef2:	e05e      	b.n	8005fb2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ef4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d828      	bhi.n	8005f4e <UART_SetConfig+0x56a>
 8005efc:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <UART_SetConfig+0x520>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005f29 	.word	0x08005f29
 8005f08:	08005f31 	.word	0x08005f31
 8005f0c:	08005f39 	.word	0x08005f39
 8005f10:	08005f4f 	.word	0x08005f4f
 8005f14:	08005f3f 	.word	0x08005f3f
 8005f18:	08005f4f 	.word	0x08005f4f
 8005f1c:	08005f4f 	.word	0x08005f4f
 8005f20:	08005f4f 	.word	0x08005f4f
 8005f24:	08005f47 	.word	0x08005f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f28:	f7fd fd5c 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8005f2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f2e:	e014      	b.n	8005f5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f30:	f7fd fd6e 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8005f34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f36:	e010      	b.n	8005f5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f38:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <UART_SetConfig+0x5c0>)
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f3c:	e00d      	b.n	8005f5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f3e:	f7fd fcb9 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8005f42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f44:	e009      	b.n	8005f5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f4c:	e005      	b.n	8005f5a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f58:	bf00      	nop
    }

    if (pclk != 0U)
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d028      	beq.n	8005fb2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <UART_SetConfig+0x5c4>)
 8005f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	441a      	add	r2, r3
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2b0f      	cmp	r3, #15
 8005f88:	d910      	bls.n	8005fac <UART_SetConfig+0x5c8>
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f90:	d20c      	bcs.n	8005fac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60da      	str	r2, [r3, #12]
 8005f9c:	e009      	b.n	8005fb2 <UART_SetConfig+0x5ce>
 8005f9e:	bf00      	nop
 8005fa0:	40008000 	.word	0x40008000
 8005fa4:	00f42400 	.word	0x00f42400
 8005fa8:	08009740 	.word	0x08009740
      }
      else
      {
        ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005fce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3730      	adds	r7, #48	; 0x30
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01a      	beq.n	80060f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060da:	d10a      	bne.n	80060f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	605a      	str	r2, [r3, #4]
  }
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b098      	sub	sp, #96	; 0x60
 8006124:	af02      	add	r7, sp, #8
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006130:	f7fc fafc 	bl	800272c <HAL_GetTick>
 8006134:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b08      	cmp	r3, #8
 8006142:	d12f      	bne.n	80061a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800614c:	2200      	movs	r2, #0
 800614e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f88e 	bl	8006274 <UART_WaitOnFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d022      	beq.n	80061a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006166:	e853 3f00 	ldrex	r3, [r3]
 800616a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800616c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006172:	653b      	str	r3, [r7, #80]	; 0x50
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617c:	647b      	str	r3, [r7, #68]	; 0x44
 800617e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e6      	bne.n	800615e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e063      	b.n	800626c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d149      	bne.n	8006246 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ba:	2200      	movs	r2, #0
 80061bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f857 	bl	8006274 <UART_WaitOnFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d03c      	beq.n	8006246 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	623b      	str	r3, [r7, #32]
   return(result);
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ea:	633b      	str	r3, [r7, #48]	; 0x30
 80061ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e6      	bne.n	80061cc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3308      	adds	r3, #8
 8006204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	60fb      	str	r3, [r7, #12]
   return(result);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f023 0301 	bic.w	r3, r3, #1
 8006214:	64bb      	str	r3, [r7, #72]	; 0x48
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3308      	adds	r3, #8
 800621c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800621e:	61fa      	str	r2, [r7, #28]
 8006220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	69b9      	ldr	r1, [r7, #24]
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	617b      	str	r3, [r7, #20]
   return(result);
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e5      	bne.n	80061fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e012      	b.n	800626c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3758      	adds	r7, #88	; 0x58
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	4613      	mov	r3, r2
 8006282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006284:	e049      	b.n	800631a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d045      	beq.n	800631a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628e:	f7fc fa4d 	bl	800272c <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	429a      	cmp	r2, r3
 800629c:	d302      	bcc.n	80062a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e048      	b.n	800633a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d031      	beq.n	800631a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d110      	bne.n	80062e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2208      	movs	r2, #8
 80062ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f838 	bl	8006342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2208      	movs	r2, #8
 80062d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e029      	b.n	800633a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f4:	d111      	bne.n	800631a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f81e 	bl	8006342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e00f      	b.n	800633a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69da      	ldr	r2, [r3, #28]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4013      	ands	r3, r2
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	bf0c      	ite	eq
 800632a:	2301      	moveq	r3, #1
 800632c:	2300      	movne	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	429a      	cmp	r2, r3
 8006336:	d0a6      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006342:	b480      	push	{r7}
 8006344:	b095      	sub	sp, #84	; 0x54
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800635e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006368:	643b      	str	r3, [r7, #64]	; 0x40
 800636a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800636e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e6      	bne.n	800634a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3308      	adds	r3, #8
 8006382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	61fb      	str	r3, [r7, #28]
   return(result);
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006392:	f023 0301 	bic.w	r3, r3, #1
 8006396:	64bb      	str	r3, [r7, #72]	; 0x48
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3308      	adds	r3, #8
 800639e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e3      	bne.n	800637c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d118      	bne.n	80063ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f023 0310 	bic.w	r3, r3, #16
 80063d0:	647b      	str	r3, [r7, #68]	; 0x44
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063da:	61bb      	str	r3, [r7, #24]
 80063dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6979      	ldr	r1, [r7, #20]
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	613b      	str	r3, [r7, #16]
   return(result);
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e6      	bne.n	80063bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006402:	bf00      	nop
 8006404:	3754      	adds	r7, #84	; 0x54
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_UARTEx_DisableFifoMode+0x16>
 8006420:	2302      	movs	r3, #2
 8006422:	e027      	b.n	8006474 <HAL_UARTEx_DisableFifoMode+0x66>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2224      	movs	r2, #36	; 0x24
 8006430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0201 	bic.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006452:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006494:	2302      	movs	r3, #2
 8006496:	e02d      	b.n	80064f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2224      	movs	r2, #36	; 0x24
 80064a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0201 	bic.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f84f 	bl	8006578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006510:	2302      	movs	r3, #2
 8006512:	e02d      	b.n	8006570 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2224      	movs	r2, #36	; 0x24
 8006520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f811 	bl	8006578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006584:	2b00      	cmp	r3, #0
 8006586:	d108      	bne.n	800659a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006598:	e031      	b.n	80065fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800659a:	2308      	movs	r3, #8
 800659c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800659e:	2308      	movs	r3, #8
 80065a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	0e5b      	lsrs	r3, r3, #25
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	0f5b      	lsrs	r3, r3, #29
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
 80065c4:	7b3a      	ldrb	r2, [r7, #12]
 80065c6:	4911      	ldr	r1, [pc, #68]	; (800660c <UARTEx_SetNbDataToProcess+0x94>)
 80065c8:	5c8a      	ldrb	r2, [r1, r2]
 80065ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065ce:	7b3a      	ldrb	r2, [r7, #12]
 80065d0:	490f      	ldr	r1, [pc, #60]	; (8006610 <UARTEx_SetNbDataToProcess+0x98>)
 80065d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80065d8:	b29a      	uxth	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	7b7a      	ldrb	r2, [r7, #13]
 80065e4:	4909      	ldr	r1, [pc, #36]	; (800660c <UARTEx_SetNbDataToProcess+0x94>)
 80065e6:	5c8a      	ldrb	r2, [r1, r2]
 80065e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065ec:	7b7a      	ldrb	r2, [r7, #13]
 80065ee:	4908      	ldr	r1, [pc, #32]	; (8006610 <UARTEx_SetNbDataToProcess+0x98>)
 80065f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	08009758 	.word	0x08009758
 8006610:	08009760 	.word	0x08009760

08006614 <__cvt>:
 8006614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006618:	ec55 4b10 	vmov	r4, r5, d0
 800661c:	2d00      	cmp	r5, #0
 800661e:	460e      	mov	r6, r1
 8006620:	4619      	mov	r1, r3
 8006622:	462b      	mov	r3, r5
 8006624:	bfbb      	ittet	lt
 8006626:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800662a:	461d      	movlt	r5, r3
 800662c:	2300      	movge	r3, #0
 800662e:	232d      	movlt	r3, #45	; 0x2d
 8006630:	700b      	strb	r3, [r1, #0]
 8006632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006634:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006638:	4691      	mov	r9, r2
 800663a:	f023 0820 	bic.w	r8, r3, #32
 800663e:	bfbc      	itt	lt
 8006640:	4622      	movlt	r2, r4
 8006642:	4614      	movlt	r4, r2
 8006644:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006648:	d005      	beq.n	8006656 <__cvt+0x42>
 800664a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800664e:	d100      	bne.n	8006652 <__cvt+0x3e>
 8006650:	3601      	adds	r6, #1
 8006652:	2102      	movs	r1, #2
 8006654:	e000      	b.n	8006658 <__cvt+0x44>
 8006656:	2103      	movs	r1, #3
 8006658:	ab03      	add	r3, sp, #12
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	ab02      	add	r3, sp, #8
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	ec45 4b10 	vmov	d0, r4, r5
 8006664:	4653      	mov	r3, sl
 8006666:	4632      	mov	r2, r6
 8006668:	f000 fe5a 	bl	8007320 <_dtoa_r>
 800666c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006670:	4607      	mov	r7, r0
 8006672:	d102      	bne.n	800667a <__cvt+0x66>
 8006674:	f019 0f01 	tst.w	r9, #1
 8006678:	d022      	beq.n	80066c0 <__cvt+0xac>
 800667a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800667e:	eb07 0906 	add.w	r9, r7, r6
 8006682:	d110      	bne.n	80066a6 <__cvt+0x92>
 8006684:	783b      	ldrb	r3, [r7, #0]
 8006686:	2b30      	cmp	r3, #48	; 0x30
 8006688:	d10a      	bne.n	80066a0 <__cvt+0x8c>
 800668a:	2200      	movs	r2, #0
 800668c:	2300      	movs	r3, #0
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7fa fa31 	bl	8000af8 <__aeabi_dcmpeq>
 8006696:	b918      	cbnz	r0, 80066a0 <__cvt+0x8c>
 8006698:	f1c6 0601 	rsb	r6, r6, #1
 800669c:	f8ca 6000 	str.w	r6, [sl]
 80066a0:	f8da 3000 	ldr.w	r3, [sl]
 80066a4:	4499      	add	r9, r3
 80066a6:	2200      	movs	r2, #0
 80066a8:	2300      	movs	r3, #0
 80066aa:	4620      	mov	r0, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	f7fa fa23 	bl	8000af8 <__aeabi_dcmpeq>
 80066b2:	b108      	cbz	r0, 80066b8 <__cvt+0xa4>
 80066b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80066b8:	2230      	movs	r2, #48	; 0x30
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	454b      	cmp	r3, r9
 80066be:	d307      	bcc.n	80066d0 <__cvt+0xbc>
 80066c0:	9b03      	ldr	r3, [sp, #12]
 80066c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066c4:	1bdb      	subs	r3, r3, r7
 80066c6:	4638      	mov	r0, r7
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	b004      	add	sp, #16
 80066cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d0:	1c59      	adds	r1, r3, #1
 80066d2:	9103      	str	r1, [sp, #12]
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	e7f0      	b.n	80066ba <__cvt+0xa6>

080066d8 <__exponent>:
 80066d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066da:	4603      	mov	r3, r0
 80066dc:	2900      	cmp	r1, #0
 80066de:	bfb8      	it	lt
 80066e0:	4249      	neglt	r1, r1
 80066e2:	f803 2b02 	strb.w	r2, [r3], #2
 80066e6:	bfb4      	ite	lt
 80066e8:	222d      	movlt	r2, #45	; 0x2d
 80066ea:	222b      	movge	r2, #43	; 0x2b
 80066ec:	2909      	cmp	r1, #9
 80066ee:	7042      	strb	r2, [r0, #1]
 80066f0:	dd2a      	ble.n	8006748 <__exponent+0x70>
 80066f2:	f10d 0207 	add.w	r2, sp, #7
 80066f6:	4617      	mov	r7, r2
 80066f8:	260a      	movs	r6, #10
 80066fa:	4694      	mov	ip, r2
 80066fc:	fb91 f5f6 	sdiv	r5, r1, r6
 8006700:	fb06 1415 	mls	r4, r6, r5, r1
 8006704:	3430      	adds	r4, #48	; 0x30
 8006706:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800670a:	460c      	mov	r4, r1
 800670c:	2c63      	cmp	r4, #99	; 0x63
 800670e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006712:	4629      	mov	r1, r5
 8006714:	dcf1      	bgt.n	80066fa <__exponent+0x22>
 8006716:	3130      	adds	r1, #48	; 0x30
 8006718:	f1ac 0402 	sub.w	r4, ip, #2
 800671c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006720:	1c41      	adds	r1, r0, #1
 8006722:	4622      	mov	r2, r4
 8006724:	42ba      	cmp	r2, r7
 8006726:	d30a      	bcc.n	800673e <__exponent+0x66>
 8006728:	f10d 0209 	add.w	r2, sp, #9
 800672c:	eba2 020c 	sub.w	r2, r2, ip
 8006730:	42bc      	cmp	r4, r7
 8006732:	bf88      	it	hi
 8006734:	2200      	movhi	r2, #0
 8006736:	4413      	add	r3, r2
 8006738:	1a18      	subs	r0, r3, r0
 800673a:	b003      	add	sp, #12
 800673c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800673e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006742:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006746:	e7ed      	b.n	8006724 <__exponent+0x4c>
 8006748:	2330      	movs	r3, #48	; 0x30
 800674a:	3130      	adds	r1, #48	; 0x30
 800674c:	7083      	strb	r3, [r0, #2]
 800674e:	70c1      	strb	r1, [r0, #3]
 8006750:	1d03      	adds	r3, r0, #4
 8006752:	e7f1      	b.n	8006738 <__exponent+0x60>

08006754 <_printf_float>:
 8006754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	ed2d 8b02 	vpush	{d8}
 800675c:	b08d      	sub	sp, #52	; 0x34
 800675e:	460c      	mov	r4, r1
 8006760:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006764:	4616      	mov	r6, r2
 8006766:	461f      	mov	r7, r3
 8006768:	4605      	mov	r5, r0
 800676a:	f000 fcd9 	bl	8007120 <_localeconv_r>
 800676e:	f8d0 a000 	ldr.w	sl, [r0]
 8006772:	4650      	mov	r0, sl
 8006774:	f7f9 fd94 	bl	80002a0 <strlen>
 8006778:	2300      	movs	r3, #0
 800677a:	930a      	str	r3, [sp, #40]	; 0x28
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	f8d8 3000 	ldr.w	r3, [r8]
 8006784:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006788:	3307      	adds	r3, #7
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	f103 0208 	add.w	r2, r3, #8
 8006792:	f8c8 2000 	str.w	r2, [r8]
 8006796:	e9d3 8900 	ldrd	r8, r9, [r3]
 800679a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800679e:	9307      	str	r3, [sp, #28]
 80067a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80067a4:	ee08 0a10 	vmov	s16, r0
 80067a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80067ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067b0:	4b9e      	ldr	r3, [pc, #632]	; (8006a2c <_printf_float+0x2d8>)
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295
 80067b6:	f7fa f9d1 	bl	8000b5c <__aeabi_dcmpun>
 80067ba:	bb88      	cbnz	r0, 8006820 <_printf_float+0xcc>
 80067bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067c0:	4b9a      	ldr	r3, [pc, #616]	; (8006a2c <_printf_float+0x2d8>)
 80067c2:	f04f 32ff 	mov.w	r2, #4294967295
 80067c6:	f7fa f9ab 	bl	8000b20 <__aeabi_dcmple>
 80067ca:	bb48      	cbnz	r0, 8006820 <_printf_float+0xcc>
 80067cc:	2200      	movs	r2, #0
 80067ce:	2300      	movs	r3, #0
 80067d0:	4640      	mov	r0, r8
 80067d2:	4649      	mov	r1, r9
 80067d4:	f7fa f99a 	bl	8000b0c <__aeabi_dcmplt>
 80067d8:	b110      	cbz	r0, 80067e0 <_printf_float+0x8c>
 80067da:	232d      	movs	r3, #45	; 0x2d
 80067dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e0:	4a93      	ldr	r2, [pc, #588]	; (8006a30 <_printf_float+0x2dc>)
 80067e2:	4b94      	ldr	r3, [pc, #592]	; (8006a34 <_printf_float+0x2e0>)
 80067e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80067e8:	bf94      	ite	ls
 80067ea:	4690      	movls	r8, r2
 80067ec:	4698      	movhi	r8, r3
 80067ee:	2303      	movs	r3, #3
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	9b05      	ldr	r3, [sp, #20]
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	f04f 0900 	mov.w	r9, #0
 80067fe:	9700      	str	r7, [sp, #0]
 8006800:	4633      	mov	r3, r6
 8006802:	aa0b      	add	r2, sp, #44	; 0x2c
 8006804:	4621      	mov	r1, r4
 8006806:	4628      	mov	r0, r5
 8006808:	f000 f9da 	bl	8006bc0 <_printf_common>
 800680c:	3001      	adds	r0, #1
 800680e:	f040 8090 	bne.w	8006932 <_printf_float+0x1de>
 8006812:	f04f 30ff 	mov.w	r0, #4294967295
 8006816:	b00d      	add	sp, #52	; 0x34
 8006818:	ecbd 8b02 	vpop	{d8}
 800681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	4640      	mov	r0, r8
 8006826:	4649      	mov	r1, r9
 8006828:	f7fa f998 	bl	8000b5c <__aeabi_dcmpun>
 800682c:	b140      	cbz	r0, 8006840 <_printf_float+0xec>
 800682e:	464b      	mov	r3, r9
 8006830:	2b00      	cmp	r3, #0
 8006832:	bfbc      	itt	lt
 8006834:	232d      	movlt	r3, #45	; 0x2d
 8006836:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800683a:	4a7f      	ldr	r2, [pc, #508]	; (8006a38 <_printf_float+0x2e4>)
 800683c:	4b7f      	ldr	r3, [pc, #508]	; (8006a3c <_printf_float+0x2e8>)
 800683e:	e7d1      	b.n	80067e4 <_printf_float+0x90>
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006846:	9206      	str	r2, [sp, #24]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	d13f      	bne.n	80068cc <_printf_float+0x178>
 800684c:	2306      	movs	r3, #6
 800684e:	6063      	str	r3, [r4, #4]
 8006850:	9b05      	ldr	r3, [sp, #20]
 8006852:	6861      	ldr	r1, [r4, #4]
 8006854:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006858:	2300      	movs	r3, #0
 800685a:	9303      	str	r3, [sp, #12]
 800685c:	ab0a      	add	r3, sp, #40	; 0x28
 800685e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006862:	ab09      	add	r3, sp, #36	; 0x24
 8006864:	ec49 8b10 	vmov	d0, r8, r9
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	6022      	str	r2, [r4, #0]
 800686c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006870:	4628      	mov	r0, r5
 8006872:	f7ff fecf 	bl	8006614 <__cvt>
 8006876:	9b06      	ldr	r3, [sp, #24]
 8006878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800687a:	2b47      	cmp	r3, #71	; 0x47
 800687c:	4680      	mov	r8, r0
 800687e:	d108      	bne.n	8006892 <_printf_float+0x13e>
 8006880:	1cc8      	adds	r0, r1, #3
 8006882:	db02      	blt.n	800688a <_printf_float+0x136>
 8006884:	6863      	ldr	r3, [r4, #4]
 8006886:	4299      	cmp	r1, r3
 8006888:	dd41      	ble.n	800690e <_printf_float+0x1ba>
 800688a:	f1ab 0302 	sub.w	r3, fp, #2
 800688e:	fa5f fb83 	uxtb.w	fp, r3
 8006892:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006896:	d820      	bhi.n	80068da <_printf_float+0x186>
 8006898:	3901      	subs	r1, #1
 800689a:	465a      	mov	r2, fp
 800689c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068a0:	9109      	str	r1, [sp, #36]	; 0x24
 80068a2:	f7ff ff19 	bl	80066d8 <__exponent>
 80068a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068a8:	1813      	adds	r3, r2, r0
 80068aa:	2a01      	cmp	r2, #1
 80068ac:	4681      	mov	r9, r0
 80068ae:	6123      	str	r3, [r4, #16]
 80068b0:	dc02      	bgt.n	80068b8 <_printf_float+0x164>
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	07d2      	lsls	r2, r2, #31
 80068b6:	d501      	bpl.n	80068bc <_printf_float+0x168>
 80068b8:	3301      	adds	r3, #1
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d09c      	beq.n	80067fe <_printf_float+0xaa>
 80068c4:	232d      	movs	r3, #45	; 0x2d
 80068c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ca:	e798      	b.n	80067fe <_printf_float+0xaa>
 80068cc:	9a06      	ldr	r2, [sp, #24]
 80068ce:	2a47      	cmp	r2, #71	; 0x47
 80068d0:	d1be      	bne.n	8006850 <_printf_float+0xfc>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1bc      	bne.n	8006850 <_printf_float+0xfc>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e7b9      	b.n	800684e <_printf_float+0xfa>
 80068da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80068de:	d118      	bne.n	8006912 <_printf_float+0x1be>
 80068e0:	2900      	cmp	r1, #0
 80068e2:	6863      	ldr	r3, [r4, #4]
 80068e4:	dd0b      	ble.n	80068fe <_printf_float+0x1aa>
 80068e6:	6121      	str	r1, [r4, #16]
 80068e8:	b913      	cbnz	r3, 80068f0 <_printf_float+0x19c>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	07d0      	lsls	r0, r2, #31
 80068ee:	d502      	bpl.n	80068f6 <_printf_float+0x1a2>
 80068f0:	3301      	adds	r3, #1
 80068f2:	440b      	add	r3, r1
 80068f4:	6123      	str	r3, [r4, #16]
 80068f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80068f8:	f04f 0900 	mov.w	r9, #0
 80068fc:	e7de      	b.n	80068bc <_printf_float+0x168>
 80068fe:	b913      	cbnz	r3, 8006906 <_printf_float+0x1b2>
 8006900:	6822      	ldr	r2, [r4, #0]
 8006902:	07d2      	lsls	r2, r2, #31
 8006904:	d501      	bpl.n	800690a <_printf_float+0x1b6>
 8006906:	3302      	adds	r3, #2
 8006908:	e7f4      	b.n	80068f4 <_printf_float+0x1a0>
 800690a:	2301      	movs	r3, #1
 800690c:	e7f2      	b.n	80068f4 <_printf_float+0x1a0>
 800690e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006914:	4299      	cmp	r1, r3
 8006916:	db05      	blt.n	8006924 <_printf_float+0x1d0>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	6121      	str	r1, [r4, #16]
 800691c:	07d8      	lsls	r0, r3, #31
 800691e:	d5ea      	bpl.n	80068f6 <_printf_float+0x1a2>
 8006920:	1c4b      	adds	r3, r1, #1
 8006922:	e7e7      	b.n	80068f4 <_printf_float+0x1a0>
 8006924:	2900      	cmp	r1, #0
 8006926:	bfd4      	ite	le
 8006928:	f1c1 0202 	rsble	r2, r1, #2
 800692c:	2201      	movgt	r2, #1
 800692e:	4413      	add	r3, r2
 8006930:	e7e0      	b.n	80068f4 <_printf_float+0x1a0>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	055a      	lsls	r2, r3, #21
 8006936:	d407      	bmi.n	8006948 <_printf_float+0x1f4>
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	4642      	mov	r2, r8
 800693c:	4631      	mov	r1, r6
 800693e:	4628      	mov	r0, r5
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	d12c      	bne.n	80069a0 <_printf_float+0x24c>
 8006946:	e764      	b.n	8006812 <_printf_float+0xbe>
 8006948:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800694c:	f240 80e0 	bls.w	8006b10 <_printf_float+0x3bc>
 8006950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006954:	2200      	movs	r2, #0
 8006956:	2300      	movs	r3, #0
 8006958:	f7fa f8ce 	bl	8000af8 <__aeabi_dcmpeq>
 800695c:	2800      	cmp	r0, #0
 800695e:	d034      	beq.n	80069ca <_printf_float+0x276>
 8006960:	4a37      	ldr	r2, [pc, #220]	; (8006a40 <_printf_float+0x2ec>)
 8006962:	2301      	movs	r3, #1
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f af51 	beq.w	8006812 <_printf_float+0xbe>
 8006970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006974:	429a      	cmp	r2, r3
 8006976:	db02      	blt.n	800697e <_printf_float+0x22a>
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	07d8      	lsls	r0, r3, #31
 800697c:	d510      	bpl.n	80069a0 <_printf_float+0x24c>
 800697e:	ee18 3a10 	vmov	r3, s16
 8006982:	4652      	mov	r2, sl
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f af41 	beq.w	8006812 <_printf_float+0xbe>
 8006990:	f04f 0800 	mov.w	r8, #0
 8006994:	f104 091a 	add.w	r9, r4, #26
 8006998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699a:	3b01      	subs	r3, #1
 800699c:	4543      	cmp	r3, r8
 800699e:	dc09      	bgt.n	80069b4 <_printf_float+0x260>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	079b      	lsls	r3, r3, #30
 80069a4:	f100 8107 	bmi.w	8006bb6 <_printf_float+0x462>
 80069a8:	68e0      	ldr	r0, [r4, #12]
 80069aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ac:	4298      	cmp	r0, r3
 80069ae:	bfb8      	it	lt
 80069b0:	4618      	movlt	r0, r3
 80069b2:	e730      	b.n	8006816 <_printf_float+0xc2>
 80069b4:	2301      	movs	r3, #1
 80069b6:	464a      	mov	r2, r9
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	f43f af27 	beq.w	8006812 <_printf_float+0xbe>
 80069c4:	f108 0801 	add.w	r8, r8, #1
 80069c8:	e7e6      	b.n	8006998 <_printf_float+0x244>
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dc39      	bgt.n	8006a44 <_printf_float+0x2f0>
 80069d0:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <_printf_float+0x2ec>)
 80069d2:	2301      	movs	r3, #1
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f af19 	beq.w	8006812 <_printf_float+0xbe>
 80069e0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80069e4:	4313      	orrs	r3, r2
 80069e6:	d102      	bne.n	80069ee <_printf_float+0x29a>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	07d9      	lsls	r1, r3, #31
 80069ec:	d5d8      	bpl.n	80069a0 <_printf_float+0x24c>
 80069ee:	ee18 3a10 	vmov	r3, s16
 80069f2:	4652      	mov	r2, sl
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b8      	blx	r7
 80069fa:	3001      	adds	r0, #1
 80069fc:	f43f af09 	beq.w	8006812 <_printf_float+0xbe>
 8006a00:	f04f 0900 	mov.w	r9, #0
 8006a04:	f104 0a1a 	add.w	sl, r4, #26
 8006a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0a:	425b      	negs	r3, r3
 8006a0c:	454b      	cmp	r3, r9
 8006a0e:	dc01      	bgt.n	8006a14 <_printf_float+0x2c0>
 8006a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a12:	e792      	b.n	800693a <_printf_float+0x1e6>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4652      	mov	r2, sl
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	f43f aef7 	beq.w	8006812 <_printf_float+0xbe>
 8006a24:	f109 0901 	add.w	r9, r9, #1
 8006a28:	e7ee      	b.n	8006a08 <_printf_float+0x2b4>
 8006a2a:	bf00      	nop
 8006a2c:	7fefffff 	.word	0x7fefffff
 8006a30:	08009768 	.word	0x08009768
 8006a34:	0800976c 	.word	0x0800976c
 8006a38:	08009770 	.word	0x08009770
 8006a3c:	08009774 	.word	0x08009774
 8006a40:	08009778 	.word	0x08009778
 8006a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	bfa8      	it	ge
 8006a4c:	461a      	movge	r2, r3
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	4691      	mov	r9, r2
 8006a52:	dc37      	bgt.n	8006ac4 <_printf_float+0x370>
 8006a54:	f04f 0b00 	mov.w	fp, #0
 8006a58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a5c:	f104 021a 	add.w	r2, r4, #26
 8006a60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a62:	9305      	str	r3, [sp, #20]
 8006a64:	eba3 0309 	sub.w	r3, r3, r9
 8006a68:	455b      	cmp	r3, fp
 8006a6a:	dc33      	bgt.n	8006ad4 <_printf_float+0x380>
 8006a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a70:	429a      	cmp	r2, r3
 8006a72:	db3b      	blt.n	8006aec <_printf_float+0x398>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	07da      	lsls	r2, r3, #31
 8006a78:	d438      	bmi.n	8006aec <_printf_float+0x398>
 8006a7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006a7e:	eba2 0903 	sub.w	r9, r2, r3
 8006a82:	9b05      	ldr	r3, [sp, #20]
 8006a84:	1ad2      	subs	r2, r2, r3
 8006a86:	4591      	cmp	r9, r2
 8006a88:	bfa8      	it	ge
 8006a8a:	4691      	movge	r9, r2
 8006a8c:	f1b9 0f00 	cmp.w	r9, #0
 8006a90:	dc35      	bgt.n	8006afe <_printf_float+0x3aa>
 8006a92:	f04f 0800 	mov.w	r8, #0
 8006a96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a9a:	f104 0a1a 	add.w	sl, r4, #26
 8006a9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aa2:	1a9b      	subs	r3, r3, r2
 8006aa4:	eba3 0309 	sub.w	r3, r3, r9
 8006aa8:	4543      	cmp	r3, r8
 8006aaa:	f77f af79 	ble.w	80069a0 <_printf_float+0x24c>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4652      	mov	r2, sl
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f43f aeaa 	beq.w	8006812 <_printf_float+0xbe>
 8006abe:	f108 0801 	add.w	r8, r8, #1
 8006ac2:	e7ec      	b.n	8006a9e <_printf_float+0x34a>
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4642      	mov	r2, r8
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d1c0      	bne.n	8006a54 <_printf_float+0x300>
 8006ad2:	e69e      	b.n	8006812 <_printf_float+0xbe>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	9205      	str	r2, [sp, #20]
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f ae97 	beq.w	8006812 <_printf_float+0xbe>
 8006ae4:	9a05      	ldr	r2, [sp, #20]
 8006ae6:	f10b 0b01 	add.w	fp, fp, #1
 8006aea:	e7b9      	b.n	8006a60 <_printf_float+0x30c>
 8006aec:	ee18 3a10 	vmov	r3, s16
 8006af0:	4652      	mov	r2, sl
 8006af2:	4631      	mov	r1, r6
 8006af4:	4628      	mov	r0, r5
 8006af6:	47b8      	blx	r7
 8006af8:	3001      	adds	r0, #1
 8006afa:	d1be      	bne.n	8006a7a <_printf_float+0x326>
 8006afc:	e689      	b.n	8006812 <_printf_float+0xbe>
 8006afe:	9a05      	ldr	r2, [sp, #20]
 8006b00:	464b      	mov	r3, r9
 8006b02:	4442      	add	r2, r8
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d1c1      	bne.n	8006a92 <_printf_float+0x33e>
 8006b0e:	e680      	b.n	8006812 <_printf_float+0xbe>
 8006b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b12:	2a01      	cmp	r2, #1
 8006b14:	dc01      	bgt.n	8006b1a <_printf_float+0x3c6>
 8006b16:	07db      	lsls	r3, r3, #31
 8006b18:	d53a      	bpl.n	8006b90 <_printf_float+0x43c>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f ae74 	beq.w	8006812 <_printf_float+0xbe>
 8006b2a:	ee18 3a10 	vmov	r3, s16
 8006b2e:	4652      	mov	r2, sl
 8006b30:	4631      	mov	r1, r6
 8006b32:	4628      	mov	r0, r5
 8006b34:	47b8      	blx	r7
 8006b36:	3001      	adds	r0, #1
 8006b38:	f43f ae6b 	beq.w	8006812 <_printf_float+0xbe>
 8006b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b40:	2200      	movs	r2, #0
 8006b42:	2300      	movs	r3, #0
 8006b44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006b48:	f7f9 ffd6 	bl	8000af8 <__aeabi_dcmpeq>
 8006b4c:	b9d8      	cbnz	r0, 8006b86 <_printf_float+0x432>
 8006b4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006b52:	f108 0201 	add.w	r2, r8, #1
 8006b56:	4631      	mov	r1, r6
 8006b58:	4628      	mov	r0, r5
 8006b5a:	47b8      	blx	r7
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d10e      	bne.n	8006b7e <_printf_float+0x42a>
 8006b60:	e657      	b.n	8006812 <_printf_float+0xbe>
 8006b62:	2301      	movs	r3, #1
 8006b64:	4652      	mov	r2, sl
 8006b66:	4631      	mov	r1, r6
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b8      	blx	r7
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f43f ae50 	beq.w	8006812 <_printf_float+0xbe>
 8006b72:	f108 0801 	add.w	r8, r8, #1
 8006b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	4543      	cmp	r3, r8
 8006b7c:	dcf1      	bgt.n	8006b62 <_printf_float+0x40e>
 8006b7e:	464b      	mov	r3, r9
 8006b80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b84:	e6da      	b.n	800693c <_printf_float+0x1e8>
 8006b86:	f04f 0800 	mov.w	r8, #0
 8006b8a:	f104 0a1a 	add.w	sl, r4, #26
 8006b8e:	e7f2      	b.n	8006b76 <_printf_float+0x422>
 8006b90:	2301      	movs	r3, #1
 8006b92:	4642      	mov	r2, r8
 8006b94:	e7df      	b.n	8006b56 <_printf_float+0x402>
 8006b96:	2301      	movs	r3, #1
 8006b98:	464a      	mov	r2, r9
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f ae36 	beq.w	8006812 <_printf_float+0xbe>
 8006ba6:	f108 0801 	add.w	r8, r8, #1
 8006baa:	68e3      	ldr	r3, [r4, #12]
 8006bac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bae:	1a5b      	subs	r3, r3, r1
 8006bb0:	4543      	cmp	r3, r8
 8006bb2:	dcf0      	bgt.n	8006b96 <_printf_float+0x442>
 8006bb4:	e6f8      	b.n	80069a8 <_printf_float+0x254>
 8006bb6:	f04f 0800 	mov.w	r8, #0
 8006bba:	f104 0919 	add.w	r9, r4, #25
 8006bbe:	e7f4      	b.n	8006baa <_printf_float+0x456>

08006bc0 <_printf_common>:
 8006bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	4699      	mov	r9, r3
 8006bc8:	688a      	ldr	r2, [r1, #8]
 8006bca:	690b      	ldr	r3, [r1, #16]
 8006bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	bfb8      	it	lt
 8006bd4:	4613      	movlt	r3, r2
 8006bd6:	6033      	str	r3, [r6, #0]
 8006bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bdc:	4607      	mov	r7, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	b10a      	cbz	r2, 8006be6 <_printf_common+0x26>
 8006be2:	3301      	adds	r3, #1
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	0699      	lsls	r1, r3, #26
 8006bea:	bf42      	ittt	mi
 8006bec:	6833      	ldrmi	r3, [r6, #0]
 8006bee:	3302      	addmi	r3, #2
 8006bf0:	6033      	strmi	r3, [r6, #0]
 8006bf2:	6825      	ldr	r5, [r4, #0]
 8006bf4:	f015 0506 	ands.w	r5, r5, #6
 8006bf8:	d106      	bne.n	8006c08 <_printf_common+0x48>
 8006bfa:	f104 0a19 	add.w	sl, r4, #25
 8006bfe:	68e3      	ldr	r3, [r4, #12]
 8006c00:	6832      	ldr	r2, [r6, #0]
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	42ab      	cmp	r3, r5
 8006c06:	dc26      	bgt.n	8006c56 <_printf_common+0x96>
 8006c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c0c:	1e13      	subs	r3, r2, #0
 8006c0e:	6822      	ldr	r2, [r4, #0]
 8006c10:	bf18      	it	ne
 8006c12:	2301      	movne	r3, #1
 8006c14:	0692      	lsls	r2, r2, #26
 8006c16:	d42b      	bmi.n	8006c70 <_printf_common+0xb0>
 8006c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c1c:	4649      	mov	r1, r9
 8006c1e:	4638      	mov	r0, r7
 8006c20:	47c0      	blx	r8
 8006c22:	3001      	adds	r0, #1
 8006c24:	d01e      	beq.n	8006c64 <_printf_common+0xa4>
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	6922      	ldr	r2, [r4, #16]
 8006c2a:	f003 0306 	and.w	r3, r3, #6
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	bf02      	ittt	eq
 8006c32:	68e5      	ldreq	r5, [r4, #12]
 8006c34:	6833      	ldreq	r3, [r6, #0]
 8006c36:	1aed      	subeq	r5, r5, r3
 8006c38:	68a3      	ldr	r3, [r4, #8]
 8006c3a:	bf0c      	ite	eq
 8006c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c40:	2500      	movne	r5, #0
 8006c42:	4293      	cmp	r3, r2
 8006c44:	bfc4      	itt	gt
 8006c46:	1a9b      	subgt	r3, r3, r2
 8006c48:	18ed      	addgt	r5, r5, r3
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	341a      	adds	r4, #26
 8006c4e:	42b5      	cmp	r5, r6
 8006c50:	d11a      	bne.n	8006c88 <_printf_common+0xc8>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e008      	b.n	8006c68 <_printf_common+0xa8>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4652      	mov	r2, sl
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	47c0      	blx	r8
 8006c60:	3001      	adds	r0, #1
 8006c62:	d103      	bne.n	8006c6c <_printf_common+0xac>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6c:	3501      	adds	r5, #1
 8006c6e:	e7c6      	b.n	8006bfe <_printf_common+0x3e>
 8006c70:	18e1      	adds	r1, r4, r3
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	2030      	movs	r0, #48	; 0x30
 8006c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c7a:	4422      	add	r2, r4
 8006c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c84:	3302      	adds	r3, #2
 8006c86:	e7c7      	b.n	8006c18 <_printf_common+0x58>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	4638      	mov	r0, r7
 8006c90:	47c0      	blx	r8
 8006c92:	3001      	adds	r0, #1
 8006c94:	d0e6      	beq.n	8006c64 <_printf_common+0xa4>
 8006c96:	3601      	adds	r6, #1
 8006c98:	e7d9      	b.n	8006c4e <_printf_common+0x8e>
	...

08006c9c <_printf_i>:
 8006c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca0:	7e0f      	ldrb	r7, [r1, #24]
 8006ca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ca4:	2f78      	cmp	r7, #120	; 0x78
 8006ca6:	4691      	mov	r9, r2
 8006ca8:	4680      	mov	r8, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	469a      	mov	sl, r3
 8006cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cb2:	d807      	bhi.n	8006cc4 <_printf_i+0x28>
 8006cb4:	2f62      	cmp	r7, #98	; 0x62
 8006cb6:	d80a      	bhi.n	8006cce <_printf_i+0x32>
 8006cb8:	2f00      	cmp	r7, #0
 8006cba:	f000 80d4 	beq.w	8006e66 <_printf_i+0x1ca>
 8006cbe:	2f58      	cmp	r7, #88	; 0x58
 8006cc0:	f000 80c0 	beq.w	8006e44 <_printf_i+0x1a8>
 8006cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ccc:	e03a      	b.n	8006d44 <_printf_i+0xa8>
 8006cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cd2:	2b15      	cmp	r3, #21
 8006cd4:	d8f6      	bhi.n	8006cc4 <_printf_i+0x28>
 8006cd6:	a101      	add	r1, pc, #4	; (adr r1, 8006cdc <_printf_i+0x40>)
 8006cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cdc:	08006d35 	.word	0x08006d35
 8006ce0:	08006d49 	.word	0x08006d49
 8006ce4:	08006cc5 	.word	0x08006cc5
 8006ce8:	08006cc5 	.word	0x08006cc5
 8006cec:	08006cc5 	.word	0x08006cc5
 8006cf0:	08006cc5 	.word	0x08006cc5
 8006cf4:	08006d49 	.word	0x08006d49
 8006cf8:	08006cc5 	.word	0x08006cc5
 8006cfc:	08006cc5 	.word	0x08006cc5
 8006d00:	08006cc5 	.word	0x08006cc5
 8006d04:	08006cc5 	.word	0x08006cc5
 8006d08:	08006e4d 	.word	0x08006e4d
 8006d0c:	08006d75 	.word	0x08006d75
 8006d10:	08006e07 	.word	0x08006e07
 8006d14:	08006cc5 	.word	0x08006cc5
 8006d18:	08006cc5 	.word	0x08006cc5
 8006d1c:	08006e6f 	.word	0x08006e6f
 8006d20:	08006cc5 	.word	0x08006cc5
 8006d24:	08006d75 	.word	0x08006d75
 8006d28:	08006cc5 	.word	0x08006cc5
 8006d2c:	08006cc5 	.word	0x08006cc5
 8006d30:	08006e0f 	.word	0x08006e0f
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	1d1a      	adds	r2, r3, #4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	602a      	str	r2, [r5, #0]
 8006d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d44:	2301      	movs	r3, #1
 8006d46:	e09f      	b.n	8006e88 <_printf_i+0x1ec>
 8006d48:	6820      	ldr	r0, [r4, #0]
 8006d4a:	682b      	ldr	r3, [r5, #0]
 8006d4c:	0607      	lsls	r7, r0, #24
 8006d4e:	f103 0104 	add.w	r1, r3, #4
 8006d52:	6029      	str	r1, [r5, #0]
 8006d54:	d501      	bpl.n	8006d5a <_printf_i+0xbe>
 8006d56:	681e      	ldr	r6, [r3, #0]
 8006d58:	e003      	b.n	8006d62 <_printf_i+0xc6>
 8006d5a:	0646      	lsls	r6, r0, #25
 8006d5c:	d5fb      	bpl.n	8006d56 <_printf_i+0xba>
 8006d5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d62:	2e00      	cmp	r6, #0
 8006d64:	da03      	bge.n	8006d6e <_printf_i+0xd2>
 8006d66:	232d      	movs	r3, #45	; 0x2d
 8006d68:	4276      	negs	r6, r6
 8006d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6e:	485a      	ldr	r0, [pc, #360]	; (8006ed8 <_printf_i+0x23c>)
 8006d70:	230a      	movs	r3, #10
 8006d72:	e012      	b.n	8006d9a <_printf_i+0xfe>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	1d19      	adds	r1, r3, #4
 8006d7a:	6029      	str	r1, [r5, #0]
 8006d7c:	0605      	lsls	r5, r0, #24
 8006d7e:	d501      	bpl.n	8006d84 <_printf_i+0xe8>
 8006d80:	681e      	ldr	r6, [r3, #0]
 8006d82:	e002      	b.n	8006d8a <_printf_i+0xee>
 8006d84:	0641      	lsls	r1, r0, #25
 8006d86:	d5fb      	bpl.n	8006d80 <_printf_i+0xe4>
 8006d88:	881e      	ldrh	r6, [r3, #0]
 8006d8a:	4853      	ldr	r0, [pc, #332]	; (8006ed8 <_printf_i+0x23c>)
 8006d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d8e:	bf0c      	ite	eq
 8006d90:	2308      	moveq	r3, #8
 8006d92:	230a      	movne	r3, #10
 8006d94:	2100      	movs	r1, #0
 8006d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d9a:	6865      	ldr	r5, [r4, #4]
 8006d9c:	60a5      	str	r5, [r4, #8]
 8006d9e:	2d00      	cmp	r5, #0
 8006da0:	bfa2      	ittt	ge
 8006da2:	6821      	ldrge	r1, [r4, #0]
 8006da4:	f021 0104 	bicge.w	r1, r1, #4
 8006da8:	6021      	strge	r1, [r4, #0]
 8006daa:	b90e      	cbnz	r6, 8006db0 <_printf_i+0x114>
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	d04b      	beq.n	8006e48 <_printf_i+0x1ac>
 8006db0:	4615      	mov	r5, r2
 8006db2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006db6:	fb03 6711 	mls	r7, r3, r1, r6
 8006dba:	5dc7      	ldrb	r7, [r0, r7]
 8006dbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dc0:	4637      	mov	r7, r6
 8006dc2:	42bb      	cmp	r3, r7
 8006dc4:	460e      	mov	r6, r1
 8006dc6:	d9f4      	bls.n	8006db2 <_printf_i+0x116>
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d10b      	bne.n	8006de4 <_printf_i+0x148>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	07de      	lsls	r6, r3, #31
 8006dd0:	d508      	bpl.n	8006de4 <_printf_i+0x148>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	6861      	ldr	r1, [r4, #4]
 8006dd6:	4299      	cmp	r1, r3
 8006dd8:	bfde      	ittt	le
 8006dda:	2330      	movle	r3, #48	; 0x30
 8006ddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006de0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006de4:	1b52      	subs	r2, r2, r5
 8006de6:	6122      	str	r2, [r4, #16]
 8006de8:	f8cd a000 	str.w	sl, [sp]
 8006dec:	464b      	mov	r3, r9
 8006dee:	aa03      	add	r2, sp, #12
 8006df0:	4621      	mov	r1, r4
 8006df2:	4640      	mov	r0, r8
 8006df4:	f7ff fee4 	bl	8006bc0 <_printf_common>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d14a      	bne.n	8006e92 <_printf_i+0x1f6>
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	b004      	add	sp, #16
 8006e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	f043 0320 	orr.w	r3, r3, #32
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	4833      	ldr	r0, [pc, #204]	; (8006edc <_printf_i+0x240>)
 8006e10:	2778      	movs	r7, #120	; 0x78
 8006e12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	6829      	ldr	r1, [r5, #0]
 8006e1a:	061f      	lsls	r7, r3, #24
 8006e1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e20:	d402      	bmi.n	8006e28 <_printf_i+0x18c>
 8006e22:	065f      	lsls	r7, r3, #25
 8006e24:	bf48      	it	mi
 8006e26:	b2b6      	uxthmi	r6, r6
 8006e28:	07df      	lsls	r7, r3, #31
 8006e2a:	bf48      	it	mi
 8006e2c:	f043 0320 	orrmi.w	r3, r3, #32
 8006e30:	6029      	str	r1, [r5, #0]
 8006e32:	bf48      	it	mi
 8006e34:	6023      	strmi	r3, [r4, #0]
 8006e36:	b91e      	cbnz	r6, 8006e40 <_printf_i+0x1a4>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	f023 0320 	bic.w	r3, r3, #32
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	2310      	movs	r3, #16
 8006e42:	e7a7      	b.n	8006d94 <_printf_i+0xf8>
 8006e44:	4824      	ldr	r0, [pc, #144]	; (8006ed8 <_printf_i+0x23c>)
 8006e46:	e7e4      	b.n	8006e12 <_printf_i+0x176>
 8006e48:	4615      	mov	r5, r2
 8006e4a:	e7bd      	b.n	8006dc8 <_printf_i+0x12c>
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	6826      	ldr	r6, [r4, #0]
 8006e50:	6961      	ldr	r1, [r4, #20]
 8006e52:	1d18      	adds	r0, r3, #4
 8006e54:	6028      	str	r0, [r5, #0]
 8006e56:	0635      	lsls	r5, r6, #24
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	d501      	bpl.n	8006e60 <_printf_i+0x1c4>
 8006e5c:	6019      	str	r1, [r3, #0]
 8006e5e:	e002      	b.n	8006e66 <_printf_i+0x1ca>
 8006e60:	0670      	lsls	r0, r6, #25
 8006e62:	d5fb      	bpl.n	8006e5c <_printf_i+0x1c0>
 8006e64:	8019      	strh	r1, [r3, #0]
 8006e66:	2300      	movs	r3, #0
 8006e68:	6123      	str	r3, [r4, #16]
 8006e6a:	4615      	mov	r5, r2
 8006e6c:	e7bc      	b.n	8006de8 <_printf_i+0x14c>
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	1d1a      	adds	r2, r3, #4
 8006e72:	602a      	str	r2, [r5, #0]
 8006e74:	681d      	ldr	r5, [r3, #0]
 8006e76:	6862      	ldr	r2, [r4, #4]
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f7f9 f9c0 	bl	8000200 <memchr>
 8006e80:	b108      	cbz	r0, 8006e86 <_printf_i+0x1ea>
 8006e82:	1b40      	subs	r0, r0, r5
 8006e84:	6060      	str	r0, [r4, #4]
 8006e86:	6863      	ldr	r3, [r4, #4]
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e90:	e7aa      	b.n	8006de8 <_printf_i+0x14c>
 8006e92:	6923      	ldr	r3, [r4, #16]
 8006e94:	462a      	mov	r2, r5
 8006e96:	4649      	mov	r1, r9
 8006e98:	4640      	mov	r0, r8
 8006e9a:	47d0      	blx	sl
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d0ad      	beq.n	8006dfc <_printf_i+0x160>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	079b      	lsls	r3, r3, #30
 8006ea4:	d413      	bmi.n	8006ece <_printf_i+0x232>
 8006ea6:	68e0      	ldr	r0, [r4, #12]
 8006ea8:	9b03      	ldr	r3, [sp, #12]
 8006eaa:	4298      	cmp	r0, r3
 8006eac:	bfb8      	it	lt
 8006eae:	4618      	movlt	r0, r3
 8006eb0:	e7a6      	b.n	8006e00 <_printf_i+0x164>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	4640      	mov	r0, r8
 8006eba:	47d0      	blx	sl
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d09d      	beq.n	8006dfc <_printf_i+0x160>
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	68e3      	ldr	r3, [r4, #12]
 8006ec4:	9903      	ldr	r1, [sp, #12]
 8006ec6:	1a5b      	subs	r3, r3, r1
 8006ec8:	42ab      	cmp	r3, r5
 8006eca:	dcf2      	bgt.n	8006eb2 <_printf_i+0x216>
 8006ecc:	e7eb      	b.n	8006ea6 <_printf_i+0x20a>
 8006ece:	2500      	movs	r5, #0
 8006ed0:	f104 0619 	add.w	r6, r4, #25
 8006ed4:	e7f5      	b.n	8006ec2 <_printf_i+0x226>
 8006ed6:	bf00      	nop
 8006ed8:	0800977a 	.word	0x0800977a
 8006edc:	0800978b 	.word	0x0800978b

08006ee0 <std>:
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	b510      	push	{r4, lr}
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8006eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eee:	6083      	str	r3, [r0, #8]
 8006ef0:	8181      	strh	r1, [r0, #12]
 8006ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ef4:	81c2      	strh	r2, [r0, #14]
 8006ef6:	6183      	str	r3, [r0, #24]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	2208      	movs	r2, #8
 8006efc:	305c      	adds	r0, #92	; 0x5c
 8006efe:	f000 f906 	bl	800710e <memset>
 8006f02:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <std+0x58>)
 8006f04:	6263      	str	r3, [r4, #36]	; 0x24
 8006f06:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <std+0x5c>)
 8006f08:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <std+0x60>)
 8006f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f0e:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <std+0x64>)
 8006f10:	6323      	str	r3, [r4, #48]	; 0x30
 8006f12:	4b0d      	ldr	r3, [pc, #52]	; (8006f48 <std+0x68>)
 8006f14:	6224      	str	r4, [r4, #32]
 8006f16:	429c      	cmp	r4, r3
 8006f18:	d006      	beq.n	8006f28 <std+0x48>
 8006f1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006f1e:	4294      	cmp	r4, r2
 8006f20:	d002      	beq.n	8006f28 <std+0x48>
 8006f22:	33d0      	adds	r3, #208	; 0xd0
 8006f24:	429c      	cmp	r4, r3
 8006f26:	d105      	bne.n	8006f34 <std+0x54>
 8006f28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f30:	f000 b96a 	b.w	8007208 <__retarget_lock_init_recursive>
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	bf00      	nop
 8006f38:	08007089 	.word	0x08007089
 8006f3c:	080070ab 	.word	0x080070ab
 8006f40:	080070e3 	.word	0x080070e3
 8006f44:	08007107 	.word	0x08007107
 8006f48:	2000047c 	.word	0x2000047c

08006f4c <stdio_exit_handler>:
 8006f4c:	4a02      	ldr	r2, [pc, #8]	; (8006f58 <stdio_exit_handler+0xc>)
 8006f4e:	4903      	ldr	r1, [pc, #12]	; (8006f5c <stdio_exit_handler+0x10>)
 8006f50:	4803      	ldr	r0, [pc, #12]	; (8006f60 <stdio_exit_handler+0x14>)
 8006f52:	f000 b869 	b.w	8007028 <_fwalk_sglue>
 8006f56:	bf00      	nop
 8006f58:	20000024 	.word	0x20000024
 8006f5c:	08008b91 	.word	0x08008b91
 8006f60:	20000030 	.word	0x20000030

08006f64 <cleanup_stdio>:
 8006f64:	6841      	ldr	r1, [r0, #4]
 8006f66:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <cleanup_stdio+0x34>)
 8006f68:	4299      	cmp	r1, r3
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	d001      	beq.n	8006f74 <cleanup_stdio+0x10>
 8006f70:	f001 fe0e 	bl	8008b90 <_fflush_r>
 8006f74:	68a1      	ldr	r1, [r4, #8]
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <cleanup_stdio+0x38>)
 8006f78:	4299      	cmp	r1, r3
 8006f7a:	d002      	beq.n	8006f82 <cleanup_stdio+0x1e>
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f001 fe07 	bl	8008b90 <_fflush_r>
 8006f82:	68e1      	ldr	r1, [r4, #12]
 8006f84:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <cleanup_stdio+0x3c>)
 8006f86:	4299      	cmp	r1, r3
 8006f88:	d004      	beq.n	8006f94 <cleanup_stdio+0x30>
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f90:	f001 bdfe 	b.w	8008b90 <_fflush_r>
 8006f94:	bd10      	pop	{r4, pc}
 8006f96:	bf00      	nop
 8006f98:	2000047c 	.word	0x2000047c
 8006f9c:	200004e4 	.word	0x200004e4
 8006fa0:	2000054c 	.word	0x2000054c

08006fa4 <global_stdio_init.part.0>:
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <global_stdio_init.part.0+0x30>)
 8006fa8:	4c0b      	ldr	r4, [pc, #44]	; (8006fd8 <global_stdio_init.part.0+0x34>)
 8006faa:	4a0c      	ldr	r2, [pc, #48]	; (8006fdc <global_stdio_init.part.0+0x38>)
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	4620      	mov	r0, r4
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2104      	movs	r1, #4
 8006fb4:	f7ff ff94 	bl	8006ee0 <std>
 8006fb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	2109      	movs	r1, #9
 8006fc0:	f7ff ff8e 	bl	8006ee0 <std>
 8006fc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006fc8:	2202      	movs	r2, #2
 8006fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fce:	2112      	movs	r1, #18
 8006fd0:	f7ff bf86 	b.w	8006ee0 <std>
 8006fd4:	200005b4 	.word	0x200005b4
 8006fd8:	2000047c 	.word	0x2000047c
 8006fdc:	08006f4d 	.word	0x08006f4d

08006fe0 <__sfp_lock_acquire>:
 8006fe0:	4801      	ldr	r0, [pc, #4]	; (8006fe8 <__sfp_lock_acquire+0x8>)
 8006fe2:	f000 b912 	b.w	800720a <__retarget_lock_acquire_recursive>
 8006fe6:	bf00      	nop
 8006fe8:	200005bd 	.word	0x200005bd

08006fec <__sfp_lock_release>:
 8006fec:	4801      	ldr	r0, [pc, #4]	; (8006ff4 <__sfp_lock_release+0x8>)
 8006fee:	f000 b90d 	b.w	800720c <__retarget_lock_release_recursive>
 8006ff2:	bf00      	nop
 8006ff4:	200005bd 	.word	0x200005bd

08006ff8 <__sinit>:
 8006ff8:	b510      	push	{r4, lr}
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	f7ff fff0 	bl	8006fe0 <__sfp_lock_acquire>
 8007000:	6a23      	ldr	r3, [r4, #32]
 8007002:	b11b      	cbz	r3, 800700c <__sinit+0x14>
 8007004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007008:	f7ff bff0 	b.w	8006fec <__sfp_lock_release>
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <__sinit+0x28>)
 800700e:	6223      	str	r3, [r4, #32]
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <__sinit+0x2c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1f5      	bne.n	8007004 <__sinit+0xc>
 8007018:	f7ff ffc4 	bl	8006fa4 <global_stdio_init.part.0>
 800701c:	e7f2      	b.n	8007004 <__sinit+0xc>
 800701e:	bf00      	nop
 8007020:	08006f65 	.word	0x08006f65
 8007024:	200005b4 	.word	0x200005b4

08007028 <_fwalk_sglue>:
 8007028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800702c:	4607      	mov	r7, r0
 800702e:	4688      	mov	r8, r1
 8007030:	4614      	mov	r4, r2
 8007032:	2600      	movs	r6, #0
 8007034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007038:	f1b9 0901 	subs.w	r9, r9, #1
 800703c:	d505      	bpl.n	800704a <_fwalk_sglue+0x22>
 800703e:	6824      	ldr	r4, [r4, #0]
 8007040:	2c00      	cmp	r4, #0
 8007042:	d1f7      	bne.n	8007034 <_fwalk_sglue+0xc>
 8007044:	4630      	mov	r0, r6
 8007046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704a:	89ab      	ldrh	r3, [r5, #12]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d907      	bls.n	8007060 <_fwalk_sglue+0x38>
 8007050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007054:	3301      	adds	r3, #1
 8007056:	d003      	beq.n	8007060 <_fwalk_sglue+0x38>
 8007058:	4629      	mov	r1, r5
 800705a:	4638      	mov	r0, r7
 800705c:	47c0      	blx	r8
 800705e:	4306      	orrs	r6, r0
 8007060:	3568      	adds	r5, #104	; 0x68
 8007062:	e7e9      	b.n	8007038 <_fwalk_sglue+0x10>

08007064 <iprintf>:
 8007064:	b40f      	push	{r0, r1, r2, r3}
 8007066:	b507      	push	{r0, r1, r2, lr}
 8007068:	4906      	ldr	r1, [pc, #24]	; (8007084 <iprintf+0x20>)
 800706a:	ab04      	add	r3, sp, #16
 800706c:	6808      	ldr	r0, [r1, #0]
 800706e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007072:	6881      	ldr	r1, [r0, #8]
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	f001 fbeb 	bl	8008850 <_vfiprintf_r>
 800707a:	b003      	add	sp, #12
 800707c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007080:	b004      	add	sp, #16
 8007082:	4770      	bx	lr
 8007084:	2000007c 	.word	0x2000007c

08007088 <__sread>:
 8007088:	b510      	push	{r4, lr}
 800708a:	460c      	mov	r4, r1
 800708c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007090:	f000 f86c 	bl	800716c <_read_r>
 8007094:	2800      	cmp	r0, #0
 8007096:	bfab      	itete	ge
 8007098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800709a:	89a3      	ldrhlt	r3, [r4, #12]
 800709c:	181b      	addge	r3, r3, r0
 800709e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070a2:	bfac      	ite	ge
 80070a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80070a6:	81a3      	strhlt	r3, [r4, #12]
 80070a8:	bd10      	pop	{r4, pc}

080070aa <__swrite>:
 80070aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ae:	461f      	mov	r7, r3
 80070b0:	898b      	ldrh	r3, [r1, #12]
 80070b2:	05db      	lsls	r3, r3, #23
 80070b4:	4605      	mov	r5, r0
 80070b6:	460c      	mov	r4, r1
 80070b8:	4616      	mov	r6, r2
 80070ba:	d505      	bpl.n	80070c8 <__swrite+0x1e>
 80070bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c0:	2302      	movs	r3, #2
 80070c2:	2200      	movs	r2, #0
 80070c4:	f000 f840 	bl	8007148 <_lseek_r>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	4632      	mov	r2, r6
 80070d6:	463b      	mov	r3, r7
 80070d8:	4628      	mov	r0, r5
 80070da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070de:	f000 b857 	b.w	8007190 <_write_r>

080070e2 <__sseek>:
 80070e2:	b510      	push	{r4, lr}
 80070e4:	460c      	mov	r4, r1
 80070e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ea:	f000 f82d 	bl	8007148 <_lseek_r>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	bf15      	itete	ne
 80070f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80070f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070fe:	81a3      	strheq	r3, [r4, #12]
 8007100:	bf18      	it	ne
 8007102:	81a3      	strhne	r3, [r4, #12]
 8007104:	bd10      	pop	{r4, pc}

08007106 <__sclose>:
 8007106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710a:	f000 b80d 	b.w	8007128 <_close_r>

0800710e <memset>:
 800710e:	4402      	add	r2, r0
 8007110:	4603      	mov	r3, r0
 8007112:	4293      	cmp	r3, r2
 8007114:	d100      	bne.n	8007118 <memset+0xa>
 8007116:	4770      	bx	lr
 8007118:	f803 1b01 	strb.w	r1, [r3], #1
 800711c:	e7f9      	b.n	8007112 <memset+0x4>
	...

08007120 <_localeconv_r>:
 8007120:	4800      	ldr	r0, [pc, #0]	; (8007124 <_localeconv_r+0x4>)
 8007122:	4770      	bx	lr
 8007124:	20000170 	.word	0x20000170

08007128 <_close_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d06      	ldr	r5, [pc, #24]	; (8007144 <_close_r+0x1c>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	f7fb f9eb 	bl	800250e <_close>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_close_r+0x1a>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_close_r+0x1a>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	200005b8 	.word	0x200005b8

08007148 <_lseek_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	; (8007168 <_lseek_r+0x20>)
 800714c:	4604      	mov	r4, r0
 800714e:	4608      	mov	r0, r1
 8007150:	4611      	mov	r1, r2
 8007152:	2200      	movs	r2, #0
 8007154:	602a      	str	r2, [r5, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	f7fb fa00 	bl	800255c <_lseek>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_lseek_r+0x1e>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_lseek_r+0x1e>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	200005b8 	.word	0x200005b8

0800716c <_read_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d07      	ldr	r5, [pc, #28]	; (800718c <_read_r+0x20>)
 8007170:	4604      	mov	r4, r0
 8007172:	4608      	mov	r0, r1
 8007174:	4611      	mov	r1, r2
 8007176:	2200      	movs	r2, #0
 8007178:	602a      	str	r2, [r5, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	f7fb f98e 	bl	800249c <_read>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d102      	bne.n	800718a <_read_r+0x1e>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	b103      	cbz	r3, 800718a <_read_r+0x1e>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	200005b8 	.word	0x200005b8

08007190 <_write_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d07      	ldr	r5, [pc, #28]	; (80071b0 <_write_r+0x20>)
 8007194:	4604      	mov	r4, r0
 8007196:	4608      	mov	r0, r1
 8007198:	4611      	mov	r1, r2
 800719a:	2200      	movs	r2, #0
 800719c:	602a      	str	r2, [r5, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f7fb f999 	bl	80024d6 <_write>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_write_r+0x1e>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_write_r+0x1e>
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	200005b8 	.word	0x200005b8

080071b4 <__errno>:
 80071b4:	4b01      	ldr	r3, [pc, #4]	; (80071bc <__errno+0x8>)
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	2000007c 	.word	0x2000007c

080071c0 <__libc_init_array>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	4d0d      	ldr	r5, [pc, #52]	; (80071f8 <__libc_init_array+0x38>)
 80071c4:	4c0d      	ldr	r4, [pc, #52]	; (80071fc <__libc_init_array+0x3c>)
 80071c6:	1b64      	subs	r4, r4, r5
 80071c8:	10a4      	asrs	r4, r4, #2
 80071ca:	2600      	movs	r6, #0
 80071cc:	42a6      	cmp	r6, r4
 80071ce:	d109      	bne.n	80071e4 <__libc_init_array+0x24>
 80071d0:	4d0b      	ldr	r5, [pc, #44]	; (8007200 <__libc_init_array+0x40>)
 80071d2:	4c0c      	ldr	r4, [pc, #48]	; (8007204 <__libc_init_array+0x44>)
 80071d4:	f002 fa6a 	bl	80096ac <_init>
 80071d8:	1b64      	subs	r4, r4, r5
 80071da:	10a4      	asrs	r4, r4, #2
 80071dc:	2600      	movs	r6, #0
 80071de:	42a6      	cmp	r6, r4
 80071e0:	d105      	bne.n	80071ee <__libc_init_array+0x2e>
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e8:	4798      	blx	r3
 80071ea:	3601      	adds	r6, #1
 80071ec:	e7ee      	b.n	80071cc <__libc_init_array+0xc>
 80071ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f2:	4798      	blx	r3
 80071f4:	3601      	adds	r6, #1
 80071f6:	e7f2      	b.n	80071de <__libc_init_array+0x1e>
 80071f8:	08009b58 	.word	0x08009b58
 80071fc:	08009b58 	.word	0x08009b58
 8007200:	08009b58 	.word	0x08009b58
 8007204:	08009b5c 	.word	0x08009b5c

08007208 <__retarget_lock_init_recursive>:
 8007208:	4770      	bx	lr

0800720a <__retarget_lock_acquire_recursive>:
 800720a:	4770      	bx	lr

0800720c <__retarget_lock_release_recursive>:
 800720c:	4770      	bx	lr

0800720e <quorem>:
 800720e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007212:	6903      	ldr	r3, [r0, #16]
 8007214:	690c      	ldr	r4, [r1, #16]
 8007216:	42a3      	cmp	r3, r4
 8007218:	4607      	mov	r7, r0
 800721a:	db7e      	blt.n	800731a <quorem+0x10c>
 800721c:	3c01      	subs	r4, #1
 800721e:	f101 0814 	add.w	r8, r1, #20
 8007222:	f100 0514 	add.w	r5, r0, #20
 8007226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007234:	3301      	adds	r3, #1
 8007236:	429a      	cmp	r2, r3
 8007238:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800723c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007240:	fbb2 f6f3 	udiv	r6, r2, r3
 8007244:	d331      	bcc.n	80072aa <quorem+0x9c>
 8007246:	f04f 0e00 	mov.w	lr, #0
 800724a:	4640      	mov	r0, r8
 800724c:	46ac      	mov	ip, r5
 800724e:	46f2      	mov	sl, lr
 8007250:	f850 2b04 	ldr.w	r2, [r0], #4
 8007254:	b293      	uxth	r3, r2
 8007256:	fb06 e303 	mla	r3, r6, r3, lr
 800725a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800725e:	0c1a      	lsrs	r2, r3, #16
 8007260:	b29b      	uxth	r3, r3
 8007262:	ebaa 0303 	sub.w	r3, sl, r3
 8007266:	f8dc a000 	ldr.w	sl, [ip]
 800726a:	fa13 f38a 	uxtah	r3, r3, sl
 800726e:	fb06 220e 	mla	r2, r6, lr, r2
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	9b00      	ldr	r3, [sp, #0]
 8007276:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800727a:	b292      	uxth	r2, r2
 800727c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007284:	f8bd 3000 	ldrh.w	r3, [sp]
 8007288:	4581      	cmp	r9, r0
 800728a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728e:	f84c 3b04 	str.w	r3, [ip], #4
 8007292:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007296:	d2db      	bcs.n	8007250 <quorem+0x42>
 8007298:	f855 300b 	ldr.w	r3, [r5, fp]
 800729c:	b92b      	cbnz	r3, 80072aa <quorem+0x9c>
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	3b04      	subs	r3, #4
 80072a2:	429d      	cmp	r5, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	d32c      	bcc.n	8007302 <quorem+0xf4>
 80072a8:	613c      	str	r4, [r7, #16]
 80072aa:	4638      	mov	r0, r7
 80072ac:	f001 f9a6 	bl	80085fc <__mcmp>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	db22      	blt.n	80072fa <quorem+0xec>
 80072b4:	3601      	adds	r6, #1
 80072b6:	4629      	mov	r1, r5
 80072b8:	2000      	movs	r0, #0
 80072ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80072be:	f8d1 c000 	ldr.w	ip, [r1]
 80072c2:	b293      	uxth	r3, r2
 80072c4:	1ac3      	subs	r3, r0, r3
 80072c6:	0c12      	lsrs	r2, r2, #16
 80072c8:	fa13 f38c 	uxtah	r3, r3, ip
 80072cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80072d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072da:	45c1      	cmp	r9, r8
 80072dc:	f841 3b04 	str.w	r3, [r1], #4
 80072e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072e4:	d2e9      	bcs.n	80072ba <quorem+0xac>
 80072e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072ee:	b922      	cbnz	r2, 80072fa <quorem+0xec>
 80072f0:	3b04      	subs	r3, #4
 80072f2:	429d      	cmp	r5, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	d30a      	bcc.n	800730e <quorem+0x100>
 80072f8:	613c      	str	r4, [r7, #16]
 80072fa:	4630      	mov	r0, r6
 80072fc:	b003      	add	sp, #12
 80072fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007302:	6812      	ldr	r2, [r2, #0]
 8007304:	3b04      	subs	r3, #4
 8007306:	2a00      	cmp	r2, #0
 8007308:	d1ce      	bne.n	80072a8 <quorem+0x9a>
 800730a:	3c01      	subs	r4, #1
 800730c:	e7c9      	b.n	80072a2 <quorem+0x94>
 800730e:	6812      	ldr	r2, [r2, #0]
 8007310:	3b04      	subs	r3, #4
 8007312:	2a00      	cmp	r2, #0
 8007314:	d1f0      	bne.n	80072f8 <quorem+0xea>
 8007316:	3c01      	subs	r4, #1
 8007318:	e7eb      	b.n	80072f2 <quorem+0xe4>
 800731a:	2000      	movs	r0, #0
 800731c:	e7ee      	b.n	80072fc <quorem+0xee>
	...

08007320 <_dtoa_r>:
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	ed2d 8b04 	vpush	{d8-d9}
 8007328:	69c5      	ldr	r5, [r0, #28]
 800732a:	b093      	sub	sp, #76	; 0x4c
 800732c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007330:	ec57 6b10 	vmov	r6, r7, d0
 8007334:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007338:	9107      	str	r1, [sp, #28]
 800733a:	4604      	mov	r4, r0
 800733c:	920a      	str	r2, [sp, #40]	; 0x28
 800733e:	930d      	str	r3, [sp, #52]	; 0x34
 8007340:	b975      	cbnz	r5, 8007360 <_dtoa_r+0x40>
 8007342:	2010      	movs	r0, #16
 8007344:	f000 fe2a 	bl	8007f9c <malloc>
 8007348:	4602      	mov	r2, r0
 800734a:	61e0      	str	r0, [r4, #28]
 800734c:	b920      	cbnz	r0, 8007358 <_dtoa_r+0x38>
 800734e:	4bae      	ldr	r3, [pc, #696]	; (8007608 <_dtoa_r+0x2e8>)
 8007350:	21ef      	movs	r1, #239	; 0xef
 8007352:	48ae      	ldr	r0, [pc, #696]	; (800760c <_dtoa_r+0x2ec>)
 8007354:	f001 fcf8 	bl	8008d48 <__assert_func>
 8007358:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800735c:	6005      	str	r5, [r0, #0]
 800735e:	60c5      	str	r5, [r0, #12]
 8007360:	69e3      	ldr	r3, [r4, #28]
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	b151      	cbz	r1, 800737c <_dtoa_r+0x5c>
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	604a      	str	r2, [r1, #4]
 800736a:	2301      	movs	r3, #1
 800736c:	4093      	lsls	r3, r2
 800736e:	608b      	str	r3, [r1, #8]
 8007370:	4620      	mov	r0, r4
 8007372:	f000 ff07 	bl	8008184 <_Bfree>
 8007376:	69e3      	ldr	r3, [r4, #28]
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	1e3b      	subs	r3, r7, #0
 800737e:	bfbb      	ittet	lt
 8007380:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007384:	9303      	strlt	r3, [sp, #12]
 8007386:	2300      	movge	r3, #0
 8007388:	2201      	movlt	r2, #1
 800738a:	bfac      	ite	ge
 800738c:	f8c8 3000 	strge.w	r3, [r8]
 8007390:	f8c8 2000 	strlt.w	r2, [r8]
 8007394:	4b9e      	ldr	r3, [pc, #632]	; (8007610 <_dtoa_r+0x2f0>)
 8007396:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800739a:	ea33 0308 	bics.w	r3, r3, r8
 800739e:	d11b      	bne.n	80073d8 <_dtoa_r+0xb8>
 80073a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80073ac:	4333      	orrs	r3, r6
 80073ae:	f000 8593 	beq.w	8007ed8 <_dtoa_r+0xbb8>
 80073b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073b4:	b963      	cbnz	r3, 80073d0 <_dtoa_r+0xb0>
 80073b6:	4b97      	ldr	r3, [pc, #604]	; (8007614 <_dtoa_r+0x2f4>)
 80073b8:	e027      	b.n	800740a <_dtoa_r+0xea>
 80073ba:	4b97      	ldr	r3, [pc, #604]	; (8007618 <_dtoa_r+0x2f8>)
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	9800      	ldr	r0, [sp, #0]
 80073c6:	b013      	add	sp, #76	; 0x4c
 80073c8:	ecbd 8b04 	vpop	{d8-d9}
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	4b90      	ldr	r3, [pc, #576]	; (8007614 <_dtoa_r+0x2f4>)
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	3303      	adds	r3, #3
 80073d6:	e7f3      	b.n	80073c0 <_dtoa_r+0xa0>
 80073d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073dc:	2200      	movs	r2, #0
 80073de:	ec51 0b17 	vmov	r0, r1, d7
 80073e2:	eeb0 8a47 	vmov.f32	s16, s14
 80073e6:	eef0 8a67 	vmov.f32	s17, s15
 80073ea:	2300      	movs	r3, #0
 80073ec:	f7f9 fb84 	bl	8000af8 <__aeabi_dcmpeq>
 80073f0:	4681      	mov	r9, r0
 80073f2:	b160      	cbz	r0, 800740e <_dtoa_r+0xee>
 80073f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073f6:	2301      	movs	r3, #1
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8568 	beq.w	8007ed2 <_dtoa_r+0xbb2>
 8007402:	4b86      	ldr	r3, [pc, #536]	; (800761c <_dtoa_r+0x2fc>)
 8007404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	3b01      	subs	r3, #1
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	e7da      	b.n	80073c4 <_dtoa_r+0xa4>
 800740e:	aa10      	add	r2, sp, #64	; 0x40
 8007410:	a911      	add	r1, sp, #68	; 0x44
 8007412:	4620      	mov	r0, r4
 8007414:	eeb0 0a48 	vmov.f32	s0, s16
 8007418:	eef0 0a68 	vmov.f32	s1, s17
 800741c:	f001 f994 	bl	8008748 <__d2b>
 8007420:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007424:	4682      	mov	sl, r0
 8007426:	2d00      	cmp	r5, #0
 8007428:	d07f      	beq.n	800752a <_dtoa_r+0x20a>
 800742a:	ee18 3a90 	vmov	r3, s17
 800742e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007432:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007436:	ec51 0b18 	vmov	r0, r1, d8
 800743a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800743e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007442:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007446:	4619      	mov	r1, r3
 8007448:	2200      	movs	r2, #0
 800744a:	4b75      	ldr	r3, [pc, #468]	; (8007620 <_dtoa_r+0x300>)
 800744c:	f7f8 ff34 	bl	80002b8 <__aeabi_dsub>
 8007450:	a367      	add	r3, pc, #412	; (adr r3, 80075f0 <_dtoa_r+0x2d0>)
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f7f9 f8e7 	bl	8000628 <__aeabi_dmul>
 800745a:	a367      	add	r3, pc, #412	; (adr r3, 80075f8 <_dtoa_r+0x2d8>)
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	f7f8 ff2c 	bl	80002bc <__adddf3>
 8007464:	4606      	mov	r6, r0
 8007466:	4628      	mov	r0, r5
 8007468:	460f      	mov	r7, r1
 800746a:	f7f9 f873 	bl	8000554 <__aeabi_i2d>
 800746e:	a364      	add	r3, pc, #400	; (adr r3, 8007600 <_dtoa_r+0x2e0>)
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f7f9 f8d8 	bl	8000628 <__aeabi_dmul>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4630      	mov	r0, r6
 800747e:	4639      	mov	r1, r7
 8007480:	f7f8 ff1c 	bl	80002bc <__adddf3>
 8007484:	4606      	mov	r6, r0
 8007486:	460f      	mov	r7, r1
 8007488:	f7f9 fb7e 	bl	8000b88 <__aeabi_d2iz>
 800748c:	2200      	movs	r2, #0
 800748e:	4683      	mov	fp, r0
 8007490:	2300      	movs	r3, #0
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f9 fb39 	bl	8000b0c <__aeabi_dcmplt>
 800749a:	b148      	cbz	r0, 80074b0 <_dtoa_r+0x190>
 800749c:	4658      	mov	r0, fp
 800749e:	f7f9 f859 	bl	8000554 <__aeabi_i2d>
 80074a2:	4632      	mov	r2, r6
 80074a4:	463b      	mov	r3, r7
 80074a6:	f7f9 fb27 	bl	8000af8 <__aeabi_dcmpeq>
 80074aa:	b908      	cbnz	r0, 80074b0 <_dtoa_r+0x190>
 80074ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074b0:	f1bb 0f16 	cmp.w	fp, #22
 80074b4:	d857      	bhi.n	8007566 <_dtoa_r+0x246>
 80074b6:	4b5b      	ldr	r3, [pc, #364]	; (8007624 <_dtoa_r+0x304>)
 80074b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	ec51 0b18 	vmov	r0, r1, d8
 80074c4:	f7f9 fb22 	bl	8000b0c <__aeabi_dcmplt>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d04e      	beq.n	800756a <_dtoa_r+0x24a>
 80074cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074d0:	2300      	movs	r3, #0
 80074d2:	930c      	str	r3, [sp, #48]	; 0x30
 80074d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074d6:	1b5b      	subs	r3, r3, r5
 80074d8:	1e5a      	subs	r2, r3, #1
 80074da:	bf45      	ittet	mi
 80074dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80074e0:	9305      	strmi	r3, [sp, #20]
 80074e2:	2300      	movpl	r3, #0
 80074e4:	2300      	movmi	r3, #0
 80074e6:	9206      	str	r2, [sp, #24]
 80074e8:	bf54      	ite	pl
 80074ea:	9305      	strpl	r3, [sp, #20]
 80074ec:	9306      	strmi	r3, [sp, #24]
 80074ee:	f1bb 0f00 	cmp.w	fp, #0
 80074f2:	db3c      	blt.n	800756e <_dtoa_r+0x24e>
 80074f4:	9b06      	ldr	r3, [sp, #24]
 80074f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80074fa:	445b      	add	r3, fp
 80074fc:	9306      	str	r3, [sp, #24]
 80074fe:	2300      	movs	r3, #0
 8007500:	9308      	str	r3, [sp, #32]
 8007502:	9b07      	ldr	r3, [sp, #28]
 8007504:	2b09      	cmp	r3, #9
 8007506:	d868      	bhi.n	80075da <_dtoa_r+0x2ba>
 8007508:	2b05      	cmp	r3, #5
 800750a:	bfc4      	itt	gt
 800750c:	3b04      	subgt	r3, #4
 800750e:	9307      	strgt	r3, [sp, #28]
 8007510:	9b07      	ldr	r3, [sp, #28]
 8007512:	f1a3 0302 	sub.w	r3, r3, #2
 8007516:	bfcc      	ite	gt
 8007518:	2500      	movgt	r5, #0
 800751a:	2501      	movle	r5, #1
 800751c:	2b03      	cmp	r3, #3
 800751e:	f200 8085 	bhi.w	800762c <_dtoa_r+0x30c>
 8007522:	e8df f003 	tbb	[pc, r3]
 8007526:	3b2e      	.short	0x3b2e
 8007528:	5839      	.short	0x5839
 800752a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800752e:	441d      	add	r5, r3
 8007530:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007534:	2b20      	cmp	r3, #32
 8007536:	bfc1      	itttt	gt
 8007538:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800753c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007540:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007544:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007548:	bfd6      	itet	le
 800754a:	f1c3 0320 	rsble	r3, r3, #32
 800754e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007552:	fa06 f003 	lslle.w	r0, r6, r3
 8007556:	f7f8 ffed 	bl	8000534 <__aeabi_ui2d>
 800755a:	2201      	movs	r2, #1
 800755c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007560:	3d01      	subs	r5, #1
 8007562:	920e      	str	r2, [sp, #56]	; 0x38
 8007564:	e76f      	b.n	8007446 <_dtoa_r+0x126>
 8007566:	2301      	movs	r3, #1
 8007568:	e7b3      	b.n	80074d2 <_dtoa_r+0x1b2>
 800756a:	900c      	str	r0, [sp, #48]	; 0x30
 800756c:	e7b2      	b.n	80074d4 <_dtoa_r+0x1b4>
 800756e:	9b05      	ldr	r3, [sp, #20]
 8007570:	eba3 030b 	sub.w	r3, r3, fp
 8007574:	9305      	str	r3, [sp, #20]
 8007576:	f1cb 0300 	rsb	r3, fp, #0
 800757a:	9308      	str	r3, [sp, #32]
 800757c:	2300      	movs	r3, #0
 800757e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007580:	e7bf      	b.n	8007502 <_dtoa_r+0x1e2>
 8007582:	2300      	movs	r3, #0
 8007584:	9309      	str	r3, [sp, #36]	; 0x24
 8007586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007588:	2b00      	cmp	r3, #0
 800758a:	dc52      	bgt.n	8007632 <_dtoa_r+0x312>
 800758c:	2301      	movs	r3, #1
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	9304      	str	r3, [sp, #16]
 8007592:	461a      	mov	r2, r3
 8007594:	920a      	str	r2, [sp, #40]	; 0x28
 8007596:	e00b      	b.n	80075b0 <_dtoa_r+0x290>
 8007598:	2301      	movs	r3, #1
 800759a:	e7f3      	b.n	8007584 <_dtoa_r+0x264>
 800759c:	2300      	movs	r3, #0
 800759e:	9309      	str	r3, [sp, #36]	; 0x24
 80075a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a2:	445b      	add	r3, fp
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	3301      	adds	r3, #1
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	bfb8      	it	lt
 80075ae:	2301      	movlt	r3, #1
 80075b0:	69e0      	ldr	r0, [r4, #28]
 80075b2:	2100      	movs	r1, #0
 80075b4:	2204      	movs	r2, #4
 80075b6:	f102 0614 	add.w	r6, r2, #20
 80075ba:	429e      	cmp	r6, r3
 80075bc:	d93d      	bls.n	800763a <_dtoa_r+0x31a>
 80075be:	6041      	str	r1, [r0, #4]
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 fd9f 	bl	8008104 <_Balloc>
 80075c6:	9000      	str	r0, [sp, #0]
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d139      	bne.n	8007640 <_dtoa_r+0x320>
 80075cc:	4b16      	ldr	r3, [pc, #88]	; (8007628 <_dtoa_r+0x308>)
 80075ce:	4602      	mov	r2, r0
 80075d0:	f240 11af 	movw	r1, #431	; 0x1af
 80075d4:	e6bd      	b.n	8007352 <_dtoa_r+0x32>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e7e1      	b.n	800759e <_dtoa_r+0x27e>
 80075da:	2501      	movs	r5, #1
 80075dc:	2300      	movs	r3, #0
 80075de:	9307      	str	r3, [sp, #28]
 80075e0:	9509      	str	r5, [sp, #36]	; 0x24
 80075e2:	f04f 33ff 	mov.w	r3, #4294967295
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	9304      	str	r3, [sp, #16]
 80075ea:	2200      	movs	r2, #0
 80075ec:	2312      	movs	r3, #18
 80075ee:	e7d1      	b.n	8007594 <_dtoa_r+0x274>
 80075f0:	636f4361 	.word	0x636f4361
 80075f4:	3fd287a7 	.word	0x3fd287a7
 80075f8:	8b60c8b3 	.word	0x8b60c8b3
 80075fc:	3fc68a28 	.word	0x3fc68a28
 8007600:	509f79fb 	.word	0x509f79fb
 8007604:	3fd34413 	.word	0x3fd34413
 8007608:	080097a9 	.word	0x080097a9
 800760c:	080097c0 	.word	0x080097c0
 8007610:	7ff00000 	.word	0x7ff00000
 8007614:	080097a5 	.word	0x080097a5
 8007618:	0800979c 	.word	0x0800979c
 800761c:	08009779 	.word	0x08009779
 8007620:	3ff80000 	.word	0x3ff80000
 8007624:	080098b0 	.word	0x080098b0
 8007628:	08009818 	.word	0x08009818
 800762c:	2301      	movs	r3, #1
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	e7d7      	b.n	80075e2 <_dtoa_r+0x2c2>
 8007632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	9304      	str	r3, [sp, #16]
 8007638:	e7ba      	b.n	80075b0 <_dtoa_r+0x290>
 800763a:	3101      	adds	r1, #1
 800763c:	0052      	lsls	r2, r2, #1
 800763e:	e7ba      	b.n	80075b6 <_dtoa_r+0x296>
 8007640:	69e3      	ldr	r3, [r4, #28]
 8007642:	9a00      	ldr	r2, [sp, #0]
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	9b04      	ldr	r3, [sp, #16]
 8007648:	2b0e      	cmp	r3, #14
 800764a:	f200 80a8 	bhi.w	800779e <_dtoa_r+0x47e>
 800764e:	2d00      	cmp	r5, #0
 8007650:	f000 80a5 	beq.w	800779e <_dtoa_r+0x47e>
 8007654:	f1bb 0f00 	cmp.w	fp, #0
 8007658:	dd38      	ble.n	80076cc <_dtoa_r+0x3ac>
 800765a:	4bc0      	ldr	r3, [pc, #768]	; (800795c <_dtoa_r+0x63c>)
 800765c:	f00b 020f 	and.w	r2, fp, #15
 8007660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007664:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007668:	e9d3 6700 	ldrd	r6, r7, [r3]
 800766c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007670:	d019      	beq.n	80076a6 <_dtoa_r+0x386>
 8007672:	4bbb      	ldr	r3, [pc, #748]	; (8007960 <_dtoa_r+0x640>)
 8007674:	ec51 0b18 	vmov	r0, r1, d8
 8007678:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800767c:	f7f9 f8fe 	bl	800087c <__aeabi_ddiv>
 8007680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007684:	f008 080f 	and.w	r8, r8, #15
 8007688:	2503      	movs	r5, #3
 800768a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007960 <_dtoa_r+0x640>
 800768e:	f1b8 0f00 	cmp.w	r8, #0
 8007692:	d10a      	bne.n	80076aa <_dtoa_r+0x38a>
 8007694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007698:	4632      	mov	r2, r6
 800769a:	463b      	mov	r3, r7
 800769c:	f7f9 f8ee 	bl	800087c <__aeabi_ddiv>
 80076a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076a4:	e02b      	b.n	80076fe <_dtoa_r+0x3de>
 80076a6:	2502      	movs	r5, #2
 80076a8:	e7ef      	b.n	800768a <_dtoa_r+0x36a>
 80076aa:	f018 0f01 	tst.w	r8, #1
 80076ae:	d008      	beq.n	80076c2 <_dtoa_r+0x3a2>
 80076b0:	4630      	mov	r0, r6
 80076b2:	4639      	mov	r1, r7
 80076b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076b8:	f7f8 ffb6 	bl	8000628 <__aeabi_dmul>
 80076bc:	3501      	adds	r5, #1
 80076be:	4606      	mov	r6, r0
 80076c0:	460f      	mov	r7, r1
 80076c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80076c6:	f109 0908 	add.w	r9, r9, #8
 80076ca:	e7e0      	b.n	800768e <_dtoa_r+0x36e>
 80076cc:	f000 809f 	beq.w	800780e <_dtoa_r+0x4ee>
 80076d0:	f1cb 0600 	rsb	r6, fp, #0
 80076d4:	4ba1      	ldr	r3, [pc, #644]	; (800795c <_dtoa_r+0x63c>)
 80076d6:	4fa2      	ldr	r7, [pc, #648]	; (8007960 <_dtoa_r+0x640>)
 80076d8:	f006 020f 	and.w	r2, r6, #15
 80076dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	ec51 0b18 	vmov	r0, r1, d8
 80076e8:	f7f8 ff9e 	bl	8000628 <__aeabi_dmul>
 80076ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f0:	1136      	asrs	r6, r6, #4
 80076f2:	2300      	movs	r3, #0
 80076f4:	2502      	movs	r5, #2
 80076f6:	2e00      	cmp	r6, #0
 80076f8:	d17e      	bne.n	80077f8 <_dtoa_r+0x4d8>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1d0      	bne.n	80076a0 <_dtoa_r+0x380>
 80076fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007700:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8084 	beq.w	8007812 <_dtoa_r+0x4f2>
 800770a:	4b96      	ldr	r3, [pc, #600]	; (8007964 <_dtoa_r+0x644>)
 800770c:	2200      	movs	r2, #0
 800770e:	4640      	mov	r0, r8
 8007710:	4649      	mov	r1, r9
 8007712:	f7f9 f9fb 	bl	8000b0c <__aeabi_dcmplt>
 8007716:	2800      	cmp	r0, #0
 8007718:	d07b      	beq.n	8007812 <_dtoa_r+0x4f2>
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d078      	beq.n	8007812 <_dtoa_r+0x4f2>
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	dd39      	ble.n	800779a <_dtoa_r+0x47a>
 8007726:	4b90      	ldr	r3, [pc, #576]	; (8007968 <_dtoa_r+0x648>)
 8007728:	2200      	movs	r2, #0
 800772a:	4640      	mov	r0, r8
 800772c:	4649      	mov	r1, r9
 800772e:	f7f8 ff7b 	bl	8000628 <__aeabi_dmul>
 8007732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007736:	9e01      	ldr	r6, [sp, #4]
 8007738:	f10b 37ff 	add.w	r7, fp, #4294967295
 800773c:	3501      	adds	r5, #1
 800773e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007742:	4628      	mov	r0, r5
 8007744:	f7f8 ff06 	bl	8000554 <__aeabi_i2d>
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	f7f8 ff6c 	bl	8000628 <__aeabi_dmul>
 8007750:	4b86      	ldr	r3, [pc, #536]	; (800796c <_dtoa_r+0x64c>)
 8007752:	2200      	movs	r2, #0
 8007754:	f7f8 fdb2 	bl	80002bc <__adddf3>
 8007758:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800775c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007760:	9303      	str	r3, [sp, #12]
 8007762:	2e00      	cmp	r6, #0
 8007764:	d158      	bne.n	8007818 <_dtoa_r+0x4f8>
 8007766:	4b82      	ldr	r3, [pc, #520]	; (8007970 <_dtoa_r+0x650>)
 8007768:	2200      	movs	r2, #0
 800776a:	4640      	mov	r0, r8
 800776c:	4649      	mov	r1, r9
 800776e:	f7f8 fda3 	bl	80002b8 <__aeabi_dsub>
 8007772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007776:	4680      	mov	r8, r0
 8007778:	4689      	mov	r9, r1
 800777a:	f7f9 f9e5 	bl	8000b48 <__aeabi_dcmpgt>
 800777e:	2800      	cmp	r0, #0
 8007780:	f040 8296 	bne.w	8007cb0 <_dtoa_r+0x990>
 8007784:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007788:	4640      	mov	r0, r8
 800778a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800778e:	4649      	mov	r1, r9
 8007790:	f7f9 f9bc 	bl	8000b0c <__aeabi_dcmplt>
 8007794:	2800      	cmp	r0, #0
 8007796:	f040 8289 	bne.w	8007cac <_dtoa_r+0x98c>
 800779a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800779e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f2c0 814e 	blt.w	8007a42 <_dtoa_r+0x722>
 80077a6:	f1bb 0f0e 	cmp.w	fp, #14
 80077aa:	f300 814a 	bgt.w	8007a42 <_dtoa_r+0x722>
 80077ae:	4b6b      	ldr	r3, [pc, #428]	; (800795c <_dtoa_r+0x63c>)
 80077b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f280 80dc 	bge.w	8007978 <_dtoa_r+0x658>
 80077c0:	9b04      	ldr	r3, [sp, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f300 80d8 	bgt.w	8007978 <_dtoa_r+0x658>
 80077c8:	f040 826f 	bne.w	8007caa <_dtoa_r+0x98a>
 80077cc:	4b68      	ldr	r3, [pc, #416]	; (8007970 <_dtoa_r+0x650>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	4640      	mov	r0, r8
 80077d2:	4649      	mov	r1, r9
 80077d4:	f7f8 ff28 	bl	8000628 <__aeabi_dmul>
 80077d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077dc:	f7f9 f9aa 	bl	8000b34 <__aeabi_dcmpge>
 80077e0:	9e04      	ldr	r6, [sp, #16]
 80077e2:	4637      	mov	r7, r6
 80077e4:	2800      	cmp	r0, #0
 80077e6:	f040 8245 	bne.w	8007c74 <_dtoa_r+0x954>
 80077ea:	9d00      	ldr	r5, [sp, #0]
 80077ec:	2331      	movs	r3, #49	; 0x31
 80077ee:	f805 3b01 	strb.w	r3, [r5], #1
 80077f2:	f10b 0b01 	add.w	fp, fp, #1
 80077f6:	e241      	b.n	8007c7c <_dtoa_r+0x95c>
 80077f8:	07f2      	lsls	r2, r6, #31
 80077fa:	d505      	bpl.n	8007808 <_dtoa_r+0x4e8>
 80077fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007800:	f7f8 ff12 	bl	8000628 <__aeabi_dmul>
 8007804:	3501      	adds	r5, #1
 8007806:	2301      	movs	r3, #1
 8007808:	1076      	asrs	r6, r6, #1
 800780a:	3708      	adds	r7, #8
 800780c:	e773      	b.n	80076f6 <_dtoa_r+0x3d6>
 800780e:	2502      	movs	r5, #2
 8007810:	e775      	b.n	80076fe <_dtoa_r+0x3de>
 8007812:	9e04      	ldr	r6, [sp, #16]
 8007814:	465f      	mov	r7, fp
 8007816:	e792      	b.n	800773e <_dtoa_r+0x41e>
 8007818:	9900      	ldr	r1, [sp, #0]
 800781a:	4b50      	ldr	r3, [pc, #320]	; (800795c <_dtoa_r+0x63c>)
 800781c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007820:	4431      	add	r1, r6
 8007822:	9102      	str	r1, [sp, #8]
 8007824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007826:	eeb0 9a47 	vmov.f32	s18, s14
 800782a:	eef0 9a67 	vmov.f32	s19, s15
 800782e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007836:	2900      	cmp	r1, #0
 8007838:	d044      	beq.n	80078c4 <_dtoa_r+0x5a4>
 800783a:	494e      	ldr	r1, [pc, #312]	; (8007974 <_dtoa_r+0x654>)
 800783c:	2000      	movs	r0, #0
 800783e:	f7f9 f81d 	bl	800087c <__aeabi_ddiv>
 8007842:	ec53 2b19 	vmov	r2, r3, d9
 8007846:	f7f8 fd37 	bl	80002b8 <__aeabi_dsub>
 800784a:	9d00      	ldr	r5, [sp, #0]
 800784c:	ec41 0b19 	vmov	d9, r0, r1
 8007850:	4649      	mov	r1, r9
 8007852:	4640      	mov	r0, r8
 8007854:	f7f9 f998 	bl	8000b88 <__aeabi_d2iz>
 8007858:	4606      	mov	r6, r0
 800785a:	f7f8 fe7b 	bl	8000554 <__aeabi_i2d>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4640      	mov	r0, r8
 8007864:	4649      	mov	r1, r9
 8007866:	f7f8 fd27 	bl	80002b8 <__aeabi_dsub>
 800786a:	3630      	adds	r6, #48	; 0x30
 800786c:	f805 6b01 	strb.w	r6, [r5], #1
 8007870:	ec53 2b19 	vmov	r2, r3, d9
 8007874:	4680      	mov	r8, r0
 8007876:	4689      	mov	r9, r1
 8007878:	f7f9 f948 	bl	8000b0c <__aeabi_dcmplt>
 800787c:	2800      	cmp	r0, #0
 800787e:	d164      	bne.n	800794a <_dtoa_r+0x62a>
 8007880:	4642      	mov	r2, r8
 8007882:	464b      	mov	r3, r9
 8007884:	4937      	ldr	r1, [pc, #220]	; (8007964 <_dtoa_r+0x644>)
 8007886:	2000      	movs	r0, #0
 8007888:	f7f8 fd16 	bl	80002b8 <__aeabi_dsub>
 800788c:	ec53 2b19 	vmov	r2, r3, d9
 8007890:	f7f9 f93c 	bl	8000b0c <__aeabi_dcmplt>
 8007894:	2800      	cmp	r0, #0
 8007896:	f040 80b6 	bne.w	8007a06 <_dtoa_r+0x6e6>
 800789a:	9b02      	ldr	r3, [sp, #8]
 800789c:	429d      	cmp	r5, r3
 800789e:	f43f af7c 	beq.w	800779a <_dtoa_r+0x47a>
 80078a2:	4b31      	ldr	r3, [pc, #196]	; (8007968 <_dtoa_r+0x648>)
 80078a4:	ec51 0b19 	vmov	r0, r1, d9
 80078a8:	2200      	movs	r2, #0
 80078aa:	f7f8 febd 	bl	8000628 <__aeabi_dmul>
 80078ae:	4b2e      	ldr	r3, [pc, #184]	; (8007968 <_dtoa_r+0x648>)
 80078b0:	ec41 0b19 	vmov	d9, r0, r1
 80078b4:	2200      	movs	r2, #0
 80078b6:	4640      	mov	r0, r8
 80078b8:	4649      	mov	r1, r9
 80078ba:	f7f8 feb5 	bl	8000628 <__aeabi_dmul>
 80078be:	4680      	mov	r8, r0
 80078c0:	4689      	mov	r9, r1
 80078c2:	e7c5      	b.n	8007850 <_dtoa_r+0x530>
 80078c4:	ec51 0b17 	vmov	r0, r1, d7
 80078c8:	f7f8 feae 	bl	8000628 <__aeabi_dmul>
 80078cc:	9b02      	ldr	r3, [sp, #8]
 80078ce:	9d00      	ldr	r5, [sp, #0]
 80078d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80078d2:	ec41 0b19 	vmov	d9, r0, r1
 80078d6:	4649      	mov	r1, r9
 80078d8:	4640      	mov	r0, r8
 80078da:	f7f9 f955 	bl	8000b88 <__aeabi_d2iz>
 80078de:	4606      	mov	r6, r0
 80078e0:	f7f8 fe38 	bl	8000554 <__aeabi_i2d>
 80078e4:	3630      	adds	r6, #48	; 0x30
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4640      	mov	r0, r8
 80078ec:	4649      	mov	r1, r9
 80078ee:	f7f8 fce3 	bl	80002b8 <__aeabi_dsub>
 80078f2:	f805 6b01 	strb.w	r6, [r5], #1
 80078f6:	9b02      	ldr	r3, [sp, #8]
 80078f8:	429d      	cmp	r5, r3
 80078fa:	4680      	mov	r8, r0
 80078fc:	4689      	mov	r9, r1
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	d124      	bne.n	800794e <_dtoa_r+0x62e>
 8007904:	4b1b      	ldr	r3, [pc, #108]	; (8007974 <_dtoa_r+0x654>)
 8007906:	ec51 0b19 	vmov	r0, r1, d9
 800790a:	f7f8 fcd7 	bl	80002bc <__adddf3>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f9 f917 	bl	8000b48 <__aeabi_dcmpgt>
 800791a:	2800      	cmp	r0, #0
 800791c:	d173      	bne.n	8007a06 <_dtoa_r+0x6e6>
 800791e:	ec53 2b19 	vmov	r2, r3, d9
 8007922:	4914      	ldr	r1, [pc, #80]	; (8007974 <_dtoa_r+0x654>)
 8007924:	2000      	movs	r0, #0
 8007926:	f7f8 fcc7 	bl	80002b8 <__aeabi_dsub>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4640      	mov	r0, r8
 8007930:	4649      	mov	r1, r9
 8007932:	f7f9 f8eb 	bl	8000b0c <__aeabi_dcmplt>
 8007936:	2800      	cmp	r0, #0
 8007938:	f43f af2f 	beq.w	800779a <_dtoa_r+0x47a>
 800793c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800793e:	1e6b      	subs	r3, r5, #1
 8007940:	930f      	str	r3, [sp, #60]	; 0x3c
 8007942:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007946:	2b30      	cmp	r3, #48	; 0x30
 8007948:	d0f8      	beq.n	800793c <_dtoa_r+0x61c>
 800794a:	46bb      	mov	fp, r7
 800794c:	e04a      	b.n	80079e4 <_dtoa_r+0x6c4>
 800794e:	4b06      	ldr	r3, [pc, #24]	; (8007968 <_dtoa_r+0x648>)
 8007950:	f7f8 fe6a 	bl	8000628 <__aeabi_dmul>
 8007954:	4680      	mov	r8, r0
 8007956:	4689      	mov	r9, r1
 8007958:	e7bd      	b.n	80078d6 <_dtoa_r+0x5b6>
 800795a:	bf00      	nop
 800795c:	080098b0 	.word	0x080098b0
 8007960:	08009888 	.word	0x08009888
 8007964:	3ff00000 	.word	0x3ff00000
 8007968:	40240000 	.word	0x40240000
 800796c:	401c0000 	.word	0x401c0000
 8007970:	40140000 	.word	0x40140000
 8007974:	3fe00000 	.word	0x3fe00000
 8007978:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800797c:	9d00      	ldr	r5, [sp, #0]
 800797e:	4642      	mov	r2, r8
 8007980:	464b      	mov	r3, r9
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	f7f8 ff79 	bl	800087c <__aeabi_ddiv>
 800798a:	f7f9 f8fd 	bl	8000b88 <__aeabi_d2iz>
 800798e:	9001      	str	r0, [sp, #4]
 8007990:	f7f8 fde0 	bl	8000554 <__aeabi_i2d>
 8007994:	4642      	mov	r2, r8
 8007996:	464b      	mov	r3, r9
 8007998:	f7f8 fe46 	bl	8000628 <__aeabi_dmul>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4630      	mov	r0, r6
 80079a2:	4639      	mov	r1, r7
 80079a4:	f7f8 fc88 	bl	80002b8 <__aeabi_dsub>
 80079a8:	9e01      	ldr	r6, [sp, #4]
 80079aa:	9f04      	ldr	r7, [sp, #16]
 80079ac:	3630      	adds	r6, #48	; 0x30
 80079ae:	f805 6b01 	strb.w	r6, [r5], #1
 80079b2:	9e00      	ldr	r6, [sp, #0]
 80079b4:	1bae      	subs	r6, r5, r6
 80079b6:	42b7      	cmp	r7, r6
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	d134      	bne.n	8007a28 <_dtoa_r+0x708>
 80079be:	f7f8 fc7d 	bl	80002bc <__adddf3>
 80079c2:	4642      	mov	r2, r8
 80079c4:	464b      	mov	r3, r9
 80079c6:	4606      	mov	r6, r0
 80079c8:	460f      	mov	r7, r1
 80079ca:	f7f9 f8bd 	bl	8000b48 <__aeabi_dcmpgt>
 80079ce:	b9c8      	cbnz	r0, 8007a04 <_dtoa_r+0x6e4>
 80079d0:	4642      	mov	r2, r8
 80079d2:	464b      	mov	r3, r9
 80079d4:	4630      	mov	r0, r6
 80079d6:	4639      	mov	r1, r7
 80079d8:	f7f9 f88e 	bl	8000af8 <__aeabi_dcmpeq>
 80079dc:	b110      	cbz	r0, 80079e4 <_dtoa_r+0x6c4>
 80079de:	9b01      	ldr	r3, [sp, #4]
 80079e0:	07db      	lsls	r3, r3, #31
 80079e2:	d40f      	bmi.n	8007a04 <_dtoa_r+0x6e4>
 80079e4:	4651      	mov	r1, sl
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 fbcc 	bl	8008184 <_Bfree>
 80079ec:	2300      	movs	r3, #0
 80079ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079f0:	702b      	strb	r3, [r5, #0]
 80079f2:	f10b 0301 	add.w	r3, fp, #1
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f43f ace2 	beq.w	80073c4 <_dtoa_r+0xa4>
 8007a00:	601d      	str	r5, [r3, #0]
 8007a02:	e4df      	b.n	80073c4 <_dtoa_r+0xa4>
 8007a04:	465f      	mov	r7, fp
 8007a06:	462b      	mov	r3, r5
 8007a08:	461d      	mov	r5, r3
 8007a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a0e:	2a39      	cmp	r2, #57	; 0x39
 8007a10:	d106      	bne.n	8007a20 <_dtoa_r+0x700>
 8007a12:	9a00      	ldr	r2, [sp, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d1f7      	bne.n	8007a08 <_dtoa_r+0x6e8>
 8007a18:	9900      	ldr	r1, [sp, #0]
 8007a1a:	2230      	movs	r2, #48	; 0x30
 8007a1c:	3701      	adds	r7, #1
 8007a1e:	700a      	strb	r2, [r1, #0]
 8007a20:	781a      	ldrb	r2, [r3, #0]
 8007a22:	3201      	adds	r2, #1
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e790      	b.n	800794a <_dtoa_r+0x62a>
 8007a28:	4ba3      	ldr	r3, [pc, #652]	; (8007cb8 <_dtoa_r+0x998>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f7f8 fdfc 	bl	8000628 <__aeabi_dmul>
 8007a30:	2200      	movs	r2, #0
 8007a32:	2300      	movs	r3, #0
 8007a34:	4606      	mov	r6, r0
 8007a36:	460f      	mov	r7, r1
 8007a38:	f7f9 f85e 	bl	8000af8 <__aeabi_dcmpeq>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d09e      	beq.n	800797e <_dtoa_r+0x65e>
 8007a40:	e7d0      	b.n	80079e4 <_dtoa_r+0x6c4>
 8007a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	f000 80ca 	beq.w	8007bde <_dtoa_r+0x8be>
 8007a4a:	9a07      	ldr	r2, [sp, #28]
 8007a4c:	2a01      	cmp	r2, #1
 8007a4e:	f300 80ad 	bgt.w	8007bac <_dtoa_r+0x88c>
 8007a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	f000 80a5 	beq.w	8007ba4 <_dtoa_r+0x884>
 8007a5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a5e:	9e08      	ldr	r6, [sp, #32]
 8007a60:	9d05      	ldr	r5, [sp, #20]
 8007a62:	9a05      	ldr	r2, [sp, #20]
 8007a64:	441a      	add	r2, r3
 8007a66:	9205      	str	r2, [sp, #20]
 8007a68:	9a06      	ldr	r2, [sp, #24]
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	441a      	add	r2, r3
 8007a6e:	4620      	mov	r0, r4
 8007a70:	9206      	str	r2, [sp, #24]
 8007a72:	f000 fc3d 	bl	80082f0 <__i2b>
 8007a76:	4607      	mov	r7, r0
 8007a78:	b165      	cbz	r5, 8007a94 <_dtoa_r+0x774>
 8007a7a:	9b06      	ldr	r3, [sp, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dd09      	ble.n	8007a94 <_dtoa_r+0x774>
 8007a80:	42ab      	cmp	r3, r5
 8007a82:	9a05      	ldr	r2, [sp, #20]
 8007a84:	bfa8      	it	ge
 8007a86:	462b      	movge	r3, r5
 8007a88:	1ad2      	subs	r2, r2, r3
 8007a8a:	9205      	str	r2, [sp, #20]
 8007a8c:	9a06      	ldr	r2, [sp, #24]
 8007a8e:	1aed      	subs	r5, r5, r3
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	9306      	str	r3, [sp, #24]
 8007a94:	9b08      	ldr	r3, [sp, #32]
 8007a96:	b1f3      	cbz	r3, 8007ad6 <_dtoa_r+0x7b6>
 8007a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 80a3 	beq.w	8007be6 <_dtoa_r+0x8c6>
 8007aa0:	2e00      	cmp	r6, #0
 8007aa2:	dd10      	ble.n	8007ac6 <_dtoa_r+0x7a6>
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4632      	mov	r2, r6
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f000 fce1 	bl	8008470 <__pow5mult>
 8007aae:	4652      	mov	r2, sl
 8007ab0:	4601      	mov	r1, r0
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f000 fc31 	bl	800831c <__multiply>
 8007aba:	4651      	mov	r1, sl
 8007abc:	4680      	mov	r8, r0
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f000 fb60 	bl	8008184 <_Bfree>
 8007ac4:	46c2      	mov	sl, r8
 8007ac6:	9b08      	ldr	r3, [sp, #32]
 8007ac8:	1b9a      	subs	r2, r3, r6
 8007aca:	d004      	beq.n	8007ad6 <_dtoa_r+0x7b6>
 8007acc:	4651      	mov	r1, sl
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 fcce 	bl	8008470 <__pow5mult>
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 fc09 	bl	80082f0 <__i2b>
 8007ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	f340 8081 	ble.w	8007bea <_dtoa_r+0x8ca>
 8007ae8:	461a      	mov	r2, r3
 8007aea:	4601      	mov	r1, r0
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 fcbf 	bl	8008470 <__pow5mult>
 8007af2:	9b07      	ldr	r3, [sp, #28]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	4606      	mov	r6, r0
 8007af8:	dd7a      	ble.n	8007bf0 <_dtoa_r+0x8d0>
 8007afa:	f04f 0800 	mov.w	r8, #0
 8007afe:	6933      	ldr	r3, [r6, #16]
 8007b00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b04:	6918      	ldr	r0, [r3, #16]
 8007b06:	f000 fba5 	bl	8008254 <__hi0bits>
 8007b0a:	f1c0 0020 	rsb	r0, r0, #32
 8007b0e:	9b06      	ldr	r3, [sp, #24]
 8007b10:	4418      	add	r0, r3
 8007b12:	f010 001f 	ands.w	r0, r0, #31
 8007b16:	f000 8094 	beq.w	8007c42 <_dtoa_r+0x922>
 8007b1a:	f1c0 0320 	rsb	r3, r0, #32
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	f340 8085 	ble.w	8007c2e <_dtoa_r+0x90e>
 8007b24:	9b05      	ldr	r3, [sp, #20]
 8007b26:	f1c0 001c 	rsb	r0, r0, #28
 8007b2a:	4403      	add	r3, r0
 8007b2c:	9305      	str	r3, [sp, #20]
 8007b2e:	9b06      	ldr	r3, [sp, #24]
 8007b30:	4403      	add	r3, r0
 8007b32:	4405      	add	r5, r0
 8007b34:	9306      	str	r3, [sp, #24]
 8007b36:	9b05      	ldr	r3, [sp, #20]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	dd05      	ble.n	8007b48 <_dtoa_r+0x828>
 8007b3c:	4651      	mov	r1, sl
 8007b3e:	461a      	mov	r2, r3
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 fcef 	bl	8008524 <__lshift>
 8007b46:	4682      	mov	sl, r0
 8007b48:	9b06      	ldr	r3, [sp, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dd05      	ble.n	8007b5a <_dtoa_r+0x83a>
 8007b4e:	4631      	mov	r1, r6
 8007b50:	461a      	mov	r2, r3
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fce6 	bl	8008524 <__lshift>
 8007b58:	4606      	mov	r6, r0
 8007b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d072      	beq.n	8007c46 <_dtoa_r+0x926>
 8007b60:	4631      	mov	r1, r6
 8007b62:	4650      	mov	r0, sl
 8007b64:	f000 fd4a 	bl	80085fc <__mcmp>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	da6c      	bge.n	8007c46 <_dtoa_r+0x926>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4651      	mov	r1, sl
 8007b70:	220a      	movs	r2, #10
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fb28 	bl	80081c8 <__multadd>
 8007b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b7e:	4682      	mov	sl, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 81b0 	beq.w	8007ee6 <_dtoa_r+0xbc6>
 8007b86:	2300      	movs	r3, #0
 8007b88:	4639      	mov	r1, r7
 8007b8a:	220a      	movs	r2, #10
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 fb1b 	bl	80081c8 <__multadd>
 8007b92:	9b01      	ldr	r3, [sp, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	4607      	mov	r7, r0
 8007b98:	f300 8096 	bgt.w	8007cc8 <_dtoa_r+0x9a8>
 8007b9c:	9b07      	ldr	r3, [sp, #28]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	dc59      	bgt.n	8007c56 <_dtoa_r+0x936>
 8007ba2:	e091      	b.n	8007cc8 <_dtoa_r+0x9a8>
 8007ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ba6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007baa:	e758      	b.n	8007a5e <_dtoa_r+0x73e>
 8007bac:	9b04      	ldr	r3, [sp, #16]
 8007bae:	1e5e      	subs	r6, r3, #1
 8007bb0:	9b08      	ldr	r3, [sp, #32]
 8007bb2:	42b3      	cmp	r3, r6
 8007bb4:	bfbf      	itttt	lt
 8007bb6:	9b08      	ldrlt	r3, [sp, #32]
 8007bb8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007bba:	9608      	strlt	r6, [sp, #32]
 8007bbc:	1af3      	sublt	r3, r6, r3
 8007bbe:	bfb4      	ite	lt
 8007bc0:	18d2      	addlt	r2, r2, r3
 8007bc2:	1b9e      	subge	r6, r3, r6
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	bfbc      	itt	lt
 8007bc8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007bca:	2600      	movlt	r6, #0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfb7      	itett	lt
 8007bd0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007bd4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007bd8:	1a9d      	sublt	r5, r3, r2
 8007bda:	2300      	movlt	r3, #0
 8007bdc:	e741      	b.n	8007a62 <_dtoa_r+0x742>
 8007bde:	9e08      	ldr	r6, [sp, #32]
 8007be0:	9d05      	ldr	r5, [sp, #20]
 8007be2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007be4:	e748      	b.n	8007a78 <_dtoa_r+0x758>
 8007be6:	9a08      	ldr	r2, [sp, #32]
 8007be8:	e770      	b.n	8007acc <_dtoa_r+0x7ac>
 8007bea:	9b07      	ldr	r3, [sp, #28]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	dc19      	bgt.n	8007c24 <_dtoa_r+0x904>
 8007bf0:	9b02      	ldr	r3, [sp, #8]
 8007bf2:	b9bb      	cbnz	r3, 8007c24 <_dtoa_r+0x904>
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bfa:	b99b      	cbnz	r3, 8007c24 <_dtoa_r+0x904>
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c02:	0d1b      	lsrs	r3, r3, #20
 8007c04:	051b      	lsls	r3, r3, #20
 8007c06:	b183      	cbz	r3, 8007c2a <_dtoa_r+0x90a>
 8007c08:	9b05      	ldr	r3, [sp, #20]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	9305      	str	r3, [sp, #20]
 8007c0e:	9b06      	ldr	r3, [sp, #24]
 8007c10:	3301      	adds	r3, #1
 8007c12:	9306      	str	r3, [sp, #24]
 8007c14:	f04f 0801 	mov.w	r8, #1
 8007c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f47f af6f 	bne.w	8007afe <_dtoa_r+0x7de>
 8007c20:	2001      	movs	r0, #1
 8007c22:	e774      	b.n	8007b0e <_dtoa_r+0x7ee>
 8007c24:	f04f 0800 	mov.w	r8, #0
 8007c28:	e7f6      	b.n	8007c18 <_dtoa_r+0x8f8>
 8007c2a:	4698      	mov	r8, r3
 8007c2c:	e7f4      	b.n	8007c18 <_dtoa_r+0x8f8>
 8007c2e:	d082      	beq.n	8007b36 <_dtoa_r+0x816>
 8007c30:	9a05      	ldr	r2, [sp, #20]
 8007c32:	331c      	adds	r3, #28
 8007c34:	441a      	add	r2, r3
 8007c36:	9205      	str	r2, [sp, #20]
 8007c38:	9a06      	ldr	r2, [sp, #24]
 8007c3a:	441a      	add	r2, r3
 8007c3c:	441d      	add	r5, r3
 8007c3e:	9206      	str	r2, [sp, #24]
 8007c40:	e779      	b.n	8007b36 <_dtoa_r+0x816>
 8007c42:	4603      	mov	r3, r0
 8007c44:	e7f4      	b.n	8007c30 <_dtoa_r+0x910>
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	dc37      	bgt.n	8007cbc <_dtoa_r+0x99c>
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	dd34      	ble.n	8007cbc <_dtoa_r+0x99c>
 8007c52:	9b04      	ldr	r3, [sp, #16]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	9b01      	ldr	r3, [sp, #4]
 8007c58:	b963      	cbnz	r3, 8007c74 <_dtoa_r+0x954>
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	2205      	movs	r2, #5
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 fab2 	bl	80081c8 <__multadd>
 8007c64:	4601      	mov	r1, r0
 8007c66:	4606      	mov	r6, r0
 8007c68:	4650      	mov	r0, sl
 8007c6a:	f000 fcc7 	bl	80085fc <__mcmp>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f73f adbb 	bgt.w	80077ea <_dtoa_r+0x4ca>
 8007c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c76:	9d00      	ldr	r5, [sp, #0]
 8007c78:	ea6f 0b03 	mvn.w	fp, r3
 8007c7c:	f04f 0800 	mov.w	r8, #0
 8007c80:	4631      	mov	r1, r6
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 fa7e 	bl	8008184 <_Bfree>
 8007c88:	2f00      	cmp	r7, #0
 8007c8a:	f43f aeab 	beq.w	80079e4 <_dtoa_r+0x6c4>
 8007c8e:	f1b8 0f00 	cmp.w	r8, #0
 8007c92:	d005      	beq.n	8007ca0 <_dtoa_r+0x980>
 8007c94:	45b8      	cmp	r8, r7
 8007c96:	d003      	beq.n	8007ca0 <_dtoa_r+0x980>
 8007c98:	4641      	mov	r1, r8
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f000 fa72 	bl	8008184 <_Bfree>
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 fa6e 	bl	8008184 <_Bfree>
 8007ca8:	e69c      	b.n	80079e4 <_dtoa_r+0x6c4>
 8007caa:	2600      	movs	r6, #0
 8007cac:	4637      	mov	r7, r6
 8007cae:	e7e1      	b.n	8007c74 <_dtoa_r+0x954>
 8007cb0:	46bb      	mov	fp, r7
 8007cb2:	4637      	mov	r7, r6
 8007cb4:	e599      	b.n	80077ea <_dtoa_r+0x4ca>
 8007cb6:	bf00      	nop
 8007cb8:	40240000 	.word	0x40240000
 8007cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 80c8 	beq.w	8007e54 <_dtoa_r+0xb34>
 8007cc4:	9b04      	ldr	r3, [sp, #16]
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	2d00      	cmp	r5, #0
 8007cca:	dd05      	ble.n	8007cd8 <_dtoa_r+0x9b8>
 8007ccc:	4639      	mov	r1, r7
 8007cce:	462a      	mov	r2, r5
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 fc27 	bl	8008524 <__lshift>
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	f1b8 0f00 	cmp.w	r8, #0
 8007cdc:	d05b      	beq.n	8007d96 <_dtoa_r+0xa76>
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 fa0f 	bl	8008104 <_Balloc>
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	b928      	cbnz	r0, 8007cf6 <_dtoa_r+0x9d6>
 8007cea:	4b83      	ldr	r3, [pc, #524]	; (8007ef8 <_dtoa_r+0xbd8>)
 8007cec:	4602      	mov	r2, r0
 8007cee:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007cf2:	f7ff bb2e 	b.w	8007352 <_dtoa_r+0x32>
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	3202      	adds	r2, #2
 8007cfa:	0092      	lsls	r2, r2, #2
 8007cfc:	f107 010c 	add.w	r1, r7, #12
 8007d00:	300c      	adds	r0, #12
 8007d02:	f001 f813 	bl	8008d2c <memcpy>
 8007d06:	2201      	movs	r2, #1
 8007d08:	4629      	mov	r1, r5
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f000 fc0a 	bl	8008524 <__lshift>
 8007d10:	9b00      	ldr	r3, [sp, #0]
 8007d12:	3301      	adds	r3, #1
 8007d14:	9304      	str	r3, [sp, #16]
 8007d16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	9308      	str	r3, [sp, #32]
 8007d1e:	9b02      	ldr	r3, [sp, #8]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	46b8      	mov	r8, r7
 8007d26:	9306      	str	r3, [sp, #24]
 8007d28:	4607      	mov	r7, r0
 8007d2a:	9b04      	ldr	r3, [sp, #16]
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	4650      	mov	r0, sl
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	f7ff fa6b 	bl	800720e <quorem>
 8007d38:	4641      	mov	r1, r8
 8007d3a:	9002      	str	r0, [sp, #8]
 8007d3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d40:	4650      	mov	r0, sl
 8007d42:	f000 fc5b 	bl	80085fc <__mcmp>
 8007d46:	463a      	mov	r2, r7
 8007d48:	9005      	str	r0, [sp, #20]
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f000 fc71 	bl	8008634 <__mdiff>
 8007d52:	68c2      	ldr	r2, [r0, #12]
 8007d54:	4605      	mov	r5, r0
 8007d56:	bb02      	cbnz	r2, 8007d9a <_dtoa_r+0xa7a>
 8007d58:	4601      	mov	r1, r0
 8007d5a:	4650      	mov	r0, sl
 8007d5c:	f000 fc4e 	bl	80085fc <__mcmp>
 8007d60:	4602      	mov	r2, r0
 8007d62:	4629      	mov	r1, r5
 8007d64:	4620      	mov	r0, r4
 8007d66:	9209      	str	r2, [sp, #36]	; 0x24
 8007d68:	f000 fa0c 	bl	8008184 <_Bfree>
 8007d6c:	9b07      	ldr	r3, [sp, #28]
 8007d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d70:	9d04      	ldr	r5, [sp, #16]
 8007d72:	ea43 0102 	orr.w	r1, r3, r2
 8007d76:	9b06      	ldr	r3, [sp, #24]
 8007d78:	4319      	orrs	r1, r3
 8007d7a:	d110      	bne.n	8007d9e <_dtoa_r+0xa7e>
 8007d7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d80:	d029      	beq.n	8007dd6 <_dtoa_r+0xab6>
 8007d82:	9b05      	ldr	r3, [sp, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dd02      	ble.n	8007d8e <_dtoa_r+0xa6e>
 8007d88:	9b02      	ldr	r3, [sp, #8]
 8007d8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007d8e:	9b01      	ldr	r3, [sp, #4]
 8007d90:	f883 9000 	strb.w	r9, [r3]
 8007d94:	e774      	b.n	8007c80 <_dtoa_r+0x960>
 8007d96:	4638      	mov	r0, r7
 8007d98:	e7ba      	b.n	8007d10 <_dtoa_r+0x9f0>
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	e7e1      	b.n	8007d62 <_dtoa_r+0xa42>
 8007d9e:	9b05      	ldr	r3, [sp, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	db04      	blt.n	8007dae <_dtoa_r+0xa8e>
 8007da4:	9907      	ldr	r1, [sp, #28]
 8007da6:	430b      	orrs	r3, r1
 8007da8:	9906      	ldr	r1, [sp, #24]
 8007daa:	430b      	orrs	r3, r1
 8007dac:	d120      	bne.n	8007df0 <_dtoa_r+0xad0>
 8007dae:	2a00      	cmp	r2, #0
 8007db0:	dded      	ble.n	8007d8e <_dtoa_r+0xa6e>
 8007db2:	4651      	mov	r1, sl
 8007db4:	2201      	movs	r2, #1
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fbb4 	bl	8008524 <__lshift>
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4682      	mov	sl, r0
 8007dc0:	f000 fc1c 	bl	80085fc <__mcmp>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	dc03      	bgt.n	8007dd0 <_dtoa_r+0xab0>
 8007dc8:	d1e1      	bne.n	8007d8e <_dtoa_r+0xa6e>
 8007dca:	f019 0f01 	tst.w	r9, #1
 8007dce:	d0de      	beq.n	8007d8e <_dtoa_r+0xa6e>
 8007dd0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007dd4:	d1d8      	bne.n	8007d88 <_dtoa_r+0xa68>
 8007dd6:	9a01      	ldr	r2, [sp, #4]
 8007dd8:	2339      	movs	r3, #57	; 0x39
 8007dda:	7013      	strb	r3, [r2, #0]
 8007ddc:	462b      	mov	r3, r5
 8007dde:	461d      	mov	r5, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007de6:	2a39      	cmp	r2, #57	; 0x39
 8007de8:	d06c      	beq.n	8007ec4 <_dtoa_r+0xba4>
 8007dea:	3201      	adds	r2, #1
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	e747      	b.n	8007c80 <_dtoa_r+0x960>
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	dd07      	ble.n	8007e04 <_dtoa_r+0xae4>
 8007df4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007df8:	d0ed      	beq.n	8007dd6 <_dtoa_r+0xab6>
 8007dfa:	9a01      	ldr	r2, [sp, #4]
 8007dfc:	f109 0301 	add.w	r3, r9, #1
 8007e00:	7013      	strb	r3, [r2, #0]
 8007e02:	e73d      	b.n	8007c80 <_dtoa_r+0x960>
 8007e04:	9b04      	ldr	r3, [sp, #16]
 8007e06:	9a08      	ldr	r2, [sp, #32]
 8007e08:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d043      	beq.n	8007e98 <_dtoa_r+0xb78>
 8007e10:	4651      	mov	r1, sl
 8007e12:	2300      	movs	r3, #0
 8007e14:	220a      	movs	r2, #10
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 f9d6 	bl	80081c8 <__multadd>
 8007e1c:	45b8      	cmp	r8, r7
 8007e1e:	4682      	mov	sl, r0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	f04f 020a 	mov.w	r2, #10
 8007e28:	4641      	mov	r1, r8
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	d107      	bne.n	8007e3e <_dtoa_r+0xb1e>
 8007e2e:	f000 f9cb 	bl	80081c8 <__multadd>
 8007e32:	4680      	mov	r8, r0
 8007e34:	4607      	mov	r7, r0
 8007e36:	9b04      	ldr	r3, [sp, #16]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	e775      	b.n	8007d2a <_dtoa_r+0xa0a>
 8007e3e:	f000 f9c3 	bl	80081c8 <__multadd>
 8007e42:	4639      	mov	r1, r7
 8007e44:	4680      	mov	r8, r0
 8007e46:	2300      	movs	r3, #0
 8007e48:	220a      	movs	r2, #10
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 f9bc 	bl	80081c8 <__multadd>
 8007e50:	4607      	mov	r7, r0
 8007e52:	e7f0      	b.n	8007e36 <_dtoa_r+0xb16>
 8007e54:	9b04      	ldr	r3, [sp, #16]
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	9d00      	ldr	r5, [sp, #0]
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	f7ff f9d6 	bl	800720e <quorem>
 8007e62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e66:	9b00      	ldr	r3, [sp, #0]
 8007e68:	f805 9b01 	strb.w	r9, [r5], #1
 8007e6c:	1aea      	subs	r2, r5, r3
 8007e6e:	9b01      	ldr	r3, [sp, #4]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	dd07      	ble.n	8007e84 <_dtoa_r+0xb64>
 8007e74:	4651      	mov	r1, sl
 8007e76:	2300      	movs	r3, #0
 8007e78:	220a      	movs	r2, #10
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 f9a4 	bl	80081c8 <__multadd>
 8007e80:	4682      	mov	sl, r0
 8007e82:	e7ea      	b.n	8007e5a <_dtoa_r+0xb3a>
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bfc8      	it	gt
 8007e8a:	461d      	movgt	r5, r3
 8007e8c:	9b00      	ldr	r3, [sp, #0]
 8007e8e:	bfd8      	it	le
 8007e90:	2501      	movle	r5, #1
 8007e92:	441d      	add	r5, r3
 8007e94:	f04f 0800 	mov.w	r8, #0
 8007e98:	4651      	mov	r1, sl
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f000 fb41 	bl	8008524 <__lshift>
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	f000 fba9 	bl	80085fc <__mcmp>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	dc96      	bgt.n	8007ddc <_dtoa_r+0xabc>
 8007eae:	d102      	bne.n	8007eb6 <_dtoa_r+0xb96>
 8007eb0:	f019 0f01 	tst.w	r9, #1
 8007eb4:	d192      	bne.n	8007ddc <_dtoa_r+0xabc>
 8007eb6:	462b      	mov	r3, r5
 8007eb8:	461d      	mov	r5, r3
 8007eba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ebe:	2a30      	cmp	r2, #48	; 0x30
 8007ec0:	d0fa      	beq.n	8007eb8 <_dtoa_r+0xb98>
 8007ec2:	e6dd      	b.n	8007c80 <_dtoa_r+0x960>
 8007ec4:	9a00      	ldr	r2, [sp, #0]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d189      	bne.n	8007dde <_dtoa_r+0xabe>
 8007eca:	f10b 0b01 	add.w	fp, fp, #1
 8007ece:	2331      	movs	r3, #49	; 0x31
 8007ed0:	e796      	b.n	8007e00 <_dtoa_r+0xae0>
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <_dtoa_r+0xbdc>)
 8007ed4:	f7ff ba99 	b.w	800740a <_dtoa_r+0xea>
 8007ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f47f aa6d 	bne.w	80073ba <_dtoa_r+0x9a>
 8007ee0:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <_dtoa_r+0xbe0>)
 8007ee2:	f7ff ba92 	b.w	800740a <_dtoa_r+0xea>
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dcb5      	bgt.n	8007e58 <_dtoa_r+0xb38>
 8007eec:	9b07      	ldr	r3, [sp, #28]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	f73f aeb1 	bgt.w	8007c56 <_dtoa_r+0x936>
 8007ef4:	e7b0      	b.n	8007e58 <_dtoa_r+0xb38>
 8007ef6:	bf00      	nop
 8007ef8:	08009818 	.word	0x08009818
 8007efc:	08009778 	.word	0x08009778
 8007f00:	0800979c 	.word	0x0800979c

08007f04 <_free_r>:
 8007f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f06:	2900      	cmp	r1, #0
 8007f08:	d044      	beq.n	8007f94 <_free_r+0x90>
 8007f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f0e:	9001      	str	r0, [sp, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f1a1 0404 	sub.w	r4, r1, #4
 8007f16:	bfb8      	it	lt
 8007f18:	18e4      	addlt	r4, r4, r3
 8007f1a:	f000 f8e7 	bl	80080ec <__malloc_lock>
 8007f1e:	4a1e      	ldr	r2, [pc, #120]	; (8007f98 <_free_r+0x94>)
 8007f20:	9801      	ldr	r0, [sp, #4]
 8007f22:	6813      	ldr	r3, [r2, #0]
 8007f24:	b933      	cbnz	r3, 8007f34 <_free_r+0x30>
 8007f26:	6063      	str	r3, [r4, #4]
 8007f28:	6014      	str	r4, [r2, #0]
 8007f2a:	b003      	add	sp, #12
 8007f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f30:	f000 b8e2 	b.w	80080f8 <__malloc_unlock>
 8007f34:	42a3      	cmp	r3, r4
 8007f36:	d908      	bls.n	8007f4a <_free_r+0x46>
 8007f38:	6825      	ldr	r5, [r4, #0]
 8007f3a:	1961      	adds	r1, r4, r5
 8007f3c:	428b      	cmp	r3, r1
 8007f3e:	bf01      	itttt	eq
 8007f40:	6819      	ldreq	r1, [r3, #0]
 8007f42:	685b      	ldreq	r3, [r3, #4]
 8007f44:	1949      	addeq	r1, r1, r5
 8007f46:	6021      	streq	r1, [r4, #0]
 8007f48:	e7ed      	b.n	8007f26 <_free_r+0x22>
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	b10b      	cbz	r3, 8007f54 <_free_r+0x50>
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	d9fa      	bls.n	8007f4a <_free_r+0x46>
 8007f54:	6811      	ldr	r1, [r2, #0]
 8007f56:	1855      	adds	r5, r2, r1
 8007f58:	42a5      	cmp	r5, r4
 8007f5a:	d10b      	bne.n	8007f74 <_free_r+0x70>
 8007f5c:	6824      	ldr	r4, [r4, #0]
 8007f5e:	4421      	add	r1, r4
 8007f60:	1854      	adds	r4, r2, r1
 8007f62:	42a3      	cmp	r3, r4
 8007f64:	6011      	str	r1, [r2, #0]
 8007f66:	d1e0      	bne.n	8007f2a <_free_r+0x26>
 8007f68:	681c      	ldr	r4, [r3, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	6053      	str	r3, [r2, #4]
 8007f6e:	440c      	add	r4, r1
 8007f70:	6014      	str	r4, [r2, #0]
 8007f72:	e7da      	b.n	8007f2a <_free_r+0x26>
 8007f74:	d902      	bls.n	8007f7c <_free_r+0x78>
 8007f76:	230c      	movs	r3, #12
 8007f78:	6003      	str	r3, [r0, #0]
 8007f7a:	e7d6      	b.n	8007f2a <_free_r+0x26>
 8007f7c:	6825      	ldr	r5, [r4, #0]
 8007f7e:	1961      	adds	r1, r4, r5
 8007f80:	428b      	cmp	r3, r1
 8007f82:	bf04      	itt	eq
 8007f84:	6819      	ldreq	r1, [r3, #0]
 8007f86:	685b      	ldreq	r3, [r3, #4]
 8007f88:	6063      	str	r3, [r4, #4]
 8007f8a:	bf04      	itt	eq
 8007f8c:	1949      	addeq	r1, r1, r5
 8007f8e:	6021      	streq	r1, [r4, #0]
 8007f90:	6054      	str	r4, [r2, #4]
 8007f92:	e7ca      	b.n	8007f2a <_free_r+0x26>
 8007f94:	b003      	add	sp, #12
 8007f96:	bd30      	pop	{r4, r5, pc}
 8007f98:	200005c0 	.word	0x200005c0

08007f9c <malloc>:
 8007f9c:	4b02      	ldr	r3, [pc, #8]	; (8007fa8 <malloc+0xc>)
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	f000 b823 	b.w	8007fec <_malloc_r>
 8007fa6:	bf00      	nop
 8007fa8:	2000007c 	.word	0x2000007c

08007fac <sbrk_aligned>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	4e0e      	ldr	r6, [pc, #56]	; (8007fe8 <sbrk_aligned+0x3c>)
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	6831      	ldr	r1, [r6, #0]
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	b911      	cbnz	r1, 8007fbe <sbrk_aligned+0x12>
 8007fb8:	f000 fea8 	bl	8008d0c <_sbrk_r>
 8007fbc:	6030      	str	r0, [r6, #0]
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f000 fea3 	bl	8008d0c <_sbrk_r>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	d00a      	beq.n	8007fe0 <sbrk_aligned+0x34>
 8007fca:	1cc4      	adds	r4, r0, #3
 8007fcc:	f024 0403 	bic.w	r4, r4, #3
 8007fd0:	42a0      	cmp	r0, r4
 8007fd2:	d007      	beq.n	8007fe4 <sbrk_aligned+0x38>
 8007fd4:	1a21      	subs	r1, r4, r0
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f000 fe98 	bl	8008d0c <_sbrk_r>
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d101      	bne.n	8007fe4 <sbrk_aligned+0x38>
 8007fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}
 8007fe8:	200005c4 	.word	0x200005c4

08007fec <_malloc_r>:
 8007fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff0:	1ccd      	adds	r5, r1, #3
 8007ff2:	f025 0503 	bic.w	r5, r5, #3
 8007ff6:	3508      	adds	r5, #8
 8007ff8:	2d0c      	cmp	r5, #12
 8007ffa:	bf38      	it	cc
 8007ffc:	250c      	movcc	r5, #12
 8007ffe:	2d00      	cmp	r5, #0
 8008000:	4607      	mov	r7, r0
 8008002:	db01      	blt.n	8008008 <_malloc_r+0x1c>
 8008004:	42a9      	cmp	r1, r5
 8008006:	d905      	bls.n	8008014 <_malloc_r+0x28>
 8008008:	230c      	movs	r3, #12
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	2600      	movs	r6, #0
 800800e:	4630      	mov	r0, r6
 8008010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008014:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080e8 <_malloc_r+0xfc>
 8008018:	f000 f868 	bl	80080ec <__malloc_lock>
 800801c:	f8d8 3000 	ldr.w	r3, [r8]
 8008020:	461c      	mov	r4, r3
 8008022:	bb5c      	cbnz	r4, 800807c <_malloc_r+0x90>
 8008024:	4629      	mov	r1, r5
 8008026:	4638      	mov	r0, r7
 8008028:	f7ff ffc0 	bl	8007fac <sbrk_aligned>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	4604      	mov	r4, r0
 8008030:	d155      	bne.n	80080de <_malloc_r+0xf2>
 8008032:	f8d8 4000 	ldr.w	r4, [r8]
 8008036:	4626      	mov	r6, r4
 8008038:	2e00      	cmp	r6, #0
 800803a:	d145      	bne.n	80080c8 <_malloc_r+0xdc>
 800803c:	2c00      	cmp	r4, #0
 800803e:	d048      	beq.n	80080d2 <_malloc_r+0xe6>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	4631      	mov	r1, r6
 8008044:	4638      	mov	r0, r7
 8008046:	eb04 0903 	add.w	r9, r4, r3
 800804a:	f000 fe5f 	bl	8008d0c <_sbrk_r>
 800804e:	4581      	cmp	r9, r0
 8008050:	d13f      	bne.n	80080d2 <_malloc_r+0xe6>
 8008052:	6821      	ldr	r1, [r4, #0]
 8008054:	1a6d      	subs	r5, r5, r1
 8008056:	4629      	mov	r1, r5
 8008058:	4638      	mov	r0, r7
 800805a:	f7ff ffa7 	bl	8007fac <sbrk_aligned>
 800805e:	3001      	adds	r0, #1
 8008060:	d037      	beq.n	80080d2 <_malloc_r+0xe6>
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	442b      	add	r3, r5
 8008066:	6023      	str	r3, [r4, #0]
 8008068:	f8d8 3000 	ldr.w	r3, [r8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d038      	beq.n	80080e2 <_malloc_r+0xf6>
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	42a2      	cmp	r2, r4
 8008074:	d12b      	bne.n	80080ce <_malloc_r+0xe2>
 8008076:	2200      	movs	r2, #0
 8008078:	605a      	str	r2, [r3, #4]
 800807a:	e00f      	b.n	800809c <_malloc_r+0xb0>
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	1b52      	subs	r2, r2, r5
 8008080:	d41f      	bmi.n	80080c2 <_malloc_r+0xd6>
 8008082:	2a0b      	cmp	r2, #11
 8008084:	d917      	bls.n	80080b6 <_malloc_r+0xca>
 8008086:	1961      	adds	r1, r4, r5
 8008088:	42a3      	cmp	r3, r4
 800808a:	6025      	str	r5, [r4, #0]
 800808c:	bf18      	it	ne
 800808e:	6059      	strne	r1, [r3, #4]
 8008090:	6863      	ldr	r3, [r4, #4]
 8008092:	bf08      	it	eq
 8008094:	f8c8 1000 	streq.w	r1, [r8]
 8008098:	5162      	str	r2, [r4, r5]
 800809a:	604b      	str	r3, [r1, #4]
 800809c:	4638      	mov	r0, r7
 800809e:	f104 060b 	add.w	r6, r4, #11
 80080a2:	f000 f829 	bl	80080f8 <__malloc_unlock>
 80080a6:	f026 0607 	bic.w	r6, r6, #7
 80080aa:	1d23      	adds	r3, r4, #4
 80080ac:	1af2      	subs	r2, r6, r3
 80080ae:	d0ae      	beq.n	800800e <_malloc_r+0x22>
 80080b0:	1b9b      	subs	r3, r3, r6
 80080b2:	50a3      	str	r3, [r4, r2]
 80080b4:	e7ab      	b.n	800800e <_malloc_r+0x22>
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	6862      	ldr	r2, [r4, #4]
 80080ba:	d1dd      	bne.n	8008078 <_malloc_r+0x8c>
 80080bc:	f8c8 2000 	str.w	r2, [r8]
 80080c0:	e7ec      	b.n	800809c <_malloc_r+0xb0>
 80080c2:	4623      	mov	r3, r4
 80080c4:	6864      	ldr	r4, [r4, #4]
 80080c6:	e7ac      	b.n	8008022 <_malloc_r+0x36>
 80080c8:	4634      	mov	r4, r6
 80080ca:	6876      	ldr	r6, [r6, #4]
 80080cc:	e7b4      	b.n	8008038 <_malloc_r+0x4c>
 80080ce:	4613      	mov	r3, r2
 80080d0:	e7cc      	b.n	800806c <_malloc_r+0x80>
 80080d2:	230c      	movs	r3, #12
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	4638      	mov	r0, r7
 80080d8:	f000 f80e 	bl	80080f8 <__malloc_unlock>
 80080dc:	e797      	b.n	800800e <_malloc_r+0x22>
 80080de:	6025      	str	r5, [r4, #0]
 80080e0:	e7dc      	b.n	800809c <_malloc_r+0xb0>
 80080e2:	605b      	str	r3, [r3, #4]
 80080e4:	deff      	udf	#255	; 0xff
 80080e6:	bf00      	nop
 80080e8:	200005c0 	.word	0x200005c0

080080ec <__malloc_lock>:
 80080ec:	4801      	ldr	r0, [pc, #4]	; (80080f4 <__malloc_lock+0x8>)
 80080ee:	f7ff b88c 	b.w	800720a <__retarget_lock_acquire_recursive>
 80080f2:	bf00      	nop
 80080f4:	200005bc 	.word	0x200005bc

080080f8 <__malloc_unlock>:
 80080f8:	4801      	ldr	r0, [pc, #4]	; (8008100 <__malloc_unlock+0x8>)
 80080fa:	f7ff b887 	b.w	800720c <__retarget_lock_release_recursive>
 80080fe:	bf00      	nop
 8008100:	200005bc 	.word	0x200005bc

08008104 <_Balloc>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	69c6      	ldr	r6, [r0, #28]
 8008108:	4604      	mov	r4, r0
 800810a:	460d      	mov	r5, r1
 800810c:	b976      	cbnz	r6, 800812c <_Balloc+0x28>
 800810e:	2010      	movs	r0, #16
 8008110:	f7ff ff44 	bl	8007f9c <malloc>
 8008114:	4602      	mov	r2, r0
 8008116:	61e0      	str	r0, [r4, #28]
 8008118:	b920      	cbnz	r0, 8008124 <_Balloc+0x20>
 800811a:	4b18      	ldr	r3, [pc, #96]	; (800817c <_Balloc+0x78>)
 800811c:	4818      	ldr	r0, [pc, #96]	; (8008180 <_Balloc+0x7c>)
 800811e:	216b      	movs	r1, #107	; 0x6b
 8008120:	f000 fe12 	bl	8008d48 <__assert_func>
 8008124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008128:	6006      	str	r6, [r0, #0]
 800812a:	60c6      	str	r6, [r0, #12]
 800812c:	69e6      	ldr	r6, [r4, #28]
 800812e:	68f3      	ldr	r3, [r6, #12]
 8008130:	b183      	cbz	r3, 8008154 <_Balloc+0x50>
 8008132:	69e3      	ldr	r3, [r4, #28]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800813a:	b9b8      	cbnz	r0, 800816c <_Balloc+0x68>
 800813c:	2101      	movs	r1, #1
 800813e:	fa01 f605 	lsl.w	r6, r1, r5
 8008142:	1d72      	adds	r2, r6, #5
 8008144:	0092      	lsls	r2, r2, #2
 8008146:	4620      	mov	r0, r4
 8008148:	f000 fe1c 	bl	8008d84 <_calloc_r>
 800814c:	b160      	cbz	r0, 8008168 <_Balloc+0x64>
 800814e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008152:	e00e      	b.n	8008172 <_Balloc+0x6e>
 8008154:	2221      	movs	r2, #33	; 0x21
 8008156:	2104      	movs	r1, #4
 8008158:	4620      	mov	r0, r4
 800815a:	f000 fe13 	bl	8008d84 <_calloc_r>
 800815e:	69e3      	ldr	r3, [r4, #28]
 8008160:	60f0      	str	r0, [r6, #12]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e4      	bne.n	8008132 <_Balloc+0x2e>
 8008168:	2000      	movs	r0, #0
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	6802      	ldr	r2, [r0, #0]
 800816e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008172:	2300      	movs	r3, #0
 8008174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008178:	e7f7      	b.n	800816a <_Balloc+0x66>
 800817a:	bf00      	nop
 800817c:	080097a9 	.word	0x080097a9
 8008180:	08009829 	.word	0x08009829

08008184 <_Bfree>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	69c6      	ldr	r6, [r0, #28]
 8008188:	4605      	mov	r5, r0
 800818a:	460c      	mov	r4, r1
 800818c:	b976      	cbnz	r6, 80081ac <_Bfree+0x28>
 800818e:	2010      	movs	r0, #16
 8008190:	f7ff ff04 	bl	8007f9c <malloc>
 8008194:	4602      	mov	r2, r0
 8008196:	61e8      	str	r0, [r5, #28]
 8008198:	b920      	cbnz	r0, 80081a4 <_Bfree+0x20>
 800819a:	4b09      	ldr	r3, [pc, #36]	; (80081c0 <_Bfree+0x3c>)
 800819c:	4809      	ldr	r0, [pc, #36]	; (80081c4 <_Bfree+0x40>)
 800819e:	218f      	movs	r1, #143	; 0x8f
 80081a0:	f000 fdd2 	bl	8008d48 <__assert_func>
 80081a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081a8:	6006      	str	r6, [r0, #0]
 80081aa:	60c6      	str	r6, [r0, #12]
 80081ac:	b13c      	cbz	r4, 80081be <_Bfree+0x3a>
 80081ae:	69eb      	ldr	r3, [r5, #28]
 80081b0:	6862      	ldr	r2, [r4, #4]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081b8:	6021      	str	r1, [r4, #0]
 80081ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081be:	bd70      	pop	{r4, r5, r6, pc}
 80081c0:	080097a9 	.word	0x080097a9
 80081c4:	08009829 	.word	0x08009829

080081c8 <__multadd>:
 80081c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081cc:	690d      	ldr	r5, [r1, #16]
 80081ce:	4607      	mov	r7, r0
 80081d0:	460c      	mov	r4, r1
 80081d2:	461e      	mov	r6, r3
 80081d4:	f101 0c14 	add.w	ip, r1, #20
 80081d8:	2000      	movs	r0, #0
 80081da:	f8dc 3000 	ldr.w	r3, [ip]
 80081de:	b299      	uxth	r1, r3
 80081e0:	fb02 6101 	mla	r1, r2, r1, r6
 80081e4:	0c1e      	lsrs	r6, r3, #16
 80081e6:	0c0b      	lsrs	r3, r1, #16
 80081e8:	fb02 3306 	mla	r3, r2, r6, r3
 80081ec:	b289      	uxth	r1, r1
 80081ee:	3001      	adds	r0, #1
 80081f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081f4:	4285      	cmp	r5, r0
 80081f6:	f84c 1b04 	str.w	r1, [ip], #4
 80081fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081fe:	dcec      	bgt.n	80081da <__multadd+0x12>
 8008200:	b30e      	cbz	r6, 8008246 <__multadd+0x7e>
 8008202:	68a3      	ldr	r3, [r4, #8]
 8008204:	42ab      	cmp	r3, r5
 8008206:	dc19      	bgt.n	800823c <__multadd+0x74>
 8008208:	6861      	ldr	r1, [r4, #4]
 800820a:	4638      	mov	r0, r7
 800820c:	3101      	adds	r1, #1
 800820e:	f7ff ff79 	bl	8008104 <_Balloc>
 8008212:	4680      	mov	r8, r0
 8008214:	b928      	cbnz	r0, 8008222 <__multadd+0x5a>
 8008216:	4602      	mov	r2, r0
 8008218:	4b0c      	ldr	r3, [pc, #48]	; (800824c <__multadd+0x84>)
 800821a:	480d      	ldr	r0, [pc, #52]	; (8008250 <__multadd+0x88>)
 800821c:	21ba      	movs	r1, #186	; 0xba
 800821e:	f000 fd93 	bl	8008d48 <__assert_func>
 8008222:	6922      	ldr	r2, [r4, #16]
 8008224:	3202      	adds	r2, #2
 8008226:	f104 010c 	add.w	r1, r4, #12
 800822a:	0092      	lsls	r2, r2, #2
 800822c:	300c      	adds	r0, #12
 800822e:	f000 fd7d 	bl	8008d2c <memcpy>
 8008232:	4621      	mov	r1, r4
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff ffa5 	bl	8008184 <_Bfree>
 800823a:	4644      	mov	r4, r8
 800823c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008240:	3501      	adds	r5, #1
 8008242:	615e      	str	r6, [r3, #20]
 8008244:	6125      	str	r5, [r4, #16]
 8008246:	4620      	mov	r0, r4
 8008248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800824c:	08009818 	.word	0x08009818
 8008250:	08009829 	.word	0x08009829

08008254 <__hi0bits>:
 8008254:	0c03      	lsrs	r3, r0, #16
 8008256:	041b      	lsls	r3, r3, #16
 8008258:	b9d3      	cbnz	r3, 8008290 <__hi0bits+0x3c>
 800825a:	0400      	lsls	r0, r0, #16
 800825c:	2310      	movs	r3, #16
 800825e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008262:	bf04      	itt	eq
 8008264:	0200      	lsleq	r0, r0, #8
 8008266:	3308      	addeq	r3, #8
 8008268:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800826c:	bf04      	itt	eq
 800826e:	0100      	lsleq	r0, r0, #4
 8008270:	3304      	addeq	r3, #4
 8008272:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008276:	bf04      	itt	eq
 8008278:	0080      	lsleq	r0, r0, #2
 800827a:	3302      	addeq	r3, #2
 800827c:	2800      	cmp	r0, #0
 800827e:	db05      	blt.n	800828c <__hi0bits+0x38>
 8008280:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008284:	f103 0301 	add.w	r3, r3, #1
 8008288:	bf08      	it	eq
 800828a:	2320      	moveq	r3, #32
 800828c:	4618      	mov	r0, r3
 800828e:	4770      	bx	lr
 8008290:	2300      	movs	r3, #0
 8008292:	e7e4      	b.n	800825e <__hi0bits+0xa>

08008294 <__lo0bits>:
 8008294:	6803      	ldr	r3, [r0, #0]
 8008296:	f013 0207 	ands.w	r2, r3, #7
 800829a:	d00c      	beq.n	80082b6 <__lo0bits+0x22>
 800829c:	07d9      	lsls	r1, r3, #31
 800829e:	d422      	bmi.n	80082e6 <__lo0bits+0x52>
 80082a0:	079a      	lsls	r2, r3, #30
 80082a2:	bf49      	itett	mi
 80082a4:	085b      	lsrmi	r3, r3, #1
 80082a6:	089b      	lsrpl	r3, r3, #2
 80082a8:	6003      	strmi	r3, [r0, #0]
 80082aa:	2201      	movmi	r2, #1
 80082ac:	bf5c      	itt	pl
 80082ae:	6003      	strpl	r3, [r0, #0]
 80082b0:	2202      	movpl	r2, #2
 80082b2:	4610      	mov	r0, r2
 80082b4:	4770      	bx	lr
 80082b6:	b299      	uxth	r1, r3
 80082b8:	b909      	cbnz	r1, 80082be <__lo0bits+0x2a>
 80082ba:	0c1b      	lsrs	r3, r3, #16
 80082bc:	2210      	movs	r2, #16
 80082be:	b2d9      	uxtb	r1, r3
 80082c0:	b909      	cbnz	r1, 80082c6 <__lo0bits+0x32>
 80082c2:	3208      	adds	r2, #8
 80082c4:	0a1b      	lsrs	r3, r3, #8
 80082c6:	0719      	lsls	r1, r3, #28
 80082c8:	bf04      	itt	eq
 80082ca:	091b      	lsreq	r3, r3, #4
 80082cc:	3204      	addeq	r2, #4
 80082ce:	0799      	lsls	r1, r3, #30
 80082d0:	bf04      	itt	eq
 80082d2:	089b      	lsreq	r3, r3, #2
 80082d4:	3202      	addeq	r2, #2
 80082d6:	07d9      	lsls	r1, r3, #31
 80082d8:	d403      	bmi.n	80082e2 <__lo0bits+0x4e>
 80082da:	085b      	lsrs	r3, r3, #1
 80082dc:	f102 0201 	add.w	r2, r2, #1
 80082e0:	d003      	beq.n	80082ea <__lo0bits+0x56>
 80082e2:	6003      	str	r3, [r0, #0]
 80082e4:	e7e5      	b.n	80082b2 <__lo0bits+0x1e>
 80082e6:	2200      	movs	r2, #0
 80082e8:	e7e3      	b.n	80082b2 <__lo0bits+0x1e>
 80082ea:	2220      	movs	r2, #32
 80082ec:	e7e1      	b.n	80082b2 <__lo0bits+0x1e>
	...

080082f0 <__i2b>:
 80082f0:	b510      	push	{r4, lr}
 80082f2:	460c      	mov	r4, r1
 80082f4:	2101      	movs	r1, #1
 80082f6:	f7ff ff05 	bl	8008104 <_Balloc>
 80082fa:	4602      	mov	r2, r0
 80082fc:	b928      	cbnz	r0, 800830a <__i2b+0x1a>
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <__i2b+0x24>)
 8008300:	4805      	ldr	r0, [pc, #20]	; (8008318 <__i2b+0x28>)
 8008302:	f240 1145 	movw	r1, #325	; 0x145
 8008306:	f000 fd1f 	bl	8008d48 <__assert_func>
 800830a:	2301      	movs	r3, #1
 800830c:	6144      	str	r4, [r0, #20]
 800830e:	6103      	str	r3, [r0, #16]
 8008310:	bd10      	pop	{r4, pc}
 8008312:	bf00      	nop
 8008314:	08009818 	.word	0x08009818
 8008318:	08009829 	.word	0x08009829

0800831c <__multiply>:
 800831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	4691      	mov	r9, r2
 8008322:	690a      	ldr	r2, [r1, #16]
 8008324:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008328:	429a      	cmp	r2, r3
 800832a:	bfb8      	it	lt
 800832c:	460b      	movlt	r3, r1
 800832e:	460c      	mov	r4, r1
 8008330:	bfbc      	itt	lt
 8008332:	464c      	movlt	r4, r9
 8008334:	4699      	movlt	r9, r3
 8008336:	6927      	ldr	r7, [r4, #16]
 8008338:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800833c:	68a3      	ldr	r3, [r4, #8]
 800833e:	6861      	ldr	r1, [r4, #4]
 8008340:	eb07 060a 	add.w	r6, r7, sl
 8008344:	42b3      	cmp	r3, r6
 8008346:	b085      	sub	sp, #20
 8008348:	bfb8      	it	lt
 800834a:	3101      	addlt	r1, #1
 800834c:	f7ff feda 	bl	8008104 <_Balloc>
 8008350:	b930      	cbnz	r0, 8008360 <__multiply+0x44>
 8008352:	4602      	mov	r2, r0
 8008354:	4b44      	ldr	r3, [pc, #272]	; (8008468 <__multiply+0x14c>)
 8008356:	4845      	ldr	r0, [pc, #276]	; (800846c <__multiply+0x150>)
 8008358:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800835c:	f000 fcf4 	bl	8008d48 <__assert_func>
 8008360:	f100 0514 	add.w	r5, r0, #20
 8008364:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008368:	462b      	mov	r3, r5
 800836a:	2200      	movs	r2, #0
 800836c:	4543      	cmp	r3, r8
 800836e:	d321      	bcc.n	80083b4 <__multiply+0x98>
 8008370:	f104 0314 	add.w	r3, r4, #20
 8008374:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008378:	f109 0314 	add.w	r3, r9, #20
 800837c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008380:	9202      	str	r2, [sp, #8]
 8008382:	1b3a      	subs	r2, r7, r4
 8008384:	3a15      	subs	r2, #21
 8008386:	f022 0203 	bic.w	r2, r2, #3
 800838a:	3204      	adds	r2, #4
 800838c:	f104 0115 	add.w	r1, r4, #21
 8008390:	428f      	cmp	r7, r1
 8008392:	bf38      	it	cc
 8008394:	2204      	movcc	r2, #4
 8008396:	9201      	str	r2, [sp, #4]
 8008398:	9a02      	ldr	r2, [sp, #8]
 800839a:	9303      	str	r3, [sp, #12]
 800839c:	429a      	cmp	r2, r3
 800839e:	d80c      	bhi.n	80083ba <__multiply+0x9e>
 80083a0:	2e00      	cmp	r6, #0
 80083a2:	dd03      	ble.n	80083ac <__multiply+0x90>
 80083a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d05b      	beq.n	8008464 <__multiply+0x148>
 80083ac:	6106      	str	r6, [r0, #16]
 80083ae:	b005      	add	sp, #20
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	f843 2b04 	str.w	r2, [r3], #4
 80083b8:	e7d8      	b.n	800836c <__multiply+0x50>
 80083ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80083be:	f1ba 0f00 	cmp.w	sl, #0
 80083c2:	d024      	beq.n	800840e <__multiply+0xf2>
 80083c4:	f104 0e14 	add.w	lr, r4, #20
 80083c8:	46a9      	mov	r9, r5
 80083ca:	f04f 0c00 	mov.w	ip, #0
 80083ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083d2:	f8d9 1000 	ldr.w	r1, [r9]
 80083d6:	fa1f fb82 	uxth.w	fp, r2
 80083da:	b289      	uxth	r1, r1
 80083dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80083e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80083e4:	f8d9 2000 	ldr.w	r2, [r9]
 80083e8:	4461      	add	r1, ip
 80083ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80083f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083f6:	b289      	uxth	r1, r1
 80083f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083fc:	4577      	cmp	r7, lr
 80083fe:	f849 1b04 	str.w	r1, [r9], #4
 8008402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008406:	d8e2      	bhi.n	80083ce <__multiply+0xb2>
 8008408:	9a01      	ldr	r2, [sp, #4]
 800840a:	f845 c002 	str.w	ip, [r5, r2]
 800840e:	9a03      	ldr	r2, [sp, #12]
 8008410:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008414:	3304      	adds	r3, #4
 8008416:	f1b9 0f00 	cmp.w	r9, #0
 800841a:	d021      	beq.n	8008460 <__multiply+0x144>
 800841c:	6829      	ldr	r1, [r5, #0]
 800841e:	f104 0c14 	add.w	ip, r4, #20
 8008422:	46ae      	mov	lr, r5
 8008424:	f04f 0a00 	mov.w	sl, #0
 8008428:	f8bc b000 	ldrh.w	fp, [ip]
 800842c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008430:	fb09 220b 	mla	r2, r9, fp, r2
 8008434:	4452      	add	r2, sl
 8008436:	b289      	uxth	r1, r1
 8008438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800843c:	f84e 1b04 	str.w	r1, [lr], #4
 8008440:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008444:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008448:	f8be 1000 	ldrh.w	r1, [lr]
 800844c:	fb09 110a 	mla	r1, r9, sl, r1
 8008450:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008454:	4567      	cmp	r7, ip
 8008456:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800845a:	d8e5      	bhi.n	8008428 <__multiply+0x10c>
 800845c:	9a01      	ldr	r2, [sp, #4]
 800845e:	50a9      	str	r1, [r5, r2]
 8008460:	3504      	adds	r5, #4
 8008462:	e799      	b.n	8008398 <__multiply+0x7c>
 8008464:	3e01      	subs	r6, #1
 8008466:	e79b      	b.n	80083a0 <__multiply+0x84>
 8008468:	08009818 	.word	0x08009818
 800846c:	08009829 	.word	0x08009829

08008470 <__pow5mult>:
 8008470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008474:	4615      	mov	r5, r2
 8008476:	f012 0203 	ands.w	r2, r2, #3
 800847a:	4606      	mov	r6, r0
 800847c:	460f      	mov	r7, r1
 800847e:	d007      	beq.n	8008490 <__pow5mult+0x20>
 8008480:	4c25      	ldr	r4, [pc, #148]	; (8008518 <__pow5mult+0xa8>)
 8008482:	3a01      	subs	r2, #1
 8008484:	2300      	movs	r3, #0
 8008486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800848a:	f7ff fe9d 	bl	80081c8 <__multadd>
 800848e:	4607      	mov	r7, r0
 8008490:	10ad      	asrs	r5, r5, #2
 8008492:	d03d      	beq.n	8008510 <__pow5mult+0xa0>
 8008494:	69f4      	ldr	r4, [r6, #28]
 8008496:	b97c      	cbnz	r4, 80084b8 <__pow5mult+0x48>
 8008498:	2010      	movs	r0, #16
 800849a:	f7ff fd7f 	bl	8007f9c <malloc>
 800849e:	4602      	mov	r2, r0
 80084a0:	61f0      	str	r0, [r6, #28]
 80084a2:	b928      	cbnz	r0, 80084b0 <__pow5mult+0x40>
 80084a4:	4b1d      	ldr	r3, [pc, #116]	; (800851c <__pow5mult+0xac>)
 80084a6:	481e      	ldr	r0, [pc, #120]	; (8008520 <__pow5mult+0xb0>)
 80084a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80084ac:	f000 fc4c 	bl	8008d48 <__assert_func>
 80084b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084b4:	6004      	str	r4, [r0, #0]
 80084b6:	60c4      	str	r4, [r0, #12]
 80084b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80084bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084c0:	b94c      	cbnz	r4, 80084d6 <__pow5mult+0x66>
 80084c2:	f240 2171 	movw	r1, #625	; 0x271
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7ff ff12 	bl	80082f0 <__i2b>
 80084cc:	2300      	movs	r3, #0
 80084ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80084d2:	4604      	mov	r4, r0
 80084d4:	6003      	str	r3, [r0, #0]
 80084d6:	f04f 0900 	mov.w	r9, #0
 80084da:	07eb      	lsls	r3, r5, #31
 80084dc:	d50a      	bpl.n	80084f4 <__pow5mult+0x84>
 80084de:	4639      	mov	r1, r7
 80084e0:	4622      	mov	r2, r4
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7ff ff1a 	bl	800831c <__multiply>
 80084e8:	4639      	mov	r1, r7
 80084ea:	4680      	mov	r8, r0
 80084ec:	4630      	mov	r0, r6
 80084ee:	f7ff fe49 	bl	8008184 <_Bfree>
 80084f2:	4647      	mov	r7, r8
 80084f4:	106d      	asrs	r5, r5, #1
 80084f6:	d00b      	beq.n	8008510 <__pow5mult+0xa0>
 80084f8:	6820      	ldr	r0, [r4, #0]
 80084fa:	b938      	cbnz	r0, 800850c <__pow5mult+0x9c>
 80084fc:	4622      	mov	r2, r4
 80084fe:	4621      	mov	r1, r4
 8008500:	4630      	mov	r0, r6
 8008502:	f7ff ff0b 	bl	800831c <__multiply>
 8008506:	6020      	str	r0, [r4, #0]
 8008508:	f8c0 9000 	str.w	r9, [r0]
 800850c:	4604      	mov	r4, r0
 800850e:	e7e4      	b.n	80084da <__pow5mult+0x6a>
 8008510:	4638      	mov	r0, r7
 8008512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008516:	bf00      	nop
 8008518:	08009978 	.word	0x08009978
 800851c:	080097a9 	.word	0x080097a9
 8008520:	08009829 	.word	0x08009829

08008524 <__lshift>:
 8008524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008528:	460c      	mov	r4, r1
 800852a:	6849      	ldr	r1, [r1, #4]
 800852c:	6923      	ldr	r3, [r4, #16]
 800852e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008532:	68a3      	ldr	r3, [r4, #8]
 8008534:	4607      	mov	r7, r0
 8008536:	4691      	mov	r9, r2
 8008538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800853c:	f108 0601 	add.w	r6, r8, #1
 8008540:	42b3      	cmp	r3, r6
 8008542:	db0b      	blt.n	800855c <__lshift+0x38>
 8008544:	4638      	mov	r0, r7
 8008546:	f7ff fddd 	bl	8008104 <_Balloc>
 800854a:	4605      	mov	r5, r0
 800854c:	b948      	cbnz	r0, 8008562 <__lshift+0x3e>
 800854e:	4602      	mov	r2, r0
 8008550:	4b28      	ldr	r3, [pc, #160]	; (80085f4 <__lshift+0xd0>)
 8008552:	4829      	ldr	r0, [pc, #164]	; (80085f8 <__lshift+0xd4>)
 8008554:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008558:	f000 fbf6 	bl	8008d48 <__assert_func>
 800855c:	3101      	adds	r1, #1
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	e7ee      	b.n	8008540 <__lshift+0x1c>
 8008562:	2300      	movs	r3, #0
 8008564:	f100 0114 	add.w	r1, r0, #20
 8008568:	f100 0210 	add.w	r2, r0, #16
 800856c:	4618      	mov	r0, r3
 800856e:	4553      	cmp	r3, sl
 8008570:	db33      	blt.n	80085da <__lshift+0xb6>
 8008572:	6920      	ldr	r0, [r4, #16]
 8008574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008578:	f104 0314 	add.w	r3, r4, #20
 800857c:	f019 091f 	ands.w	r9, r9, #31
 8008580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008584:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008588:	d02b      	beq.n	80085e2 <__lshift+0xbe>
 800858a:	f1c9 0e20 	rsb	lr, r9, #32
 800858e:	468a      	mov	sl, r1
 8008590:	2200      	movs	r2, #0
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	fa00 f009 	lsl.w	r0, r0, r9
 8008598:	4310      	orrs	r0, r2
 800859a:	f84a 0b04 	str.w	r0, [sl], #4
 800859e:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a2:	459c      	cmp	ip, r3
 80085a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80085a8:	d8f3      	bhi.n	8008592 <__lshift+0x6e>
 80085aa:	ebac 0304 	sub.w	r3, ip, r4
 80085ae:	3b15      	subs	r3, #21
 80085b0:	f023 0303 	bic.w	r3, r3, #3
 80085b4:	3304      	adds	r3, #4
 80085b6:	f104 0015 	add.w	r0, r4, #21
 80085ba:	4584      	cmp	ip, r0
 80085bc:	bf38      	it	cc
 80085be:	2304      	movcc	r3, #4
 80085c0:	50ca      	str	r2, [r1, r3]
 80085c2:	b10a      	cbz	r2, 80085c8 <__lshift+0xa4>
 80085c4:	f108 0602 	add.w	r6, r8, #2
 80085c8:	3e01      	subs	r6, #1
 80085ca:	4638      	mov	r0, r7
 80085cc:	612e      	str	r6, [r5, #16]
 80085ce:	4621      	mov	r1, r4
 80085d0:	f7ff fdd8 	bl	8008184 <_Bfree>
 80085d4:	4628      	mov	r0, r5
 80085d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085da:	f842 0f04 	str.w	r0, [r2, #4]!
 80085de:	3301      	adds	r3, #1
 80085e0:	e7c5      	b.n	800856e <__lshift+0x4a>
 80085e2:	3904      	subs	r1, #4
 80085e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80085ec:	459c      	cmp	ip, r3
 80085ee:	d8f9      	bhi.n	80085e4 <__lshift+0xc0>
 80085f0:	e7ea      	b.n	80085c8 <__lshift+0xa4>
 80085f2:	bf00      	nop
 80085f4:	08009818 	.word	0x08009818
 80085f8:	08009829 	.word	0x08009829

080085fc <__mcmp>:
 80085fc:	b530      	push	{r4, r5, lr}
 80085fe:	6902      	ldr	r2, [r0, #16]
 8008600:	690c      	ldr	r4, [r1, #16]
 8008602:	1b12      	subs	r2, r2, r4
 8008604:	d10e      	bne.n	8008624 <__mcmp+0x28>
 8008606:	f100 0314 	add.w	r3, r0, #20
 800860a:	3114      	adds	r1, #20
 800860c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008610:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008614:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008618:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800861c:	42a5      	cmp	r5, r4
 800861e:	d003      	beq.n	8008628 <__mcmp+0x2c>
 8008620:	d305      	bcc.n	800862e <__mcmp+0x32>
 8008622:	2201      	movs	r2, #1
 8008624:	4610      	mov	r0, r2
 8008626:	bd30      	pop	{r4, r5, pc}
 8008628:	4283      	cmp	r3, r0
 800862a:	d3f3      	bcc.n	8008614 <__mcmp+0x18>
 800862c:	e7fa      	b.n	8008624 <__mcmp+0x28>
 800862e:	f04f 32ff 	mov.w	r2, #4294967295
 8008632:	e7f7      	b.n	8008624 <__mcmp+0x28>

08008634 <__mdiff>:
 8008634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	460c      	mov	r4, r1
 800863a:	4606      	mov	r6, r0
 800863c:	4611      	mov	r1, r2
 800863e:	4620      	mov	r0, r4
 8008640:	4690      	mov	r8, r2
 8008642:	f7ff ffdb 	bl	80085fc <__mcmp>
 8008646:	1e05      	subs	r5, r0, #0
 8008648:	d110      	bne.n	800866c <__mdiff+0x38>
 800864a:	4629      	mov	r1, r5
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff fd59 	bl	8008104 <_Balloc>
 8008652:	b930      	cbnz	r0, 8008662 <__mdiff+0x2e>
 8008654:	4b3a      	ldr	r3, [pc, #232]	; (8008740 <__mdiff+0x10c>)
 8008656:	4602      	mov	r2, r0
 8008658:	f240 2137 	movw	r1, #567	; 0x237
 800865c:	4839      	ldr	r0, [pc, #228]	; (8008744 <__mdiff+0x110>)
 800865e:	f000 fb73 	bl	8008d48 <__assert_func>
 8008662:	2301      	movs	r3, #1
 8008664:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866c:	bfa4      	itt	ge
 800866e:	4643      	movge	r3, r8
 8008670:	46a0      	movge	r8, r4
 8008672:	4630      	mov	r0, r6
 8008674:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008678:	bfa6      	itte	ge
 800867a:	461c      	movge	r4, r3
 800867c:	2500      	movge	r5, #0
 800867e:	2501      	movlt	r5, #1
 8008680:	f7ff fd40 	bl	8008104 <_Balloc>
 8008684:	b920      	cbnz	r0, 8008690 <__mdiff+0x5c>
 8008686:	4b2e      	ldr	r3, [pc, #184]	; (8008740 <__mdiff+0x10c>)
 8008688:	4602      	mov	r2, r0
 800868a:	f240 2145 	movw	r1, #581	; 0x245
 800868e:	e7e5      	b.n	800865c <__mdiff+0x28>
 8008690:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008694:	6926      	ldr	r6, [r4, #16]
 8008696:	60c5      	str	r5, [r0, #12]
 8008698:	f104 0914 	add.w	r9, r4, #20
 800869c:	f108 0514 	add.w	r5, r8, #20
 80086a0:	f100 0e14 	add.w	lr, r0, #20
 80086a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086ac:	f108 0210 	add.w	r2, r8, #16
 80086b0:	46f2      	mov	sl, lr
 80086b2:	2100      	movs	r1, #0
 80086b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80086b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086bc:	fa11 f88b 	uxtah	r8, r1, fp
 80086c0:	b299      	uxth	r1, r3
 80086c2:	0c1b      	lsrs	r3, r3, #16
 80086c4:	eba8 0801 	sub.w	r8, r8, r1
 80086c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086d0:	fa1f f888 	uxth.w	r8, r8
 80086d4:	1419      	asrs	r1, r3, #16
 80086d6:	454e      	cmp	r6, r9
 80086d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086dc:	f84a 3b04 	str.w	r3, [sl], #4
 80086e0:	d8e8      	bhi.n	80086b4 <__mdiff+0x80>
 80086e2:	1b33      	subs	r3, r6, r4
 80086e4:	3b15      	subs	r3, #21
 80086e6:	f023 0303 	bic.w	r3, r3, #3
 80086ea:	3304      	adds	r3, #4
 80086ec:	3415      	adds	r4, #21
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	bf38      	it	cc
 80086f2:	2304      	movcc	r3, #4
 80086f4:	441d      	add	r5, r3
 80086f6:	4473      	add	r3, lr
 80086f8:	469e      	mov	lr, r3
 80086fa:	462e      	mov	r6, r5
 80086fc:	4566      	cmp	r6, ip
 80086fe:	d30e      	bcc.n	800871e <__mdiff+0xea>
 8008700:	f10c 0203 	add.w	r2, ip, #3
 8008704:	1b52      	subs	r2, r2, r5
 8008706:	f022 0203 	bic.w	r2, r2, #3
 800870a:	3d03      	subs	r5, #3
 800870c:	45ac      	cmp	ip, r5
 800870e:	bf38      	it	cc
 8008710:	2200      	movcc	r2, #0
 8008712:	4413      	add	r3, r2
 8008714:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008718:	b17a      	cbz	r2, 800873a <__mdiff+0x106>
 800871a:	6107      	str	r7, [r0, #16]
 800871c:	e7a4      	b.n	8008668 <__mdiff+0x34>
 800871e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008722:	fa11 f288 	uxtah	r2, r1, r8
 8008726:	1414      	asrs	r4, r2, #16
 8008728:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800872c:	b292      	uxth	r2, r2
 800872e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008732:	f84e 2b04 	str.w	r2, [lr], #4
 8008736:	1421      	asrs	r1, r4, #16
 8008738:	e7e0      	b.n	80086fc <__mdiff+0xc8>
 800873a:	3f01      	subs	r7, #1
 800873c:	e7ea      	b.n	8008714 <__mdiff+0xe0>
 800873e:	bf00      	nop
 8008740:	08009818 	.word	0x08009818
 8008744:	08009829 	.word	0x08009829

08008748 <__d2b>:
 8008748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800874c:	460f      	mov	r7, r1
 800874e:	2101      	movs	r1, #1
 8008750:	ec59 8b10 	vmov	r8, r9, d0
 8008754:	4616      	mov	r6, r2
 8008756:	f7ff fcd5 	bl	8008104 <_Balloc>
 800875a:	4604      	mov	r4, r0
 800875c:	b930      	cbnz	r0, 800876c <__d2b+0x24>
 800875e:	4602      	mov	r2, r0
 8008760:	4b24      	ldr	r3, [pc, #144]	; (80087f4 <__d2b+0xac>)
 8008762:	4825      	ldr	r0, [pc, #148]	; (80087f8 <__d2b+0xb0>)
 8008764:	f240 310f 	movw	r1, #783	; 0x30f
 8008768:	f000 faee 	bl	8008d48 <__assert_func>
 800876c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008770:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008774:	bb2d      	cbnz	r5, 80087c2 <__d2b+0x7a>
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	f1b8 0300 	subs.w	r3, r8, #0
 800877c:	d026      	beq.n	80087cc <__d2b+0x84>
 800877e:	4668      	mov	r0, sp
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	f7ff fd87 	bl	8008294 <__lo0bits>
 8008786:	e9dd 1200 	ldrd	r1, r2, [sp]
 800878a:	b1e8      	cbz	r0, 80087c8 <__d2b+0x80>
 800878c:	f1c0 0320 	rsb	r3, r0, #32
 8008790:	fa02 f303 	lsl.w	r3, r2, r3
 8008794:	430b      	orrs	r3, r1
 8008796:	40c2      	lsrs	r2, r0
 8008798:	6163      	str	r3, [r4, #20]
 800879a:	9201      	str	r2, [sp, #4]
 800879c:	9b01      	ldr	r3, [sp, #4]
 800879e:	61a3      	str	r3, [r4, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bf14      	ite	ne
 80087a4:	2202      	movne	r2, #2
 80087a6:	2201      	moveq	r2, #1
 80087a8:	6122      	str	r2, [r4, #16]
 80087aa:	b1bd      	cbz	r5, 80087dc <__d2b+0x94>
 80087ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087b0:	4405      	add	r5, r0
 80087b2:	603d      	str	r5, [r7, #0]
 80087b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087b8:	6030      	str	r0, [r6, #0]
 80087ba:	4620      	mov	r0, r4
 80087bc:	b003      	add	sp, #12
 80087be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087c6:	e7d6      	b.n	8008776 <__d2b+0x2e>
 80087c8:	6161      	str	r1, [r4, #20]
 80087ca:	e7e7      	b.n	800879c <__d2b+0x54>
 80087cc:	a801      	add	r0, sp, #4
 80087ce:	f7ff fd61 	bl	8008294 <__lo0bits>
 80087d2:	9b01      	ldr	r3, [sp, #4]
 80087d4:	6163      	str	r3, [r4, #20]
 80087d6:	3020      	adds	r0, #32
 80087d8:	2201      	movs	r2, #1
 80087da:	e7e5      	b.n	80087a8 <__d2b+0x60>
 80087dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087e4:	6038      	str	r0, [r7, #0]
 80087e6:	6918      	ldr	r0, [r3, #16]
 80087e8:	f7ff fd34 	bl	8008254 <__hi0bits>
 80087ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087f0:	e7e2      	b.n	80087b8 <__d2b+0x70>
 80087f2:	bf00      	nop
 80087f4:	08009818 	.word	0x08009818
 80087f8:	08009829 	.word	0x08009829

080087fc <__sfputc_r>:
 80087fc:	6893      	ldr	r3, [r2, #8]
 80087fe:	3b01      	subs	r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	b410      	push	{r4}
 8008804:	6093      	str	r3, [r2, #8]
 8008806:	da08      	bge.n	800881a <__sfputc_r+0x1e>
 8008808:	6994      	ldr	r4, [r2, #24]
 800880a:	42a3      	cmp	r3, r4
 800880c:	db01      	blt.n	8008812 <__sfputc_r+0x16>
 800880e:	290a      	cmp	r1, #10
 8008810:	d103      	bne.n	800881a <__sfputc_r+0x1e>
 8008812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008816:	f000 b9e3 	b.w	8008be0 <__swbuf_r>
 800881a:	6813      	ldr	r3, [r2, #0]
 800881c:	1c58      	adds	r0, r3, #1
 800881e:	6010      	str	r0, [r2, #0]
 8008820:	7019      	strb	r1, [r3, #0]
 8008822:	4608      	mov	r0, r1
 8008824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008828:	4770      	bx	lr

0800882a <__sfputs_r>:
 800882a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882c:	4606      	mov	r6, r0
 800882e:	460f      	mov	r7, r1
 8008830:	4614      	mov	r4, r2
 8008832:	18d5      	adds	r5, r2, r3
 8008834:	42ac      	cmp	r4, r5
 8008836:	d101      	bne.n	800883c <__sfputs_r+0x12>
 8008838:	2000      	movs	r0, #0
 800883a:	e007      	b.n	800884c <__sfputs_r+0x22>
 800883c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008840:	463a      	mov	r2, r7
 8008842:	4630      	mov	r0, r6
 8008844:	f7ff ffda 	bl	80087fc <__sfputc_r>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d1f3      	bne.n	8008834 <__sfputs_r+0xa>
 800884c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008850 <_vfiprintf_r>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	460d      	mov	r5, r1
 8008856:	b09d      	sub	sp, #116	; 0x74
 8008858:	4614      	mov	r4, r2
 800885a:	4698      	mov	r8, r3
 800885c:	4606      	mov	r6, r0
 800885e:	b118      	cbz	r0, 8008868 <_vfiprintf_r+0x18>
 8008860:	6a03      	ldr	r3, [r0, #32]
 8008862:	b90b      	cbnz	r3, 8008868 <_vfiprintf_r+0x18>
 8008864:	f7fe fbc8 	bl	8006ff8 <__sinit>
 8008868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800886a:	07d9      	lsls	r1, r3, #31
 800886c:	d405      	bmi.n	800887a <_vfiprintf_r+0x2a>
 800886e:	89ab      	ldrh	r3, [r5, #12]
 8008870:	059a      	lsls	r2, r3, #22
 8008872:	d402      	bmi.n	800887a <_vfiprintf_r+0x2a>
 8008874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008876:	f7fe fcc8 	bl	800720a <__retarget_lock_acquire_recursive>
 800887a:	89ab      	ldrh	r3, [r5, #12]
 800887c:	071b      	lsls	r3, r3, #28
 800887e:	d501      	bpl.n	8008884 <_vfiprintf_r+0x34>
 8008880:	692b      	ldr	r3, [r5, #16]
 8008882:	b99b      	cbnz	r3, 80088ac <_vfiprintf_r+0x5c>
 8008884:	4629      	mov	r1, r5
 8008886:	4630      	mov	r0, r6
 8008888:	f000 f9e8 	bl	8008c5c <__swsetup_r>
 800888c:	b170      	cbz	r0, 80088ac <_vfiprintf_r+0x5c>
 800888e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008890:	07dc      	lsls	r4, r3, #31
 8008892:	d504      	bpl.n	800889e <_vfiprintf_r+0x4e>
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	b01d      	add	sp, #116	; 0x74
 800889a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889e:	89ab      	ldrh	r3, [r5, #12]
 80088a0:	0598      	lsls	r0, r3, #22
 80088a2:	d4f7      	bmi.n	8008894 <_vfiprintf_r+0x44>
 80088a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088a6:	f7fe fcb1 	bl	800720c <__retarget_lock_release_recursive>
 80088aa:	e7f3      	b.n	8008894 <_vfiprintf_r+0x44>
 80088ac:	2300      	movs	r3, #0
 80088ae:	9309      	str	r3, [sp, #36]	; 0x24
 80088b0:	2320      	movs	r3, #32
 80088b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ba:	2330      	movs	r3, #48	; 0x30
 80088bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008a70 <_vfiprintf_r+0x220>
 80088c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088c4:	f04f 0901 	mov.w	r9, #1
 80088c8:	4623      	mov	r3, r4
 80088ca:	469a      	mov	sl, r3
 80088cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d0:	b10a      	cbz	r2, 80088d6 <_vfiprintf_r+0x86>
 80088d2:	2a25      	cmp	r2, #37	; 0x25
 80088d4:	d1f9      	bne.n	80088ca <_vfiprintf_r+0x7a>
 80088d6:	ebba 0b04 	subs.w	fp, sl, r4
 80088da:	d00b      	beq.n	80088f4 <_vfiprintf_r+0xa4>
 80088dc:	465b      	mov	r3, fp
 80088de:	4622      	mov	r2, r4
 80088e0:	4629      	mov	r1, r5
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7ff ffa1 	bl	800882a <__sfputs_r>
 80088e8:	3001      	adds	r0, #1
 80088ea:	f000 80a9 	beq.w	8008a40 <_vfiprintf_r+0x1f0>
 80088ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088f0:	445a      	add	r2, fp
 80088f2:	9209      	str	r2, [sp, #36]	; 0x24
 80088f4:	f89a 3000 	ldrb.w	r3, [sl]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80a1 	beq.w	8008a40 <_vfiprintf_r+0x1f0>
 80088fe:	2300      	movs	r3, #0
 8008900:	f04f 32ff 	mov.w	r2, #4294967295
 8008904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008908:	f10a 0a01 	add.w	sl, sl, #1
 800890c:	9304      	str	r3, [sp, #16]
 800890e:	9307      	str	r3, [sp, #28]
 8008910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008914:	931a      	str	r3, [sp, #104]	; 0x68
 8008916:	4654      	mov	r4, sl
 8008918:	2205      	movs	r2, #5
 800891a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891e:	4854      	ldr	r0, [pc, #336]	; (8008a70 <_vfiprintf_r+0x220>)
 8008920:	f7f7 fc6e 	bl	8000200 <memchr>
 8008924:	9a04      	ldr	r2, [sp, #16]
 8008926:	b9d8      	cbnz	r0, 8008960 <_vfiprintf_r+0x110>
 8008928:	06d1      	lsls	r1, r2, #27
 800892a:	bf44      	itt	mi
 800892c:	2320      	movmi	r3, #32
 800892e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008932:	0713      	lsls	r3, r2, #28
 8008934:	bf44      	itt	mi
 8008936:	232b      	movmi	r3, #43	; 0x2b
 8008938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800893c:	f89a 3000 	ldrb.w	r3, [sl]
 8008940:	2b2a      	cmp	r3, #42	; 0x2a
 8008942:	d015      	beq.n	8008970 <_vfiprintf_r+0x120>
 8008944:	9a07      	ldr	r2, [sp, #28]
 8008946:	4654      	mov	r4, sl
 8008948:	2000      	movs	r0, #0
 800894a:	f04f 0c0a 	mov.w	ip, #10
 800894e:	4621      	mov	r1, r4
 8008950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008954:	3b30      	subs	r3, #48	; 0x30
 8008956:	2b09      	cmp	r3, #9
 8008958:	d94d      	bls.n	80089f6 <_vfiprintf_r+0x1a6>
 800895a:	b1b0      	cbz	r0, 800898a <_vfiprintf_r+0x13a>
 800895c:	9207      	str	r2, [sp, #28]
 800895e:	e014      	b.n	800898a <_vfiprintf_r+0x13a>
 8008960:	eba0 0308 	sub.w	r3, r0, r8
 8008964:	fa09 f303 	lsl.w	r3, r9, r3
 8008968:	4313      	orrs	r3, r2
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	46a2      	mov	sl, r4
 800896e:	e7d2      	b.n	8008916 <_vfiprintf_r+0xc6>
 8008970:	9b03      	ldr	r3, [sp, #12]
 8008972:	1d19      	adds	r1, r3, #4
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	9103      	str	r1, [sp, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	bfbb      	ittet	lt
 800897c:	425b      	neglt	r3, r3
 800897e:	f042 0202 	orrlt.w	r2, r2, #2
 8008982:	9307      	strge	r3, [sp, #28]
 8008984:	9307      	strlt	r3, [sp, #28]
 8008986:	bfb8      	it	lt
 8008988:	9204      	strlt	r2, [sp, #16]
 800898a:	7823      	ldrb	r3, [r4, #0]
 800898c:	2b2e      	cmp	r3, #46	; 0x2e
 800898e:	d10c      	bne.n	80089aa <_vfiprintf_r+0x15a>
 8008990:	7863      	ldrb	r3, [r4, #1]
 8008992:	2b2a      	cmp	r3, #42	; 0x2a
 8008994:	d134      	bne.n	8008a00 <_vfiprintf_r+0x1b0>
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	1d1a      	adds	r2, r3, #4
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	9203      	str	r2, [sp, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfb8      	it	lt
 80089a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80089a6:	3402      	adds	r4, #2
 80089a8:	9305      	str	r3, [sp, #20]
 80089aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a80 <_vfiprintf_r+0x230>
 80089ae:	7821      	ldrb	r1, [r4, #0]
 80089b0:	2203      	movs	r2, #3
 80089b2:	4650      	mov	r0, sl
 80089b4:	f7f7 fc24 	bl	8000200 <memchr>
 80089b8:	b138      	cbz	r0, 80089ca <_vfiprintf_r+0x17a>
 80089ba:	9b04      	ldr	r3, [sp, #16]
 80089bc:	eba0 000a 	sub.w	r0, r0, sl
 80089c0:	2240      	movs	r2, #64	; 0x40
 80089c2:	4082      	lsls	r2, r0
 80089c4:	4313      	orrs	r3, r2
 80089c6:	3401      	adds	r4, #1
 80089c8:	9304      	str	r3, [sp, #16]
 80089ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ce:	4829      	ldr	r0, [pc, #164]	; (8008a74 <_vfiprintf_r+0x224>)
 80089d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089d4:	2206      	movs	r2, #6
 80089d6:	f7f7 fc13 	bl	8000200 <memchr>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d03f      	beq.n	8008a5e <_vfiprintf_r+0x20e>
 80089de:	4b26      	ldr	r3, [pc, #152]	; (8008a78 <_vfiprintf_r+0x228>)
 80089e0:	bb1b      	cbnz	r3, 8008a2a <_vfiprintf_r+0x1da>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	3307      	adds	r3, #7
 80089e6:	f023 0307 	bic.w	r3, r3, #7
 80089ea:	3308      	adds	r3, #8
 80089ec:	9303      	str	r3, [sp, #12]
 80089ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f0:	443b      	add	r3, r7
 80089f2:	9309      	str	r3, [sp, #36]	; 0x24
 80089f4:	e768      	b.n	80088c8 <_vfiprintf_r+0x78>
 80089f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80089fa:	460c      	mov	r4, r1
 80089fc:	2001      	movs	r0, #1
 80089fe:	e7a6      	b.n	800894e <_vfiprintf_r+0xfe>
 8008a00:	2300      	movs	r3, #0
 8008a02:	3401      	adds	r4, #1
 8008a04:	9305      	str	r3, [sp, #20]
 8008a06:	4619      	mov	r1, r3
 8008a08:	f04f 0c0a 	mov.w	ip, #10
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a12:	3a30      	subs	r2, #48	; 0x30
 8008a14:	2a09      	cmp	r2, #9
 8008a16:	d903      	bls.n	8008a20 <_vfiprintf_r+0x1d0>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0c6      	beq.n	80089aa <_vfiprintf_r+0x15a>
 8008a1c:	9105      	str	r1, [sp, #20]
 8008a1e:	e7c4      	b.n	80089aa <_vfiprintf_r+0x15a>
 8008a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a24:	4604      	mov	r4, r0
 8008a26:	2301      	movs	r3, #1
 8008a28:	e7f0      	b.n	8008a0c <_vfiprintf_r+0x1bc>
 8008a2a:	ab03      	add	r3, sp, #12
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <_vfiprintf_r+0x22c>)
 8008a32:	a904      	add	r1, sp, #16
 8008a34:	4630      	mov	r0, r6
 8008a36:	f7fd fe8d 	bl	8006754 <_printf_float>
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	1c78      	adds	r0, r7, #1
 8008a3e:	d1d6      	bne.n	80089ee <_vfiprintf_r+0x19e>
 8008a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a42:	07d9      	lsls	r1, r3, #31
 8008a44:	d405      	bmi.n	8008a52 <_vfiprintf_r+0x202>
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	059a      	lsls	r2, r3, #22
 8008a4a:	d402      	bmi.n	8008a52 <_vfiprintf_r+0x202>
 8008a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a4e:	f7fe fbdd 	bl	800720c <__retarget_lock_release_recursive>
 8008a52:	89ab      	ldrh	r3, [r5, #12]
 8008a54:	065b      	lsls	r3, r3, #25
 8008a56:	f53f af1d 	bmi.w	8008894 <_vfiprintf_r+0x44>
 8008a5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a5c:	e71c      	b.n	8008898 <_vfiprintf_r+0x48>
 8008a5e:	ab03      	add	r3, sp, #12
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	462a      	mov	r2, r5
 8008a64:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <_vfiprintf_r+0x22c>)
 8008a66:	a904      	add	r1, sp, #16
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7fe f917 	bl	8006c9c <_printf_i>
 8008a6e:	e7e4      	b.n	8008a3a <_vfiprintf_r+0x1ea>
 8008a70:	08009984 	.word	0x08009984
 8008a74:	0800998e 	.word	0x0800998e
 8008a78:	08006755 	.word	0x08006755
 8008a7c:	0800882b 	.word	0x0800882b
 8008a80:	0800998a 	.word	0x0800998a

08008a84 <__sflush_r>:
 8008a84:	898a      	ldrh	r2, [r1, #12]
 8008a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	0710      	lsls	r0, r2, #28
 8008a8e:	460c      	mov	r4, r1
 8008a90:	d458      	bmi.n	8008b44 <__sflush_r+0xc0>
 8008a92:	684b      	ldr	r3, [r1, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc05      	bgt.n	8008aa4 <__sflush_r+0x20>
 8008a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dc02      	bgt.n	8008aa4 <__sflush_r+0x20>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	d0f9      	beq.n	8008a9e <__sflush_r+0x1a>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ab0:	682f      	ldr	r7, [r5, #0]
 8008ab2:	6a21      	ldr	r1, [r4, #32]
 8008ab4:	602b      	str	r3, [r5, #0]
 8008ab6:	d032      	beq.n	8008b1e <__sflush_r+0x9a>
 8008ab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	075a      	lsls	r2, r3, #29
 8008abe:	d505      	bpl.n	8008acc <__sflush_r+0x48>
 8008ac0:	6863      	ldr	r3, [r4, #4]
 8008ac2:	1ac0      	subs	r0, r0, r3
 8008ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ac6:	b10b      	cbz	r3, 8008acc <__sflush_r+0x48>
 8008ac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008aca:	1ac0      	subs	r0, r0, r3
 8008acc:	2300      	movs	r3, #0
 8008ace:	4602      	mov	r2, r0
 8008ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ad2:	6a21      	ldr	r1, [r4, #32]
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b0      	blx	r6
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	d106      	bne.n	8008aec <__sflush_r+0x68>
 8008ade:	6829      	ldr	r1, [r5, #0]
 8008ae0:	291d      	cmp	r1, #29
 8008ae2:	d82b      	bhi.n	8008b3c <__sflush_r+0xb8>
 8008ae4:	4a29      	ldr	r2, [pc, #164]	; (8008b8c <__sflush_r+0x108>)
 8008ae6:	410a      	asrs	r2, r1
 8008ae8:	07d6      	lsls	r6, r2, #31
 8008aea:	d427      	bmi.n	8008b3c <__sflush_r+0xb8>
 8008aec:	2200      	movs	r2, #0
 8008aee:	6062      	str	r2, [r4, #4]
 8008af0:	04d9      	lsls	r1, r3, #19
 8008af2:	6922      	ldr	r2, [r4, #16]
 8008af4:	6022      	str	r2, [r4, #0]
 8008af6:	d504      	bpl.n	8008b02 <__sflush_r+0x7e>
 8008af8:	1c42      	adds	r2, r0, #1
 8008afa:	d101      	bne.n	8008b00 <__sflush_r+0x7c>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b903      	cbnz	r3, 8008b02 <__sflush_r+0x7e>
 8008b00:	6560      	str	r0, [r4, #84]	; 0x54
 8008b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b04:	602f      	str	r7, [r5, #0]
 8008b06:	2900      	cmp	r1, #0
 8008b08:	d0c9      	beq.n	8008a9e <__sflush_r+0x1a>
 8008b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b0e:	4299      	cmp	r1, r3
 8008b10:	d002      	beq.n	8008b18 <__sflush_r+0x94>
 8008b12:	4628      	mov	r0, r5
 8008b14:	f7ff f9f6 	bl	8007f04 <_free_r>
 8008b18:	2000      	movs	r0, #0
 8008b1a:	6360      	str	r0, [r4, #52]	; 0x34
 8008b1c:	e7c0      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b0      	blx	r6
 8008b24:	1c41      	adds	r1, r0, #1
 8008b26:	d1c8      	bne.n	8008aba <__sflush_r+0x36>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0c5      	beq.n	8008aba <__sflush_r+0x36>
 8008b2e:	2b1d      	cmp	r3, #29
 8008b30:	d001      	beq.n	8008b36 <__sflush_r+0xb2>
 8008b32:	2b16      	cmp	r3, #22
 8008b34:	d101      	bne.n	8008b3a <__sflush_r+0xb6>
 8008b36:	602f      	str	r7, [r5, #0]
 8008b38:	e7b1      	b.n	8008a9e <__sflush_r+0x1a>
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	e7ad      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b44:	690f      	ldr	r7, [r1, #16]
 8008b46:	2f00      	cmp	r7, #0
 8008b48:	d0a9      	beq.n	8008a9e <__sflush_r+0x1a>
 8008b4a:	0793      	lsls	r3, r2, #30
 8008b4c:	680e      	ldr	r6, [r1, #0]
 8008b4e:	bf08      	it	eq
 8008b50:	694b      	ldreq	r3, [r1, #20]
 8008b52:	600f      	str	r7, [r1, #0]
 8008b54:	bf18      	it	ne
 8008b56:	2300      	movne	r3, #0
 8008b58:	eba6 0807 	sub.w	r8, r6, r7
 8008b5c:	608b      	str	r3, [r1, #8]
 8008b5e:	f1b8 0f00 	cmp.w	r8, #0
 8008b62:	dd9c      	ble.n	8008a9e <__sflush_r+0x1a>
 8008b64:	6a21      	ldr	r1, [r4, #32]
 8008b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b68:	4643      	mov	r3, r8
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b0      	blx	r6
 8008b70:	2800      	cmp	r0, #0
 8008b72:	dc06      	bgt.n	8008b82 <__sflush_r+0xfe>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	e78e      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b82:	4407      	add	r7, r0
 8008b84:	eba8 0800 	sub.w	r8, r8, r0
 8008b88:	e7e9      	b.n	8008b5e <__sflush_r+0xda>
 8008b8a:	bf00      	nop
 8008b8c:	dfbffffe 	.word	0xdfbffffe

08008b90 <_fflush_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	690b      	ldr	r3, [r1, #16]
 8008b94:	4605      	mov	r5, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	b913      	cbnz	r3, 8008ba0 <_fflush_r+0x10>
 8008b9a:	2500      	movs	r5, #0
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	b118      	cbz	r0, 8008baa <_fflush_r+0x1a>
 8008ba2:	6a03      	ldr	r3, [r0, #32]
 8008ba4:	b90b      	cbnz	r3, 8008baa <_fflush_r+0x1a>
 8008ba6:	f7fe fa27 	bl	8006ff8 <__sinit>
 8008baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0f3      	beq.n	8008b9a <_fflush_r+0xa>
 8008bb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bb4:	07d0      	lsls	r0, r2, #31
 8008bb6:	d404      	bmi.n	8008bc2 <_fflush_r+0x32>
 8008bb8:	0599      	lsls	r1, r3, #22
 8008bba:	d402      	bmi.n	8008bc2 <_fflush_r+0x32>
 8008bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bbe:	f7fe fb24 	bl	800720a <__retarget_lock_acquire_recursive>
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	f7ff ff5d 	bl	8008a84 <__sflush_r>
 8008bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bcc:	07da      	lsls	r2, r3, #31
 8008bce:	4605      	mov	r5, r0
 8008bd0:	d4e4      	bmi.n	8008b9c <_fflush_r+0xc>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	059b      	lsls	r3, r3, #22
 8008bd6:	d4e1      	bmi.n	8008b9c <_fflush_r+0xc>
 8008bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bda:	f7fe fb17 	bl	800720c <__retarget_lock_release_recursive>
 8008bde:	e7dd      	b.n	8008b9c <_fflush_r+0xc>

08008be0 <__swbuf_r>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	460e      	mov	r6, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	4605      	mov	r5, r0
 8008be8:	b118      	cbz	r0, 8008bf2 <__swbuf_r+0x12>
 8008bea:	6a03      	ldr	r3, [r0, #32]
 8008bec:	b90b      	cbnz	r3, 8008bf2 <__swbuf_r+0x12>
 8008bee:	f7fe fa03 	bl	8006ff8 <__sinit>
 8008bf2:	69a3      	ldr	r3, [r4, #24]
 8008bf4:	60a3      	str	r3, [r4, #8]
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	071a      	lsls	r2, r3, #28
 8008bfa:	d525      	bpl.n	8008c48 <__swbuf_r+0x68>
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	b31b      	cbz	r3, 8008c48 <__swbuf_r+0x68>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	6922      	ldr	r2, [r4, #16]
 8008c04:	1a98      	subs	r0, r3, r2
 8008c06:	6963      	ldr	r3, [r4, #20]
 8008c08:	b2f6      	uxtb	r6, r6
 8008c0a:	4283      	cmp	r3, r0
 8008c0c:	4637      	mov	r7, r6
 8008c0e:	dc04      	bgt.n	8008c1a <__swbuf_r+0x3a>
 8008c10:	4621      	mov	r1, r4
 8008c12:	4628      	mov	r0, r5
 8008c14:	f7ff ffbc 	bl	8008b90 <_fflush_r>
 8008c18:	b9e0      	cbnz	r0, 8008c54 <__swbuf_r+0x74>
 8008c1a:	68a3      	ldr	r3, [r4, #8]
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	60a3      	str	r3, [r4, #8]
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	6022      	str	r2, [r4, #0]
 8008c26:	701e      	strb	r6, [r3, #0]
 8008c28:	6962      	ldr	r2, [r4, #20]
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d004      	beq.n	8008c3a <__swbuf_r+0x5a>
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	07db      	lsls	r3, r3, #31
 8008c34:	d506      	bpl.n	8008c44 <__swbuf_r+0x64>
 8008c36:	2e0a      	cmp	r6, #10
 8008c38:	d104      	bne.n	8008c44 <__swbuf_r+0x64>
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	f7ff ffa7 	bl	8008b90 <_fflush_r>
 8008c42:	b938      	cbnz	r0, 8008c54 <__swbuf_r+0x74>
 8008c44:	4638      	mov	r0, r7
 8008c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f000 f806 	bl	8008c5c <__swsetup_r>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d0d5      	beq.n	8008c00 <__swbuf_r+0x20>
 8008c54:	f04f 37ff 	mov.w	r7, #4294967295
 8008c58:	e7f4      	b.n	8008c44 <__swbuf_r+0x64>
	...

08008c5c <__swsetup_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4b2a      	ldr	r3, [pc, #168]	; (8008d08 <__swsetup_r+0xac>)
 8008c60:	4605      	mov	r5, r0
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	460c      	mov	r4, r1
 8008c66:	b118      	cbz	r0, 8008c70 <__swsetup_r+0x14>
 8008c68:	6a03      	ldr	r3, [r0, #32]
 8008c6a:	b90b      	cbnz	r3, 8008c70 <__swsetup_r+0x14>
 8008c6c:	f7fe f9c4 	bl	8006ff8 <__sinit>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c76:	0718      	lsls	r0, r3, #28
 8008c78:	d422      	bmi.n	8008cc0 <__swsetup_r+0x64>
 8008c7a:	06d9      	lsls	r1, r3, #27
 8008c7c:	d407      	bmi.n	8008c8e <__swsetup_r+0x32>
 8008c7e:	2309      	movs	r3, #9
 8008c80:	602b      	str	r3, [r5, #0]
 8008c82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8c:	e034      	b.n	8008cf8 <__swsetup_r+0x9c>
 8008c8e:	0758      	lsls	r0, r3, #29
 8008c90:	d512      	bpl.n	8008cb8 <__swsetup_r+0x5c>
 8008c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c94:	b141      	cbz	r1, 8008ca8 <__swsetup_r+0x4c>
 8008c96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c9a:	4299      	cmp	r1, r3
 8008c9c:	d002      	beq.n	8008ca4 <__swsetup_r+0x48>
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f7ff f930 	bl	8007f04 <_free_r>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	6363      	str	r3, [r4, #52]	; 0x34
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cae:	81a3      	strh	r3, [r4, #12]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	6063      	str	r3, [r4, #4]
 8008cb4:	6923      	ldr	r3, [r4, #16]
 8008cb6:	6023      	str	r3, [r4, #0]
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f043 0308 	orr.w	r3, r3, #8
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	b94b      	cbnz	r3, 8008cd8 <__swsetup_r+0x7c>
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cce:	d003      	beq.n	8008cd8 <__swsetup_r+0x7c>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 f8c4 	bl	8008e60 <__smakebuf_r>
 8008cd8:	89a0      	ldrh	r0, [r4, #12]
 8008cda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cde:	f010 0301 	ands.w	r3, r0, #1
 8008ce2:	d00a      	beq.n	8008cfa <__swsetup_r+0x9e>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60a3      	str	r3, [r4, #8]
 8008ce8:	6963      	ldr	r3, [r4, #20]
 8008cea:	425b      	negs	r3, r3
 8008cec:	61a3      	str	r3, [r4, #24]
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	b943      	cbnz	r3, 8008d04 <__swsetup_r+0xa8>
 8008cf2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cf6:	d1c4      	bne.n	8008c82 <__swsetup_r+0x26>
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	0781      	lsls	r1, r0, #30
 8008cfc:	bf58      	it	pl
 8008cfe:	6963      	ldrpl	r3, [r4, #20]
 8008d00:	60a3      	str	r3, [r4, #8]
 8008d02:	e7f4      	b.n	8008cee <__swsetup_r+0x92>
 8008d04:	2000      	movs	r0, #0
 8008d06:	e7f7      	b.n	8008cf8 <__swsetup_r+0x9c>
 8008d08:	2000007c 	.word	0x2000007c

08008d0c <_sbrk_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d06      	ldr	r5, [pc, #24]	; (8008d28 <_sbrk_r+0x1c>)
 8008d10:	2300      	movs	r3, #0
 8008d12:	4604      	mov	r4, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	602b      	str	r3, [r5, #0]
 8008d18:	f7f9 fc2e 	bl	8002578 <_sbrk>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_sbrk_r+0x1a>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_sbrk_r+0x1a>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	200005b8 	.word	0x200005b8

08008d2c <memcpy>:
 8008d2c:	440a      	add	r2, r1
 8008d2e:	4291      	cmp	r1, r2
 8008d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d34:	d100      	bne.n	8008d38 <memcpy+0xc>
 8008d36:	4770      	bx	lr
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d42:	4291      	cmp	r1, r2
 8008d44:	d1f9      	bne.n	8008d3a <memcpy+0xe>
 8008d46:	bd10      	pop	{r4, pc}

08008d48 <__assert_func>:
 8008d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <__assert_func+0x2c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4605      	mov	r5, r0
 8008d54:	68d8      	ldr	r0, [r3, #12]
 8008d56:	b14c      	cbz	r4, 8008d6c <__assert_func+0x24>
 8008d58:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <__assert_func+0x30>)
 8008d5a:	9100      	str	r1, [sp, #0]
 8008d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d60:	4906      	ldr	r1, [pc, #24]	; (8008d7c <__assert_func+0x34>)
 8008d62:	462b      	mov	r3, r5
 8008d64:	f000 f844 	bl	8008df0 <fiprintf>
 8008d68:	f000 f8d8 	bl	8008f1c <abort>
 8008d6c:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <__assert_func+0x38>)
 8008d6e:	461c      	mov	r4, r3
 8008d70:	e7f3      	b.n	8008d5a <__assert_func+0x12>
 8008d72:	bf00      	nop
 8008d74:	2000007c 	.word	0x2000007c
 8008d78:	0800999f 	.word	0x0800999f
 8008d7c:	080099ac 	.word	0x080099ac
 8008d80:	080099da 	.word	0x080099da

08008d84 <_calloc_r>:
 8008d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d86:	fba1 2402 	umull	r2, r4, r1, r2
 8008d8a:	b94c      	cbnz	r4, 8008da0 <_calloc_r+0x1c>
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	9201      	str	r2, [sp, #4]
 8008d90:	f7ff f92c 	bl	8007fec <_malloc_r>
 8008d94:	9a01      	ldr	r2, [sp, #4]
 8008d96:	4605      	mov	r5, r0
 8008d98:	b930      	cbnz	r0, 8008da8 <_calloc_r+0x24>
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	b003      	add	sp, #12
 8008d9e:	bd30      	pop	{r4, r5, pc}
 8008da0:	220c      	movs	r2, #12
 8008da2:	6002      	str	r2, [r0, #0]
 8008da4:	2500      	movs	r5, #0
 8008da6:	e7f8      	b.n	8008d9a <_calloc_r+0x16>
 8008da8:	4621      	mov	r1, r4
 8008daa:	f7fe f9b0 	bl	800710e <memset>
 8008dae:	e7f4      	b.n	8008d9a <_calloc_r+0x16>

08008db0 <__ascii_mbtowc>:
 8008db0:	b082      	sub	sp, #8
 8008db2:	b901      	cbnz	r1, 8008db6 <__ascii_mbtowc+0x6>
 8008db4:	a901      	add	r1, sp, #4
 8008db6:	b142      	cbz	r2, 8008dca <__ascii_mbtowc+0x1a>
 8008db8:	b14b      	cbz	r3, 8008dce <__ascii_mbtowc+0x1e>
 8008dba:	7813      	ldrb	r3, [r2, #0]
 8008dbc:	600b      	str	r3, [r1, #0]
 8008dbe:	7812      	ldrb	r2, [r2, #0]
 8008dc0:	1e10      	subs	r0, r2, #0
 8008dc2:	bf18      	it	ne
 8008dc4:	2001      	movne	r0, #1
 8008dc6:	b002      	add	sp, #8
 8008dc8:	4770      	bx	lr
 8008dca:	4610      	mov	r0, r2
 8008dcc:	e7fb      	b.n	8008dc6 <__ascii_mbtowc+0x16>
 8008dce:	f06f 0001 	mvn.w	r0, #1
 8008dd2:	e7f8      	b.n	8008dc6 <__ascii_mbtowc+0x16>

08008dd4 <__ascii_wctomb>:
 8008dd4:	b149      	cbz	r1, 8008dea <__ascii_wctomb+0x16>
 8008dd6:	2aff      	cmp	r2, #255	; 0xff
 8008dd8:	bf85      	ittet	hi
 8008dda:	238a      	movhi	r3, #138	; 0x8a
 8008ddc:	6003      	strhi	r3, [r0, #0]
 8008dde:	700a      	strbls	r2, [r1, #0]
 8008de0:	f04f 30ff 	movhi.w	r0, #4294967295
 8008de4:	bf98      	it	ls
 8008de6:	2001      	movls	r0, #1
 8008de8:	4770      	bx	lr
 8008dea:	4608      	mov	r0, r1
 8008dec:	4770      	bx	lr
	...

08008df0 <fiprintf>:
 8008df0:	b40e      	push	{r1, r2, r3}
 8008df2:	b503      	push	{r0, r1, lr}
 8008df4:	4601      	mov	r1, r0
 8008df6:	ab03      	add	r3, sp, #12
 8008df8:	4805      	ldr	r0, [pc, #20]	; (8008e10 <fiprintf+0x20>)
 8008dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfe:	6800      	ldr	r0, [r0, #0]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	f7ff fd25 	bl	8008850 <_vfiprintf_r>
 8008e06:	b002      	add	sp, #8
 8008e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e0c:	b003      	add	sp, #12
 8008e0e:	4770      	bx	lr
 8008e10:	2000007c 	.word	0x2000007c

08008e14 <__swhatbuf_r>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	460c      	mov	r4, r1
 8008e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1c:	2900      	cmp	r1, #0
 8008e1e:	b096      	sub	sp, #88	; 0x58
 8008e20:	4615      	mov	r5, r2
 8008e22:	461e      	mov	r6, r3
 8008e24:	da0d      	bge.n	8008e42 <__swhatbuf_r+0x2e>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e2c:	f04f 0100 	mov.w	r1, #0
 8008e30:	bf0c      	ite	eq
 8008e32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e36:	2340      	movne	r3, #64	; 0x40
 8008e38:	2000      	movs	r0, #0
 8008e3a:	6031      	str	r1, [r6, #0]
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	b016      	add	sp, #88	; 0x58
 8008e40:	bd70      	pop	{r4, r5, r6, pc}
 8008e42:	466a      	mov	r2, sp
 8008e44:	f000 f848 	bl	8008ed8 <_fstat_r>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	dbec      	blt.n	8008e26 <__swhatbuf_r+0x12>
 8008e4c:	9901      	ldr	r1, [sp, #4]
 8008e4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e56:	4259      	negs	r1, r3
 8008e58:	4159      	adcs	r1, r3
 8008e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e5e:	e7eb      	b.n	8008e38 <__swhatbuf_r+0x24>

08008e60 <__smakebuf_r>:
 8008e60:	898b      	ldrh	r3, [r1, #12]
 8008e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e64:	079d      	lsls	r5, r3, #30
 8008e66:	4606      	mov	r6, r0
 8008e68:	460c      	mov	r4, r1
 8008e6a:	d507      	bpl.n	8008e7c <__smakebuf_r+0x1c>
 8008e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	6123      	str	r3, [r4, #16]
 8008e74:	2301      	movs	r3, #1
 8008e76:	6163      	str	r3, [r4, #20]
 8008e78:	b002      	add	sp, #8
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	ab01      	add	r3, sp, #4
 8008e7e:	466a      	mov	r2, sp
 8008e80:	f7ff ffc8 	bl	8008e14 <__swhatbuf_r>
 8008e84:	9900      	ldr	r1, [sp, #0]
 8008e86:	4605      	mov	r5, r0
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7ff f8af 	bl	8007fec <_malloc_r>
 8008e8e:	b948      	cbnz	r0, 8008ea4 <__smakebuf_r+0x44>
 8008e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e94:	059a      	lsls	r2, r3, #22
 8008e96:	d4ef      	bmi.n	8008e78 <__smakebuf_r+0x18>
 8008e98:	f023 0303 	bic.w	r3, r3, #3
 8008e9c:	f043 0302 	orr.w	r3, r3, #2
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	e7e3      	b.n	8008e6c <__smakebuf_r+0xc>
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	6020      	str	r0, [r4, #0]
 8008ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eac:	81a3      	strh	r3, [r4, #12]
 8008eae:	9b00      	ldr	r3, [sp, #0]
 8008eb0:	6163      	str	r3, [r4, #20]
 8008eb2:	9b01      	ldr	r3, [sp, #4]
 8008eb4:	6120      	str	r0, [r4, #16]
 8008eb6:	b15b      	cbz	r3, 8008ed0 <__smakebuf_r+0x70>
 8008eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f000 f81d 	bl	8008efc <_isatty_r>
 8008ec2:	b128      	cbz	r0, 8008ed0 <__smakebuf_r+0x70>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	f043 0301 	orr.w	r3, r3, #1
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	431d      	orrs	r5, r3
 8008ed4:	81a5      	strh	r5, [r4, #12]
 8008ed6:	e7cf      	b.n	8008e78 <__smakebuf_r+0x18>

08008ed8 <_fstat_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d07      	ldr	r5, [pc, #28]	; (8008ef8 <_fstat_r+0x20>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	f7f9 fb1e 	bl	8002526 <_fstat>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	d102      	bne.n	8008ef4 <_fstat_r+0x1c>
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	b103      	cbz	r3, 8008ef4 <_fstat_r+0x1c>
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200005b8 	.word	0x200005b8

08008efc <_isatty_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4d06      	ldr	r5, [pc, #24]	; (8008f18 <_isatty_r+0x1c>)
 8008f00:	2300      	movs	r3, #0
 8008f02:	4604      	mov	r4, r0
 8008f04:	4608      	mov	r0, r1
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	f7f9 fb1d 	bl	8002546 <_isatty>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_isatty_r+0x1a>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_isatty_r+0x1a>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	200005b8 	.word	0x200005b8

08008f1c <abort>:
 8008f1c:	b508      	push	{r3, lr}
 8008f1e:	2006      	movs	r0, #6
 8008f20:	f000 f82c 	bl	8008f7c <raise>
 8008f24:	2001      	movs	r0, #1
 8008f26:	f7f9 faaf 	bl	8002488 <_exit>

08008f2a <_raise_r>:
 8008f2a:	291f      	cmp	r1, #31
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4604      	mov	r4, r0
 8008f30:	460d      	mov	r5, r1
 8008f32:	d904      	bls.n	8008f3e <_raise_r+0x14>
 8008f34:	2316      	movs	r3, #22
 8008f36:	6003      	str	r3, [r0, #0]
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f40:	b112      	cbz	r2, 8008f48 <_raise_r+0x1e>
 8008f42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f46:	b94b      	cbnz	r3, 8008f5c <_raise_r+0x32>
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 f831 	bl	8008fb0 <_getpid_r>
 8008f4e:	462a      	mov	r2, r5
 8008f50:	4601      	mov	r1, r0
 8008f52:	4620      	mov	r0, r4
 8008f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f58:	f000 b818 	b.w	8008f8c <_kill_r>
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d00a      	beq.n	8008f76 <_raise_r+0x4c>
 8008f60:	1c59      	adds	r1, r3, #1
 8008f62:	d103      	bne.n	8008f6c <_raise_r+0x42>
 8008f64:	2316      	movs	r3, #22
 8008f66:	6003      	str	r3, [r0, #0]
 8008f68:	2001      	movs	r0, #1
 8008f6a:	e7e7      	b.n	8008f3c <_raise_r+0x12>
 8008f6c:	2400      	movs	r4, #0
 8008f6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f72:	4628      	mov	r0, r5
 8008f74:	4798      	blx	r3
 8008f76:	2000      	movs	r0, #0
 8008f78:	e7e0      	b.n	8008f3c <_raise_r+0x12>
	...

08008f7c <raise>:
 8008f7c:	4b02      	ldr	r3, [pc, #8]	; (8008f88 <raise+0xc>)
 8008f7e:	4601      	mov	r1, r0
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f7ff bfd2 	b.w	8008f2a <_raise_r>
 8008f86:	bf00      	nop
 8008f88:	2000007c 	.word	0x2000007c

08008f8c <_kill_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d07      	ldr	r5, [pc, #28]	; (8008fac <_kill_r+0x20>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	4611      	mov	r1, r2
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	f7f9 fa65 	bl	8002468 <_kill>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d102      	bne.n	8008fa8 <_kill_r+0x1c>
 8008fa2:	682b      	ldr	r3, [r5, #0]
 8008fa4:	b103      	cbz	r3, 8008fa8 <_kill_r+0x1c>
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
 8008faa:	bf00      	nop
 8008fac:	200005b8 	.word	0x200005b8

08008fb0 <_getpid_r>:
 8008fb0:	f7f9 ba52 	b.w	8002458 <_getpid>

08008fb4 <atan2>:
 8008fb4:	f000 b908 	b.w	80091c8 <__ieee754_atan2>

08008fb8 <sqrt>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	ed2d 8b02 	vpush	{d8}
 8008fbe:	ec55 4b10 	vmov	r4, r5, d0
 8008fc2:	f000 f825 	bl	8009010 <__ieee754_sqrt>
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	462b      	mov	r3, r5
 8008fca:	4620      	mov	r0, r4
 8008fcc:	4629      	mov	r1, r5
 8008fce:	eeb0 8a40 	vmov.f32	s16, s0
 8008fd2:	eef0 8a60 	vmov.f32	s17, s1
 8008fd6:	f7f7 fdc1 	bl	8000b5c <__aeabi_dcmpun>
 8008fda:	b990      	cbnz	r0, 8009002 <sqrt+0x4a>
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2300      	movs	r3, #0
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	f7f7 fd92 	bl	8000b0c <__aeabi_dcmplt>
 8008fe8:	b158      	cbz	r0, 8009002 <sqrt+0x4a>
 8008fea:	f7fe f8e3 	bl	80071b4 <__errno>
 8008fee:	2321      	movs	r3, #33	; 0x21
 8008ff0:	6003      	str	r3, [r0, #0]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	f7f7 fc3f 	bl	800087c <__aeabi_ddiv>
 8008ffe:	ec41 0b18 	vmov	d8, r0, r1
 8009002:	eeb0 0a48 	vmov.f32	s0, s16
 8009006:	eef0 0a68 	vmov.f32	s1, s17
 800900a:	ecbd 8b02 	vpop	{d8}
 800900e:	bd38      	pop	{r3, r4, r5, pc}

08009010 <__ieee754_sqrt>:
 8009010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	ec55 4b10 	vmov	r4, r5, d0
 8009018:	4e67      	ldr	r6, [pc, #412]	; (80091b8 <__ieee754_sqrt+0x1a8>)
 800901a:	43ae      	bics	r6, r5
 800901c:	ee10 0a10 	vmov	r0, s0
 8009020:	ee10 2a10 	vmov	r2, s0
 8009024:	4629      	mov	r1, r5
 8009026:	462b      	mov	r3, r5
 8009028:	d10d      	bne.n	8009046 <__ieee754_sqrt+0x36>
 800902a:	f7f7 fafd 	bl	8000628 <__aeabi_dmul>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4620      	mov	r0, r4
 8009034:	4629      	mov	r1, r5
 8009036:	f7f7 f941 	bl	80002bc <__adddf3>
 800903a:	4604      	mov	r4, r0
 800903c:	460d      	mov	r5, r1
 800903e:	ec45 4b10 	vmov	d0, r4, r5
 8009042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009046:	2d00      	cmp	r5, #0
 8009048:	dc0b      	bgt.n	8009062 <__ieee754_sqrt+0x52>
 800904a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800904e:	4326      	orrs	r6, r4
 8009050:	d0f5      	beq.n	800903e <__ieee754_sqrt+0x2e>
 8009052:	b135      	cbz	r5, 8009062 <__ieee754_sqrt+0x52>
 8009054:	f7f7 f930 	bl	80002b8 <__aeabi_dsub>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	f7f7 fc0e 	bl	800087c <__aeabi_ddiv>
 8009060:	e7eb      	b.n	800903a <__ieee754_sqrt+0x2a>
 8009062:	1509      	asrs	r1, r1, #20
 8009064:	f000 808d 	beq.w	8009182 <__ieee754_sqrt+0x172>
 8009068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800906c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009074:	07c9      	lsls	r1, r1, #31
 8009076:	bf5c      	itt	pl
 8009078:	005b      	lslpl	r3, r3, #1
 800907a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800907e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009082:	bf58      	it	pl
 8009084:	0052      	lslpl	r2, r2, #1
 8009086:	2500      	movs	r5, #0
 8009088:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800908c:	1076      	asrs	r6, r6, #1
 800908e:	0052      	lsls	r2, r2, #1
 8009090:	f04f 0e16 	mov.w	lr, #22
 8009094:	46ac      	mov	ip, r5
 8009096:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800909a:	eb0c 0001 	add.w	r0, ip, r1
 800909e:	4298      	cmp	r0, r3
 80090a0:	bfde      	ittt	le
 80090a2:	1a1b      	suble	r3, r3, r0
 80090a4:	eb00 0c01 	addle.w	ip, r0, r1
 80090a8:	186d      	addle	r5, r5, r1
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	f1be 0e01 	subs.w	lr, lr, #1
 80090b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80090b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80090b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80090bc:	d1ed      	bne.n	800909a <__ieee754_sqrt+0x8a>
 80090be:	4674      	mov	r4, lr
 80090c0:	2720      	movs	r7, #32
 80090c2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80090c6:	4563      	cmp	r3, ip
 80090c8:	eb01 000e 	add.w	r0, r1, lr
 80090cc:	dc02      	bgt.n	80090d4 <__ieee754_sqrt+0xc4>
 80090ce:	d113      	bne.n	80090f8 <__ieee754_sqrt+0xe8>
 80090d0:	4290      	cmp	r0, r2
 80090d2:	d811      	bhi.n	80090f8 <__ieee754_sqrt+0xe8>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	eb00 0e01 	add.w	lr, r0, r1
 80090da:	da57      	bge.n	800918c <__ieee754_sqrt+0x17c>
 80090dc:	f1be 0f00 	cmp.w	lr, #0
 80090e0:	db54      	blt.n	800918c <__ieee754_sqrt+0x17c>
 80090e2:	f10c 0801 	add.w	r8, ip, #1
 80090e6:	eba3 030c 	sub.w	r3, r3, ip
 80090ea:	4290      	cmp	r0, r2
 80090ec:	bf88      	it	hi
 80090ee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80090f2:	1a12      	subs	r2, r2, r0
 80090f4:	440c      	add	r4, r1
 80090f6:	46c4      	mov	ip, r8
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	3f01      	subs	r7, #1
 80090fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009100:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009104:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009108:	d1dd      	bne.n	80090c6 <__ieee754_sqrt+0xb6>
 800910a:	4313      	orrs	r3, r2
 800910c:	d01b      	beq.n	8009146 <__ieee754_sqrt+0x136>
 800910e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80091bc <__ieee754_sqrt+0x1ac>
 8009112:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80091c0 <__ieee754_sqrt+0x1b0>
 8009116:	e9da 0100 	ldrd	r0, r1, [sl]
 800911a:	e9db 2300 	ldrd	r2, r3, [fp]
 800911e:	f7f7 f8cb 	bl	80002b8 <__aeabi_dsub>
 8009122:	e9da 8900 	ldrd	r8, r9, [sl]
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	f7f7 fcf7 	bl	8000b20 <__aeabi_dcmple>
 8009132:	b140      	cbz	r0, 8009146 <__ieee754_sqrt+0x136>
 8009134:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009138:	e9da 0100 	ldrd	r0, r1, [sl]
 800913c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009140:	d126      	bne.n	8009190 <__ieee754_sqrt+0x180>
 8009142:	3501      	adds	r5, #1
 8009144:	463c      	mov	r4, r7
 8009146:	106a      	asrs	r2, r5, #1
 8009148:	0863      	lsrs	r3, r4, #1
 800914a:	07e9      	lsls	r1, r5, #31
 800914c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009150:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009154:	bf48      	it	mi
 8009156:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800915a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800915e:	461c      	mov	r4, r3
 8009160:	e76d      	b.n	800903e <__ieee754_sqrt+0x2e>
 8009162:	0ad3      	lsrs	r3, r2, #11
 8009164:	3815      	subs	r0, #21
 8009166:	0552      	lsls	r2, r2, #21
 8009168:	2b00      	cmp	r3, #0
 800916a:	d0fa      	beq.n	8009162 <__ieee754_sqrt+0x152>
 800916c:	02dc      	lsls	r4, r3, #11
 800916e:	d50a      	bpl.n	8009186 <__ieee754_sqrt+0x176>
 8009170:	f1c1 0420 	rsb	r4, r1, #32
 8009174:	fa22 f404 	lsr.w	r4, r2, r4
 8009178:	1e4d      	subs	r5, r1, #1
 800917a:	408a      	lsls	r2, r1
 800917c:	4323      	orrs	r3, r4
 800917e:	1b41      	subs	r1, r0, r5
 8009180:	e772      	b.n	8009068 <__ieee754_sqrt+0x58>
 8009182:	4608      	mov	r0, r1
 8009184:	e7f0      	b.n	8009168 <__ieee754_sqrt+0x158>
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	3101      	adds	r1, #1
 800918a:	e7ef      	b.n	800916c <__ieee754_sqrt+0x15c>
 800918c:	46e0      	mov	r8, ip
 800918e:	e7aa      	b.n	80090e6 <__ieee754_sqrt+0xd6>
 8009190:	f7f7 f894 	bl	80002bc <__adddf3>
 8009194:	e9da 8900 	ldrd	r8, r9, [sl]
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4640      	mov	r0, r8
 800919e:	4649      	mov	r1, r9
 80091a0:	f7f7 fcb4 	bl	8000b0c <__aeabi_dcmplt>
 80091a4:	b120      	cbz	r0, 80091b0 <__ieee754_sqrt+0x1a0>
 80091a6:	1ca0      	adds	r0, r4, #2
 80091a8:	bf08      	it	eq
 80091aa:	3501      	addeq	r5, #1
 80091ac:	3402      	adds	r4, #2
 80091ae:	e7ca      	b.n	8009146 <__ieee754_sqrt+0x136>
 80091b0:	3401      	adds	r4, #1
 80091b2:	f024 0401 	bic.w	r4, r4, #1
 80091b6:	e7c6      	b.n	8009146 <__ieee754_sqrt+0x136>
 80091b8:	7ff00000 	.word	0x7ff00000
 80091bc:	200001f0 	.word	0x200001f0
 80091c0:	200001f8 	.word	0x200001f8
 80091c4:	00000000 	.word	0x00000000

080091c8 <__ieee754_atan2>:
 80091c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091cc:	ec57 6b11 	vmov	r6, r7, d1
 80091d0:	4273      	negs	r3, r6
 80091d2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009350 <__ieee754_atan2+0x188>
 80091d6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80091da:	4333      	orrs	r3, r6
 80091dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80091e0:	4543      	cmp	r3, r8
 80091e2:	ec51 0b10 	vmov	r0, r1, d0
 80091e6:	ee11 5a10 	vmov	r5, s2
 80091ea:	d80a      	bhi.n	8009202 <__ieee754_atan2+0x3a>
 80091ec:	4244      	negs	r4, r0
 80091ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091f2:	4304      	orrs	r4, r0
 80091f4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80091f8:	4544      	cmp	r4, r8
 80091fa:	ee10 9a10 	vmov	r9, s0
 80091fe:	468e      	mov	lr, r1
 8009200:	d907      	bls.n	8009212 <__ieee754_atan2+0x4a>
 8009202:	4632      	mov	r2, r6
 8009204:	463b      	mov	r3, r7
 8009206:	f7f7 f859 	bl	80002bc <__adddf3>
 800920a:	ec41 0b10 	vmov	d0, r0, r1
 800920e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009212:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009216:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800921a:	4334      	orrs	r4, r6
 800921c:	d103      	bne.n	8009226 <__ieee754_atan2+0x5e>
 800921e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009222:	f000 b899 	b.w	8009358 <atan>
 8009226:	17bc      	asrs	r4, r7, #30
 8009228:	f004 0402 	and.w	r4, r4, #2
 800922c:	ea53 0909 	orrs.w	r9, r3, r9
 8009230:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009234:	d107      	bne.n	8009246 <__ieee754_atan2+0x7e>
 8009236:	2c02      	cmp	r4, #2
 8009238:	d05f      	beq.n	80092fa <__ieee754_atan2+0x132>
 800923a:	2c03      	cmp	r4, #3
 800923c:	d1e5      	bne.n	800920a <__ieee754_atan2+0x42>
 800923e:	a140      	add	r1, pc, #256	; (adr r1, 8009340 <__ieee754_atan2+0x178>)
 8009240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009244:	e7e1      	b.n	800920a <__ieee754_atan2+0x42>
 8009246:	4315      	orrs	r5, r2
 8009248:	d106      	bne.n	8009258 <__ieee754_atan2+0x90>
 800924a:	f1be 0f00 	cmp.w	lr, #0
 800924e:	da5f      	bge.n	8009310 <__ieee754_atan2+0x148>
 8009250:	a13d      	add	r1, pc, #244	; (adr r1, 8009348 <__ieee754_atan2+0x180>)
 8009252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009256:	e7d8      	b.n	800920a <__ieee754_atan2+0x42>
 8009258:	4542      	cmp	r2, r8
 800925a:	d10f      	bne.n	800927c <__ieee754_atan2+0xb4>
 800925c:	4293      	cmp	r3, r2
 800925e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009262:	d107      	bne.n	8009274 <__ieee754_atan2+0xac>
 8009264:	2c02      	cmp	r4, #2
 8009266:	d84c      	bhi.n	8009302 <__ieee754_atan2+0x13a>
 8009268:	4b33      	ldr	r3, [pc, #204]	; (8009338 <__ieee754_atan2+0x170>)
 800926a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800926e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009272:	e7ca      	b.n	800920a <__ieee754_atan2+0x42>
 8009274:	2c02      	cmp	r4, #2
 8009276:	d848      	bhi.n	800930a <__ieee754_atan2+0x142>
 8009278:	4b30      	ldr	r3, [pc, #192]	; (800933c <__ieee754_atan2+0x174>)
 800927a:	e7f6      	b.n	800926a <__ieee754_atan2+0xa2>
 800927c:	4543      	cmp	r3, r8
 800927e:	d0e4      	beq.n	800924a <__ieee754_atan2+0x82>
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009286:	ea4f 5223 	mov.w	r2, r3, asr #20
 800928a:	da1e      	bge.n	80092ca <__ieee754_atan2+0x102>
 800928c:	2f00      	cmp	r7, #0
 800928e:	da01      	bge.n	8009294 <__ieee754_atan2+0xcc>
 8009290:	323c      	adds	r2, #60	; 0x3c
 8009292:	db1e      	blt.n	80092d2 <__ieee754_atan2+0x10a>
 8009294:	4632      	mov	r2, r6
 8009296:	463b      	mov	r3, r7
 8009298:	f7f7 faf0 	bl	800087c <__aeabi_ddiv>
 800929c:	ec41 0b10 	vmov	d0, r0, r1
 80092a0:	f000 f9fa 	bl	8009698 <fabs>
 80092a4:	f000 f858 	bl	8009358 <atan>
 80092a8:	ec51 0b10 	vmov	r0, r1, d0
 80092ac:	2c01      	cmp	r4, #1
 80092ae:	d013      	beq.n	80092d8 <__ieee754_atan2+0x110>
 80092b0:	2c02      	cmp	r4, #2
 80092b2:	d015      	beq.n	80092e0 <__ieee754_atan2+0x118>
 80092b4:	2c00      	cmp	r4, #0
 80092b6:	d0a8      	beq.n	800920a <__ieee754_atan2+0x42>
 80092b8:	a317      	add	r3, pc, #92	; (adr r3, 8009318 <__ieee754_atan2+0x150>)
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f6 fffb 	bl	80002b8 <__aeabi_dsub>
 80092c2:	a317      	add	r3, pc, #92	; (adr r3, 8009320 <__ieee754_atan2+0x158>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	e014      	b.n	80092f4 <__ieee754_atan2+0x12c>
 80092ca:	a117      	add	r1, pc, #92	; (adr r1, 8009328 <__ieee754_atan2+0x160>)
 80092cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d0:	e7ec      	b.n	80092ac <__ieee754_atan2+0xe4>
 80092d2:	2000      	movs	r0, #0
 80092d4:	2100      	movs	r1, #0
 80092d6:	e7e9      	b.n	80092ac <__ieee754_atan2+0xe4>
 80092d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092dc:	4619      	mov	r1, r3
 80092de:	e794      	b.n	800920a <__ieee754_atan2+0x42>
 80092e0:	a30d      	add	r3, pc, #52	; (adr r3, 8009318 <__ieee754_atan2+0x150>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f7f6 ffe7 	bl	80002b8 <__aeabi_dsub>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	a10c      	add	r1, pc, #48	; (adr r1, 8009320 <__ieee754_atan2+0x158>)
 80092f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f4:	f7f6 ffe0 	bl	80002b8 <__aeabi_dsub>
 80092f8:	e787      	b.n	800920a <__ieee754_atan2+0x42>
 80092fa:	a109      	add	r1, pc, #36	; (adr r1, 8009320 <__ieee754_atan2+0x158>)
 80092fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009300:	e783      	b.n	800920a <__ieee754_atan2+0x42>
 8009302:	a10b      	add	r1, pc, #44	; (adr r1, 8009330 <__ieee754_atan2+0x168>)
 8009304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009308:	e77f      	b.n	800920a <__ieee754_atan2+0x42>
 800930a:	2000      	movs	r0, #0
 800930c:	2100      	movs	r1, #0
 800930e:	e77c      	b.n	800920a <__ieee754_atan2+0x42>
 8009310:	a105      	add	r1, pc, #20	; (adr r1, 8009328 <__ieee754_atan2+0x160>)
 8009312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009316:	e778      	b.n	800920a <__ieee754_atan2+0x42>
 8009318:	33145c07 	.word	0x33145c07
 800931c:	3ca1a626 	.word	0x3ca1a626
 8009320:	54442d18 	.word	0x54442d18
 8009324:	400921fb 	.word	0x400921fb
 8009328:	54442d18 	.word	0x54442d18
 800932c:	3ff921fb 	.word	0x3ff921fb
 8009330:	54442d18 	.word	0x54442d18
 8009334:	3fe921fb 	.word	0x3fe921fb
 8009338:	08009ae0 	.word	0x08009ae0
 800933c:	08009af8 	.word	0x08009af8
 8009340:	54442d18 	.word	0x54442d18
 8009344:	c00921fb 	.word	0xc00921fb
 8009348:	54442d18 	.word	0x54442d18
 800934c:	bff921fb 	.word	0xbff921fb
 8009350:	7ff00000 	.word	0x7ff00000
 8009354:	00000000 	.word	0x00000000

08009358 <atan>:
 8009358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	ec55 4b10 	vmov	r4, r5, d0
 8009360:	4bc3      	ldr	r3, [pc, #780]	; (8009670 <atan+0x318>)
 8009362:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009366:	429e      	cmp	r6, r3
 8009368:	46ab      	mov	fp, r5
 800936a:	dd18      	ble.n	800939e <atan+0x46>
 800936c:	4bc1      	ldr	r3, [pc, #772]	; (8009674 <atan+0x31c>)
 800936e:	429e      	cmp	r6, r3
 8009370:	dc01      	bgt.n	8009376 <atan+0x1e>
 8009372:	d109      	bne.n	8009388 <atan+0x30>
 8009374:	b144      	cbz	r4, 8009388 <atan+0x30>
 8009376:	4622      	mov	r2, r4
 8009378:	462b      	mov	r3, r5
 800937a:	4620      	mov	r0, r4
 800937c:	4629      	mov	r1, r5
 800937e:	f7f6 ff9d 	bl	80002bc <__adddf3>
 8009382:	4604      	mov	r4, r0
 8009384:	460d      	mov	r5, r1
 8009386:	e006      	b.n	8009396 <atan+0x3e>
 8009388:	f1bb 0f00 	cmp.w	fp, #0
 800938c:	f300 8131 	bgt.w	80095f2 <atan+0x29a>
 8009390:	a59b      	add	r5, pc, #620	; (adr r5, 8009600 <atan+0x2a8>)
 8009392:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009396:	ec45 4b10 	vmov	d0, r4, r5
 800939a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939e:	4bb6      	ldr	r3, [pc, #728]	; (8009678 <atan+0x320>)
 80093a0:	429e      	cmp	r6, r3
 80093a2:	dc14      	bgt.n	80093ce <atan+0x76>
 80093a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80093a8:	429e      	cmp	r6, r3
 80093aa:	dc0d      	bgt.n	80093c8 <atan+0x70>
 80093ac:	a396      	add	r3, pc, #600	; (adr r3, 8009608 <atan+0x2b0>)
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	ee10 0a10 	vmov	r0, s0
 80093b6:	4629      	mov	r1, r5
 80093b8:	f7f6 ff80 	bl	80002bc <__adddf3>
 80093bc:	4baf      	ldr	r3, [pc, #700]	; (800967c <atan+0x324>)
 80093be:	2200      	movs	r2, #0
 80093c0:	f7f7 fbc2 	bl	8000b48 <__aeabi_dcmpgt>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d1e6      	bne.n	8009396 <atan+0x3e>
 80093c8:	f04f 3aff 	mov.w	sl, #4294967295
 80093cc:	e02b      	b.n	8009426 <atan+0xce>
 80093ce:	f000 f963 	bl	8009698 <fabs>
 80093d2:	4bab      	ldr	r3, [pc, #684]	; (8009680 <atan+0x328>)
 80093d4:	429e      	cmp	r6, r3
 80093d6:	ec55 4b10 	vmov	r4, r5, d0
 80093da:	f300 80bf 	bgt.w	800955c <atan+0x204>
 80093de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80093e2:	429e      	cmp	r6, r3
 80093e4:	f300 80a0 	bgt.w	8009528 <atan+0x1d0>
 80093e8:	ee10 2a10 	vmov	r2, s0
 80093ec:	ee10 0a10 	vmov	r0, s0
 80093f0:	462b      	mov	r3, r5
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f6 ff62 	bl	80002bc <__adddf3>
 80093f8:	4ba0      	ldr	r3, [pc, #640]	; (800967c <atan+0x324>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	f7f6 ff5c 	bl	80002b8 <__aeabi_dsub>
 8009400:	2200      	movs	r2, #0
 8009402:	4606      	mov	r6, r0
 8009404:	460f      	mov	r7, r1
 8009406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800940a:	4620      	mov	r0, r4
 800940c:	4629      	mov	r1, r5
 800940e:	f7f6 ff55 	bl	80002bc <__adddf3>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4630      	mov	r0, r6
 8009418:	4639      	mov	r1, r7
 800941a:	f7f7 fa2f 	bl	800087c <__aeabi_ddiv>
 800941e:	f04f 0a00 	mov.w	sl, #0
 8009422:	4604      	mov	r4, r0
 8009424:	460d      	mov	r5, r1
 8009426:	4622      	mov	r2, r4
 8009428:	462b      	mov	r3, r5
 800942a:	4620      	mov	r0, r4
 800942c:	4629      	mov	r1, r5
 800942e:	f7f7 f8fb 	bl	8000628 <__aeabi_dmul>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4680      	mov	r8, r0
 8009438:	4689      	mov	r9, r1
 800943a:	f7f7 f8f5 	bl	8000628 <__aeabi_dmul>
 800943e:	a374      	add	r3, pc, #464	; (adr r3, 8009610 <atan+0x2b8>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	4606      	mov	r6, r0
 8009446:	460f      	mov	r7, r1
 8009448:	f7f7 f8ee 	bl	8000628 <__aeabi_dmul>
 800944c:	a372      	add	r3, pc, #456	; (adr r3, 8009618 <atan+0x2c0>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f6 ff33 	bl	80002bc <__adddf3>
 8009456:	4632      	mov	r2, r6
 8009458:	463b      	mov	r3, r7
 800945a:	f7f7 f8e5 	bl	8000628 <__aeabi_dmul>
 800945e:	a370      	add	r3, pc, #448	; (adr r3, 8009620 <atan+0x2c8>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f7f6 ff2a 	bl	80002bc <__adddf3>
 8009468:	4632      	mov	r2, r6
 800946a:	463b      	mov	r3, r7
 800946c:	f7f7 f8dc 	bl	8000628 <__aeabi_dmul>
 8009470:	a36d      	add	r3, pc, #436	; (adr r3, 8009628 <atan+0x2d0>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f6 ff21 	bl	80002bc <__adddf3>
 800947a:	4632      	mov	r2, r6
 800947c:	463b      	mov	r3, r7
 800947e:	f7f7 f8d3 	bl	8000628 <__aeabi_dmul>
 8009482:	a36b      	add	r3, pc, #428	; (adr r3, 8009630 <atan+0x2d8>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f7f6 ff18 	bl	80002bc <__adddf3>
 800948c:	4632      	mov	r2, r6
 800948e:	463b      	mov	r3, r7
 8009490:	f7f7 f8ca 	bl	8000628 <__aeabi_dmul>
 8009494:	a368      	add	r3, pc, #416	; (adr r3, 8009638 <atan+0x2e0>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f7f6 ff0f 	bl	80002bc <__adddf3>
 800949e:	4642      	mov	r2, r8
 80094a0:	464b      	mov	r3, r9
 80094a2:	f7f7 f8c1 	bl	8000628 <__aeabi_dmul>
 80094a6:	a366      	add	r3, pc, #408	; (adr r3, 8009640 <atan+0x2e8>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	4680      	mov	r8, r0
 80094ae:	4689      	mov	r9, r1
 80094b0:	4630      	mov	r0, r6
 80094b2:	4639      	mov	r1, r7
 80094b4:	f7f7 f8b8 	bl	8000628 <__aeabi_dmul>
 80094b8:	a363      	add	r3, pc, #396	; (adr r3, 8009648 <atan+0x2f0>)
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	f7f6 fefb 	bl	80002b8 <__aeabi_dsub>
 80094c2:	4632      	mov	r2, r6
 80094c4:	463b      	mov	r3, r7
 80094c6:	f7f7 f8af 	bl	8000628 <__aeabi_dmul>
 80094ca:	a361      	add	r3, pc, #388	; (adr r3, 8009650 <atan+0x2f8>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	f7f6 fef2 	bl	80002b8 <__aeabi_dsub>
 80094d4:	4632      	mov	r2, r6
 80094d6:	463b      	mov	r3, r7
 80094d8:	f7f7 f8a6 	bl	8000628 <__aeabi_dmul>
 80094dc:	a35e      	add	r3, pc, #376	; (adr r3, 8009658 <atan+0x300>)
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f7f6 fee9 	bl	80002b8 <__aeabi_dsub>
 80094e6:	4632      	mov	r2, r6
 80094e8:	463b      	mov	r3, r7
 80094ea:	f7f7 f89d 	bl	8000628 <__aeabi_dmul>
 80094ee:	a35c      	add	r3, pc, #368	; (adr r3, 8009660 <atan+0x308>)
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	f7f6 fee0 	bl	80002b8 <__aeabi_dsub>
 80094f8:	4632      	mov	r2, r6
 80094fa:	463b      	mov	r3, r7
 80094fc:	f7f7 f894 	bl	8000628 <__aeabi_dmul>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	4640      	mov	r0, r8
 8009506:	4649      	mov	r1, r9
 8009508:	f7f6 fed8 	bl	80002bc <__adddf3>
 800950c:	4622      	mov	r2, r4
 800950e:	462b      	mov	r3, r5
 8009510:	f7f7 f88a 	bl	8000628 <__aeabi_dmul>
 8009514:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	d14b      	bne.n	80095b6 <atan+0x25e>
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f6 fec9 	bl	80002b8 <__aeabi_dsub>
 8009526:	e72c      	b.n	8009382 <atan+0x2a>
 8009528:	ee10 0a10 	vmov	r0, s0
 800952c:	4b53      	ldr	r3, [pc, #332]	; (800967c <atan+0x324>)
 800952e:	2200      	movs	r2, #0
 8009530:	4629      	mov	r1, r5
 8009532:	f7f6 fec1 	bl	80002b8 <__aeabi_dsub>
 8009536:	4b51      	ldr	r3, [pc, #324]	; (800967c <atan+0x324>)
 8009538:	4606      	mov	r6, r0
 800953a:	460f      	mov	r7, r1
 800953c:	2200      	movs	r2, #0
 800953e:	4620      	mov	r0, r4
 8009540:	4629      	mov	r1, r5
 8009542:	f7f6 febb 	bl	80002bc <__adddf3>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	f7f7 f995 	bl	800087c <__aeabi_ddiv>
 8009552:	f04f 0a01 	mov.w	sl, #1
 8009556:	4604      	mov	r4, r0
 8009558:	460d      	mov	r5, r1
 800955a:	e764      	b.n	8009426 <atan+0xce>
 800955c:	4b49      	ldr	r3, [pc, #292]	; (8009684 <atan+0x32c>)
 800955e:	429e      	cmp	r6, r3
 8009560:	da1d      	bge.n	800959e <atan+0x246>
 8009562:	ee10 0a10 	vmov	r0, s0
 8009566:	4b48      	ldr	r3, [pc, #288]	; (8009688 <atan+0x330>)
 8009568:	2200      	movs	r2, #0
 800956a:	4629      	mov	r1, r5
 800956c:	f7f6 fea4 	bl	80002b8 <__aeabi_dsub>
 8009570:	4b45      	ldr	r3, [pc, #276]	; (8009688 <atan+0x330>)
 8009572:	4606      	mov	r6, r0
 8009574:	460f      	mov	r7, r1
 8009576:	2200      	movs	r2, #0
 8009578:	4620      	mov	r0, r4
 800957a:	4629      	mov	r1, r5
 800957c:	f7f7 f854 	bl	8000628 <__aeabi_dmul>
 8009580:	4b3e      	ldr	r3, [pc, #248]	; (800967c <atan+0x324>)
 8009582:	2200      	movs	r2, #0
 8009584:	f7f6 fe9a 	bl	80002bc <__adddf3>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	4630      	mov	r0, r6
 800958e:	4639      	mov	r1, r7
 8009590:	f7f7 f974 	bl	800087c <__aeabi_ddiv>
 8009594:	f04f 0a02 	mov.w	sl, #2
 8009598:	4604      	mov	r4, r0
 800959a:	460d      	mov	r5, r1
 800959c:	e743      	b.n	8009426 <atan+0xce>
 800959e:	462b      	mov	r3, r5
 80095a0:	ee10 2a10 	vmov	r2, s0
 80095a4:	4939      	ldr	r1, [pc, #228]	; (800968c <atan+0x334>)
 80095a6:	2000      	movs	r0, #0
 80095a8:	f7f7 f968 	bl	800087c <__aeabi_ddiv>
 80095ac:	f04f 0a03 	mov.w	sl, #3
 80095b0:	4604      	mov	r4, r0
 80095b2:	460d      	mov	r5, r1
 80095b4:	e737      	b.n	8009426 <atan+0xce>
 80095b6:	4b36      	ldr	r3, [pc, #216]	; (8009690 <atan+0x338>)
 80095b8:	4e36      	ldr	r6, [pc, #216]	; (8009694 <atan+0x33c>)
 80095ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	f7f6 fe79 	bl	80002b8 <__aeabi_dsub>
 80095c6:	4622      	mov	r2, r4
 80095c8:	462b      	mov	r3, r5
 80095ca:	f7f6 fe75 	bl	80002b8 <__aeabi_dsub>
 80095ce:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80095da:	f7f6 fe6d 	bl	80002b8 <__aeabi_dsub>
 80095de:	f1bb 0f00 	cmp.w	fp, #0
 80095e2:	4604      	mov	r4, r0
 80095e4:	460d      	mov	r5, r1
 80095e6:	f6bf aed6 	bge.w	8009396 <atan+0x3e>
 80095ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095ee:	461d      	mov	r5, r3
 80095f0:	e6d1      	b.n	8009396 <atan+0x3e>
 80095f2:	a51d      	add	r5, pc, #116	; (adr r5, 8009668 <atan+0x310>)
 80095f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095f8:	e6cd      	b.n	8009396 <atan+0x3e>
 80095fa:	bf00      	nop
 80095fc:	f3af 8000 	nop.w
 8009600:	54442d18 	.word	0x54442d18
 8009604:	bff921fb 	.word	0xbff921fb
 8009608:	8800759c 	.word	0x8800759c
 800960c:	7e37e43c 	.word	0x7e37e43c
 8009610:	e322da11 	.word	0xe322da11
 8009614:	3f90ad3a 	.word	0x3f90ad3a
 8009618:	24760deb 	.word	0x24760deb
 800961c:	3fa97b4b 	.word	0x3fa97b4b
 8009620:	a0d03d51 	.word	0xa0d03d51
 8009624:	3fb10d66 	.word	0x3fb10d66
 8009628:	c54c206e 	.word	0xc54c206e
 800962c:	3fb745cd 	.word	0x3fb745cd
 8009630:	920083ff 	.word	0x920083ff
 8009634:	3fc24924 	.word	0x3fc24924
 8009638:	5555550d 	.word	0x5555550d
 800963c:	3fd55555 	.word	0x3fd55555
 8009640:	2c6a6c2f 	.word	0x2c6a6c2f
 8009644:	bfa2b444 	.word	0xbfa2b444
 8009648:	52defd9a 	.word	0x52defd9a
 800964c:	3fadde2d 	.word	0x3fadde2d
 8009650:	af749a6d 	.word	0xaf749a6d
 8009654:	3fb3b0f2 	.word	0x3fb3b0f2
 8009658:	fe231671 	.word	0xfe231671
 800965c:	3fbc71c6 	.word	0x3fbc71c6
 8009660:	9998ebc4 	.word	0x9998ebc4
 8009664:	3fc99999 	.word	0x3fc99999
 8009668:	54442d18 	.word	0x54442d18
 800966c:	3ff921fb 	.word	0x3ff921fb
 8009670:	440fffff 	.word	0x440fffff
 8009674:	7ff00000 	.word	0x7ff00000
 8009678:	3fdbffff 	.word	0x3fdbffff
 800967c:	3ff00000 	.word	0x3ff00000
 8009680:	3ff2ffff 	.word	0x3ff2ffff
 8009684:	40038000 	.word	0x40038000
 8009688:	3ff80000 	.word	0x3ff80000
 800968c:	bff00000 	.word	0xbff00000
 8009690:	08009b30 	.word	0x08009b30
 8009694:	08009b10 	.word	0x08009b10

08009698 <fabs>:
 8009698:	ec51 0b10 	vmov	r0, r1, d0
 800969c:	ee10 2a10 	vmov	r2, s0
 80096a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096a4:	ec43 2b10 	vmov	d0, r2, r3
 80096a8:	4770      	bx	lr
	...

080096ac <_init>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	bf00      	nop
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr

080096b8 <_fini>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr
