
XBee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009194  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009358  08009358  00019358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009784  08009784  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800978c  0800978c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800978c  0800978c  0001978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001d4  08009968  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08009968  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100be  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002337  00000000  00000000  00030305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00032640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2e  00000000  00000000  00033378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6c3  00000000  00000000  00033da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108a7  00000000  00000000  0005e469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001011b2  00000000  00000000  0006ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046e8  00000000  00000000  0016fec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001745ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800933c 	.word	0x0800933c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	0800933c 	.word	0x0800933c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b098      	sub	sp, #96	; 0x60
 8000ed8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 fef4 	bl	8001cc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f8ad 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 fa05 	bl	80012f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ee6:	f000 f93b 	bl	8001160 <MX_USART2_UART_Init>
  MX_LPUART1_UART_Init();
 8000eea:	f000 f8ed 	bl	80010c8 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000eee:	f000 f983 	bl	80011f8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000ef2:	f000 f9bf 	bl	8001274 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  // Use interrupts to receive data
  HAL_UART_Receive_IT(&huart2, rx_data, 2);
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4946      	ldr	r1, [pc, #280]	; (8001014 <main+0x140>)
 8000efa:	4847      	ldr	r0, [pc, #284]	; (8001018 <main+0x144>)
 8000efc:	f003 fcc0 	bl	8004880 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t not_analog[6] = {0, 0, 128, 128, 128, 128};
 8000f00:	4a46      	ldr	r2, [pc, #280]	; (800101c <main+0x148>)
 8000f02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f0a:	6018      	str	r0, [r3, #0]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	8019      	strh	r1, [r3, #0]
  uint8_t spi_trs[21] = {0x01, 0x42};
 8000f10:	f244 2301 	movw	r3, #16897	; 0x4201
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
 8000f16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	741a      	strb	r2, [r3, #16]
  while (1)
  {
	# define DEBUG_MODE 1;

	// Read Controller 1 (SPI 1)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2c:	483c      	ldr	r0, [pc, #240]	; (8001020 <main+0x14c>)
 8000f2e:	f001 fac1 	bl	80024b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, spi_trs, spi_rec1, 9, 10);
 8000f32:	f107 0218 	add.w	r2, r7, #24
 8000f36:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2309      	movs	r3, #9
 8000f40:	4838      	ldr	r0, [pc, #224]	; (8001024 <main+0x150>)
 8000f42:	f003 f836 	bl	8003fb2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4c:	4834      	ldr	r0, [pc, #208]	; (8001020 <main+0x14c>)
 8000f4e:	f001 fab1 	bl	80024b4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f52:	200a      	movs	r0, #10
 8000f54:	f000 ff2c 	bl	8001db0 <HAL_Delay>

	// Read Controller 2 (SPI 3)
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET); // ATT
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5e:	4832      	ldr	r0, [pc, #200]	; (8001028 <main+0x154>)
 8000f60:	f001 faa8 	bl	80024b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, spi_trs, spi_rec2, 9, 10);
 8000f64:	463a      	mov	r2, r7
 8000f66:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2309      	movs	r3, #9
 8000f70:	482e      	ldr	r0, [pc, #184]	; (800102c <main+0x158>)
 8000f72:	f003 f81e 	bl	8003fb2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET); // ATT
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7c:	482a      	ldr	r0, [pc, #168]	; (8001028 <main+0x154>)
 8000f7e:	f001 fa99 	bl	80024b4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f82:	200a      	movs	r0, #10
 8000f84:	f000 ff14 	bl	8001db0 <HAL_Delay>

	// Only transmit if in Analog mode
	// Header may be unique to controller

	#ifdef DEBUG_MODE
		printf("Controller 1: ");
 8000f88:	4829      	ldr	r0, [pc, #164]	; (8001030 <main+0x15c>)
 8000f8a:	f006 f9f1 	bl	8007370 <iprintf>
		for (int i = 0; i < 9; ++i) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	657b      	str	r3, [r7, #84]	; 0x54
 8000f92:	e00b      	b.n	8000fac <main+0xd8>
			printf("%2x ", spi_rec1[i]);
 8000f94:	f107 0218 	add.w	r2, r7, #24
 8000f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4824      	ldr	r0, [pc, #144]	; (8001034 <main+0x160>)
 8000fa2:	f006 f9e5 	bl	8007370 <iprintf>
		for (int i = 0; i < 9; ++i) {
 8000fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa8:	3301      	adds	r3, #1
 8000faa:	657b      	str	r3, [r7, #84]	; 0x54
 8000fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	ddf0      	ble.n	8000f94 <main+0xc0>
		}
		printf("\n");
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	f006 f9ee 	bl	8007394 <putchar>
		printf("Controller 2: ");
 8000fb8:	481f      	ldr	r0, [pc, #124]	; (8001038 <main+0x164>)
 8000fba:	f006 f9d9 	bl	8007370 <iprintf>
		for (int i = 0; i < 9; ++i) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	653b      	str	r3, [r7, #80]	; 0x50
 8000fc2:	e00a      	b.n	8000fda <main+0x106>
			printf("%2x ", spi_rec2[i]);
 8000fc4:	463a      	mov	r2, r7
 8000fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4819      	ldr	r0, [pc, #100]	; (8001034 <main+0x160>)
 8000fd0:	f006 f9ce 	bl	8007370 <iprintf>
		for (int i = 0; i < 9; ++i) {
 8000fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	653b      	str	r3, [r7, #80]	; 0x50
 8000fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	ddf1      	ble.n	8000fc4 <main+0xf0>
		}
		printf("\n");
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f006 f9d7 	bl	8007394 <putchar>
	#endif

	if(spi_rec1[1] == 0x73) {
 8000fe6:	7e7b      	ldrb	r3, [r7, #25]
 8000fe8:	2b73      	cmp	r3, #115	; 0x73
 8000fea:	d108      	bne.n	8000ffe <main+0x12a>
		HAL_UART_Transmit(&huart2, spi_rec1 + 3, 6, 10);
 8000fec:	f107 0118 	add.w	r1, r7, #24
 8000ff0:	3103      	adds	r1, #3
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	2206      	movs	r2, #6
 8000ff6:	4808      	ldr	r0, [pc, #32]	; (8001018 <main+0x144>)
 8000ff8:	f003 fbb2 	bl	8004760 <HAL_UART_Transmit>
 8000ffc:	e006      	b.n	800100c <main+0x138>
	} else {
		HAL_UART_Transmit(&huart2, not_analog, 6, 10);
 8000ffe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001002:	230a      	movs	r3, #10
 8001004:	2206      	movs	r2, #6
 8001006:	4804      	ldr	r0, [pc, #16]	; (8001018 <main+0x144>)
 8001008:	f003 fbaa 	bl	8004760 <HAL_UART_Transmit>
	}
	HAL_Delay(10);
 800100c:	200a      	movs	r0, #10
 800100e:	f000 fecf 	bl	8001db0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001012:	e788      	b.n	8000f26 <main+0x52>
 8001014:	200003e0 	.word	0x200003e0
 8001018:	20000284 	.word	0x20000284
 800101c:	08009380 	.word	0x08009380
 8001020:	48000800 	.word	0x48000800
 8001024:	20000318 	.word	0x20000318
 8001028:	48001400 	.word	0x48001400
 800102c:	2000037c 	.word	0x2000037c
 8001030:	08009358 	.word	0x08009358
 8001034:	08009368 	.word	0x08009368
 8001038:	08009370 	.word	0x08009370

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b096      	sub	sp, #88	; 0x58
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2244      	movs	r2, #68	; 0x44
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f006 f9ed 	bl	800742a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800105e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001062:	f001 fa5f 	bl	8002524 <HAL_PWREx_ControlVoltageScaling>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800106c:	f000 fbaa 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001070:	2310      	movs	r3, #16
 8001072:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800107c:	2360      	movs	r3, #96	; 0x60
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001080:	2300      	movs	r3, #0
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4618      	mov	r0, r3
 800108a:	f001 faff 	bl	800268c <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001094:	f000 fb96 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 ff05 	bl	8002ec0 <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010bc:	f000 fb82 	bl	80017c4 <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3758      	adds	r7, #88	; 0x58
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 80010ce:	4a23      	ldr	r2, [pc, #140]	; (800115c <MX_LPUART1_UART_Init+0x94>)
 80010d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 8001106:	2200      	movs	r2, #0
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001110:	4811      	ldr	r0, [pc, #68]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 8001112:	f003 fad5 	bl	80046c0 <HAL_UART_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800111c:	f000 fb52 	bl	80017c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001120:	2100      	movs	r1, #0
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 8001124:	f005 fb31 	bl	800678a <HAL_UARTEx_SetTxFifoThreshold>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800112e:	f000 fb49 	bl	80017c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 8001136:	f005 fb66 	bl	8006806 <HAL_UARTEx_SetRxFifoThreshold>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001140:	f000 fb40 	bl	80017c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_LPUART1_UART_Init+0x90>)
 8001146:	f005 fae7 	bl	8006718 <HAL_UARTEx_DisableFifoMode>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001150:	f000 fb38 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001f0 	.word	0x200001f0
 800115c:	40008000 	.word	0x40008000

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001164:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 8001166:	4a23      	ldr	r2, [pc, #140]	; (80011f4 <MX_USART2_UART_Init+0x94>)
 8001168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a8:	4811      	ldr	r0, [pc, #68]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 80011aa:	f003 fa89 	bl	80046c0 <HAL_UART_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011b4:	f000 fb06 	bl	80017c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b8:	2100      	movs	r1, #0
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 80011bc:	f005 fae5 	bl	800678a <HAL_UARTEx_SetTxFifoThreshold>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011c6:	f000 fafd 	bl	80017c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ca:	2100      	movs	r1, #0
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 80011ce:	f005 fb1a 	bl	8006806 <HAL_UARTEx_SetRxFifoThreshold>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011d8:	f000 faf4 	bl	80017c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_USART2_UART_Init+0x90>)
 80011de:	f005 fa9b 	bl	8006718 <HAL_UARTEx_DisableFifoMode>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011e8:	f000 faec 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000284 	.word	0x20000284
 80011f4:	40004400 	.word	0x40004400

080011f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_SPI1_Init+0x74>)
 80011fe:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <MX_SPI1_Init+0x78>)
 8001200:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_SPI1_Init+0x74>)
 8001204:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001208:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_SPI1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_SPI1_Init+0x74>)
 8001212:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001216:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_SPI1_Init+0x74>)
 800121a:	2202      	movs	r2, #2
 800121c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_SPI1_Init+0x74>)
 8001220:	2201      	movs	r2, #1
 8001222:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_SPI1_Init+0x74>)
 8001226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_SPI1_Init+0x74>)
 800122e:	2220      	movs	r2, #32
 8001230:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_SPI1_Init+0x74>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_SPI1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_SPI1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_SPI1_Init+0x74>)
 8001246:	2207      	movs	r2, #7
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_SPI1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_SPI1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_SPI1_Init+0x74>)
 8001258:	f002 fe08 	bl	8003e6c <HAL_SPI_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001262:	f000 faaf 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000318 	.word	0x20000318
 8001270:	40013000 	.word	0x40013000

08001274 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_SPI3_Init+0x74>)
 800127a:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <MX_SPI3_Init+0x78>)
 800127c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_SPI3_Init+0x74>)
 8001280:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001284:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_SPI3_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_SPI3_Init+0x74>)
 800128e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001292:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_SPI3_Init+0x74>)
 8001296:	2202      	movs	r2, #2
 8001298:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <MX_SPI3_Init+0x74>)
 800129c:	2201      	movs	r2, #1
 800129e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_SPI3_Init+0x74>)
 80012a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_SPI3_Init+0x74>)
 80012aa:	2220      	movs	r2, #32
 80012ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_SPI3_Init+0x74>)
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_SPI3_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_SPI3_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_SPI3_Init+0x74>)
 80012c2:	2207      	movs	r2, #7
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_SPI3_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_SPI3_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_SPI3_Init+0x74>)
 80012d4:	f002 fdca 	bl	8003e6c <HAL_SPI_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012de:	f000 fa71 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000037c 	.word	0x2000037c
 80012ec:	40003c00 	.word	0x40003c00

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08e      	sub	sp, #56	; 0x38
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001306:	4bb3      	ldr	r3, [pc, #716]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4ab2      	ldr	r2, [pc, #712]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4bb0      	ldr	r3, [pc, #704]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	623b      	str	r3, [r7, #32]
 800131c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	4bad      	ldr	r3, [pc, #692]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4aac      	ldr	r2, [pc, #688]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4baa      	ldr	r3, [pc, #680]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001336:	4ba7      	ldr	r3, [pc, #668]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4aa6      	ldr	r2, [pc, #664]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 800133c:	f043 0320 	orr.w	r3, r3, #32
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4ba4      	ldr	r3, [pc, #656]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	4ba1      	ldr	r3, [pc, #644]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4aa0      	ldr	r2, [pc, #640]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135a:	4b9e      	ldr	r3, [pc, #632]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b9b      	ldr	r3, [pc, #620]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a9a      	ldr	r2, [pc, #616]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4b98      	ldr	r3, [pc, #608]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b95      	ldr	r3, [pc, #596]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4a94      	ldr	r2, [pc, #592]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4b92      	ldr	r3, [pc, #584]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001396:	4b8f      	ldr	r3, [pc, #572]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a8e      	ldr	r2, [pc, #568]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b8c      	ldr	r3, [pc, #560]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ae:	4b89      	ldr	r3, [pc, #548]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a88      	ldr	r2, [pc, #544]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 80013b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b86      	ldr	r3, [pc, #536]	; (80015d4 <MX_GPIO_Init+0x2e4>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80013c6:	f001 f951 	bl	800266c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d0:	4881      	ldr	r0, [pc, #516]	; (80015d8 <MX_GPIO_Init+0x2e8>)
 80013d2:	f001 f86f 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013dc:	487f      	ldr	r0, [pc, #508]	; (80015dc <MX_GPIO_Init+0x2ec>)
 80013de:	f001 f869 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013e2:	230c      	movs	r3, #12
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013f2:	230d      	movs	r3, #13
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4878      	ldr	r0, [pc, #480]	; (80015e0 <MX_GPIO_Init+0x2f0>)
 80013fe:	f000 fec7 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001402:	2307      	movs	r3, #7
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001406:	2312      	movs	r3, #18
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001412:	2304      	movs	r3, #4
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	486e      	ldr	r0, [pc, #440]	; (80015d8 <MX_GPIO_Init+0x2e8>)
 800141e:	f000 feb7 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001432:	230d      	movs	r3, #13
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	4866      	ldr	r0, [pc, #408]	; (80015d8 <MX_GPIO_Init+0x2e8>)
 800143e:	f000 fea7 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001442:	233f      	movs	r3, #63	; 0x3f
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001446:	230b      	movs	r3, #11
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	4861      	ldr	r0, [pc, #388]	; (80015dc <MX_GPIO_Init+0x2ec>)
 8001456:	f000 fe9b 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800145a:	2301      	movs	r3, #1
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800146a:	2301      	movs	r3, #1
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001478:	f000 fe8a 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800147c:	230a      	movs	r3, #10
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001480:	230b      	movs	r3, #11
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001492:	f000 fe7d 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001496:	2301      	movs	r3, #1
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014a6:	2302      	movs	r3, #2
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	484c      	ldr	r0, [pc, #304]	; (80015e4 <MX_GPIO_Init+0x2f4>)
 80014b2:	f000 fe6d 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014b6:	2302      	movs	r3, #2
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014ba:	230b      	movs	r3, #11
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	4846      	ldr	r0, [pc, #280]	; (80015e4 <MX_GPIO_Init+0x2f4>)
 80014ca:	f000 fe61 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80014ce:	2344      	movs	r3, #68	; 0x44
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d2:	2303      	movs	r3, #3
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	4840      	ldr	r0, [pc, #256]	; (80015e4 <MX_GPIO_Init+0x2f4>)
 80014e2:	f000 fe55 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	4619      	mov	r1, r3
 80014fe:	4836      	ldr	r0, [pc, #216]	; (80015d8 <MX_GPIO_Init+0x2e8>)
 8001500:	f000 fe46 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001504:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001516:	2301      	movs	r3, #1
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	482f      	ldr	r0, [pc, #188]	; (80015e0 <MX_GPIO_Init+0x2f0>)
 8001522:	f000 fe35 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001526:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001538:	2303      	movs	r3, #3
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	4827      	ldr	r0, [pc, #156]	; (80015e0 <MX_GPIO_Init+0x2f0>)
 8001544:	f000 fe24 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800155a:	2301      	movs	r3, #1
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	481f      	ldr	r0, [pc, #124]	; (80015e4 <MX_GPIO_Init+0x2f4>)
 8001566:	f000 fe13 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800156a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800157c:	230d      	movs	r3, #13
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	4817      	ldr	r0, [pc, #92]	; (80015e4 <MX_GPIO_Init+0x2f4>)
 8001588:	f000 fe02 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800158c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800159e:	230e      	movs	r3, #14
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	480e      	ldr	r0, [pc, #56]	; (80015e4 <MX_GPIO_Init+0x2f4>)
 80015aa:	f000 fdf1 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c0:	2307      	movs	r3, #7
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_GPIO_Init+0x2f8>)
 80015cc:	f000 fde0 	bl	8002190 <HAL_GPIO_Init>
 80015d0:	e00c      	b.n	80015ec <MX_GPIO_Init+0x2fc>
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	48001400 	.word	0x48001400
 80015dc:	48000800 	.word	0x48000800
 80015e0:	48001000 	.word	0x48001000
 80015e4:	48000400 	.word	0x48000400
 80015e8:	48000c00 	.word	0x48000c00

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015fe:	2302      	movs	r3, #2
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	4853      	ldr	r0, [pc, #332]	; (8001758 <MX_GPIO_Init+0x468>)
 800160a:	f000 fdc1 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800160e:	2340      	movs	r3, #64	; 0x40
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800161e:	230d      	movs	r3, #13
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	484c      	ldr	r0, [pc, #304]	; (800175c <MX_GPIO_Init+0x46c>)
 800162a:	f000 fdb1 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800163e:	2302      	movs	r3, #2
 8001640:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001646:	4619      	mov	r1, r3
 8001648:	4844      	ldr	r0, [pc, #272]	; (800175c <MX_GPIO_Init+0x46c>)
 800164a:	f000 fda1 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800164e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	483d      	ldr	r0, [pc, #244]	; (800175c <MX_GPIO_Init+0x46c>)
 8001668:	f000 fd92 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800166c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800167e:	230c      	movs	r3, #12
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	4834      	ldr	r0, [pc, #208]	; (800175c <MX_GPIO_Init+0x46c>)
 800168a:	f000 fd81 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800168e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016a0:	230a      	movs	r3, #10
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f000 fd6f 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f000 fd61 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ce:	2301      	movs	r3, #1
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016de:	2309      	movs	r3, #9
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	481b      	ldr	r0, [pc, #108]	; (8001758 <MX_GPIO_Init+0x468>)
 80016ea:	f000 fd51 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016ee:	2304      	movs	r3, #4
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016fe:	230c      	movs	r3, #12
 8001700:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	4813      	ldr	r0, [pc, #76]	; (8001758 <MX_GPIO_Init+0x468>)
 800170a:	f000 fd41 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800170e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001714:	2312      	movs	r3, #18
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001720:	2304      	movs	r3, #4
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <MX_GPIO_Init+0x470>)
 800172c:	f000 fd30 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001730:	2301      	movs	r3, #1
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001740:	2302      	movs	r3, #2
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <MX_GPIO_Init+0x474>)
 800174c:	f000 fd20 	bl	8002190 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001750:	bf00      	nop
 8001752:	3738      	adds	r7, #56	; 0x38
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	48000c00 	.word	0x48000c00
 800175c:	48000800 	.word	0x48000800
 8001760:	48000400 	.word	0x48000400
 8001764:	48001000 	.word	0x48001000

08001768 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001770:	1d39      	adds	r1, r7, #4
 8001772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001776:	2201      	movs	r2, #1
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <__io_putchar+0x20>)
 800177a:	f002 fff1 	bl	8004760 <HAL_UART_Transmit>
  return ch;
 800177e:	687b      	ldr	r3, [r7, #4]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200001f0 	.word	0x200001f0

0800178c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
   UNUSED(huart);

   printf("Received data: %x%x\n", rx_data[0], rx_data[1]);
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_UART_RxCpltCallback+0x2c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_UART_RxCpltCallback+0x2c>)
 800179c:	785b      	ldrb	r3, [r3, #1]
 800179e:	461a      	mov	r2, r3
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <HAL_UART_RxCpltCallback+0x30>)
 80017a2:	f005 fde5 	bl	8007370 <iprintf>
   HAL_UART_Receive_IT(&huart2, rx_data, 2);
 80017a6:	2202      	movs	r2, #2
 80017a8:	4903      	ldr	r1, [pc, #12]	; (80017b8 <HAL_UART_RxCpltCallback+0x2c>)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <HAL_UART_RxCpltCallback+0x34>)
 80017ac:	f003 f868 	bl	8004880 <HAL_UART_Receive_IT>
 }
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200003e0 	.word	0x200003e0
 80017bc:	08009388 	.word	0x08009388
 80017c0:	20000284 	.word	0x20000284

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x8>
	...

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_MspInit+0x44>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_MspInit+0x44>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6613      	str	r3, [r2, #96]	; 0x60
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_MspInit+0x44>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_MspInit+0x44>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <HAL_MspInit+0x44>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_MspInit+0x44>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0b0      	sub	sp, #192	; 0xc0
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	2294      	movs	r2, #148	; 0x94
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f005 fdf6 	bl	800742a <memset>
  if(huart->Instance==LPUART1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a47      	ldr	r2, [pc, #284]	; (8001960 <HAL_UART_MspInit+0x148>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d13e      	bne.n	80018c6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001848:	2320      	movs	r3, #32
 800184a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800184c:	2300      	movs	r3, #0
 800184e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fdf1 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001860:	f7ff ffb0 	bl	80017c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001864:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <HAL_UART_MspInit+0x14c>)
 8001866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001868:	4a3e      	ldr	r2, [pc, #248]	; (8001964 <HAL_UART_MspInit+0x14c>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001870:	4b3c      	ldr	r3, [pc, #240]	; (8001964 <HAL_UART_MspInit+0x14c>)
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800187c:	4b39      	ldr	r3, [pc, #228]	; (8001964 <HAL_UART_MspInit+0x14c>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	4a38      	ldr	r2, [pc, #224]	; (8001964 <HAL_UART_MspInit+0x14c>)
 8001882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <HAL_UART_MspInit+0x14c>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001894:	f000 feea 	bl	800266c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001898:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800189c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80018b2:	2308      	movs	r3, #8
 80018b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018bc:	4619      	mov	r1, r3
 80018be:	482a      	ldr	r0, [pc, #168]	; (8001968 <HAL_UART_MspInit+0x150>)
 80018c0:	f000 fc66 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018c4:	e047      	b.n	8001956 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a28      	ldr	r2, [pc, #160]	; (800196c <HAL_UART_MspInit+0x154>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d142      	bne.n	8001956 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	4618      	mov	r0, r3
 80018de:	f001 fdad 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80018e8:	f7ff ff6c 	bl	80017c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_UART_MspInit+0x14c>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_UART_MspInit+0x14c>)
 80018f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f6:	6593      	str	r3, [r2, #88]	; 0x58
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_UART_MspInit+0x14c>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_UART_MspInit+0x14c>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	4a16      	ldr	r2, [pc, #88]	; (8001964 <HAL_UART_MspInit+0x14c>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_UART_MspInit+0x14c>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800191c:	2378      	movs	r3, #120	; 0x78
 800191e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001934:	2307      	movs	r3, #7
 8001936:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800193e:	4619      	mov	r1, r3
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <HAL_UART_MspInit+0x158>)
 8001942:	f000 fc25 	bl	8002190 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2026      	movs	r0, #38	; 0x26
 800194c:	f000 fb2f 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001950:	2026      	movs	r0, #38	; 0x26
 8001952:	f000 fb48 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	37c0      	adds	r7, #192	; 0xc0
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40008000 	.word	0x40008000
 8001964:	40021000 	.word	0x40021000
 8001968:	48001800 	.word	0x48001800
 800196c:	40004400 	.word	0x40004400
 8001970:	48000c00 	.word	0x48000c00

08001974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	; 0x30
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2e      	ldr	r2, [pc, #184]	; (8001a4c <HAL_SPI_MspInit+0xd8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d129      	bne.n	80019ea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199a:	4a2d      	ldr	r2, [pc, #180]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 800199c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a0:	6613      	str	r3, [r2, #96]	; 0x60
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019c6:	23f0      	movs	r3, #240	; 0xf0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d6:	2305      	movs	r3, #5
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e4:	f000 fbd4 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019e8:	e02c      	b.n	8001a44 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_SPI_MspInit+0xe0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d127      	bne.n	8001a44 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 80019fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_SPI_MspInit+0xdc>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a24:	2338      	movs	r3, #56	; 0x38
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a34:	2306      	movs	r3, #6
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <HAL_SPI_MspInit+0xe4>)
 8001a40:	f000 fba6 	bl	8002190 <HAL_GPIO_Init>
}
 8001a44:	bf00      	nop
 8001a46:	3730      	adds	r7, #48	; 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40013000 	.word	0x40013000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40003c00 	.word	0x40003c00
 8001a58:	48000400 	.word	0x48000400

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 f962 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <USART2_IRQHandler+0x10>)
 8001ab6:	f002 ff2f 	bl	8004918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
//  HAL_UART_RxCpltCallback(&huart2);
  /* USER CODE END USART2_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000284 	.word	0x20000284

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ade:	f005 fcf7 	bl	80074d0 <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2216      	movs	r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe7 	bl	8001ad4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b06:	e7fe      	b.n	8001b06 <_exit+0x12>

08001b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4601      	mov	r1, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf0      	blt.n	8001b1a <_read+0x12>
  }

  return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e009      	b.n	8001b68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fe03 	bl	8001768 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_write+0x12>
  }
  return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_close>:

int _close(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_isatty>:

int _isatty(int file)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f005 fc5c 	bl	80074d0 <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200a0000 	.word	0x200a0000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	200003e4 	.word	0x200003e4
 8001c4c:	20000538 	.word	0x20000538

08001c50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <SystemInit+0x20>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <SystemInit+0x20>)
 8001c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c78:	f7ff ffea 	bl	8001c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c7e:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <LoopForever+0xe>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c94:	4c0a      	ldr	r4, [pc, #40]	; (8001cc0 <LoopForever+0x16>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f005 fc1b 	bl	80074dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ca6:	f7ff f915 	bl	8000ed4 <main>

08001caa <LoopForever>:

LoopForever:
    b LoopForever
 8001caa:	e7fe      	b.n	8001caa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cb8:	08009794 	.word	0x08009794
  ldr r2, =_sbss
 8001cbc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001cc0:	20000538 	.word	0x20000538

08001cc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC1_IRQHandler>

08001cc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f000 f961 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f000 f80e 	bl	8001cf8 <HAL_InitTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	71fb      	strb	r3, [r7, #7]
 8001ce6:	e001      	b.n	8001cec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ce8:	f7ff fd72 	bl	80017d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cec:	79fb      	ldrb	r3, [r7, #7]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_InitTick+0x6c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d023      	beq.n	8001d54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_InitTick+0x70>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_InitTick+0x6c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f96d 	bl	8002002 <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10f      	bne.n	8001d4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0f      	cmp	r3, #15
 8001d32:	d809      	bhi.n	8001d48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f000 f937 	bl	8001fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d40:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_InitTick+0x74>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e007      	b.n	8001d58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e004      	b.n	8001d58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e001      	b.n	8001d58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000008 	.word	0x20000008
 8001d94:	200003e8 	.word	0x200003e8

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	200003e8 	.word	0x200003e8

08001db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff ffee 	bl	8001d98 <HAL_GetTick>
 8001dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d005      	beq.n	8001dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_Delay+0x44>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd6:	bf00      	nop
 8001dd8:	f7ff ffde 	bl	8001d98 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d8f7      	bhi.n	8001dd8 <HAL_Delay+0x28>
  {
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4907      	ldr	r1, [pc, #28]	; (8001e94 <__NVIC_EnableIRQ+0x38>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff29 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff3e 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff8e 	bl	8001eec <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5d 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff31 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa2 	bl	8001f54 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800201a:	b480      	push	{r7}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d008      	beq.n	8002044 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2204      	movs	r2, #4
 8002036:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e040      	b.n	80020c6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 020e 	bic.w	r2, r2, #14
 8002052:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002062:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f003 021c 	and.w	r2, r3, #28
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002090:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d005      	beq.n	80020f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2204      	movs	r2, #4
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e047      	b.n	8002186 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 020e 	bic.w	r2, r2, #14
 8002104:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f003 021c 	and.w	r2, r3, #28
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f202 	lsl.w	r2, r1, r2
 8002138:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002142:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00c      	beq.n	8002166 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800215a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002164:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
    }
  }
  return status;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219e:	e166      	b.n	800246e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8158 	beq.w	8002468 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d005      	beq.n	80021d0 <HAL_GPIO_Init+0x40>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d130      	bne.n	8002232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002206:	2201      	movs	r2, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	f003 0201 	and.w	r2, r3, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b03      	cmp	r3, #3
 800223c:	d017      	beq.n	800226e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d123      	bne.n	80022c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	08da      	lsrs	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3208      	adds	r2, #8
 8002282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	6939      	ldr	r1, [r7, #16]
 80022be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0203 	and.w	r2, r3, #3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80b2 	beq.w	8002468 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002304:	4b61      	ldr	r3, [pc, #388]	; (800248c <HAL_GPIO_Init+0x2fc>)
 8002306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002308:	4a60      	ldr	r2, [pc, #384]	; (800248c <HAL_GPIO_Init+0x2fc>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6613      	str	r3, [r2, #96]	; 0x60
 8002310:	4b5e      	ldr	r3, [pc, #376]	; (800248c <HAL_GPIO_Init+0x2fc>)
 8002312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800231c:	4a5c      	ldr	r2, [pc, #368]	; (8002490 <HAL_GPIO_Init+0x300>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002346:	d02b      	beq.n	80023a0 <HAL_GPIO_Init+0x210>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a52      	ldr	r2, [pc, #328]	; (8002494 <HAL_GPIO_Init+0x304>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d025      	beq.n	800239c <HAL_GPIO_Init+0x20c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a51      	ldr	r2, [pc, #324]	; (8002498 <HAL_GPIO_Init+0x308>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d01f      	beq.n	8002398 <HAL_GPIO_Init+0x208>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a50      	ldr	r2, [pc, #320]	; (800249c <HAL_GPIO_Init+0x30c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d019      	beq.n	8002394 <HAL_GPIO_Init+0x204>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a4f      	ldr	r2, [pc, #316]	; (80024a0 <HAL_GPIO_Init+0x310>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d013      	beq.n	8002390 <HAL_GPIO_Init+0x200>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a4e      	ldr	r2, [pc, #312]	; (80024a4 <HAL_GPIO_Init+0x314>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00d      	beq.n	800238c <HAL_GPIO_Init+0x1fc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a4d      	ldr	r2, [pc, #308]	; (80024a8 <HAL_GPIO_Init+0x318>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <HAL_GPIO_Init+0x1f8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a4c      	ldr	r2, [pc, #304]	; (80024ac <HAL_GPIO_Init+0x31c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_GPIO_Init+0x1f4>
 8002380:	2307      	movs	r3, #7
 8002382:	e00e      	b.n	80023a2 <HAL_GPIO_Init+0x212>
 8002384:	2308      	movs	r3, #8
 8002386:	e00c      	b.n	80023a2 <HAL_GPIO_Init+0x212>
 8002388:	2306      	movs	r3, #6
 800238a:	e00a      	b.n	80023a2 <HAL_GPIO_Init+0x212>
 800238c:	2305      	movs	r3, #5
 800238e:	e008      	b.n	80023a2 <HAL_GPIO_Init+0x212>
 8002390:	2304      	movs	r3, #4
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_Init+0x212>
 8002394:	2303      	movs	r3, #3
 8002396:	e004      	b.n	80023a2 <HAL_GPIO_Init+0x212>
 8002398:	2302      	movs	r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_Init+0x212>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_GPIO_Init+0x212>
 80023a0:	2300      	movs	r3, #0
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	4093      	lsls	r3, r2
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b2:	4937      	ldr	r1, [pc, #220]	; (8002490 <HAL_GPIO_Init+0x300>)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023c0:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_GPIO_Init+0x320>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023e4:	4a32      	ldr	r2, [pc, #200]	; (80024b0 <HAL_GPIO_Init+0x320>)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023ea:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_GPIO_Init+0x320>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800240e:	4a28      	ldr	r2, [pc, #160]	; (80024b0 <HAL_GPIO_Init+0x320>)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002414:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_GPIO_Init+0x320>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	43db      	mvns	r3, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002438:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_GPIO_Init+0x320>)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <HAL_GPIO_Init+0x320>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43db      	mvns	r3, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002462:	4a13      	ldr	r2, [pc, #76]	; (80024b0 <HAL_GPIO_Init+0x320>)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	f47f ae91 	bne.w	80021a0 <HAL_GPIO_Init+0x10>
  }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	40021000 	.word	0x40021000
 8002490:	40010000 	.word	0x40010000
 8002494:	48000400 	.word	0x48000400
 8002498:	48000800 	.word	0x48000800
 800249c:	48000c00 	.word	0x48000c00
 80024a0:	48001000 	.word	0x48001000
 80024a4:	48001400 	.word	0x48001400
 80024a8:	48001800 	.word	0x48001800
 80024ac:	48001c00 	.word	0x48001c00
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024d0:	e002      	b.n	80024d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_PWREx_GetVoltageRange+0x3c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f4:	d102      	bne.n	80024fc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80024f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fa:	e00b      	b.n	8002514 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_PWREx_GetVoltageRange+0x3c>)
 80024fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800250a:	d102      	bne.n	8002512 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800250c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002510:	e000      	b.n	8002514 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002512:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40007000 	.word	0x40007000

08002524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d141      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002532:	4b4b      	ldr	r3, [pc, #300]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253e:	d131      	bne.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002540:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002546:	4a46      	ldr	r2, [pc, #280]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800254c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002550:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002558:	4a41      	ldr	r2, [pc, #260]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002560:	4b40      	ldr	r3, [pc, #256]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2232      	movs	r2, #50	; 0x32
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	0c9b      	lsrs	r3, r3, #18
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002576:	e002      	b.n	800257e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3b01      	subs	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257e:	4b38      	ldr	r3, [pc, #224]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258a:	d102      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f2      	bne.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002592:	4b33      	ldr	r3, [pc, #204]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d158      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e057      	b.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025aa:	4a2d      	ldr	r2, [pc, #180]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025b4:	e04d      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	d141      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025be:	4b28      	ldr	r3, [pc, #160]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d131      	bne.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d2:	4a23      	ldr	r2, [pc, #140]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025e4:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2232      	movs	r2, #50	; 0x32
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	0c9b      	lsrs	r3, r3, #18
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002602:	e002      	b.n	800260a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3b01      	subs	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002616:	d102      	bne.n	800261e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f2      	bne.n	8002604 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262a:	d112      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e011      	b.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002640:	e007      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002650:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40007000 	.word	0x40007000
 8002664:	20000000 	.word	0x20000000
 8002668:	431bde83 	.word	0x431bde83

0800266c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267a:	6053      	str	r3, [r2, #4]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40007000 	.word	0x40007000

0800268c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	f000 bc08 	b.w	8002eb0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a0:	4b96      	ldr	r3, [pc, #600]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026aa:	4b94      	ldr	r3, [pc, #592]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80e4 	beq.w	800288a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4c>
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	f040 808b 	bne.w	80027e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	f040 8087 	bne.w	80027e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026d8:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_OscConfig+0x64>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e3df      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	4b81      	ldr	r3, [pc, #516]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_RCC_OscConfig+0x7e>
 8002700:	4b7e      	ldr	r3, [pc, #504]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002708:	e005      	b.n	8002716 <HAL_RCC_OscConfig+0x8a>
 800270a:	4b7c      	ldr	r3, [pc, #496]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 800270c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002716:	4293      	cmp	r3, r2
 8002718:	d223      	bcs.n	8002762 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fdcc 	bl	80032bc <RCC_SetFlashLatencyFromMSIRange>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e3c0      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800272e:	4b73      	ldr	r3, [pc, #460]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a72      	ldr	r2, [pc, #456]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002734:	f043 0308 	orr.w	r3, r3, #8
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b70      	ldr	r3, [pc, #448]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	496d      	ldr	r1, [pc, #436]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800274c:	4b6b      	ldr	r3, [pc, #428]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	4968      	ldr	r1, [pc, #416]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
 8002760:	e025      	b.n	80027ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002762:	4b66      	ldr	r3, [pc, #408]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a65      	ldr	r2, [pc, #404]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	4960      	ldr	r1, [pc, #384]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002780:	4b5e      	ldr	r3, [pc, #376]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	495b      	ldr	r1, [pc, #364]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fd8c 	bl	80032bc <RCC_SetFlashLatencyFromMSIRange>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e380      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ae:	f000 fcc1 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b51      	ldr	r3, [pc, #324]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	4950      	ldr	r1, [pc, #320]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	4a4e      	ldr	r2, [pc, #312]	; (8002904 <HAL_RCC_OscConfig+0x278>)
 80027cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027ce:	4b4e      	ldr	r3, [pc, #312]	; (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fa90 	bl	8001cf8 <HAL_InitTick>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d052      	beq.n	8002888 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	e364      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d032      	beq.n	8002854 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027ee:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a42      	ldr	r2, [pc, #264]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027fa:	f7ff facd 	bl	8001d98 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002802:	f7ff fac9 	bl	8001d98 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e34d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002814:	4b39      	ldr	r3, [pc, #228]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a35      	ldr	r2, [pc, #212]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002826:	f043 0308 	orr.w	r3, r3, #8
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b33      	ldr	r3, [pc, #204]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4930      	ldr	r1, [pc, #192]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283e:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	492b      	ldr	r1, [pc, #172]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	e01a      	b.n	800288a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002854:	4b29      	ldr	r3, [pc, #164]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a28      	ldr	r2, [pc, #160]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002860:	f7ff fa9a 	bl	8001d98 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002868:	f7ff fa96 	bl	8001d98 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e31a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1dc>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002888:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d073      	beq.n	800297e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_OscConfig+0x21c>
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d10e      	bne.n	80028c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d10b      	bne.n	80028c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d063      	beq.n	800297c <HAL_RCC_OscConfig+0x2f0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d15f      	bne.n	800297c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e2f7      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d106      	bne.n	80028d8 <HAL_RCC_OscConfig+0x24c>
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e025      	b.n	8002924 <HAL_RCC_OscConfig+0x298>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e0:	d114      	bne.n	800290c <HAL_RCC_OscConfig+0x280>
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80028e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a02      	ldr	r2, [pc, #8]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e013      	b.n	8002924 <HAL_RCC_OscConfig+0x298>
 80028fc:	40021000 	.word	0x40021000
 8002900:	080093a0 	.word	0x080093a0
 8002904:	20000000 	.word	0x20000000
 8002908:	20000004 	.word	0x20000004
 800290c:	4ba0      	ldr	r3, [pc, #640]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a9f      	ldr	r2, [pc, #636]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b9d      	ldr	r3, [pc, #628]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a9c      	ldr	r2, [pc, #624]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff fa34 	bl	8001d98 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff fa30 	bl	8001d98 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e2b4      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002946:	4b92      	ldr	r3, [pc, #584]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x2a8>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7ff fa20 	bl	8001d98 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff fa1c 	bl	8001d98 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e2a0      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800296e:	4b88      	ldr	r3, [pc, #544]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x2d0>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d060      	beq.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d005      	beq.n	800299c <HAL_RCC_OscConfig+0x310>
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b0c      	cmp	r3, #12
 8002994:	d119      	bne.n	80029ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d116      	bne.n	80029ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800299c:	4b7c      	ldr	r3, [pc, #496]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_OscConfig+0x328>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e27d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b76      	ldr	r3, [pc, #472]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	4973      	ldr	r1, [pc, #460]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c8:	e040      	b.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d023      	beq.n	8002a1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d2:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7ff f9db 	bl	8001d98 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e6:	f7ff f9d7 	bl	8001d98 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e25b      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f8:	4b65      	ldr	r3, [pc, #404]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b62      	ldr	r3, [pc, #392]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	061b      	lsls	r3, r3, #24
 8002a12:	495f      	ldr	r1, [pc, #380]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
 8002a18:	e018      	b.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b5d      	ldr	r3, [pc, #372]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5c      	ldr	r2, [pc, #368]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7ff f9b7 	bl	8001d98 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7ff f9b3 	bl	8001d98 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e237      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a40:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d03c      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01c      	beq.n	8002a9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a60:	4b4b      	ldr	r3, [pc, #300]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a66:	4a4a      	ldr	r2, [pc, #296]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7ff f992 	bl	8001d98 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a78:	f7ff f98e 	bl	8001d98 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e212      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ef      	beq.n	8002a78 <HAL_RCC_OscConfig+0x3ec>
 8002a98:	e01b      	b.n	8002ad2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa0:	4a3b      	ldr	r2, [pc, #236]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7ff f975 	bl	8001d98 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab2:	f7ff f971 	bl	8001d98 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1f5      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac4:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1ef      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80a6 	beq.w	8002c2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afa:	6593      	str	r3, [r2, #88]	; 0x58
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_RCC_OscConfig+0x508>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d118      	bne.n	8002b4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_RCC_OscConfig+0x508>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <HAL_RCC_OscConfig+0x508>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b24:	f7ff f938 	bl	8001d98 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2c:	f7ff f934 	bl	8001d98 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1b8      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_RCC_OscConfig+0x508>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d108      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4d8>
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b62:	e029      	b.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d115      	bne.n	8002b98 <HAL_RCC_OscConfig+0x50c>
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	4a03      	ldr	r2, [pc, #12]	; (8002b90 <HAL_RCC_OscConfig+0x504>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b8c:	e014      	b.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40007000 	.word	0x40007000
 8002b98:	4b9d      	ldr	r3, [pc, #628]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	4a9c      	ldr	r2, [pc, #624]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba8:	4b99      	ldr	r3, [pc, #612]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	4a98      	ldr	r2, [pc, #608]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d016      	beq.n	8002bee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7ff f8ea 	bl	8001d98 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7ff f8e6 	bl	8001d98 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e168      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bde:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ed      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x53c>
 8002bec:	e015      	b.n	8002c1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7ff f8d3 	bl	8001d98 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7ff f8cf 	bl	8001d98 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e151      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c0c:	4b80      	ldr	r3, [pc, #512]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ed      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1a:	7ffb      	ldrb	r3, [r7, #31]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b7b      	ldr	r3, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	4a7a      	ldr	r2, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d03c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c40:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c46:	4a72      	ldr	r2, [pc, #456]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7ff f8a2 	bl	8001d98 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c58:	f7ff f89e 	bl	8001d98 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e122      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c6a:	4b69      	ldr	r3, [pc, #420]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ef      	beq.n	8002c58 <HAL_RCC_OscConfig+0x5cc>
 8002c78:	e01b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c7a:	4b65      	ldr	r3, [pc, #404]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c80:	4a63      	ldr	r2, [pc, #396]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7ff f885 	bl	8001d98 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c92:	f7ff f881 	bl	8001d98 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e105      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ca4:	4b5a      	ldr	r3, [pc, #360]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ef      	bne.n	8002c92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80f9 	beq.w	8002eae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	f040 80cf 	bne.w	8002e64 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cc6:	4b52      	ldr	r3, [pc, #328]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f003 0203 	and.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d12c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d123      	bne.n	8002d34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d11b      	bne.n	8002d34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d113      	bne.n	8002d34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d109      	bne.n	8002d34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d071      	beq.n	8002e18 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b0c      	cmp	r3, #12
 8002d38:	d068      	beq.n	8002e0c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d3a:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d105      	bne.n	8002d52 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d46:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0ac      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d56:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2d      	ldr	r2, [pc, #180]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d62:	f7ff f819 	bl	8001d98 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7ff f815 	bl	8001d98 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e099      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d88:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <HAL_RCC_OscConfig+0x788>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	4311      	orrs	r1, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002da2:	0212      	lsls	r2, r2, #8
 8002da4:	4311      	orrs	r1, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002daa:	0852      	lsrs	r2, r2, #1
 8002dac:	3a01      	subs	r2, #1
 8002dae:	0552      	lsls	r2, r2, #21
 8002db0:	4311      	orrs	r1, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002db6:	0852      	lsrs	r2, r2, #1
 8002db8:	3a01      	subs	r2, #1
 8002dba:	0652      	lsls	r2, r2, #25
 8002dbc:	4311      	orrs	r1, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dc2:	06d2      	lsls	r2, r2, #27
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	4912      	ldr	r1, [pc, #72]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0f      	ldr	r2, [pc, #60]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002de4:	f7fe ffd8 	bl	8001d98 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe ffd4 	bl	8001d98 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e058      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_RCC_OscConfig+0x784>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e0a:	e050      	b.n	8002eae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e04f      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
 8002e10:	40021000 	.word	0x40021000
 8002e14:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d144      	bne.n	8002eae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e30:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e3c:	f7fe ffac 	bl	8001d98 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe ffa8 	bl	8001d98 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e02c      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x7b8>
 8002e62:	e024      	b.n	8002eae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d01f      	beq.n	8002eaa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe ff8f 	bl	8001d98 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fe ff8b 	bl	8001d98 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e00f      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	4905      	ldr	r1, [pc, #20]	; (8002eb8 <HAL_RCC_OscConfig+0x82c>)
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCC_OscConfig+0x830>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60cb      	str	r3, [r1, #12]
 8002ea8:	e001      	b.n	8002eae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	feeefffc 	.word	0xfeeefffc

08002ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e11d      	b.n	8003114 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b90      	ldr	r3, [pc, #576]	; (800311c <HAL_RCC_ClockConfig+0x25c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d910      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b8d      	ldr	r3, [pc, #564]	; (800311c <HAL_RCC_ClockConfig+0x25c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 020f 	bic.w	r2, r3, #15
 8002eee:	498b      	ldr	r1, [pc, #556]	; (800311c <HAL_RCC_ClockConfig+0x25c>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b89      	ldr	r3, [pc, #548]	; (800311c <HAL_RCC_ClockConfig+0x25c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e105      	b.n	8003114 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d010      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d908      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b7e      	ldr	r3, [pc, #504]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	497b      	ldr	r1, [pc, #492]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d079      	beq.n	8003036 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d11e      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4a:	4b75      	ldr	r3, [pc, #468]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0dc      	b.n	8003114 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002f5a:	f000 fa09 	bl	8003370 <RCC_GetSysClockFreqFromPLLSource>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4a70      	ldr	r2, [pc, #448]	; (8003124 <HAL_RCC_ClockConfig+0x264>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d946      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002f66:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d140      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f72:	4b6b      	ldr	r3, [pc, #428]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f7a:	4a69      	ldr	r2, [pc, #420]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	e035      	b.n	8002ff4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f90:	4b63      	ldr	r3, [pc, #396]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d115      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0b9      	b.n	8003114 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa8:	4b5d      	ldr	r3, [pc, #372]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d109      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0ad      	b.n	8003114 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb8:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0a5      	b.n	8003114 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002fc8:	f000 f8b4 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4a55      	ldr	r2, [pc, #340]	; (8003124 <HAL_RCC_ClockConfig+0x264>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d90f      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fd4:	4b52      	ldr	r3, [pc, #328]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fe0:	4b4f      	ldr	r3, [pc, #316]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fe8:	4a4d      	ldr	r2, [pc, #308]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff4:	4b4a      	ldr	r3, [pc, #296]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 0203 	bic.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4947      	ldr	r1, [pc, #284]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003006:	f7fe fec7 	bl	8001d98 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300c:	e00a      	b.n	8003024 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300e:	f7fe fec3 	bl	8001d98 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e077      	b.n	8003114 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003024:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 020c 	and.w	r2, r3, #12
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	429a      	cmp	r2, r3
 8003034:	d1eb      	bne.n	800300e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b80      	cmp	r3, #128	; 0x80
 800303a:	d105      	bne.n	8003048 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800303c:	4b38      	ldr	r3, [pc, #224]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a37      	ldr	r2, [pc, #220]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8003042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003046:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d010      	beq.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4b31      	ldr	r3, [pc, #196]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003060:	429a      	cmp	r2, r3
 8003062:	d208      	bcs.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003064:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	492b      	ldr	r1, [pc, #172]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003076:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_RCC_ClockConfig+0x25c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d210      	bcs.n	80030a6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_RCC_ClockConfig+0x25c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 020f 	bic.w	r2, r3, #15
 800308c:	4923      	ldr	r1, [pc, #140]	; (800311c <HAL_RCC_ClockConfig+0x25c>)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_RCC_ClockConfig+0x25c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e036      	b.n	8003114 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	4918      	ldr	r1, [pc, #96]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4910      	ldr	r1, [pc, #64]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030e4:	f000 f826 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	490c      	ldr	r1, [pc, #48]	; (8003128 <HAL_RCC_ClockConfig+0x268>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003100:	4a0a      	ldr	r2, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x26c>)
 8003102:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003104:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fdf5 	bl	8001cf8 <HAL_InitTick>
 800310e:	4603      	mov	r3, r0
 8003110:	73fb      	strb	r3, [r7, #15]

  return status;
 8003112:	7bfb      	ldrb	r3, [r7, #15]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40022000 	.word	0x40022000
 8003120:	40021000 	.word	0x40021000
 8003124:	04c4b400 	.word	0x04c4b400
 8003128:	080093a0 	.word	0x080093a0
 800312c:	20000000 	.word	0x20000000
 8003130:	20000004 	.word	0x20000004

08003134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003142:	4b3e      	ldr	r3, [pc, #248]	; (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800314c:	4b3b      	ldr	r3, [pc, #236]	; (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x34>
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d121      	bne.n	80031a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d11e      	bne.n	80031a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003168:	4b34      	ldr	r3, [pc, #208]	; (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003174:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e005      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003184:	4b2d      	ldr	r3, [pc, #180]	; (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003190:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003198:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d102      	bne.n	80031b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_RCC_GetSysClockFreq+0x110>)
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	e004      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031b8:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_RCC_GetSysClockFreq+0x114>)
 80031ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d134      	bne.n	800322c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031c2:	4b1e      	ldr	r3, [pc, #120]	; (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d003      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0xa6>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d003      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0xac>
 80031d8:	e005      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031da:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_RCC_GetSysClockFreq+0x110>)
 80031dc:	617b      	str	r3, [r7, #20]
      break;
 80031de:	e005      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_GetSysClockFreq+0x114>)
 80031e2:	617b      	str	r3, [r7, #20]
      break;
 80031e4:	e002      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	617b      	str	r3, [r7, #20]
      break;
 80031ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	3301      	adds	r3, #1
 80031f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031fa:	4b10      	ldr	r3, [pc, #64]	; (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	fb03 f202 	mul.w	r2, r3, r2
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	0e5b      	lsrs	r3, r3, #25
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	3301      	adds	r3, #1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800322c:	69bb      	ldr	r3, [r7, #24]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
 8003240:	080093b8 	.word	0x080093b8
 8003244:	00f42400 	.word	0x00f42400
 8003248:	007a1200 	.word	0x007a1200

0800324c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <HAL_RCC_GetHCLKFreq+0x14>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000000 	.word	0x20000000

08003264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003268:	f7ff fff0 	bl	800324c <HAL_RCC_GetHCLKFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4904      	ldr	r1, [pc, #16]	; (800328c <HAL_RCC_GetPCLK1Freq+0x28>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000
 800328c:	080093b0 	.word	0x080093b0

08003290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003294:	f7ff ffda 	bl	800324c <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0adb      	lsrs	r3, r3, #11
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4904      	ldr	r1, [pc, #16]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40021000 	.word	0x40021000
 80032b8:	080093b0 	.word	0x080093b0

080032bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032c8:	4b27      	ldr	r3, [pc, #156]	; (8003368 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032d4:	f7ff f906 	bl	80024e4 <HAL_PWREx_GetVoltageRange>
 80032d8:	6178      	str	r0, [r7, #20]
 80032da:	e014      	b.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e0:	4a21      	ldr	r2, [pc, #132]	; (8003368 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6593      	str	r3, [r2, #88]	; 0x58
 80032e8:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032f4:	f7ff f8f6 	bl	80024e4 <HAL_PWREx_GetVoltageRange>
 80032f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	4a1a      	ldr	r2, [pc, #104]	; (8003368 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003304:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330c:	d10b      	bne.n	8003326 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d913      	bls.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2ba0      	cmp	r3, #160	; 0xa0
 8003318:	d902      	bls.n	8003320 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800331a:	2302      	movs	r3, #2
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	e00d      	b.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003320:	2301      	movs	r3, #1
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	e00a      	b.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b7f      	cmp	r3, #127	; 0x7f
 800332a:	d902      	bls.n	8003332 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800332c:	2302      	movs	r3, #2
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	e004      	b.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b70      	cmp	r3, #112	; 0x70
 8003336:	d101      	bne.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003338:	2301      	movs	r3, #1
 800333a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 020f 	bic.w	r2, r3, #15
 8003344:	4909      	ldr	r1, [pc, #36]	; (800336c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	429a      	cmp	r2, r3
 8003358:	d001      	beq.n	800335e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	40022000 	.word	0x40022000

08003370 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003376:	4b2d      	ldr	r3, [pc, #180]	; (800342c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d00b      	beq.n	800339e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d825      	bhi.n	80033d8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d008      	beq.n	80033a4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d11f      	bne.n	80033d8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800339a:	613b      	str	r3, [r7, #16]
    break;
 800339c:	e01f      	b.n	80033de <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800339e:	4b25      	ldr	r3, [pc, #148]	; (8003434 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80033a0:	613b      	str	r3, [r7, #16]
    break;
 80033a2:	e01c      	b.n	80033de <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d107      	bne.n	80033c0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033b0:	4b1e      	ldr	r3, [pc, #120]	; (800342c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e005      	b.n	80033cc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033c0:	4b1a      	ldr	r3, [pc, #104]	; (800342c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80033cc:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d4:	613b      	str	r3, [r7, #16]
    break;
 80033d6:	e002      	b.n	80033de <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
    break;
 80033dc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033de:	4b13      	ldr	r3, [pc, #76]	; (800342c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	3301      	adds	r3, #1
 80033ea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	fb03 f202 	mul.w	r2, r3, r2
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	0e5b      	lsrs	r3, r3, #25
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	3301      	adds	r3, #1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800341e:	683b      	ldr	r3, [r7, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40021000 	.word	0x40021000
 8003430:	00f42400 	.word	0x00f42400
 8003434:	007a1200 	.word	0x007a1200
 8003438:	080093b8 	.word	0x080093b8

0800343c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003444:	2300      	movs	r3, #0
 8003446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003448:	2300      	movs	r3, #0
 800344a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003454:	2b00      	cmp	r3, #0
 8003456:	d040      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800345c:	2b80      	cmp	r3, #128	; 0x80
 800345e:	d02a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d825      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003464:	2b60      	cmp	r3, #96	; 0x60
 8003466:	d026      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003468:	2b60      	cmp	r3, #96	; 0x60
 800346a:	d821      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d006      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d81d      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003478:	2b20      	cmp	r3, #32
 800347a:	d010      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800347c:	e018      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800347e:	4b89      	ldr	r3, [pc, #548]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4a88      	ldr	r2, [pc, #544]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003488:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800348a:	e015      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fb02 	bl	8003a9c <RCCEx_PLLSAI1_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800349c:	e00c      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3320      	adds	r3, #32
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fbed 	bl	8003c84 <RCCEx_PLLSAI2_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034ae:	e003      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	74fb      	strb	r3, [r7, #19]
      break;
 80034b4:	e000      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80034b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034be:	4b79      	ldr	r3, [pc, #484]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034c4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034cc:	4975      	ldr	r1, [pc, #468]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80034d4:	e001      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d047      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	d030      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80034f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f4:	d82a      	bhi.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80034f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034fa:	d02a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80034fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003500:	d824      	bhi.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003506:	d008      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350c:	d81e      	bhi.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003516:	d010      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003518:	e018      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800351a:	4b62      	ldr	r3, [pc, #392]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a61      	ldr	r2, [pc, #388]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003526:	e015      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fab4 	bl	8003a9c <RCCEx_PLLSAI1_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003538:	e00c      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3320      	adds	r3, #32
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fb9f 	bl	8003c84 <RCCEx_PLLSAI2_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800354a:	e003      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	74fb      	strb	r3, [r7, #19]
      break;
 8003550:	e000      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800355a:	4b52      	ldr	r3, [pc, #328]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800355c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	494e      	ldr	r1, [pc, #312]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003570:	e001      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 809f 	beq.w	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003584:	2300      	movs	r3, #0
 8003586:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003588:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	4a40      	ldr	r2, [pc, #256]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	6593      	str	r3, [r2, #88]	; 0x58
 80035aa:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a3a      	ldr	r2, [pc, #232]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035c6:	f7fe fbe7 	bl	8001d98 <HAL_GetTick>
 80035ca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035cc:	e009      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ce:	f7fe fbe3 	bl	8001d98 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d902      	bls.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	74fb      	strb	r3, [r7, #19]
        break;
 80035e0:	e005      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0ef      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d15b      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035f4:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01f      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	429a      	cmp	r2, r3
 8003610:	d019      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800361e:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800363e:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d016      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe fba2 	bl	8001d98 <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003656:	e00b      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fe fb9e 	bl	8001d98 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d902      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	74fb      	strb	r3, [r7, #19]
            break;
 800366e:	e006      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ec      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10c      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	4903      	ldr	r1, [pc, #12]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800369c:	e008      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	74bb      	strb	r3, [r7, #18]
 80036a2:	e005      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b0:	7c7b      	ldrb	r3, [r7, #17]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d105      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b6:	4ba0      	ldr	r3, [pc, #640]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	4a9f      	ldr	r2, [pc, #636]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ce:	4b9a      	ldr	r3, [pc, #616]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f023 0203 	bic.w	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036dc:	4996      	ldr	r1, [pc, #600]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036f0:	4b91      	ldr	r3, [pc, #580]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f023 020c 	bic.w	r2, r3, #12
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	498e      	ldr	r1, [pc, #568]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003712:	4b89      	ldr	r3, [pc, #548]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	4985      	ldr	r1, [pc, #532]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003734:	4b80      	ldr	r3, [pc, #512]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003742:	497d      	ldr	r1, [pc, #500]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003756:	4b78      	ldr	r3, [pc, #480]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003764:	4974      	ldr	r1, [pc, #464]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003778:	4b6f      	ldr	r3, [pc, #444]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003786:	496c      	ldr	r1, [pc, #432]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800379a:	4b67      	ldr	r3, [pc, #412]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a8:	4963      	ldr	r1, [pc, #396]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037bc:	4b5e      	ldr	r3, [pc, #376]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ca:	495b      	ldr	r1, [pc, #364]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037de:	4b56      	ldr	r3, [pc, #344]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	4952      	ldr	r1, [pc, #328]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003800:	4b4d      	ldr	r3, [pc, #308]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	494a      	ldr	r1, [pc, #296]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003822:	4b45      	ldr	r3, [pc, #276]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	4941      	ldr	r1, [pc, #260]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003844:	4b3c      	ldr	r3, [pc, #240]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003852:	4939      	ldr	r1, [pc, #228]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d028      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003866:	4b34      	ldr	r3, [pc, #208]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003874:	4930      	ldr	r1, [pc, #192]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003884:	d106      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003886:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	4a2b      	ldr	r2, [pc, #172]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800388c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003890:	60d3      	str	r3, [r2, #12]
 8003892:	e011      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f8f9 	bl	8003a9c <RCCEx_PLLSAI1_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d04d      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038cc:	d108      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80038ce:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038d4:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80038de:	e012      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80038e0:	4b15      	ldr	r3, [pc, #84]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038e6:	4a14      	ldr	r2, [pc, #80]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038fe:	490e      	ldr	r1, [pc, #56]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800390a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390e:	d106      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a08      	ldr	r2, [pc, #32]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800391a:	60d3      	str	r3, [r2, #12]
 800391c:	e020      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003926:	d109      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a02      	ldr	r2, [pc, #8]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800392e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003932:	60d3      	str	r3, [r2, #12]
 8003934:	e014      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003944:	d10c      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	2101      	movs	r1, #1
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f8a5 	bl	8003a9c <RCCEx_PLLSAI1_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d028      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800396c:	4b4a      	ldr	r3, [pc, #296]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800397a:	4947      	ldr	r1, [pc, #284]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800398a:	d106      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398c:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a41      	ldr	r2, [pc, #260]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003996:	60d3      	str	r3, [r2, #12]
 8003998:	e011      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a2:	d10c      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f876 	bl	8003a9c <RCCEx_PLLSAI1_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80039ba:	7cfb      	ldrb	r3, [r7, #19]
 80039bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01e      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ca:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039da:	492f      	ldr	r1, [pc, #188]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2102      	movs	r1, #2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f851 	bl	8003a9c <RCCEx_PLLSAI1_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00b      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a14:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a1a:	f023 0204 	bic.w	r2, r3, #4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a24:	491c      	ldr	r1, [pc, #112]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a38:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a3e:	f023 0218 	bic.w	r2, r3, #24
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	4913      	ldr	r1, [pc, #76]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d017      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a6c:	490a      	ldr	r1, [pc, #40]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000

08003a9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aaa:	4b72      	ldr	r3, [pc, #456]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00e      	beq.n	8003ad4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ab6:	4b6f      	ldr	r3, [pc, #444]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0203 	and.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d103      	bne.n	8003ace <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
       ||
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d142      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	e03f      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d018      	beq.n	8003b0e <RCCEx_PLLSAI1_Config+0x72>
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d825      	bhi.n	8003b2c <RCCEx_PLLSAI1_Config+0x90>
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d002      	beq.n	8003aea <RCCEx_PLLSAI1_Config+0x4e>
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d009      	beq.n	8003afc <RCCEx_PLLSAI1_Config+0x60>
 8003ae8:	e020      	b.n	8003b2c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aea:	4b62      	ldr	r3, [pc, #392]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d11d      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afa:	e01a      	b.n	8003b32 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003afc:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d116      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b0c:	e013      	b.n	8003b36 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b0e:	4b59      	ldr	r3, [pc, #356]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b1a:	4b56      	ldr	r3, [pc, #344]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b2a:	e006      	b.n	8003b3a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b30:	e004      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d108      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003b42:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f023 0203 	bic.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4949      	ldr	r1, [pc, #292]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f040 8086 	bne.w	8003c68 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b5c:	4b45      	ldr	r3, [pc, #276]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a44      	ldr	r2, [pc, #272]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b68:	f7fe f916 	bl	8001d98 <HAL_GetTick>
 8003b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b6e:	e009      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b70:	f7fe f912 	bl	8001d98 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d902      	bls.n	8003b84 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	73fb      	strb	r3, [r7, #15]
        break;
 8003b82:	e005      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b84:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ef      	bne.n	8003b70 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d168      	bne.n	8003c68 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d113      	bne.n	8003bc4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b9c:	4b35      	ldr	r3, [pc, #212]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	4b35      	ldr	r3, [pc, #212]	; (8003c78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6892      	ldr	r2, [r2, #8]
 8003ba8:	0211      	lsls	r1, r2, #8
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	06d2      	lsls	r2, r2, #27
 8003bb0:	4311      	orrs	r1, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6852      	ldr	r2, [r2, #4]
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	0112      	lsls	r2, r2, #4
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	492d      	ldr	r1, [pc, #180]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	610b      	str	r3, [r1, #16]
 8003bc2:	e02d      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d115      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bca:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6892      	ldr	r2, [r2, #8]
 8003bd6:	0211      	lsls	r1, r2, #8
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6912      	ldr	r2, [r2, #16]
 8003bdc:	0852      	lsrs	r2, r2, #1
 8003bde:	3a01      	subs	r2, #1
 8003be0:	0552      	lsls	r2, r2, #21
 8003be2:	4311      	orrs	r1, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6852      	ldr	r2, [r2, #4]
 8003be8:	3a01      	subs	r2, #1
 8003bea:	0112      	lsls	r2, r2, #4
 8003bec:	430a      	orrs	r2, r1
 8003bee:	4921      	ldr	r1, [pc, #132]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	610b      	str	r3, [r1, #16]
 8003bf4:	e014      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bf6:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6892      	ldr	r2, [r2, #8]
 8003c02:	0211      	lsls	r1, r2, #8
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6952      	ldr	r2, [r2, #20]
 8003c08:	0852      	lsrs	r2, r2, #1
 8003c0a:	3a01      	subs	r2, #1
 8003c0c:	0652      	lsls	r2, r2, #25
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6852      	ldr	r2, [r2, #4]
 8003c14:	3a01      	subs	r2, #1
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	4916      	ldr	r1, [pc, #88]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c20:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fe f8b4 	bl	8001d98 <HAL_GetTick>
 8003c30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c32:	e009      	b.n	8003c48 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c34:	f7fe f8b0 	bl	8001d98 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d902      	bls.n	8003c48 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	73fb      	strb	r3, [r7, #15]
          break;
 8003c46:	e005      	b.n	8003c54 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ef      	beq.n	8003c34 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	4904      	ldr	r1, [pc, #16]	; (8003c74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	07ff800f 	.word	0x07ff800f
 8003c7c:	ff9f800f 	.word	0xff9f800f
 8003c80:	f9ff800f 	.word	0xf9ff800f

08003c84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c92:	4b72      	ldr	r3, [pc, #456]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00e      	beq.n	8003cbc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c9e:	4b6f      	ldr	r3, [pc, #444]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0203 	and.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d103      	bne.n	8003cb6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d142      	bne.n	8003d3c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	e03f      	b.n	8003d3c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d018      	beq.n	8003cf6 <RCCEx_PLLSAI2_Config+0x72>
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d825      	bhi.n	8003d14 <RCCEx_PLLSAI2_Config+0x90>
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d002      	beq.n	8003cd2 <RCCEx_PLLSAI2_Config+0x4e>
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d009      	beq.n	8003ce4 <RCCEx_PLLSAI2_Config+0x60>
 8003cd0:	e020      	b.n	8003d14 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cd2:	4b62      	ldr	r3, [pc, #392]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11d      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce2:	e01a      	b.n	8003d1a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce4:	4b5d      	ldr	r3, [pc, #372]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d116      	bne.n	8003d1e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf4:	e013      	b.n	8003d1e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cf6:	4b59      	ldr	r3, [pc, #356]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d02:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d12:	e006      	b.n	8003d22 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      break;
 8003d18:	e004      	b.n	8003d24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e002      	b.n	8003d24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d22:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d108      	bne.n	8003d3c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003d2a:	4b4c      	ldr	r3, [pc, #304]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f023 0203 	bic.w	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4949      	ldr	r1, [pc, #292]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f040 8086 	bne.w	8003e50 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d44:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a44      	ldr	r2, [pc, #272]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d50:	f7fe f822 	bl	8001d98 <HAL_GetTick>
 8003d54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d56:	e009      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d58:	f7fe f81e 	bl	8001d98 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d902      	bls.n	8003d6c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	73fb      	strb	r3, [r7, #15]
        break;
 8003d6a:	e005      	b.n	8003d78 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d6c:	4b3b      	ldr	r3, [pc, #236]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1ef      	bne.n	8003d58 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d168      	bne.n	8003e50 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d113      	bne.n	8003dac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d84:	4b35      	ldr	r3, [pc, #212]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6892      	ldr	r2, [r2, #8]
 8003d90:	0211      	lsls	r1, r2, #8
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68d2      	ldr	r2, [r2, #12]
 8003d96:	06d2      	lsls	r2, r2, #27
 8003d98:	4311      	orrs	r1, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6852      	ldr	r2, [r2, #4]
 8003d9e:	3a01      	subs	r2, #1
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	430a      	orrs	r2, r1
 8003da4:	492d      	ldr	r1, [pc, #180]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	614b      	str	r3, [r1, #20]
 8003daa:	e02d      	b.n	8003e08 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d115      	bne.n	8003dde <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003db2:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6892      	ldr	r2, [r2, #8]
 8003dbe:	0211      	lsls	r1, r2, #8
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6912      	ldr	r2, [r2, #16]
 8003dc4:	0852      	lsrs	r2, r2, #1
 8003dc6:	3a01      	subs	r2, #1
 8003dc8:	0552      	lsls	r2, r2, #21
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6852      	ldr	r2, [r2, #4]
 8003dd0:	3a01      	subs	r2, #1
 8003dd2:	0112      	lsls	r2, r2, #4
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	4921      	ldr	r1, [pc, #132]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	614b      	str	r3, [r1, #20]
 8003ddc:	e014      	b.n	8003e08 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dde:	4b1f      	ldr	r3, [pc, #124]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6892      	ldr	r2, [r2, #8]
 8003dea:	0211      	lsls	r1, r2, #8
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6952      	ldr	r2, [r2, #20]
 8003df0:	0852      	lsrs	r2, r2, #1
 8003df2:	3a01      	subs	r2, #1
 8003df4:	0652      	lsls	r2, r2, #25
 8003df6:	4311      	orrs	r1, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6852      	ldr	r2, [r2, #4]
 8003dfc:	3a01      	subs	r2, #1
 8003dfe:	0112      	lsls	r2, r2, #4
 8003e00:	430a      	orrs	r2, r1
 8003e02:	4916      	ldr	r1, [pc, #88]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e08:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7fd ffc0 	bl	8001d98 <HAL_GetTick>
 8003e18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e1a:	e009      	b.n	8003e30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e1c:	f7fd ffbc 	bl	8001d98 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d902      	bls.n	8003e30 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003e2e:	e005      	b.n	8003e3c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0ef      	beq.n	8003e1c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	4904      	ldr	r1, [pc, #16]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	07ff800f 	.word	0x07ff800f
 8003e64:	ff9f800f 	.word	0xff9f800f
 8003e68:	f9ff800f 	.word	0xf9ff800f

08003e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e095      	b.n	8003faa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e8e:	d009      	beq.n	8003ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	61da      	str	r2, [r3, #28]
 8003e96:	e005      	b.n	8003ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fd fd58 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ee4:	d902      	bls.n	8003eec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e002      	b.n	8003ef2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003efa:	d007      	beq.n	8003f0c <HAL_SPI_Init+0xa0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f04:	d002      	beq.n	8003f0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	ea42 0103 	orr.w	r1, r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	0c1b      	lsrs	r3, r3, #16
 8003f68:	f003 0204 	and.w	r2, r3, #4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f88:	ea42 0103 	orr.w	r1, r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b08a      	sub	sp, #40	; 0x28
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x26>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e20a      	b.n	80043ee <HAL_SPI_TransmitReceive+0x43c>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fe0:	f7fd feda 	bl	8001d98 <HAL_GetTick>
 8003fe4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ff4:	887b      	ldrh	r3, [r7, #2]
 8003ff6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ffc:	7efb      	ldrb	r3, [r7, #27]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d00e      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x6e>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004008:	d106      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x66>
 8004012:	7efb      	ldrb	r3, [r7, #27]
 8004014:	2b04      	cmp	r3, #4
 8004016:	d003      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004018:	2302      	movs	r3, #2
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800401e:	e1e0      	b.n	80043e2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_SPI_TransmitReceive+0x80>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_SPI_TransmitReceive+0x80>
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004038:	e1d3      	b.n	80043e2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b04      	cmp	r3, #4
 8004044:	d003      	beq.n	800404e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2205      	movs	r2, #5
 800404a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	887a      	ldrh	r2, [r7, #2]
 800405e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	887a      	ldrh	r2, [r7, #2]
 8004066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	887a      	ldrh	r2, [r7, #2]
 800407a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004090:	d802      	bhi.n	8004098 <HAL_SPI_TransmitReceive+0xe6>
 8004092:	8a3b      	ldrh	r3, [r7, #16]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d908      	bls.n	80040aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	e007      	b.n	80040ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d007      	beq.n	80040d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e0:	f240 8081 	bls.w	80041e6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_SPI_TransmitReceive+0x140>
 80040ec:	8a7b      	ldrh	r3, [r7, #18]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d16d      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	1c9a      	adds	r2, r3, #2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004116:	e05a      	b.n	80041ce <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d11b      	bne.n	800415e <HAL_SPI_TransmitReceive+0x1ac>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d016      	beq.n	800415e <HAL_SPI_TransmitReceive+0x1ac>
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	2b01      	cmp	r3, #1
 8004134:	d113      	bne.n	800415e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	881a      	ldrh	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	1c9a      	adds	r2, r3, #2
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b01      	cmp	r3, #1
 800416a:	d11c      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x1f4>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d016      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	b292      	uxth	r2, r2
 8004184:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	1c9a      	adds	r2, r3, #2
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041a2:	2301      	movs	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041a6:	f7fd fdf7 	bl	8001d98 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d80b      	bhi.n	80041ce <HAL_SPI_TransmitReceive+0x21c>
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d007      	beq.n	80041ce <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80041cc:	e109      	b.n	80043e2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d19f      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x166>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d199      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x166>
 80041e4:	e0e3      	b.n	80043ae <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_SPI_TransmitReceive+0x244>
 80041ee:	8a7b      	ldrh	r3, [r7, #18]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	f040 80cf 	bne.w	8004394 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d912      	bls.n	8004226 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	1c9a      	adds	r2, r3, #2
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b02      	subs	r3, #2
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004224:	e0b6      	b.n	8004394 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424c:	e0a2      	b.n	8004394 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b02      	cmp	r3, #2
 800425a:	d134      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x314>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d02f      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x314>
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	2b01      	cmp	r3, #1
 800426a:	d12c      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d912      	bls.n	800429c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	881a      	ldrh	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	1c9a      	adds	r2, r3, #2
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b02      	subs	r3, #2
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	87da      	strh	r2, [r3, #62]	; 0x3e
 800429a:	e012      	b.n	80042c2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	330c      	adds	r3, #12
 80042a6:	7812      	ldrb	r2, [r2, #0]
 80042a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d148      	bne.n	8004366 <HAL_SPI_TransmitReceive+0x3b4>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d042      	beq.n	8004366 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d923      	bls.n	8004334 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	b292      	uxth	r2, r2
 80042f8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	1c9a      	adds	r2, r3, #2
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b02      	subs	r3, #2
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d81f      	bhi.n	8004362 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	e016      	b.n	8004362 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f103 020c 	add.w	r2, r3, #12
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	7812      	ldrb	r2, [r2, #0]
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004362:	2301      	movs	r3, #1
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004366:	f7fd fd17 	bl	8001d98 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004372:	429a      	cmp	r2, r3
 8004374:	d803      	bhi.n	800437e <HAL_SPI_TransmitReceive+0x3cc>
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d102      	bne.n	8004384 <HAL_SPI_TransmitReceive+0x3d2>
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	2b00      	cmp	r3, #0
 8004382:	d107      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004392:	e026      	b.n	80043e2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	f47f af57 	bne.w	800424e <HAL_SPI_TransmitReceive+0x29c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f47f af50 	bne.w	800424e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f93e 	bl	8004634 <SPI_EndRxTxTransaction>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d8:	e003      	b.n	80043e2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3728      	adds	r7, #40	; 0x28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004408:	f7fd fcc6 	bl	8001d98 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	4413      	add	r3, r2
 8004416:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004418:	f7fd fcbe 	bl	8001d98 <HAL_GetTick>
 800441c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	015b      	lsls	r3, r3, #5
 8004424:	0d1b      	lsrs	r3, r3, #20
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	fb02 f303 	mul.w	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800442e:	e054      	b.n	80044da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d050      	beq.n	80044da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004438:	f7fd fcae 	bl	8001d98 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	429a      	cmp	r2, r3
 8004446:	d902      	bls.n	800444e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d13d      	bne.n	80044ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800445c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004466:	d111      	bne.n	800448c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004470:	d004      	beq.n	800447c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d107      	bne.n	800448c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004494:	d10f      	bne.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e017      	b.n	80044fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d19b      	bne.n	8004430 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000000 	.word	0x20000000

08004508 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800451a:	f7fd fc3d 	bl	8001d98 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	4413      	add	r3, r2
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800452a:	f7fd fc35 	bl	8001d98 <HAL_GetTick>
 800452e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004538:	4b3d      	ldr	r3, [pc, #244]	; (8004630 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	00da      	lsls	r2, r3, #3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	0d1b      	lsrs	r3, r3, #20
 8004548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004550:	e060      	b.n	8004614 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004558:	d107      	bne.n	800456a <SPI_WaitFifoStateUntilTimeout+0x62>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004568:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d050      	beq.n	8004614 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004572:	f7fd fc11 	bl	8001d98 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457e:	429a      	cmp	r2, r3
 8004580:	d902      	bls.n	8004588 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d13d      	bne.n	8004604 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004596:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a0:	d111      	bne.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045aa:	d004      	beq.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b4:	d107      	bne.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ce:	d10f      	bne.n	80045f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e010      	b.n	8004626 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	3b01      	subs	r3, #1
 8004612:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d196      	bne.n	8004552 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3728      	adds	r7, #40	; 0x28
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000000 	.word	0x20000000

08004634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2200      	movs	r2, #0
 8004648:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7ff ff5b 	bl	8004508 <SPI_WaitFifoStateUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465c:	f043 0220 	orr.w	r2, r3, #32
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e027      	b.n	80046b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2200      	movs	r2, #0
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff fec0 	bl	80043f8 <SPI_WaitFlagStateUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004682:	f043 0220 	orr.w	r2, r3, #32
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e014      	b.n	80046b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2200      	movs	r2, #0
 8004696:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff ff34 	bl	8004508 <SPI_WaitFifoStateUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046aa:	f043 0220 	orr.w	r2, r3, #32
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e000      	b.n	80046b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e042      	b.n	8004758 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fd f897 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2224      	movs	r2, #36	; 0x24
 80046ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0201 	bic.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 ff44 	bl	8005598 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fc45 	bl	8004fa0 <UART_SetConfig>
 8004716:	4603      	mov	r3, r0
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e01b      	b.n	8004758 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800472e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800473e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 ffc3 	bl	80056dc <UART_CheckIdleState>
 8004756:	4603      	mov	r3, r0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	2b20      	cmp	r3, #32
 8004778:	d17c      	bne.n	8004874 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_UART_Transmit+0x26>
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e075      	b.n	8004876 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2221      	movs	r2, #33	; 0x21
 8004796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800479a:	f7fd fafd 	bl	8001d98 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b8:	d108      	bne.n	80047cc <HAL_UART_Transmit+0x6c>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e003      	b.n	80047d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047d4:	e031      	b.n	800483a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2200      	movs	r2, #0
 80047de:	2180      	movs	r1, #128	; 0x80
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f001 f825 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e03e      	b.n	8004876 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	881a      	ldrh	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800480a:	b292      	uxth	r2, r2
 800480c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	3302      	adds	r3, #2
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	e008      	b.n	8004828 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	b292      	uxth	r2, r2
 8004820:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1c7      	bne.n	80047d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	2140      	movs	r1, #64	; 0x40
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 ffed 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e006      	b.n	8004876 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	; 0x28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004894:	2b20      	cmp	r3, #32
 8004896:	d137      	bne.n	8004908 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_UART_Receive_IT+0x24>
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e030      	b.n	800490a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a18      	ldr	r2, [pc, #96]	; (8004914 <HAL_UART_Receive_IT+0x94>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d01f      	beq.n	80048f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d018      	beq.n	80048f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	613b      	str	r3, [r7, #16]
   return(result);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	69f9      	ldr	r1, [r7, #28]
 80048ea:	6a3a      	ldr	r2, [r7, #32]
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e6      	bne.n	80048c6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	461a      	mov	r2, r3
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fffe 	bl	8005900 <UART_Start_Receive_IT>
 8004904:	4603      	mov	r3, r0
 8004906:	e000      	b.n	800490a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3728      	adds	r7, #40	; 0x28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40008000 	.word	0x40008000

08004918 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b0ba      	sub	sp, #232	; 0xe8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800493e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004942:	f640 030f 	movw	r3, #2063	; 0x80f
 8004946:	4013      	ands	r3, r2
 8004948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800494c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d11b      	bne.n	800498c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d015      	beq.n	800498c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d105      	bne.n	8004978 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800496c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 82e3 	beq.w	8004f48 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
      }
      return;
 800498a:	e2dd      	b.n	8004f48 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800498c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8123 	beq.w	8004bdc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004996:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800499a:	4b8d      	ldr	r3, [pc, #564]	; (8004bd0 <HAL_UART_IRQHandler+0x2b8>)
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80049a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049a6:	4b8b      	ldr	r3, [pc, #556]	; (8004bd4 <HAL_UART_IRQHandler+0x2bc>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8116 	beq.w	8004bdc <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d011      	beq.n	80049e0 <HAL_UART_IRQHandler+0xc8>
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00b      	beq.n	80049e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2201      	movs	r2, #1
 80049ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f043 0201 	orr.w	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d011      	beq.n	8004a10 <HAL_UART_IRQHandler+0xf8>
 80049ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2202      	movs	r2, #2
 80049fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	f043 0204 	orr.w	r2, r3, #4
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d011      	beq.n	8004a40 <HAL_UART_IRQHandler+0x128>
 8004a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	f043 0202 	orr.w	r2, r3, #2
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d017      	beq.n	8004a7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a5c:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <HAL_UART_IRQHandler+0x2b8>)
 8004a5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00b      	beq.n	8004a7c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2208      	movs	r2, #8
 8004a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	f043 0208 	orr.w	r2, r3, #8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d012      	beq.n	8004aae <HAL_UART_IRQHandler+0x196>
 8004a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00c      	beq.n	8004aae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8249 	beq.w	8004f4c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d013      	beq.n	8004aee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d105      	bne.n	8004ade <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d005      	beq.n	8004b12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d054      	beq.n	8004bbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f001 f816 	bl	8005b44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d146      	bne.n	8004bb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1d9      	bne.n	8004b26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d017      	beq.n	8004bac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b82:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <HAL_UART_IRQHandler+0x2c0>)
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fd faa0 	bl	80020d2 <HAL_DMA_Abort_IT>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d019      	beq.n	8004bcc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004baa:	e00f      	b.n	8004bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f9e1 	bl	8004f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb2:	e00b      	b.n	8004bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f9dd 	bl	8004f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bba:	e007      	b.n	8004bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f9d9 	bl	8004f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004bca:	e1bf      	b.n	8004f4c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	bf00      	nop
    return;
 8004bce:	e1bd      	b.n	8004f4c <HAL_UART_IRQHandler+0x634>
 8004bd0:	10000001 	.word	0x10000001
 8004bd4:	04000120 	.word	0x04000120
 8004bd8:	08005c11 	.word	0x08005c11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	f040 8153 	bne.w	8004e8c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 814c 	beq.w	8004e8c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8145 	beq.w	8004e8c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2210      	movs	r2, #16
 8004c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	f040 80bb 	bne.w	8004d90 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 818f 	beq.w	8004f50 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	f080 8187 	bcs.w	8004f50 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 8087 	bne.w	8004d6e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1da      	bne.n	8004c60 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3308      	adds	r3, #8
 8004cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e1      	bne.n	8004caa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3308      	adds	r3, #8
 8004cec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3308      	adds	r3, #8
 8004d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e3      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3c:	f023 0310 	bic.w	r3, r3, #16
 8004d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e4      	bne.n	8004d2c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fd f956 	bl	800201a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	4619      	mov	r1, r3
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f8fd 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d8e:	e0df      	b.n	8004f50 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80d1 	beq.w	8004f54 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004db2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80cc 	beq.w	8004f54 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dde:	647b      	str	r3, [r7, #68]	; 0x44
 8004de0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004de4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e4      	bne.n	8004dbc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3308      	adds	r3, #8
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	623b      	str	r3, [r7, #32]
   return(result);
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e1a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e1      	bne.n	8004df2 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0310 	bic.w	r3, r3, #16
 8004e56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	617b      	str	r3, [r7, #20]
   return(result);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e4      	bne.n	8004e42 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f87f 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e8a:	e063      	b.n	8004f54 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00e      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x59e>
 8004e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004eac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f001 fc14 	bl	80066dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eb4:	e051      	b.n	8004f5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d014      	beq.n	8004eec <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d105      	bne.n	8004eda <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03a      	beq.n	8004f58 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	4798      	blx	r3
    }
    return;
 8004eea:	e035      	b.n	8004f58 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d009      	beq.n	8004f0c <HAL_UART_IRQHandler+0x5f4>
 8004ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fe99 	bl	8005c3c <UART_EndTransmit_IT>
    return;
 8004f0a:	e026      	b.n	8004f5a <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <HAL_UART_IRQHandler+0x614>
 8004f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 fbed 	bl	8006704 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f2a:	e016      	b.n	8004f5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_UART_IRQHandler+0x642>
 8004f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	da0c      	bge.n	8004f5a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 fbd5 	bl	80066f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f46:	e008      	b.n	8004f5a <HAL_UART_IRQHandler+0x642>
      return;
 8004f48:	bf00      	nop
 8004f4a:	e006      	b.n	8004f5a <HAL_UART_IRQHandler+0x642>
    return;
 8004f4c:	bf00      	nop
 8004f4e:	e004      	b.n	8004f5a <HAL_UART_IRQHandler+0x642>
      return;
 8004f50:	bf00      	nop
 8004f52:	e002      	b.n	8004f5a <HAL_UART_IRQHandler+0x642>
      return;
 8004f54:	bf00      	nop
 8004f56:	e000      	b.n	8004f5a <HAL_UART_IRQHandler+0x642>
    return;
 8004f58:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f5a:	37e8      	adds	r7, #232	; 0xe8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa4:	b08c      	sub	sp, #48	; 0x30
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4baa      	ldr	r3, [pc, #680]	; (8005278 <UART_SetConfig+0x2d8>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a9f      	ldr	r2, [pc, #636]	; (800527c <UART_SetConfig+0x2dc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005008:	4313      	orrs	r3, r2
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005016:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005020:	430b      	orrs	r3, r1
 8005022:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	f023 010f 	bic.w	r1, r3, #15
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a90      	ldr	r2, [pc, #576]	; (8005280 <UART_SetConfig+0x2e0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d125      	bne.n	8005090 <UART_SetConfig+0xf0>
 8005044:	4b8f      	ldr	r3, [pc, #572]	; (8005284 <UART_SetConfig+0x2e4>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b03      	cmp	r3, #3
 8005050:	d81a      	bhi.n	8005088 <UART_SetConfig+0xe8>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0xb8>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	08005069 	.word	0x08005069
 800505c:	08005079 	.word	0x08005079
 8005060:	08005071 	.word	0x08005071
 8005064:	08005081 	.word	0x08005081
 8005068:	2301      	movs	r3, #1
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506e:	e116      	b.n	800529e <UART_SetConfig+0x2fe>
 8005070:	2302      	movs	r3, #2
 8005072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005076:	e112      	b.n	800529e <UART_SetConfig+0x2fe>
 8005078:	2304      	movs	r3, #4
 800507a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507e:	e10e      	b.n	800529e <UART_SetConfig+0x2fe>
 8005080:	2308      	movs	r3, #8
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005086:	e10a      	b.n	800529e <UART_SetConfig+0x2fe>
 8005088:	2310      	movs	r3, #16
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800508e:	e106      	b.n	800529e <UART_SetConfig+0x2fe>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a7c      	ldr	r2, [pc, #496]	; (8005288 <UART_SetConfig+0x2e8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d138      	bne.n	800510c <UART_SetConfig+0x16c>
 800509a:	4b7a      	ldr	r3, [pc, #488]	; (8005284 <UART_SetConfig+0x2e4>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d82d      	bhi.n	8005104 <UART_SetConfig+0x164>
 80050a8:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <UART_SetConfig+0x110>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	080050e5 	.word	0x080050e5
 80050b4:	08005105 	.word	0x08005105
 80050b8:	08005105 	.word	0x08005105
 80050bc:	08005105 	.word	0x08005105
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	08005105 	.word	0x08005105
 80050c8:	08005105 	.word	0x08005105
 80050cc:	08005105 	.word	0x08005105
 80050d0:	080050ed 	.word	0x080050ed
 80050d4:	08005105 	.word	0x08005105
 80050d8:	08005105 	.word	0x08005105
 80050dc:	08005105 	.word	0x08005105
 80050e0:	080050fd 	.word	0x080050fd
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ea:	e0d8      	b.n	800529e <UART_SetConfig+0x2fe>
 80050ec:	2302      	movs	r3, #2
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f2:	e0d4      	b.n	800529e <UART_SetConfig+0x2fe>
 80050f4:	2304      	movs	r3, #4
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fa:	e0d0      	b.n	800529e <UART_SetConfig+0x2fe>
 80050fc:	2308      	movs	r3, #8
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005102:	e0cc      	b.n	800529e <UART_SetConfig+0x2fe>
 8005104:	2310      	movs	r3, #16
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510a:	e0c8      	b.n	800529e <UART_SetConfig+0x2fe>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a5e      	ldr	r2, [pc, #376]	; (800528c <UART_SetConfig+0x2ec>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d125      	bne.n	8005162 <UART_SetConfig+0x1c2>
 8005116:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <UART_SetConfig+0x2e4>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005120:	2b30      	cmp	r3, #48	; 0x30
 8005122:	d016      	beq.n	8005152 <UART_SetConfig+0x1b2>
 8005124:	2b30      	cmp	r3, #48	; 0x30
 8005126:	d818      	bhi.n	800515a <UART_SetConfig+0x1ba>
 8005128:	2b20      	cmp	r3, #32
 800512a:	d00a      	beq.n	8005142 <UART_SetConfig+0x1a2>
 800512c:	2b20      	cmp	r3, #32
 800512e:	d814      	bhi.n	800515a <UART_SetConfig+0x1ba>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <UART_SetConfig+0x19a>
 8005134:	2b10      	cmp	r3, #16
 8005136:	d008      	beq.n	800514a <UART_SetConfig+0x1aa>
 8005138:	e00f      	b.n	800515a <UART_SetConfig+0x1ba>
 800513a:	2300      	movs	r3, #0
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005140:	e0ad      	b.n	800529e <UART_SetConfig+0x2fe>
 8005142:	2302      	movs	r3, #2
 8005144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005148:	e0a9      	b.n	800529e <UART_SetConfig+0x2fe>
 800514a:	2304      	movs	r3, #4
 800514c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005150:	e0a5      	b.n	800529e <UART_SetConfig+0x2fe>
 8005152:	2308      	movs	r3, #8
 8005154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005158:	e0a1      	b.n	800529e <UART_SetConfig+0x2fe>
 800515a:	2310      	movs	r3, #16
 800515c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005160:	e09d      	b.n	800529e <UART_SetConfig+0x2fe>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a4a      	ldr	r2, [pc, #296]	; (8005290 <UART_SetConfig+0x2f0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d125      	bne.n	80051b8 <UART_SetConfig+0x218>
 800516c:	4b45      	ldr	r3, [pc, #276]	; (8005284 <UART_SetConfig+0x2e4>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005176:	2bc0      	cmp	r3, #192	; 0xc0
 8005178:	d016      	beq.n	80051a8 <UART_SetConfig+0x208>
 800517a:	2bc0      	cmp	r3, #192	; 0xc0
 800517c:	d818      	bhi.n	80051b0 <UART_SetConfig+0x210>
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d00a      	beq.n	8005198 <UART_SetConfig+0x1f8>
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d814      	bhi.n	80051b0 <UART_SetConfig+0x210>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <UART_SetConfig+0x1f0>
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d008      	beq.n	80051a0 <UART_SetConfig+0x200>
 800518e:	e00f      	b.n	80051b0 <UART_SetConfig+0x210>
 8005190:	2300      	movs	r3, #0
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005196:	e082      	b.n	800529e <UART_SetConfig+0x2fe>
 8005198:	2302      	movs	r3, #2
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519e:	e07e      	b.n	800529e <UART_SetConfig+0x2fe>
 80051a0:	2304      	movs	r3, #4
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a6:	e07a      	b.n	800529e <UART_SetConfig+0x2fe>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ae:	e076      	b.n	800529e <UART_SetConfig+0x2fe>
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b6:	e072      	b.n	800529e <UART_SetConfig+0x2fe>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a35      	ldr	r2, [pc, #212]	; (8005294 <UART_SetConfig+0x2f4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d12a      	bne.n	8005218 <UART_SetConfig+0x278>
 80051c2:	4b30      	ldr	r3, [pc, #192]	; (8005284 <UART_SetConfig+0x2e4>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d0:	d01a      	beq.n	8005208 <UART_SetConfig+0x268>
 80051d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d6:	d81b      	bhi.n	8005210 <UART_SetConfig+0x270>
 80051d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051dc:	d00c      	beq.n	80051f8 <UART_SetConfig+0x258>
 80051de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e2:	d815      	bhi.n	8005210 <UART_SetConfig+0x270>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <UART_SetConfig+0x250>
 80051e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ec:	d008      	beq.n	8005200 <UART_SetConfig+0x260>
 80051ee:	e00f      	b.n	8005210 <UART_SetConfig+0x270>
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f6:	e052      	b.n	800529e <UART_SetConfig+0x2fe>
 80051f8:	2302      	movs	r3, #2
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fe:	e04e      	b.n	800529e <UART_SetConfig+0x2fe>
 8005200:	2304      	movs	r3, #4
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005206:	e04a      	b.n	800529e <UART_SetConfig+0x2fe>
 8005208:	2308      	movs	r3, #8
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520e:	e046      	b.n	800529e <UART_SetConfig+0x2fe>
 8005210:	2310      	movs	r3, #16
 8005212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005216:	e042      	b.n	800529e <UART_SetConfig+0x2fe>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a17      	ldr	r2, [pc, #92]	; (800527c <UART_SetConfig+0x2dc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d13a      	bne.n	8005298 <UART_SetConfig+0x2f8>
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <UART_SetConfig+0x2e4>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800522c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005230:	d01a      	beq.n	8005268 <UART_SetConfig+0x2c8>
 8005232:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005236:	d81b      	bhi.n	8005270 <UART_SetConfig+0x2d0>
 8005238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523c:	d00c      	beq.n	8005258 <UART_SetConfig+0x2b8>
 800523e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005242:	d815      	bhi.n	8005270 <UART_SetConfig+0x2d0>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <UART_SetConfig+0x2b0>
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524c:	d008      	beq.n	8005260 <UART_SetConfig+0x2c0>
 800524e:	e00f      	b.n	8005270 <UART_SetConfig+0x2d0>
 8005250:	2300      	movs	r3, #0
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005256:	e022      	b.n	800529e <UART_SetConfig+0x2fe>
 8005258:	2302      	movs	r3, #2
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525e:	e01e      	b.n	800529e <UART_SetConfig+0x2fe>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005266:	e01a      	b.n	800529e <UART_SetConfig+0x2fe>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526e:	e016      	b.n	800529e <UART_SetConfig+0x2fe>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005276:	e012      	b.n	800529e <UART_SetConfig+0x2fe>
 8005278:	cfff69f3 	.word	0xcfff69f3
 800527c:	40008000 	.word	0x40008000
 8005280:	40013800 	.word	0x40013800
 8005284:	40021000 	.word	0x40021000
 8005288:	40004400 	.word	0x40004400
 800528c:	40004800 	.word	0x40004800
 8005290:	40004c00 	.word	0x40004c00
 8005294:	40005000 	.word	0x40005000
 8005298:	2310      	movs	r3, #16
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4aae      	ldr	r2, [pc, #696]	; (800555c <UART_SetConfig+0x5bc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	f040 8097 	bne.w	80053d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d823      	bhi.n	80052fa <UART_SetConfig+0x35a>
 80052b2:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x318>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052fb 	.word	0x080052fb
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052fb 	.word	0x080052fb
 80052c8:	080052eb 	.word	0x080052eb
 80052cc:	080052fb 	.word	0x080052fb
 80052d0:	080052fb 	.word	0x080052fb
 80052d4:	080052fb 	.word	0x080052fb
 80052d8:	080052f3 	.word	0x080052f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052dc:	f7fd ffc2 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 80052e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052e2:	e010      	b.n	8005306 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e4:	4b9e      	ldr	r3, [pc, #632]	; (8005560 <UART_SetConfig+0x5c0>)
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052e8:	e00d      	b.n	8005306 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ea:	f7fd ff23 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80052ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052f0:	e009      	b.n	8005306 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052f8:	e005      	b.n	8005306 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005304:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8130 	beq.w	800556e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	4a94      	ldr	r2, [pc, #592]	; (8005564 <UART_SetConfig+0x5c4>)
 8005314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005318:	461a      	mov	r2, r3
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005320:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	429a      	cmp	r2, r3
 8005330:	d305      	bcc.n	800533e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	429a      	cmp	r2, r3
 800533c:	d903      	bls.n	8005346 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005344:	e113      	b.n	800556e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	2200      	movs	r2, #0
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	60fa      	str	r2, [r7, #12]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	4a84      	ldr	r2, [pc, #528]	; (8005564 <UART_SetConfig+0x5c4>)
 8005354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005358:	b29b      	uxth	r3, r3
 800535a:	2200      	movs	r2, #0
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005364:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005368:	f7fb fc36 	bl	8000bd8 <__aeabi_uldivmod>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	020b      	lsls	r3, r1, #8
 800537e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005382:	0202      	lsls	r2, r0, #8
 8005384:	6979      	ldr	r1, [r7, #20]
 8005386:	6849      	ldr	r1, [r1, #4]
 8005388:	0849      	lsrs	r1, r1, #1
 800538a:	2000      	movs	r0, #0
 800538c:	460c      	mov	r4, r1
 800538e:	4605      	mov	r5, r0
 8005390:	eb12 0804 	adds.w	r8, r2, r4
 8005394:	eb43 0905 	adc.w	r9, r3, r5
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	469a      	mov	sl, r3
 80053a0:	4693      	mov	fp, r2
 80053a2:	4652      	mov	r2, sl
 80053a4:	465b      	mov	r3, fp
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	f7fb fc15 	bl	8000bd8 <__aeabi_uldivmod>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4613      	mov	r3, r2
 80053b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053bc:	d308      	bcc.n	80053d0 <UART_SetConfig+0x430>
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c4:	d204      	bcs.n	80053d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a3a      	ldr	r2, [r7, #32]
 80053cc:	60da      	str	r2, [r3, #12]
 80053ce:	e0ce      	b.n	800556e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053d6:	e0ca      	b.n	800556e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e0:	d166      	bne.n	80054b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80053e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d827      	bhi.n	800543a <UART_SetConfig+0x49a>
 80053ea:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0x450>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	0800543b 	.word	0x0800543b
 8005400:	0800542b 	.word	0x0800542b
 8005404:	0800543b 	.word	0x0800543b
 8005408:	0800543b 	.word	0x0800543b
 800540c:	0800543b 	.word	0x0800543b
 8005410:	08005433 	.word	0x08005433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7fd ff26 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8005418:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800541a:	e014      	b.n	8005446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7fd ff38 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 8005420:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005422:	e010      	b.n	8005446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005424:	4b4e      	ldr	r3, [pc, #312]	; (8005560 <UART_SetConfig+0x5c0>)
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005428:	e00d      	b.n	8005446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542a:	f7fd fe83 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 800542e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005430:	e009      	b.n	8005446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005438:	e005      	b.n	8005446 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8090 	beq.w	800556e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	4a44      	ldr	r2, [pc, #272]	; (8005564 <UART_SetConfig+0x5c4>)
 8005454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005458:	461a      	mov	r2, r3
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005460:	005a      	lsls	r2, r3, #1
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	085b      	lsrs	r3, r3, #1
 8005468:	441a      	add	r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005472:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	d916      	bls.n	80054a8 <UART_SetConfig+0x508>
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005480:	d212      	bcs.n	80054a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f023 030f 	bic.w	r3, r3, #15
 800548a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	085b      	lsrs	r3, r3, #1
 8005490:	b29b      	uxth	r3, r3
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	b29a      	uxth	r2, r3
 8005498:	8bfb      	ldrh	r3, [r7, #30]
 800549a:	4313      	orrs	r3, r2
 800549c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	8bfa      	ldrh	r2, [r7, #30]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	e062      	b.n	800556e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054ae:	e05e      	b.n	800556e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d828      	bhi.n	800550a <UART_SetConfig+0x56a>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <UART_SetConfig+0x520>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	080054f5 	.word	0x080054f5
 80054cc:	0800550b 	.word	0x0800550b
 80054d0:	080054fb 	.word	0x080054fb
 80054d4:	0800550b 	.word	0x0800550b
 80054d8:	0800550b 	.word	0x0800550b
 80054dc:	0800550b 	.word	0x0800550b
 80054e0:	08005503 	.word	0x08005503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e4:	f7fd febe 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 80054e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054ea:	e014      	b.n	8005516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ec:	f7fd fed0 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 80054f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054f2:	e010      	b.n	8005516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f4:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <UART_SetConfig+0x5c0>)
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054f8:	e00d      	b.n	8005516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fa:	f7fd fe1b 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80054fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005500:	e009      	b.n	8005516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005508:	e005      	b.n	8005516 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005514:	bf00      	nop
    }

    if (pclk != 0U)
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d028      	beq.n	800556e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	4a10      	ldr	r2, [pc, #64]	; (8005564 <UART_SetConfig+0x5c4>)
 8005522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005526:	461a      	mov	r2, r3
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	fbb3 f2f2 	udiv	r2, r3, r2
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	441a      	add	r2, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	2b0f      	cmp	r3, #15
 8005544:	d910      	bls.n	8005568 <UART_SetConfig+0x5c8>
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554c:	d20c      	bcs.n	8005568 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	b29a      	uxth	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60da      	str	r2, [r3, #12]
 8005558:	e009      	b.n	800556e <UART_SetConfig+0x5ce>
 800555a:	bf00      	nop
 800555c:	40008000 	.word	0x40008000
 8005560:	00f42400 	.word	0x00f42400
 8005564:	080093e8 	.word	0x080093e8
      }
      else
      {
        ret = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2201      	movs	r2, #1
 8005572:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2201      	movs	r2, #1
 800557a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2200      	movs	r2, #0
 8005582:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800558a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800558e:	4618      	mov	r0, r3
 8005590:	3730      	adds	r7, #48	; 0x30
 8005592:	46bd      	mov	sp, r7
 8005594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01a      	beq.n	80056ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005696:	d10a      	bne.n	80056ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b098      	sub	sp, #96	; 0x60
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056ec:	f7fc fb54 	bl	8001d98 <HAL_GetTick>
 80056f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d12f      	bne.n	8005760 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005708:	2200      	movs	r2, #0
 800570a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f88e 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d022      	beq.n	8005760 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572e:	653b      	str	r3, [r7, #80]	; 0x50
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005738:	647b      	str	r3, [r7, #68]	; 0x44
 800573a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800573e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e6      	bne.n	800571a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e063      	b.n	8005828 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b04      	cmp	r3, #4
 800576c:	d149      	bne.n	8005802 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800576e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005776:	2200      	movs	r2, #0
 8005778:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f857 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d03c      	beq.n	8005802 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	623b      	str	r3, [r7, #32]
   return(result);
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800579c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a6:	633b      	str	r3, [r7, #48]	; 0x30
 80057a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e6      	bne.n	8005788 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057da:	61fa      	str	r2, [r7, #28]
 80057dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	69b9      	ldr	r1, [r7, #24]
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	617b      	str	r3, [r7, #20]
   return(result);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e012      	b.n	8005828 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3758      	adds	r7, #88	; 0x58
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005840:	e049      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d045      	beq.n	80058d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584a:	f7fc faa5 	bl	8001d98 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <UART_WaitOnFlagUntilTimeout+0x30>
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e048      	b.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d031      	beq.n	80058d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b08      	cmp	r3, #8
 800587e:	d110      	bne.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2208      	movs	r2, #8
 8005886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f95b 	bl	8005b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2208      	movs	r2, #8
 8005892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e029      	b.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b0:	d111      	bne.n	80058d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f941 	bl	8005b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e00f      	b.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4013      	ands	r3, r2
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	bf0c      	ite	eq
 80058e6:	2301      	moveq	r3, #1
 80058e8:	2300      	movne	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d0a6      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005900:	b480      	push	{r7}
 8005902:	b0a3      	sub	sp, #140	; 0x8c
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	88fa      	ldrh	r2, [r7, #6]
 8005920:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005932:	d10e      	bne.n	8005952 <UART_Start_Receive_IT+0x52>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d105      	bne.n	8005948 <UART_Start_Receive_IT+0x48>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005942:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005946:	e02d      	b.n	80059a4 <UART_Start_Receive_IT+0xa4>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	22ff      	movs	r2, #255	; 0xff
 800594c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005950:	e028      	b.n	80059a4 <UART_Start_Receive_IT+0xa4>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <UART_Start_Receive_IT+0x76>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <UART_Start_Receive_IT+0x6c>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	22ff      	movs	r2, #255	; 0xff
 8005966:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800596a:	e01b      	b.n	80059a4 <UART_Start_Receive_IT+0xa4>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	227f      	movs	r2, #127	; 0x7f
 8005970:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005974:	e016      	b.n	80059a4 <UART_Start_Receive_IT+0xa4>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800597e:	d10d      	bne.n	800599c <UART_Start_Receive_IT+0x9c>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <UART_Start_Receive_IT+0x92>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	227f      	movs	r2, #127	; 0x7f
 800598c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005990:	e008      	b.n	80059a4 <UART_Start_Receive_IT+0xa4>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	223f      	movs	r2, #63	; 0x3f
 8005996:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800599a:	e003      	b.n	80059a4 <UART_Start_Receive_IT+0xa4>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2222      	movs	r2, #34	; 0x22
 80059b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3308      	adds	r3, #8
 80059ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80059c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3308      	adds	r3, #8
 80059d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80059d8:	673a      	str	r2, [r7, #112]	; 0x70
 80059da:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80059de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80059e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e3      	bne.n	80059b4 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f4:	d14f      	bne.n	8005a96 <UART_Start_Receive_IT+0x196>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80059fc:	88fa      	ldrh	r2, [r7, #6]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d349      	bcc.n	8005a96 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0a:	d107      	bne.n	8005a1c <UART_Start_Receive_IT+0x11c>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d103      	bne.n	8005a1c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a47      	ldr	r2, [pc, #284]	; (8005b34 <UART_Start_Receive_IT+0x234>)
 8005a18:	675a      	str	r2, [r3, #116]	; 0x74
 8005a1a:	e002      	b.n	8005a22 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a46      	ldr	r2, [pc, #280]	; (8005b38 <UART_Start_Receive_IT+0x238>)
 8005a20:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01a      	beq.n	8005a60 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a4e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e4      	bne.n	8005a2a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005a80:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_Start_Receive_IT+0x160>
 8005a94:	e046      	b.n	8005b24 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9e:	d107      	bne.n	8005ab0 <UART_Start_Receive_IT+0x1b0>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a24      	ldr	r2, [pc, #144]	; (8005b3c <UART_Start_Receive_IT+0x23c>)
 8005aac:	675a      	str	r2, [r3, #116]	; 0x74
 8005aae:	e002      	b.n	8005ab6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a23      	ldr	r2, [pc, #140]	; (8005b40 <UART_Start_Receive_IT+0x240>)
 8005ab4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d019      	beq.n	8005af2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005ad2:	677b      	str	r3, [r7, #116]	; 0x74
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005adc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ade:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e6      	bne.n	8005abe <UART_Start_Receive_IT+0x1be>
 8005af0:	e018      	b.n	8005b24 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	613b      	str	r3, [r7, #16]
   return(result);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f043 0320 	orr.w	r3, r3, #32
 8005b06:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b10:	623b      	str	r3, [r7, #32]
 8005b12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	69f9      	ldr	r1, [r7, #28]
 8005b16:	6a3a      	ldr	r2, [r7, #32]
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e6      	bne.n	8005af2 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	378c      	adds	r7, #140	; 0x8c
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	08006371 	.word	0x08006371
 8005b38:	0800600d 	.word	0x0800600d
 8005b3c:	08005e51 	.word	0x08005e51
 8005b40:	08005c95 	.word	0x08005c95

08005b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b095      	sub	sp, #84	; 0x54
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e6      	bne.n	8005b4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3308      	adds	r3, #8
 8005b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e3      	bne.n	8005b7e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d118      	bne.n	8005bf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f023 0310 	bic.w	r3, r3, #16
 8005bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6979      	ldr	r1, [r7, #20]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e6      	bne.n	8005bbe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005c04:	bf00      	nop
 8005c06:	3754      	adds	r7, #84	; 0x54
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff f9a0 	bl	8004f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c34:	bf00      	nop
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6979      	ldr	r1, [r7, #20]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e6      	bne.n	8005c44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff f96b 	bl	8004f60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c8a:	bf00      	nop
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b09c      	sub	sp, #112	; 0x70
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ca2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cac:	2b22      	cmp	r3, #34	; 0x22
 8005cae:	f040 80be 	bne.w	8005e2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005cb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005cbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cc0:	b2d9      	uxtb	r1, r3
 8005cc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ccc:	400a      	ands	r2, r1
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 80a3 	bne.w	8005e42 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e6      	bne.n	8005cfc <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	667b      	str	r3, [r7, #100]	; 0x64
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d4e:	647a      	str	r2, [r7, #68]	; 0x44
 8005d50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e5      	bne.n	8005d2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a34      	ldr	r2, [pc, #208]	; (8005e4c <UART_RxISR_8BIT+0x1b8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d01f      	beq.n	8005dc0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d018      	beq.n	8005dc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005da2:	663b      	str	r3, [r7, #96]	; 0x60
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dac:	633b      	str	r3, [r7, #48]	; 0x30
 8005dae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e6      	bne.n	8005d8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d12e      	bne.n	8005e26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0310 	bic.w	r3, r3, #16
 8005de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	69b9      	ldr	r1, [r7, #24]
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e6      	bne.n	8005dce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d103      	bne.n	8005e16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2210      	movs	r2, #16
 8005e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff f8b2 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e24:	e00d      	b.n	8005e42 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fb fcb0 	bl	800178c <HAL_UART_RxCpltCallback>
}
 8005e2c:	e009      	b.n	8005e42 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	8b1b      	ldrh	r3, [r3, #24]
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0208 	orr.w	r2, r2, #8
 8005e3e:	b292      	uxth	r2, r2
 8005e40:	831a      	strh	r2, [r3, #24]
}
 8005e42:	bf00      	nop
 8005e44:	3770      	adds	r7, #112	; 0x70
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40008000 	.word	0x40008000

08005e50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b09c      	sub	sp, #112	; 0x70
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e68:	2b22      	cmp	r3, #34	; 0x22
 8005e6a:	f040 80be 	bne.w	8005fea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005e82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005e86:	4013      	ands	r3, r2
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e92:	1c9a      	adds	r2, r3, #2
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f040 80a3 	bne.w	8005ffe <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ed8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e6      	bne.n	8005eb8 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	f023 0301 	bic.w	r3, r3, #1
 8005f00:	663b      	str	r3, [r7, #96]	; 0x60
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3308      	adds	r3, #8
 8005f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f0a:	643a      	str	r2, [r7, #64]	; 0x40
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e5      	bne.n	8005eea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a34      	ldr	r2, [pc, #208]	; (8006008 <UART_RxISR_16BIT+0x1b8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d01f      	beq.n	8005f7c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d018      	beq.n	8005f7c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f6a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e6      	bne.n	8005f4a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d12e      	bne.n	8005fe2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f023 0310 	bic.w	r3, r3, #16
 8005f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fa8:	61bb      	str	r3, [r7, #24]
 8005faa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6979      	ldr	r1, [r7, #20]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e6      	bne.n	8005f8a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b10      	cmp	r3, #16
 8005fc8:	d103      	bne.n	8005fd2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2210      	movs	r2, #16
 8005fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fe ffd4 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fe0:	e00d      	b.n	8005ffe <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fb fbd2 	bl	800178c <HAL_UART_RxCpltCallback>
}
 8005fe8:	e009      	b.n	8005ffe <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	8b1b      	ldrh	r3, [r3, #24]
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	831a      	strh	r2, [r3, #24]
}
 8005ffe:	bf00      	nop
 8006000:	3770      	adds	r7, #112	; 0x70
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40008000 	.word	0x40008000

0800600c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b0ac      	sub	sp, #176	; 0xb0
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800601a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006042:	2b22      	cmp	r3, #34	; 0x22
 8006044:	f040 8182 	bne.w	800634c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800604e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006052:	e125      	b.n	80062a0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800605a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800605e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006062:	b2d9      	uxtb	r1, r3
 8006064:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006068:	b2da      	uxtb	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	400a      	ands	r2, r1
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800609a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d053      	beq.n	800614e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d011      	beq.n	80060d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80060b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2201      	movs	r2, #1
 80060c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060cc:	f043 0201 	orr.w	r2, r3, #1
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d011      	beq.n	8006106 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80060e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2202      	movs	r2, #2
 80060f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fc:	f043 0204 	orr.w	r2, r3, #4
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d011      	beq.n	8006136 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2204      	movs	r2, #4
 8006124:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	f043 0202 	orr.w	r2, r3, #2
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613c:	2b00      	cmp	r3, #0
 800613e:	d006      	beq.n	800614e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fe ff17 	bl	8004f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	f040 80a2 	bne.w	80062a0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800616a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800617e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006180:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006184:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800618c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e4      	bne.n	800615c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80061a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3308      	adds	r3, #8
 80061b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061ba:	66ba      	str	r2, [r7, #104]	; 0x68
 80061bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80061c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80061c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e1      	bne.n	8006192 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a60      	ldr	r2, [pc, #384]	; (8006368 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d021      	beq.n	8006230 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01a      	beq.n	8006230 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800620a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800620e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800621c:	657b      	str	r3, [r7, #84]	; 0x54
 800621e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006222:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800622a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e4      	bne.n	80061fa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006234:	2b01      	cmp	r3, #1
 8006236:	d130      	bne.n	800629a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	f023 0310 	bic.w	r3, r3, #16
 8006252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006260:	643b      	str	r3, [r7, #64]	; 0x40
 8006262:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e4      	bne.n	800623e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	2b10      	cmp	r3, #16
 8006280:	d103      	bne.n	800628a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2210      	movs	r2, #16
 8006288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fe fe78 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
 8006298:	e002      	b.n	80062a0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fb fa76 	bl	800178c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062a0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80062a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f47f aecf 	bne.w	8006054 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80062c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d04b      	beq.n	8006360 <UART_RxISR_8BIT_FIFOEN+0x354>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80062ce:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d244      	bcs.n	8006360 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3308      	adds	r3, #8
 80062dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3308      	adds	r3, #8
 80062f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80062fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e3      	bne.n	80062d6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a16      	ldr	r2, [pc, #88]	; (800636c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006312:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	60bb      	str	r3, [r7, #8]
   return(result);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f043 0320 	orr.w	r3, r3, #32
 8006328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006336:	61bb      	str	r3, [r7, #24]
 8006338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6979      	ldr	r1, [r7, #20]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	613b      	str	r3, [r7, #16]
   return(result);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e4      	bne.n	8006314 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800634a:	e009      	b.n	8006360 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	8b1b      	ldrh	r3, [r3, #24]
 8006352:	b29a      	uxth	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0208 	orr.w	r2, r2, #8
 800635c:	b292      	uxth	r2, r2
 800635e:	831a      	strh	r2, [r3, #24]
}
 8006360:	bf00      	nop
 8006362:	37b0      	adds	r7, #176	; 0xb0
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	40008000 	.word	0x40008000
 800636c:	08005c95 	.word	0x08005c95

08006370 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b0ae      	sub	sp, #184	; 0xb8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800637e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a6:	2b22      	cmp	r3, #34	; 0x22
 80063a8:	f040 8186 	bne.w	80066b8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80063b2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063b6:	e129      	b.n	800660c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80063be:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80063ca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80063ce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80063d2:	4013      	ands	r3, r2
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	1c9a      	adds	r2, r3, #2
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	2b00      	cmp	r3, #0
 800640c:	d053      	beq.n	80064b6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800640e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d011      	beq.n	800643e <UART_RxISR_16BIT_FIFOEN+0xce>
 800641a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800641e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00b      	beq.n	800643e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2201      	movs	r2, #1
 800642c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006434:	f043 0201 	orr.w	r2, r3, #1
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800643e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d011      	beq.n	800646e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800644a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2202      	movs	r2, #2
 800645c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006464:	f043 0204 	orr.w	r2, r3, #4
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800646e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	d011      	beq.n	800649e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800647a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00b      	beq.n	800649e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2204      	movs	r2, #4
 800648c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006494:	f043 0202 	orr.w	r2, r3, #2
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d006      	beq.n	80064b6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fe fd63 	bl	8004f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f040 80a4 	bne.w	800660c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064ea:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e2      	bne.n	80064c4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800650e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3308      	adds	r3, #8
 8006522:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006526:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006528:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800652c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e1      	bne.n	80064fe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a60      	ldr	r2, [pc, #384]	; (80066d4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d021      	beq.n	800659c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01a      	beq.n	800659c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006576:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800657a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006588:	65bb      	str	r3, [r7, #88]	; 0x58
 800658a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800658e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e4      	bne.n	8006566 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d130      	bne.n	8006606 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ba:	f023 0310 	bic.w	r3, r3, #16
 80065be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065cc:	647b      	str	r3, [r7, #68]	; 0x44
 80065ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e4      	bne.n	80065aa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d103      	bne.n	80065f6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2210      	movs	r2, #16
 80065f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fe fcc2 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
 8006604:	e002      	b.n	800660c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fb f8c0 	bl	800178c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800660c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006610:	2b00      	cmp	r3, #0
 8006612:	d006      	beq.n	8006622 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006614:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	f47f aecb 	bne.w	80063b8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006628:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800662c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006630:	2b00      	cmp	r3, #0
 8006632:	d04b      	beq.n	80066cc <UART_RxISR_16BIT_FIFOEN+0x35c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800663a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800663e:	429a      	cmp	r2, r3
 8006640:	d244      	bcs.n	80066cc <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	623b      	str	r3, [r7, #32]
   return(result);
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3308      	adds	r3, #8
 8006662:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006666:	633a      	str	r2, [r7, #48]	; 0x30
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e3      	bne.n	8006642 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a16      	ldr	r2, [pc, #88]	; (80066d8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800667e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	60fb      	str	r3, [r7, #12]
   return(result);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f043 0320 	orr.w	r3, r3, #32
 8006694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066a2:	61fb      	str	r3, [r7, #28]
 80066a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	69b9      	ldr	r1, [r7, #24]
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	617b      	str	r3, [r7, #20]
   return(result);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e4      	bne.n	8006680 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066b6:	e009      	b.n	80066cc <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	8b1b      	ldrh	r3, [r3, #24]
 80066be:	b29a      	uxth	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0208 	orr.w	r2, r2, #8
 80066c8:	b292      	uxth	r2, r2
 80066ca:	831a      	strh	r2, [r3, #24]
}
 80066cc:	bf00      	nop
 80066ce:	37b8      	adds	r7, #184	; 0xb8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40008000 	.word	0x40008000
 80066d8:	08005e51 	.word	0x08005e51

080066dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_UARTEx_DisableFifoMode+0x16>
 800672a:	2302      	movs	r3, #2
 800672c:	e027      	b.n	800677e <HAL_UARTEx_DisableFifoMode+0x66>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2224      	movs	r2, #36	; 0x24
 800673a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0201 	bic.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800675c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800679e:	2302      	movs	r3, #2
 80067a0:	e02d      	b.n	80067fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2224      	movs	r2, #36	; 0x24
 80067ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f850 	bl	8006884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800681a:	2302      	movs	r3, #2
 800681c:	e02d      	b.n	800687a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2224      	movs	r2, #36	; 0x24
 800682a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f812 	bl	8006884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006890:	2b00      	cmp	r3, #0
 8006892:	d108      	bne.n	80068a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068a4:	e031      	b.n	800690a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068a6:	2308      	movs	r3, #8
 80068a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068aa:	2308      	movs	r3, #8
 80068ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	0e5b      	lsrs	r3, r3, #25
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	0f5b      	lsrs	r3, r3, #29
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
 80068d0:	7b3a      	ldrb	r2, [r7, #12]
 80068d2:	4911      	ldr	r1, [pc, #68]	; (8006918 <UARTEx_SetNbDataToProcess+0x94>)
 80068d4:	5c8a      	ldrb	r2, [r1, r2]
 80068d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068da:	7b3a      	ldrb	r2, [r7, #12]
 80068dc:	490f      	ldr	r1, [pc, #60]	; (800691c <UARTEx_SetNbDataToProcess+0x98>)
 80068de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	7b7a      	ldrb	r2, [r7, #13]
 80068f0:	4909      	ldr	r1, [pc, #36]	; (8006918 <UARTEx_SetNbDataToProcess+0x94>)
 80068f2:	5c8a      	ldrb	r2, [r1, r2]
 80068f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068f8:	7b7a      	ldrb	r2, [r7, #13]
 80068fa:	4908      	ldr	r1, [pc, #32]	; (800691c <UARTEx_SetNbDataToProcess+0x98>)
 80068fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006902:	b29a      	uxth	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	08009400 	.word	0x08009400
 800691c:	08009408 	.word	0x08009408

08006920 <__cvt>:
 8006920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	ec55 4b10 	vmov	r4, r5, d0
 8006928:	2d00      	cmp	r5, #0
 800692a:	460e      	mov	r6, r1
 800692c:	4619      	mov	r1, r3
 800692e:	462b      	mov	r3, r5
 8006930:	bfbb      	ittet	lt
 8006932:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006936:	461d      	movlt	r5, r3
 8006938:	2300      	movge	r3, #0
 800693a:	232d      	movlt	r3, #45	; 0x2d
 800693c:	700b      	strb	r3, [r1, #0]
 800693e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006940:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006944:	4691      	mov	r9, r2
 8006946:	f023 0820 	bic.w	r8, r3, #32
 800694a:	bfbc      	itt	lt
 800694c:	4622      	movlt	r2, r4
 800694e:	4614      	movlt	r4, r2
 8006950:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006954:	d005      	beq.n	8006962 <__cvt+0x42>
 8006956:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800695a:	d100      	bne.n	800695e <__cvt+0x3e>
 800695c:	3601      	adds	r6, #1
 800695e:	2102      	movs	r1, #2
 8006960:	e000      	b.n	8006964 <__cvt+0x44>
 8006962:	2103      	movs	r1, #3
 8006964:	ab03      	add	r3, sp, #12
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	ab02      	add	r3, sp, #8
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	ec45 4b10 	vmov	d0, r4, r5
 8006970:	4653      	mov	r3, sl
 8006972:	4632      	mov	r2, r6
 8006974:	f000 fe64 	bl	8007640 <_dtoa_r>
 8006978:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800697c:	4607      	mov	r7, r0
 800697e:	d102      	bne.n	8006986 <__cvt+0x66>
 8006980:	f019 0f01 	tst.w	r9, #1
 8006984:	d022      	beq.n	80069cc <__cvt+0xac>
 8006986:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800698a:	eb07 0906 	add.w	r9, r7, r6
 800698e:	d110      	bne.n	80069b2 <__cvt+0x92>
 8006990:	783b      	ldrb	r3, [r7, #0]
 8006992:	2b30      	cmp	r3, #48	; 0x30
 8006994:	d10a      	bne.n	80069ac <__cvt+0x8c>
 8006996:	2200      	movs	r2, #0
 8006998:	2300      	movs	r3, #0
 800699a:	4620      	mov	r0, r4
 800699c:	4629      	mov	r1, r5
 800699e:	f7fa f8ab 	bl	8000af8 <__aeabi_dcmpeq>
 80069a2:	b918      	cbnz	r0, 80069ac <__cvt+0x8c>
 80069a4:	f1c6 0601 	rsb	r6, r6, #1
 80069a8:	f8ca 6000 	str.w	r6, [sl]
 80069ac:	f8da 3000 	ldr.w	r3, [sl]
 80069b0:	4499      	add	r9, r3
 80069b2:	2200      	movs	r2, #0
 80069b4:	2300      	movs	r3, #0
 80069b6:	4620      	mov	r0, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7fa f89d 	bl	8000af8 <__aeabi_dcmpeq>
 80069be:	b108      	cbz	r0, 80069c4 <__cvt+0xa4>
 80069c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80069c4:	2230      	movs	r2, #48	; 0x30
 80069c6:	9b03      	ldr	r3, [sp, #12]
 80069c8:	454b      	cmp	r3, r9
 80069ca:	d307      	bcc.n	80069dc <__cvt+0xbc>
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069d0:	1bdb      	subs	r3, r3, r7
 80069d2:	4638      	mov	r0, r7
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	b004      	add	sp, #16
 80069d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069dc:	1c59      	adds	r1, r3, #1
 80069de:	9103      	str	r1, [sp, #12]
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e7f0      	b.n	80069c6 <__cvt+0xa6>

080069e4 <__exponent>:
 80069e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069e6:	4603      	mov	r3, r0
 80069e8:	2900      	cmp	r1, #0
 80069ea:	bfb8      	it	lt
 80069ec:	4249      	neglt	r1, r1
 80069ee:	f803 2b02 	strb.w	r2, [r3], #2
 80069f2:	bfb4      	ite	lt
 80069f4:	222d      	movlt	r2, #45	; 0x2d
 80069f6:	222b      	movge	r2, #43	; 0x2b
 80069f8:	2909      	cmp	r1, #9
 80069fa:	7042      	strb	r2, [r0, #1]
 80069fc:	dd2a      	ble.n	8006a54 <__exponent+0x70>
 80069fe:	f10d 0207 	add.w	r2, sp, #7
 8006a02:	4617      	mov	r7, r2
 8006a04:	260a      	movs	r6, #10
 8006a06:	4694      	mov	ip, r2
 8006a08:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a0c:	fb06 1415 	mls	r4, r6, r5, r1
 8006a10:	3430      	adds	r4, #48	; 0x30
 8006a12:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006a16:	460c      	mov	r4, r1
 8006a18:	2c63      	cmp	r4, #99	; 0x63
 8006a1a:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a1e:	4629      	mov	r1, r5
 8006a20:	dcf1      	bgt.n	8006a06 <__exponent+0x22>
 8006a22:	3130      	adds	r1, #48	; 0x30
 8006a24:	f1ac 0402 	sub.w	r4, ip, #2
 8006a28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a2c:	1c41      	adds	r1, r0, #1
 8006a2e:	4622      	mov	r2, r4
 8006a30:	42ba      	cmp	r2, r7
 8006a32:	d30a      	bcc.n	8006a4a <__exponent+0x66>
 8006a34:	f10d 0209 	add.w	r2, sp, #9
 8006a38:	eba2 020c 	sub.w	r2, r2, ip
 8006a3c:	42bc      	cmp	r4, r7
 8006a3e:	bf88      	it	hi
 8006a40:	2200      	movhi	r2, #0
 8006a42:	4413      	add	r3, r2
 8006a44:	1a18      	subs	r0, r3, r0
 8006a46:	b003      	add	sp, #12
 8006a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a4a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006a4e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006a52:	e7ed      	b.n	8006a30 <__exponent+0x4c>
 8006a54:	2330      	movs	r3, #48	; 0x30
 8006a56:	3130      	adds	r1, #48	; 0x30
 8006a58:	7083      	strb	r3, [r0, #2]
 8006a5a:	70c1      	strb	r1, [r0, #3]
 8006a5c:	1d03      	adds	r3, r0, #4
 8006a5e:	e7f1      	b.n	8006a44 <__exponent+0x60>

08006a60 <_printf_float>:
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	ed2d 8b02 	vpush	{d8}
 8006a68:	b08d      	sub	sp, #52	; 0x34
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a70:	4616      	mov	r6, r2
 8006a72:	461f      	mov	r7, r3
 8006a74:	4605      	mov	r5, r0
 8006a76:	f000 fce1 	bl	800743c <_localeconv_r>
 8006a7a:	f8d0 a000 	ldr.w	sl, [r0]
 8006a7e:	4650      	mov	r0, sl
 8006a80:	f7f9 fc0e 	bl	80002a0 <strlen>
 8006a84:	2300      	movs	r3, #0
 8006a86:	930a      	str	r3, [sp, #40]	; 0x28
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	9305      	str	r3, [sp, #20]
 8006a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a94:	3307      	adds	r3, #7
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	f103 0208 	add.w	r2, r3, #8
 8006a9e:	f8c8 2000 	str.w	r2, [r8]
 8006aa2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006aaa:	9307      	str	r3, [sp, #28]
 8006aac:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ab0:	ee08 0a10 	vmov	s16, r0
 8006ab4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006ab8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006abc:	4b9e      	ldr	r3, [pc, #632]	; (8006d38 <_printf_float+0x2d8>)
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac2:	f7fa f84b 	bl	8000b5c <__aeabi_dcmpun>
 8006ac6:	bb88      	cbnz	r0, 8006b2c <_printf_float+0xcc>
 8006ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006acc:	4b9a      	ldr	r3, [pc, #616]	; (8006d38 <_printf_float+0x2d8>)
 8006ace:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad2:	f7fa f825 	bl	8000b20 <__aeabi_dcmple>
 8006ad6:	bb48      	cbnz	r0, 8006b2c <_printf_float+0xcc>
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2300      	movs	r3, #0
 8006adc:	4640      	mov	r0, r8
 8006ade:	4649      	mov	r1, r9
 8006ae0:	f7fa f814 	bl	8000b0c <__aeabi_dcmplt>
 8006ae4:	b110      	cbz	r0, 8006aec <_printf_float+0x8c>
 8006ae6:	232d      	movs	r3, #45	; 0x2d
 8006ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aec:	4a93      	ldr	r2, [pc, #588]	; (8006d3c <_printf_float+0x2dc>)
 8006aee:	4b94      	ldr	r3, [pc, #592]	; (8006d40 <_printf_float+0x2e0>)
 8006af0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006af4:	bf94      	ite	ls
 8006af6:	4690      	movls	r8, r2
 8006af8:	4698      	movhi	r8, r3
 8006afa:	2303      	movs	r3, #3
 8006afc:	6123      	str	r3, [r4, #16]
 8006afe:	9b05      	ldr	r3, [sp, #20]
 8006b00:	f023 0304 	bic.w	r3, r3, #4
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	f04f 0900 	mov.w	r9, #0
 8006b0a:	9700      	str	r7, [sp, #0]
 8006b0c:	4633      	mov	r3, r6
 8006b0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b10:	4621      	mov	r1, r4
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 f9da 	bl	8006ecc <_printf_common>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f040 8090 	bne.w	8006c3e <_printf_float+0x1de>
 8006b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b22:	b00d      	add	sp, #52	; 0x34
 8006b24:	ecbd 8b02 	vpop	{d8}
 8006b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	464b      	mov	r3, r9
 8006b30:	4640      	mov	r0, r8
 8006b32:	4649      	mov	r1, r9
 8006b34:	f7fa f812 	bl	8000b5c <__aeabi_dcmpun>
 8006b38:	b140      	cbz	r0, 8006b4c <_printf_float+0xec>
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	bfbc      	itt	lt
 8006b40:	232d      	movlt	r3, #45	; 0x2d
 8006b42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b46:	4a7f      	ldr	r2, [pc, #508]	; (8006d44 <_printf_float+0x2e4>)
 8006b48:	4b7f      	ldr	r3, [pc, #508]	; (8006d48 <_printf_float+0x2e8>)
 8006b4a:	e7d1      	b.n	8006af0 <_printf_float+0x90>
 8006b4c:	6863      	ldr	r3, [r4, #4]
 8006b4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b52:	9206      	str	r2, [sp, #24]
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	d13f      	bne.n	8006bd8 <_printf_float+0x178>
 8006b58:	2306      	movs	r3, #6
 8006b5a:	6063      	str	r3, [r4, #4]
 8006b5c:	9b05      	ldr	r3, [sp, #20]
 8006b5e:	6861      	ldr	r1, [r4, #4]
 8006b60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b64:	2300      	movs	r3, #0
 8006b66:	9303      	str	r3, [sp, #12]
 8006b68:	ab0a      	add	r3, sp, #40	; 0x28
 8006b6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b6e:	ab09      	add	r3, sp, #36	; 0x24
 8006b70:	ec49 8b10 	vmov	d0, r8, r9
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	6022      	str	r2, [r4, #0]
 8006b78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f7ff fecf 	bl	8006920 <__cvt>
 8006b82:	9b06      	ldr	r3, [sp, #24]
 8006b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b86:	2b47      	cmp	r3, #71	; 0x47
 8006b88:	4680      	mov	r8, r0
 8006b8a:	d108      	bne.n	8006b9e <_printf_float+0x13e>
 8006b8c:	1cc8      	adds	r0, r1, #3
 8006b8e:	db02      	blt.n	8006b96 <_printf_float+0x136>
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	4299      	cmp	r1, r3
 8006b94:	dd41      	ble.n	8006c1a <_printf_float+0x1ba>
 8006b96:	f1ab 0302 	sub.w	r3, fp, #2
 8006b9a:	fa5f fb83 	uxtb.w	fp, r3
 8006b9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ba2:	d820      	bhi.n	8006be6 <_printf_float+0x186>
 8006ba4:	3901      	subs	r1, #1
 8006ba6:	465a      	mov	r2, fp
 8006ba8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bac:	9109      	str	r1, [sp, #36]	; 0x24
 8006bae:	f7ff ff19 	bl	80069e4 <__exponent>
 8006bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bb4:	1813      	adds	r3, r2, r0
 8006bb6:	2a01      	cmp	r2, #1
 8006bb8:	4681      	mov	r9, r0
 8006bba:	6123      	str	r3, [r4, #16]
 8006bbc:	dc02      	bgt.n	8006bc4 <_printf_float+0x164>
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	07d2      	lsls	r2, r2, #31
 8006bc2:	d501      	bpl.n	8006bc8 <_printf_float+0x168>
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d09c      	beq.n	8006b0a <_printf_float+0xaa>
 8006bd0:	232d      	movs	r3, #45	; 0x2d
 8006bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd6:	e798      	b.n	8006b0a <_printf_float+0xaa>
 8006bd8:	9a06      	ldr	r2, [sp, #24]
 8006bda:	2a47      	cmp	r2, #71	; 0x47
 8006bdc:	d1be      	bne.n	8006b5c <_printf_float+0xfc>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1bc      	bne.n	8006b5c <_printf_float+0xfc>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e7b9      	b.n	8006b5a <_printf_float+0xfa>
 8006be6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006bea:	d118      	bne.n	8006c1e <_printf_float+0x1be>
 8006bec:	2900      	cmp	r1, #0
 8006bee:	6863      	ldr	r3, [r4, #4]
 8006bf0:	dd0b      	ble.n	8006c0a <_printf_float+0x1aa>
 8006bf2:	6121      	str	r1, [r4, #16]
 8006bf4:	b913      	cbnz	r3, 8006bfc <_printf_float+0x19c>
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	07d0      	lsls	r0, r2, #31
 8006bfa:	d502      	bpl.n	8006c02 <_printf_float+0x1a2>
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	440b      	add	r3, r1
 8006c00:	6123      	str	r3, [r4, #16]
 8006c02:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c04:	f04f 0900 	mov.w	r9, #0
 8006c08:	e7de      	b.n	8006bc8 <_printf_float+0x168>
 8006c0a:	b913      	cbnz	r3, 8006c12 <_printf_float+0x1b2>
 8006c0c:	6822      	ldr	r2, [r4, #0]
 8006c0e:	07d2      	lsls	r2, r2, #31
 8006c10:	d501      	bpl.n	8006c16 <_printf_float+0x1b6>
 8006c12:	3302      	adds	r3, #2
 8006c14:	e7f4      	b.n	8006c00 <_printf_float+0x1a0>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e7f2      	b.n	8006c00 <_printf_float+0x1a0>
 8006c1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c20:	4299      	cmp	r1, r3
 8006c22:	db05      	blt.n	8006c30 <_printf_float+0x1d0>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	6121      	str	r1, [r4, #16]
 8006c28:	07d8      	lsls	r0, r3, #31
 8006c2a:	d5ea      	bpl.n	8006c02 <_printf_float+0x1a2>
 8006c2c:	1c4b      	adds	r3, r1, #1
 8006c2e:	e7e7      	b.n	8006c00 <_printf_float+0x1a0>
 8006c30:	2900      	cmp	r1, #0
 8006c32:	bfd4      	ite	le
 8006c34:	f1c1 0202 	rsble	r2, r1, #2
 8006c38:	2201      	movgt	r2, #1
 8006c3a:	4413      	add	r3, r2
 8006c3c:	e7e0      	b.n	8006c00 <_printf_float+0x1a0>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	055a      	lsls	r2, r3, #21
 8006c42:	d407      	bmi.n	8006c54 <_printf_float+0x1f4>
 8006c44:	6923      	ldr	r3, [r4, #16]
 8006c46:	4642      	mov	r2, r8
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d12c      	bne.n	8006cac <_printf_float+0x24c>
 8006c52:	e764      	b.n	8006b1e <_printf_float+0xbe>
 8006c54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c58:	f240 80e0 	bls.w	8006e1c <_printf_float+0x3bc>
 8006c5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c60:	2200      	movs	r2, #0
 8006c62:	2300      	movs	r3, #0
 8006c64:	f7f9 ff48 	bl	8000af8 <__aeabi_dcmpeq>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d034      	beq.n	8006cd6 <_printf_float+0x276>
 8006c6c:	4a37      	ldr	r2, [pc, #220]	; (8006d4c <_printf_float+0x2ec>)
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4631      	mov	r1, r6
 8006c72:	4628      	mov	r0, r5
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	f43f af51 	beq.w	8006b1e <_printf_float+0xbe>
 8006c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c80:	429a      	cmp	r2, r3
 8006c82:	db02      	blt.n	8006c8a <_printf_float+0x22a>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	07d8      	lsls	r0, r3, #31
 8006c88:	d510      	bpl.n	8006cac <_printf_float+0x24c>
 8006c8a:	ee18 3a10 	vmov	r3, s16
 8006c8e:	4652      	mov	r2, sl
 8006c90:	4631      	mov	r1, r6
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	f43f af41 	beq.w	8006b1e <_printf_float+0xbe>
 8006c9c:	f04f 0800 	mov.w	r8, #0
 8006ca0:	f104 091a 	add.w	r9, r4, #26
 8006ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	4543      	cmp	r3, r8
 8006caa:	dc09      	bgt.n	8006cc0 <_printf_float+0x260>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	079b      	lsls	r3, r3, #30
 8006cb0:	f100 8107 	bmi.w	8006ec2 <_printf_float+0x462>
 8006cb4:	68e0      	ldr	r0, [r4, #12]
 8006cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb8:	4298      	cmp	r0, r3
 8006cba:	bfb8      	it	lt
 8006cbc:	4618      	movlt	r0, r3
 8006cbe:	e730      	b.n	8006b22 <_printf_float+0xc2>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	464a      	mov	r2, r9
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	47b8      	blx	r7
 8006cca:	3001      	adds	r0, #1
 8006ccc:	f43f af27 	beq.w	8006b1e <_printf_float+0xbe>
 8006cd0:	f108 0801 	add.w	r8, r8, #1
 8006cd4:	e7e6      	b.n	8006ca4 <_printf_float+0x244>
 8006cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	dc39      	bgt.n	8006d50 <_printf_float+0x2f0>
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <_printf_float+0x2ec>)
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	47b8      	blx	r7
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	f43f af19 	beq.w	8006b1e <_printf_float+0xbe>
 8006cec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	d102      	bne.n	8006cfa <_printf_float+0x29a>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	07d9      	lsls	r1, r3, #31
 8006cf8:	d5d8      	bpl.n	8006cac <_printf_float+0x24c>
 8006cfa:	ee18 3a10 	vmov	r3, s16
 8006cfe:	4652      	mov	r2, sl
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f af09 	beq.w	8006b1e <_printf_float+0xbe>
 8006d0c:	f04f 0900 	mov.w	r9, #0
 8006d10:	f104 0a1a 	add.w	sl, r4, #26
 8006d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d16:	425b      	negs	r3, r3
 8006d18:	454b      	cmp	r3, r9
 8006d1a:	dc01      	bgt.n	8006d20 <_printf_float+0x2c0>
 8006d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1e:	e792      	b.n	8006c46 <_printf_float+0x1e6>
 8006d20:	2301      	movs	r3, #1
 8006d22:	4652      	mov	r2, sl
 8006d24:	4631      	mov	r1, r6
 8006d26:	4628      	mov	r0, r5
 8006d28:	47b8      	blx	r7
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	f43f aef7 	beq.w	8006b1e <_printf_float+0xbe>
 8006d30:	f109 0901 	add.w	r9, r9, #1
 8006d34:	e7ee      	b.n	8006d14 <_printf_float+0x2b4>
 8006d36:	bf00      	nop
 8006d38:	7fefffff 	.word	0x7fefffff
 8006d3c:	08009410 	.word	0x08009410
 8006d40:	08009414 	.word	0x08009414
 8006d44:	08009418 	.word	0x08009418
 8006d48:	0800941c 	.word	0x0800941c
 8006d4c:	08009420 	.word	0x08009420
 8006d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d54:	429a      	cmp	r2, r3
 8006d56:	bfa8      	it	ge
 8006d58:	461a      	movge	r2, r3
 8006d5a:	2a00      	cmp	r2, #0
 8006d5c:	4691      	mov	r9, r2
 8006d5e:	dc37      	bgt.n	8006dd0 <_printf_float+0x370>
 8006d60:	f04f 0b00 	mov.w	fp, #0
 8006d64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d68:	f104 021a 	add.w	r2, r4, #26
 8006d6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d6e:	9305      	str	r3, [sp, #20]
 8006d70:	eba3 0309 	sub.w	r3, r3, r9
 8006d74:	455b      	cmp	r3, fp
 8006d76:	dc33      	bgt.n	8006de0 <_printf_float+0x380>
 8006d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	db3b      	blt.n	8006df8 <_printf_float+0x398>
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	07da      	lsls	r2, r3, #31
 8006d84:	d438      	bmi.n	8006df8 <_printf_float+0x398>
 8006d86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d8a:	eba2 0903 	sub.w	r9, r2, r3
 8006d8e:	9b05      	ldr	r3, [sp, #20]
 8006d90:	1ad2      	subs	r2, r2, r3
 8006d92:	4591      	cmp	r9, r2
 8006d94:	bfa8      	it	ge
 8006d96:	4691      	movge	r9, r2
 8006d98:	f1b9 0f00 	cmp.w	r9, #0
 8006d9c:	dc35      	bgt.n	8006e0a <_printf_float+0x3aa>
 8006d9e:	f04f 0800 	mov.w	r8, #0
 8006da2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006da6:	f104 0a1a 	add.w	sl, r4, #26
 8006daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dae:	1a9b      	subs	r3, r3, r2
 8006db0:	eba3 0309 	sub.w	r3, r3, r9
 8006db4:	4543      	cmp	r3, r8
 8006db6:	f77f af79 	ble.w	8006cac <_printf_float+0x24c>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4652      	mov	r2, sl
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b8      	blx	r7
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	f43f aeaa 	beq.w	8006b1e <_printf_float+0xbe>
 8006dca:	f108 0801 	add.w	r8, r8, #1
 8006dce:	e7ec      	b.n	8006daa <_printf_float+0x34a>
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d1c0      	bne.n	8006d60 <_printf_float+0x300>
 8006dde:	e69e      	b.n	8006b1e <_printf_float+0xbe>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	9205      	str	r2, [sp, #20]
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	f43f ae97 	beq.w	8006b1e <_printf_float+0xbe>
 8006df0:	9a05      	ldr	r2, [sp, #20]
 8006df2:	f10b 0b01 	add.w	fp, fp, #1
 8006df6:	e7b9      	b.n	8006d6c <_printf_float+0x30c>
 8006df8:	ee18 3a10 	vmov	r3, s16
 8006dfc:	4652      	mov	r2, sl
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	d1be      	bne.n	8006d86 <_printf_float+0x326>
 8006e08:	e689      	b.n	8006b1e <_printf_float+0xbe>
 8006e0a:	9a05      	ldr	r2, [sp, #20]
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	4442      	add	r2, r8
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b8      	blx	r7
 8006e16:	3001      	adds	r0, #1
 8006e18:	d1c1      	bne.n	8006d9e <_printf_float+0x33e>
 8006e1a:	e680      	b.n	8006b1e <_printf_float+0xbe>
 8006e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e1e:	2a01      	cmp	r2, #1
 8006e20:	dc01      	bgt.n	8006e26 <_printf_float+0x3c6>
 8006e22:	07db      	lsls	r3, r3, #31
 8006e24:	d53a      	bpl.n	8006e9c <_printf_float+0x43c>
 8006e26:	2301      	movs	r3, #1
 8006e28:	4642      	mov	r2, r8
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b8      	blx	r7
 8006e30:	3001      	adds	r0, #1
 8006e32:	f43f ae74 	beq.w	8006b1e <_printf_float+0xbe>
 8006e36:	ee18 3a10 	vmov	r3, s16
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f ae6b 	beq.w	8006b1e <_printf_float+0xbe>
 8006e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006e54:	f7f9 fe50 	bl	8000af8 <__aeabi_dcmpeq>
 8006e58:	b9d8      	cbnz	r0, 8006e92 <_printf_float+0x432>
 8006e5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006e5e:	f108 0201 	add.w	r2, r8, #1
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d10e      	bne.n	8006e8a <_printf_float+0x42a>
 8006e6c:	e657      	b.n	8006b1e <_printf_float+0xbe>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	4652      	mov	r2, sl
 8006e72:	4631      	mov	r1, r6
 8006e74:	4628      	mov	r0, r5
 8006e76:	47b8      	blx	r7
 8006e78:	3001      	adds	r0, #1
 8006e7a:	f43f ae50 	beq.w	8006b1e <_printf_float+0xbe>
 8006e7e:	f108 0801 	add.w	r8, r8, #1
 8006e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e84:	3b01      	subs	r3, #1
 8006e86:	4543      	cmp	r3, r8
 8006e88:	dcf1      	bgt.n	8006e6e <_printf_float+0x40e>
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e90:	e6da      	b.n	8006c48 <_printf_float+0x1e8>
 8006e92:	f04f 0800 	mov.w	r8, #0
 8006e96:	f104 0a1a 	add.w	sl, r4, #26
 8006e9a:	e7f2      	b.n	8006e82 <_printf_float+0x422>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4642      	mov	r2, r8
 8006ea0:	e7df      	b.n	8006e62 <_printf_float+0x402>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	464a      	mov	r2, r9
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f ae36 	beq.w	8006b1e <_printf_float+0xbe>
 8006eb2:	f108 0801 	add.w	r8, r8, #1
 8006eb6:	68e3      	ldr	r3, [r4, #12]
 8006eb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eba:	1a5b      	subs	r3, r3, r1
 8006ebc:	4543      	cmp	r3, r8
 8006ebe:	dcf0      	bgt.n	8006ea2 <_printf_float+0x442>
 8006ec0:	e6f8      	b.n	8006cb4 <_printf_float+0x254>
 8006ec2:	f04f 0800 	mov.w	r8, #0
 8006ec6:	f104 0919 	add.w	r9, r4, #25
 8006eca:	e7f4      	b.n	8006eb6 <_printf_float+0x456>

08006ecc <_printf_common>:
 8006ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	4699      	mov	r9, r3
 8006ed4:	688a      	ldr	r2, [r1, #8]
 8006ed6:	690b      	ldr	r3, [r1, #16]
 8006ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006edc:	4293      	cmp	r3, r2
 8006ede:	bfb8      	it	lt
 8006ee0:	4613      	movlt	r3, r2
 8006ee2:	6033      	str	r3, [r6, #0]
 8006ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ee8:	4607      	mov	r7, r0
 8006eea:	460c      	mov	r4, r1
 8006eec:	b10a      	cbz	r2, 8006ef2 <_printf_common+0x26>
 8006eee:	3301      	adds	r3, #1
 8006ef0:	6033      	str	r3, [r6, #0]
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	0699      	lsls	r1, r3, #26
 8006ef6:	bf42      	ittt	mi
 8006ef8:	6833      	ldrmi	r3, [r6, #0]
 8006efa:	3302      	addmi	r3, #2
 8006efc:	6033      	strmi	r3, [r6, #0]
 8006efe:	6825      	ldr	r5, [r4, #0]
 8006f00:	f015 0506 	ands.w	r5, r5, #6
 8006f04:	d106      	bne.n	8006f14 <_printf_common+0x48>
 8006f06:	f104 0a19 	add.w	sl, r4, #25
 8006f0a:	68e3      	ldr	r3, [r4, #12]
 8006f0c:	6832      	ldr	r2, [r6, #0]
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	42ab      	cmp	r3, r5
 8006f12:	dc26      	bgt.n	8006f62 <_printf_common+0x96>
 8006f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f18:	1e13      	subs	r3, r2, #0
 8006f1a:	6822      	ldr	r2, [r4, #0]
 8006f1c:	bf18      	it	ne
 8006f1e:	2301      	movne	r3, #1
 8006f20:	0692      	lsls	r2, r2, #26
 8006f22:	d42b      	bmi.n	8006f7c <_printf_common+0xb0>
 8006f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f28:	4649      	mov	r1, r9
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	47c0      	blx	r8
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d01e      	beq.n	8006f70 <_printf_common+0xa4>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	6922      	ldr	r2, [r4, #16]
 8006f36:	f003 0306 	and.w	r3, r3, #6
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	bf02      	ittt	eq
 8006f3e:	68e5      	ldreq	r5, [r4, #12]
 8006f40:	6833      	ldreq	r3, [r6, #0]
 8006f42:	1aed      	subeq	r5, r5, r3
 8006f44:	68a3      	ldr	r3, [r4, #8]
 8006f46:	bf0c      	ite	eq
 8006f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f4c:	2500      	movne	r5, #0
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	bfc4      	itt	gt
 8006f52:	1a9b      	subgt	r3, r3, r2
 8006f54:	18ed      	addgt	r5, r5, r3
 8006f56:	2600      	movs	r6, #0
 8006f58:	341a      	adds	r4, #26
 8006f5a:	42b5      	cmp	r5, r6
 8006f5c:	d11a      	bne.n	8006f94 <_printf_common+0xc8>
 8006f5e:	2000      	movs	r0, #0
 8006f60:	e008      	b.n	8006f74 <_printf_common+0xa8>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4652      	mov	r2, sl
 8006f66:	4649      	mov	r1, r9
 8006f68:	4638      	mov	r0, r7
 8006f6a:	47c0      	blx	r8
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d103      	bne.n	8006f78 <_printf_common+0xac>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f78:	3501      	adds	r5, #1
 8006f7a:	e7c6      	b.n	8006f0a <_printf_common+0x3e>
 8006f7c:	18e1      	adds	r1, r4, r3
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	2030      	movs	r0, #48	; 0x30
 8006f82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f86:	4422      	add	r2, r4
 8006f88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f90:	3302      	adds	r3, #2
 8006f92:	e7c7      	b.n	8006f24 <_printf_common+0x58>
 8006f94:	2301      	movs	r3, #1
 8006f96:	4622      	mov	r2, r4
 8006f98:	4649      	mov	r1, r9
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	47c0      	blx	r8
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d0e6      	beq.n	8006f70 <_printf_common+0xa4>
 8006fa2:	3601      	adds	r6, #1
 8006fa4:	e7d9      	b.n	8006f5a <_printf_common+0x8e>
	...

08006fa8 <_printf_i>:
 8006fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	7e0f      	ldrb	r7, [r1, #24]
 8006fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fb0:	2f78      	cmp	r7, #120	; 0x78
 8006fb2:	4691      	mov	r9, r2
 8006fb4:	4680      	mov	r8, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	469a      	mov	sl, r3
 8006fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fbe:	d807      	bhi.n	8006fd0 <_printf_i+0x28>
 8006fc0:	2f62      	cmp	r7, #98	; 0x62
 8006fc2:	d80a      	bhi.n	8006fda <_printf_i+0x32>
 8006fc4:	2f00      	cmp	r7, #0
 8006fc6:	f000 80d4 	beq.w	8007172 <_printf_i+0x1ca>
 8006fca:	2f58      	cmp	r7, #88	; 0x58
 8006fcc:	f000 80c0 	beq.w	8007150 <_printf_i+0x1a8>
 8006fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fd8:	e03a      	b.n	8007050 <_printf_i+0xa8>
 8006fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fde:	2b15      	cmp	r3, #21
 8006fe0:	d8f6      	bhi.n	8006fd0 <_printf_i+0x28>
 8006fe2:	a101      	add	r1, pc, #4	; (adr r1, 8006fe8 <_printf_i+0x40>)
 8006fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fe8:	08007041 	.word	0x08007041
 8006fec:	08007055 	.word	0x08007055
 8006ff0:	08006fd1 	.word	0x08006fd1
 8006ff4:	08006fd1 	.word	0x08006fd1
 8006ff8:	08006fd1 	.word	0x08006fd1
 8006ffc:	08006fd1 	.word	0x08006fd1
 8007000:	08007055 	.word	0x08007055
 8007004:	08006fd1 	.word	0x08006fd1
 8007008:	08006fd1 	.word	0x08006fd1
 800700c:	08006fd1 	.word	0x08006fd1
 8007010:	08006fd1 	.word	0x08006fd1
 8007014:	08007159 	.word	0x08007159
 8007018:	08007081 	.word	0x08007081
 800701c:	08007113 	.word	0x08007113
 8007020:	08006fd1 	.word	0x08006fd1
 8007024:	08006fd1 	.word	0x08006fd1
 8007028:	0800717b 	.word	0x0800717b
 800702c:	08006fd1 	.word	0x08006fd1
 8007030:	08007081 	.word	0x08007081
 8007034:	08006fd1 	.word	0x08006fd1
 8007038:	08006fd1 	.word	0x08006fd1
 800703c:	0800711b 	.word	0x0800711b
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	1d1a      	adds	r2, r3, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	602a      	str	r2, [r5, #0]
 8007048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800704c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007050:	2301      	movs	r3, #1
 8007052:	e09f      	b.n	8007194 <_printf_i+0x1ec>
 8007054:	6820      	ldr	r0, [r4, #0]
 8007056:	682b      	ldr	r3, [r5, #0]
 8007058:	0607      	lsls	r7, r0, #24
 800705a:	f103 0104 	add.w	r1, r3, #4
 800705e:	6029      	str	r1, [r5, #0]
 8007060:	d501      	bpl.n	8007066 <_printf_i+0xbe>
 8007062:	681e      	ldr	r6, [r3, #0]
 8007064:	e003      	b.n	800706e <_printf_i+0xc6>
 8007066:	0646      	lsls	r6, r0, #25
 8007068:	d5fb      	bpl.n	8007062 <_printf_i+0xba>
 800706a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800706e:	2e00      	cmp	r6, #0
 8007070:	da03      	bge.n	800707a <_printf_i+0xd2>
 8007072:	232d      	movs	r3, #45	; 0x2d
 8007074:	4276      	negs	r6, r6
 8007076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800707a:	485a      	ldr	r0, [pc, #360]	; (80071e4 <_printf_i+0x23c>)
 800707c:	230a      	movs	r3, #10
 800707e:	e012      	b.n	80070a6 <_printf_i+0xfe>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	6820      	ldr	r0, [r4, #0]
 8007084:	1d19      	adds	r1, r3, #4
 8007086:	6029      	str	r1, [r5, #0]
 8007088:	0605      	lsls	r5, r0, #24
 800708a:	d501      	bpl.n	8007090 <_printf_i+0xe8>
 800708c:	681e      	ldr	r6, [r3, #0]
 800708e:	e002      	b.n	8007096 <_printf_i+0xee>
 8007090:	0641      	lsls	r1, r0, #25
 8007092:	d5fb      	bpl.n	800708c <_printf_i+0xe4>
 8007094:	881e      	ldrh	r6, [r3, #0]
 8007096:	4853      	ldr	r0, [pc, #332]	; (80071e4 <_printf_i+0x23c>)
 8007098:	2f6f      	cmp	r7, #111	; 0x6f
 800709a:	bf0c      	ite	eq
 800709c:	2308      	moveq	r3, #8
 800709e:	230a      	movne	r3, #10
 80070a0:	2100      	movs	r1, #0
 80070a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070a6:	6865      	ldr	r5, [r4, #4]
 80070a8:	60a5      	str	r5, [r4, #8]
 80070aa:	2d00      	cmp	r5, #0
 80070ac:	bfa2      	ittt	ge
 80070ae:	6821      	ldrge	r1, [r4, #0]
 80070b0:	f021 0104 	bicge.w	r1, r1, #4
 80070b4:	6021      	strge	r1, [r4, #0]
 80070b6:	b90e      	cbnz	r6, 80070bc <_printf_i+0x114>
 80070b8:	2d00      	cmp	r5, #0
 80070ba:	d04b      	beq.n	8007154 <_printf_i+0x1ac>
 80070bc:	4615      	mov	r5, r2
 80070be:	fbb6 f1f3 	udiv	r1, r6, r3
 80070c2:	fb03 6711 	mls	r7, r3, r1, r6
 80070c6:	5dc7      	ldrb	r7, [r0, r7]
 80070c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070cc:	4637      	mov	r7, r6
 80070ce:	42bb      	cmp	r3, r7
 80070d0:	460e      	mov	r6, r1
 80070d2:	d9f4      	bls.n	80070be <_printf_i+0x116>
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d10b      	bne.n	80070f0 <_printf_i+0x148>
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	07de      	lsls	r6, r3, #31
 80070dc:	d508      	bpl.n	80070f0 <_printf_i+0x148>
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	6861      	ldr	r1, [r4, #4]
 80070e2:	4299      	cmp	r1, r3
 80070e4:	bfde      	ittt	le
 80070e6:	2330      	movle	r3, #48	; 0x30
 80070e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070f0:	1b52      	subs	r2, r2, r5
 80070f2:	6122      	str	r2, [r4, #16]
 80070f4:	f8cd a000 	str.w	sl, [sp]
 80070f8:	464b      	mov	r3, r9
 80070fa:	aa03      	add	r2, sp, #12
 80070fc:	4621      	mov	r1, r4
 80070fe:	4640      	mov	r0, r8
 8007100:	f7ff fee4 	bl	8006ecc <_printf_common>
 8007104:	3001      	adds	r0, #1
 8007106:	d14a      	bne.n	800719e <_printf_i+0x1f6>
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	b004      	add	sp, #16
 800710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	f043 0320 	orr.w	r3, r3, #32
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	4833      	ldr	r0, [pc, #204]	; (80071e8 <_printf_i+0x240>)
 800711c:	2778      	movs	r7, #120	; 0x78
 800711e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	6829      	ldr	r1, [r5, #0]
 8007126:	061f      	lsls	r7, r3, #24
 8007128:	f851 6b04 	ldr.w	r6, [r1], #4
 800712c:	d402      	bmi.n	8007134 <_printf_i+0x18c>
 800712e:	065f      	lsls	r7, r3, #25
 8007130:	bf48      	it	mi
 8007132:	b2b6      	uxthmi	r6, r6
 8007134:	07df      	lsls	r7, r3, #31
 8007136:	bf48      	it	mi
 8007138:	f043 0320 	orrmi.w	r3, r3, #32
 800713c:	6029      	str	r1, [r5, #0]
 800713e:	bf48      	it	mi
 8007140:	6023      	strmi	r3, [r4, #0]
 8007142:	b91e      	cbnz	r6, 800714c <_printf_i+0x1a4>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	f023 0320 	bic.w	r3, r3, #32
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	2310      	movs	r3, #16
 800714e:	e7a7      	b.n	80070a0 <_printf_i+0xf8>
 8007150:	4824      	ldr	r0, [pc, #144]	; (80071e4 <_printf_i+0x23c>)
 8007152:	e7e4      	b.n	800711e <_printf_i+0x176>
 8007154:	4615      	mov	r5, r2
 8007156:	e7bd      	b.n	80070d4 <_printf_i+0x12c>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	6826      	ldr	r6, [r4, #0]
 800715c:	6961      	ldr	r1, [r4, #20]
 800715e:	1d18      	adds	r0, r3, #4
 8007160:	6028      	str	r0, [r5, #0]
 8007162:	0635      	lsls	r5, r6, #24
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	d501      	bpl.n	800716c <_printf_i+0x1c4>
 8007168:	6019      	str	r1, [r3, #0]
 800716a:	e002      	b.n	8007172 <_printf_i+0x1ca>
 800716c:	0670      	lsls	r0, r6, #25
 800716e:	d5fb      	bpl.n	8007168 <_printf_i+0x1c0>
 8007170:	8019      	strh	r1, [r3, #0]
 8007172:	2300      	movs	r3, #0
 8007174:	6123      	str	r3, [r4, #16]
 8007176:	4615      	mov	r5, r2
 8007178:	e7bc      	b.n	80070f4 <_printf_i+0x14c>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	1d1a      	adds	r2, r3, #4
 800717e:	602a      	str	r2, [r5, #0]
 8007180:	681d      	ldr	r5, [r3, #0]
 8007182:	6862      	ldr	r2, [r4, #4]
 8007184:	2100      	movs	r1, #0
 8007186:	4628      	mov	r0, r5
 8007188:	f7f9 f83a 	bl	8000200 <memchr>
 800718c:	b108      	cbz	r0, 8007192 <_printf_i+0x1ea>
 800718e:	1b40      	subs	r0, r0, r5
 8007190:	6060      	str	r0, [r4, #4]
 8007192:	6863      	ldr	r3, [r4, #4]
 8007194:	6123      	str	r3, [r4, #16]
 8007196:	2300      	movs	r3, #0
 8007198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800719c:	e7aa      	b.n	80070f4 <_printf_i+0x14c>
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	462a      	mov	r2, r5
 80071a2:	4649      	mov	r1, r9
 80071a4:	4640      	mov	r0, r8
 80071a6:	47d0      	blx	sl
 80071a8:	3001      	adds	r0, #1
 80071aa:	d0ad      	beq.n	8007108 <_printf_i+0x160>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	079b      	lsls	r3, r3, #30
 80071b0:	d413      	bmi.n	80071da <_printf_i+0x232>
 80071b2:	68e0      	ldr	r0, [r4, #12]
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	4298      	cmp	r0, r3
 80071b8:	bfb8      	it	lt
 80071ba:	4618      	movlt	r0, r3
 80071bc:	e7a6      	b.n	800710c <_printf_i+0x164>
 80071be:	2301      	movs	r3, #1
 80071c0:	4632      	mov	r2, r6
 80071c2:	4649      	mov	r1, r9
 80071c4:	4640      	mov	r0, r8
 80071c6:	47d0      	blx	sl
 80071c8:	3001      	adds	r0, #1
 80071ca:	d09d      	beq.n	8007108 <_printf_i+0x160>
 80071cc:	3501      	adds	r5, #1
 80071ce:	68e3      	ldr	r3, [r4, #12]
 80071d0:	9903      	ldr	r1, [sp, #12]
 80071d2:	1a5b      	subs	r3, r3, r1
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	dcf2      	bgt.n	80071be <_printf_i+0x216>
 80071d8:	e7eb      	b.n	80071b2 <_printf_i+0x20a>
 80071da:	2500      	movs	r5, #0
 80071dc:	f104 0619 	add.w	r6, r4, #25
 80071e0:	e7f5      	b.n	80071ce <_printf_i+0x226>
 80071e2:	bf00      	nop
 80071e4:	08009422 	.word	0x08009422
 80071e8:	08009433 	.word	0x08009433

080071ec <std>:
 80071ec:	2300      	movs	r3, #0
 80071ee:	b510      	push	{r4, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	e9c0 3300 	strd	r3, r3, [r0]
 80071f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fa:	6083      	str	r3, [r0, #8]
 80071fc:	8181      	strh	r1, [r0, #12]
 80071fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007200:	81c2      	strh	r2, [r0, #14]
 8007202:	6183      	str	r3, [r0, #24]
 8007204:	4619      	mov	r1, r3
 8007206:	2208      	movs	r2, #8
 8007208:	305c      	adds	r0, #92	; 0x5c
 800720a:	f000 f90e 	bl	800742a <memset>
 800720e:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <std+0x58>)
 8007210:	6263      	str	r3, [r4, #36]	; 0x24
 8007212:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <std+0x5c>)
 8007214:	62a3      	str	r3, [r4, #40]	; 0x28
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <std+0x60>)
 8007218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800721a:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <std+0x64>)
 800721c:	6323      	str	r3, [r4, #48]	; 0x30
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <std+0x68>)
 8007220:	6224      	str	r4, [r4, #32]
 8007222:	429c      	cmp	r4, r3
 8007224:	d006      	beq.n	8007234 <std+0x48>
 8007226:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800722a:	4294      	cmp	r4, r2
 800722c:	d002      	beq.n	8007234 <std+0x48>
 800722e:	33d0      	adds	r3, #208	; 0xd0
 8007230:	429c      	cmp	r4, r3
 8007232:	d105      	bne.n	8007240 <std+0x54>
 8007234:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800723c:	f000 b972 	b.w	8007524 <__retarget_lock_init_recursive>
 8007240:	bd10      	pop	{r4, pc}
 8007242:	bf00      	nop
 8007244:	080073a5 	.word	0x080073a5
 8007248:	080073c7 	.word	0x080073c7
 800724c:	080073ff 	.word	0x080073ff
 8007250:	08007423 	.word	0x08007423
 8007254:	200003ec 	.word	0x200003ec

08007258 <stdio_exit_handler>:
 8007258:	4a02      	ldr	r2, [pc, #8]	; (8007264 <stdio_exit_handler+0xc>)
 800725a:	4903      	ldr	r1, [pc, #12]	; (8007268 <stdio_exit_handler+0x10>)
 800725c:	4803      	ldr	r0, [pc, #12]	; (800726c <stdio_exit_handler+0x14>)
 800725e:	f000 b869 	b.w	8007334 <_fwalk_sglue>
 8007262:	bf00      	nop
 8007264:	2000000c 	.word	0x2000000c
 8007268:	08008eb1 	.word	0x08008eb1
 800726c:	20000018 	.word	0x20000018

08007270 <cleanup_stdio>:
 8007270:	6841      	ldr	r1, [r0, #4]
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <cleanup_stdio+0x34>)
 8007274:	4299      	cmp	r1, r3
 8007276:	b510      	push	{r4, lr}
 8007278:	4604      	mov	r4, r0
 800727a:	d001      	beq.n	8007280 <cleanup_stdio+0x10>
 800727c:	f001 fe18 	bl	8008eb0 <_fflush_r>
 8007280:	68a1      	ldr	r1, [r4, #8]
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <cleanup_stdio+0x38>)
 8007284:	4299      	cmp	r1, r3
 8007286:	d002      	beq.n	800728e <cleanup_stdio+0x1e>
 8007288:	4620      	mov	r0, r4
 800728a:	f001 fe11 	bl	8008eb0 <_fflush_r>
 800728e:	68e1      	ldr	r1, [r4, #12]
 8007290:	4b06      	ldr	r3, [pc, #24]	; (80072ac <cleanup_stdio+0x3c>)
 8007292:	4299      	cmp	r1, r3
 8007294:	d004      	beq.n	80072a0 <cleanup_stdio+0x30>
 8007296:	4620      	mov	r0, r4
 8007298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800729c:	f001 be08 	b.w	8008eb0 <_fflush_r>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	bf00      	nop
 80072a4:	200003ec 	.word	0x200003ec
 80072a8:	20000454 	.word	0x20000454
 80072ac:	200004bc 	.word	0x200004bc

080072b0 <global_stdio_init.part.0>:
 80072b0:	b510      	push	{r4, lr}
 80072b2:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <global_stdio_init.part.0+0x30>)
 80072b4:	4c0b      	ldr	r4, [pc, #44]	; (80072e4 <global_stdio_init.part.0+0x34>)
 80072b6:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <global_stdio_init.part.0+0x38>)
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	4620      	mov	r0, r4
 80072bc:	2200      	movs	r2, #0
 80072be:	2104      	movs	r1, #4
 80072c0:	f7ff ff94 	bl	80071ec <std>
 80072c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072c8:	2201      	movs	r2, #1
 80072ca:	2109      	movs	r1, #9
 80072cc:	f7ff ff8e 	bl	80071ec <std>
 80072d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072d4:	2202      	movs	r2, #2
 80072d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072da:	2112      	movs	r1, #18
 80072dc:	f7ff bf86 	b.w	80071ec <std>
 80072e0:	20000524 	.word	0x20000524
 80072e4:	200003ec 	.word	0x200003ec
 80072e8:	08007259 	.word	0x08007259

080072ec <__sfp_lock_acquire>:
 80072ec:	4801      	ldr	r0, [pc, #4]	; (80072f4 <__sfp_lock_acquire+0x8>)
 80072ee:	f000 b91a 	b.w	8007526 <__retarget_lock_acquire_recursive>
 80072f2:	bf00      	nop
 80072f4:	2000052d 	.word	0x2000052d

080072f8 <__sfp_lock_release>:
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <__sfp_lock_release+0x8>)
 80072fa:	f000 b915 	b.w	8007528 <__retarget_lock_release_recursive>
 80072fe:	bf00      	nop
 8007300:	2000052d 	.word	0x2000052d

08007304 <__sinit>:
 8007304:	b510      	push	{r4, lr}
 8007306:	4604      	mov	r4, r0
 8007308:	f7ff fff0 	bl	80072ec <__sfp_lock_acquire>
 800730c:	6a23      	ldr	r3, [r4, #32]
 800730e:	b11b      	cbz	r3, 8007318 <__sinit+0x14>
 8007310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007314:	f7ff bff0 	b.w	80072f8 <__sfp_lock_release>
 8007318:	4b04      	ldr	r3, [pc, #16]	; (800732c <__sinit+0x28>)
 800731a:	6223      	str	r3, [r4, #32]
 800731c:	4b04      	ldr	r3, [pc, #16]	; (8007330 <__sinit+0x2c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1f5      	bne.n	8007310 <__sinit+0xc>
 8007324:	f7ff ffc4 	bl	80072b0 <global_stdio_init.part.0>
 8007328:	e7f2      	b.n	8007310 <__sinit+0xc>
 800732a:	bf00      	nop
 800732c:	08007271 	.word	0x08007271
 8007330:	20000524 	.word	0x20000524

08007334 <_fwalk_sglue>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	4607      	mov	r7, r0
 800733a:	4688      	mov	r8, r1
 800733c:	4614      	mov	r4, r2
 800733e:	2600      	movs	r6, #0
 8007340:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007344:	f1b9 0901 	subs.w	r9, r9, #1
 8007348:	d505      	bpl.n	8007356 <_fwalk_sglue+0x22>
 800734a:	6824      	ldr	r4, [r4, #0]
 800734c:	2c00      	cmp	r4, #0
 800734e:	d1f7      	bne.n	8007340 <_fwalk_sglue+0xc>
 8007350:	4630      	mov	r0, r6
 8007352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d907      	bls.n	800736c <_fwalk_sglue+0x38>
 800735c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007360:	3301      	adds	r3, #1
 8007362:	d003      	beq.n	800736c <_fwalk_sglue+0x38>
 8007364:	4629      	mov	r1, r5
 8007366:	4638      	mov	r0, r7
 8007368:	47c0      	blx	r8
 800736a:	4306      	orrs	r6, r0
 800736c:	3568      	adds	r5, #104	; 0x68
 800736e:	e7e9      	b.n	8007344 <_fwalk_sglue+0x10>

08007370 <iprintf>:
 8007370:	b40f      	push	{r0, r1, r2, r3}
 8007372:	b507      	push	{r0, r1, r2, lr}
 8007374:	4906      	ldr	r1, [pc, #24]	; (8007390 <iprintf+0x20>)
 8007376:	ab04      	add	r3, sp, #16
 8007378:	6808      	ldr	r0, [r1, #0]
 800737a:	f853 2b04 	ldr.w	r2, [r3], #4
 800737e:	6881      	ldr	r1, [r0, #8]
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	f001 fbf5 	bl	8008b70 <_vfiprintf_r>
 8007386:	b003      	add	sp, #12
 8007388:	f85d eb04 	ldr.w	lr, [sp], #4
 800738c:	b004      	add	sp, #16
 800738e:	4770      	bx	lr
 8007390:	20000064 	.word	0x20000064

08007394 <putchar>:
 8007394:	4b02      	ldr	r3, [pc, #8]	; (80073a0 <putchar+0xc>)
 8007396:	4601      	mov	r1, r0
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	6882      	ldr	r2, [r0, #8]
 800739c:	f001 bdb0 	b.w	8008f00 <_putc_r>
 80073a0:	20000064 	.word	0x20000064

080073a4 <__sread>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	460c      	mov	r4, r1
 80073a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ac:	f000 f86c 	bl	8007488 <_read_r>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	bfab      	itete	ge
 80073b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073b6:	89a3      	ldrhlt	r3, [r4, #12]
 80073b8:	181b      	addge	r3, r3, r0
 80073ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073be:	bfac      	ite	ge
 80073c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80073c2:	81a3      	strhlt	r3, [r4, #12]
 80073c4:	bd10      	pop	{r4, pc}

080073c6 <__swrite>:
 80073c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ca:	461f      	mov	r7, r3
 80073cc:	898b      	ldrh	r3, [r1, #12]
 80073ce:	05db      	lsls	r3, r3, #23
 80073d0:	4605      	mov	r5, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	4616      	mov	r6, r2
 80073d6:	d505      	bpl.n	80073e4 <__swrite+0x1e>
 80073d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073dc:	2302      	movs	r3, #2
 80073de:	2200      	movs	r2, #0
 80073e0:	f000 f840 	bl	8007464 <_lseek_r>
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ee:	81a3      	strh	r3, [r4, #12]
 80073f0:	4632      	mov	r2, r6
 80073f2:	463b      	mov	r3, r7
 80073f4:	4628      	mov	r0, r5
 80073f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073fa:	f000 b857 	b.w	80074ac <_write_r>

080073fe <__sseek>:
 80073fe:	b510      	push	{r4, lr}
 8007400:	460c      	mov	r4, r1
 8007402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007406:	f000 f82d 	bl	8007464 <_lseek_r>
 800740a:	1c43      	adds	r3, r0, #1
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	bf15      	itete	ne
 8007410:	6560      	strne	r0, [r4, #84]	; 0x54
 8007412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800741a:	81a3      	strheq	r3, [r4, #12]
 800741c:	bf18      	it	ne
 800741e:	81a3      	strhne	r3, [r4, #12]
 8007420:	bd10      	pop	{r4, pc}

08007422 <__sclose>:
 8007422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007426:	f000 b80d 	b.w	8007444 <_close_r>

0800742a <memset>:
 800742a:	4402      	add	r2, r0
 800742c:	4603      	mov	r3, r0
 800742e:	4293      	cmp	r3, r2
 8007430:	d100      	bne.n	8007434 <memset+0xa>
 8007432:	4770      	bx	lr
 8007434:	f803 1b01 	strb.w	r1, [r3], #1
 8007438:	e7f9      	b.n	800742e <memset+0x4>
	...

0800743c <_localeconv_r>:
 800743c:	4800      	ldr	r0, [pc, #0]	; (8007440 <_localeconv_r+0x4>)
 800743e:	4770      	bx	lr
 8007440:	20000158 	.word	0x20000158

08007444 <_close_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4d06      	ldr	r5, [pc, #24]	; (8007460 <_close_r+0x1c>)
 8007448:	2300      	movs	r3, #0
 800744a:	4604      	mov	r4, r0
 800744c:	4608      	mov	r0, r1
 800744e:	602b      	str	r3, [r5, #0]
 8007450:	f7fa fb93 	bl	8001b7a <_close>
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	d102      	bne.n	800745e <_close_r+0x1a>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	b103      	cbz	r3, 800745e <_close_r+0x1a>
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	bd38      	pop	{r3, r4, r5, pc}
 8007460:	20000528 	.word	0x20000528

08007464 <_lseek_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	; (8007484 <_lseek_r+0x20>)
 8007468:	4604      	mov	r4, r0
 800746a:	4608      	mov	r0, r1
 800746c:	4611      	mov	r1, r2
 800746e:	2200      	movs	r2, #0
 8007470:	602a      	str	r2, [r5, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	f7fa fba8 	bl	8001bc8 <_lseek>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_lseek_r+0x1e>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_lseek_r+0x1e>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20000528 	.word	0x20000528

08007488 <_read_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4d07      	ldr	r5, [pc, #28]	; (80074a8 <_read_r+0x20>)
 800748c:	4604      	mov	r4, r0
 800748e:	4608      	mov	r0, r1
 8007490:	4611      	mov	r1, r2
 8007492:	2200      	movs	r2, #0
 8007494:	602a      	str	r2, [r5, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	f7fa fb36 	bl	8001b08 <_read>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_read_r+0x1e>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_read_r+0x1e>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	20000528 	.word	0x20000528

080074ac <_write_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4d07      	ldr	r5, [pc, #28]	; (80074cc <_write_r+0x20>)
 80074b0:	4604      	mov	r4, r0
 80074b2:	4608      	mov	r0, r1
 80074b4:	4611      	mov	r1, r2
 80074b6:	2200      	movs	r2, #0
 80074b8:	602a      	str	r2, [r5, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f7fa fb41 	bl	8001b42 <_write>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_write_r+0x1e>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_write_r+0x1e>
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	20000528 	.word	0x20000528

080074d0 <__errno>:
 80074d0:	4b01      	ldr	r3, [pc, #4]	; (80074d8 <__errno+0x8>)
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	20000064 	.word	0x20000064

080074dc <__libc_init_array>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	4d0d      	ldr	r5, [pc, #52]	; (8007514 <__libc_init_array+0x38>)
 80074e0:	4c0d      	ldr	r4, [pc, #52]	; (8007518 <__libc_init_array+0x3c>)
 80074e2:	1b64      	subs	r4, r4, r5
 80074e4:	10a4      	asrs	r4, r4, #2
 80074e6:	2600      	movs	r6, #0
 80074e8:	42a6      	cmp	r6, r4
 80074ea:	d109      	bne.n	8007500 <__libc_init_array+0x24>
 80074ec:	4d0b      	ldr	r5, [pc, #44]	; (800751c <__libc_init_array+0x40>)
 80074ee:	4c0c      	ldr	r4, [pc, #48]	; (8007520 <__libc_init_array+0x44>)
 80074f0:	f001 ff24 	bl	800933c <_init>
 80074f4:	1b64      	subs	r4, r4, r5
 80074f6:	10a4      	asrs	r4, r4, #2
 80074f8:	2600      	movs	r6, #0
 80074fa:	42a6      	cmp	r6, r4
 80074fc:	d105      	bne.n	800750a <__libc_init_array+0x2e>
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	f855 3b04 	ldr.w	r3, [r5], #4
 8007504:	4798      	blx	r3
 8007506:	3601      	adds	r6, #1
 8007508:	e7ee      	b.n	80074e8 <__libc_init_array+0xc>
 800750a:	f855 3b04 	ldr.w	r3, [r5], #4
 800750e:	4798      	blx	r3
 8007510:	3601      	adds	r6, #1
 8007512:	e7f2      	b.n	80074fa <__libc_init_array+0x1e>
 8007514:	0800978c 	.word	0x0800978c
 8007518:	0800978c 	.word	0x0800978c
 800751c:	0800978c 	.word	0x0800978c
 8007520:	08009790 	.word	0x08009790

08007524 <__retarget_lock_init_recursive>:
 8007524:	4770      	bx	lr

08007526 <__retarget_lock_acquire_recursive>:
 8007526:	4770      	bx	lr

08007528 <__retarget_lock_release_recursive>:
 8007528:	4770      	bx	lr

0800752a <quorem>:
 800752a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752e:	6903      	ldr	r3, [r0, #16]
 8007530:	690c      	ldr	r4, [r1, #16]
 8007532:	42a3      	cmp	r3, r4
 8007534:	4607      	mov	r7, r0
 8007536:	db7e      	blt.n	8007636 <quorem+0x10c>
 8007538:	3c01      	subs	r4, #1
 800753a:	f101 0814 	add.w	r8, r1, #20
 800753e:	f100 0514 	add.w	r5, r0, #20
 8007542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800754c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007550:	3301      	adds	r3, #1
 8007552:	429a      	cmp	r2, r3
 8007554:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007558:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800755c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007560:	d331      	bcc.n	80075c6 <quorem+0x9c>
 8007562:	f04f 0e00 	mov.w	lr, #0
 8007566:	4640      	mov	r0, r8
 8007568:	46ac      	mov	ip, r5
 800756a:	46f2      	mov	sl, lr
 800756c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007570:	b293      	uxth	r3, r2
 8007572:	fb06 e303 	mla	r3, r6, r3, lr
 8007576:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800757a:	0c1a      	lsrs	r2, r3, #16
 800757c:	b29b      	uxth	r3, r3
 800757e:	ebaa 0303 	sub.w	r3, sl, r3
 8007582:	f8dc a000 	ldr.w	sl, [ip]
 8007586:	fa13 f38a 	uxtah	r3, r3, sl
 800758a:	fb06 220e 	mla	r2, r6, lr, r2
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	9b00      	ldr	r3, [sp, #0]
 8007592:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007596:	b292      	uxth	r2, r2
 8007598:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800759c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80075a4:	4581      	cmp	r9, r0
 80075a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075aa:	f84c 3b04 	str.w	r3, [ip], #4
 80075ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075b2:	d2db      	bcs.n	800756c <quorem+0x42>
 80075b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80075b8:	b92b      	cbnz	r3, 80075c6 <quorem+0x9c>
 80075ba:	9b01      	ldr	r3, [sp, #4]
 80075bc:	3b04      	subs	r3, #4
 80075be:	429d      	cmp	r5, r3
 80075c0:	461a      	mov	r2, r3
 80075c2:	d32c      	bcc.n	800761e <quorem+0xf4>
 80075c4:	613c      	str	r4, [r7, #16]
 80075c6:	4638      	mov	r0, r7
 80075c8:	f001 f9a8 	bl	800891c <__mcmp>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	db22      	blt.n	8007616 <quorem+0xec>
 80075d0:	3601      	adds	r6, #1
 80075d2:	4629      	mov	r1, r5
 80075d4:	2000      	movs	r0, #0
 80075d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80075da:	f8d1 c000 	ldr.w	ip, [r1]
 80075de:	b293      	uxth	r3, r2
 80075e0:	1ac3      	subs	r3, r0, r3
 80075e2:	0c12      	lsrs	r2, r2, #16
 80075e4:	fa13 f38c 	uxtah	r3, r3, ip
 80075e8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80075ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075f6:	45c1      	cmp	r9, r8
 80075f8:	f841 3b04 	str.w	r3, [r1], #4
 80075fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007600:	d2e9      	bcs.n	80075d6 <quorem+0xac>
 8007602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800760a:	b922      	cbnz	r2, 8007616 <quorem+0xec>
 800760c:	3b04      	subs	r3, #4
 800760e:	429d      	cmp	r5, r3
 8007610:	461a      	mov	r2, r3
 8007612:	d30a      	bcc.n	800762a <quorem+0x100>
 8007614:	613c      	str	r4, [r7, #16]
 8007616:	4630      	mov	r0, r6
 8007618:	b003      	add	sp, #12
 800761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761e:	6812      	ldr	r2, [r2, #0]
 8007620:	3b04      	subs	r3, #4
 8007622:	2a00      	cmp	r2, #0
 8007624:	d1ce      	bne.n	80075c4 <quorem+0x9a>
 8007626:	3c01      	subs	r4, #1
 8007628:	e7c9      	b.n	80075be <quorem+0x94>
 800762a:	6812      	ldr	r2, [r2, #0]
 800762c:	3b04      	subs	r3, #4
 800762e:	2a00      	cmp	r2, #0
 8007630:	d1f0      	bne.n	8007614 <quorem+0xea>
 8007632:	3c01      	subs	r4, #1
 8007634:	e7eb      	b.n	800760e <quorem+0xe4>
 8007636:	2000      	movs	r0, #0
 8007638:	e7ee      	b.n	8007618 <quorem+0xee>
 800763a:	0000      	movs	r0, r0
 800763c:	0000      	movs	r0, r0
	...

08007640 <_dtoa_r>:
 8007640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	ed2d 8b04 	vpush	{d8-d9}
 8007648:	69c5      	ldr	r5, [r0, #28]
 800764a:	b093      	sub	sp, #76	; 0x4c
 800764c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007650:	ec57 6b10 	vmov	r6, r7, d0
 8007654:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007658:	9107      	str	r1, [sp, #28]
 800765a:	4604      	mov	r4, r0
 800765c:	920a      	str	r2, [sp, #40]	; 0x28
 800765e:	930d      	str	r3, [sp, #52]	; 0x34
 8007660:	b975      	cbnz	r5, 8007680 <_dtoa_r+0x40>
 8007662:	2010      	movs	r0, #16
 8007664:	f000 fe2a 	bl	80082bc <malloc>
 8007668:	4602      	mov	r2, r0
 800766a:	61e0      	str	r0, [r4, #28]
 800766c:	b920      	cbnz	r0, 8007678 <_dtoa_r+0x38>
 800766e:	4bae      	ldr	r3, [pc, #696]	; (8007928 <_dtoa_r+0x2e8>)
 8007670:	21ef      	movs	r1, #239	; 0xef
 8007672:	48ae      	ldr	r0, [pc, #696]	; (800792c <_dtoa_r+0x2ec>)
 8007674:	f001 fd2c 	bl	80090d0 <__assert_func>
 8007678:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800767c:	6005      	str	r5, [r0, #0]
 800767e:	60c5      	str	r5, [r0, #12]
 8007680:	69e3      	ldr	r3, [r4, #28]
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	b151      	cbz	r1, 800769c <_dtoa_r+0x5c>
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	604a      	str	r2, [r1, #4]
 800768a:	2301      	movs	r3, #1
 800768c:	4093      	lsls	r3, r2
 800768e:	608b      	str	r3, [r1, #8]
 8007690:	4620      	mov	r0, r4
 8007692:	f000 ff07 	bl	80084a4 <_Bfree>
 8007696:	69e3      	ldr	r3, [r4, #28]
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	1e3b      	subs	r3, r7, #0
 800769e:	bfbb      	ittet	lt
 80076a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076a4:	9303      	strlt	r3, [sp, #12]
 80076a6:	2300      	movge	r3, #0
 80076a8:	2201      	movlt	r2, #1
 80076aa:	bfac      	ite	ge
 80076ac:	f8c8 3000 	strge.w	r3, [r8]
 80076b0:	f8c8 2000 	strlt.w	r2, [r8]
 80076b4:	4b9e      	ldr	r3, [pc, #632]	; (8007930 <_dtoa_r+0x2f0>)
 80076b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80076ba:	ea33 0308 	bics.w	r3, r3, r8
 80076be:	d11b      	bne.n	80076f8 <_dtoa_r+0xb8>
 80076c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80076cc:	4333      	orrs	r3, r6
 80076ce:	f000 8593 	beq.w	80081f8 <_dtoa_r+0xbb8>
 80076d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d4:	b963      	cbnz	r3, 80076f0 <_dtoa_r+0xb0>
 80076d6:	4b97      	ldr	r3, [pc, #604]	; (8007934 <_dtoa_r+0x2f4>)
 80076d8:	e027      	b.n	800772a <_dtoa_r+0xea>
 80076da:	4b97      	ldr	r3, [pc, #604]	; (8007938 <_dtoa_r+0x2f8>)
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	3308      	adds	r3, #8
 80076e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	9800      	ldr	r0, [sp, #0]
 80076e6:	b013      	add	sp, #76	; 0x4c
 80076e8:	ecbd 8b04 	vpop	{d8-d9}
 80076ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f0:	4b90      	ldr	r3, [pc, #576]	; (8007934 <_dtoa_r+0x2f4>)
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	3303      	adds	r3, #3
 80076f6:	e7f3      	b.n	80076e0 <_dtoa_r+0xa0>
 80076f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	ec51 0b17 	vmov	r0, r1, d7
 8007702:	eeb0 8a47 	vmov.f32	s16, s14
 8007706:	eef0 8a67 	vmov.f32	s17, s15
 800770a:	2300      	movs	r3, #0
 800770c:	f7f9 f9f4 	bl	8000af8 <__aeabi_dcmpeq>
 8007710:	4681      	mov	r9, r0
 8007712:	b160      	cbz	r0, 800772e <_dtoa_r+0xee>
 8007714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007716:	2301      	movs	r3, #1
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 8568 	beq.w	80081f2 <_dtoa_r+0xbb2>
 8007722:	4b86      	ldr	r3, [pc, #536]	; (800793c <_dtoa_r+0x2fc>)
 8007724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	3b01      	subs	r3, #1
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	e7da      	b.n	80076e4 <_dtoa_r+0xa4>
 800772e:	aa10      	add	r2, sp, #64	; 0x40
 8007730:	a911      	add	r1, sp, #68	; 0x44
 8007732:	4620      	mov	r0, r4
 8007734:	eeb0 0a48 	vmov.f32	s0, s16
 8007738:	eef0 0a68 	vmov.f32	s1, s17
 800773c:	f001 f994 	bl	8008a68 <__d2b>
 8007740:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007744:	4682      	mov	sl, r0
 8007746:	2d00      	cmp	r5, #0
 8007748:	d07f      	beq.n	800784a <_dtoa_r+0x20a>
 800774a:	ee18 3a90 	vmov	r3, s17
 800774e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007752:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007756:	ec51 0b18 	vmov	r0, r1, d8
 800775a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800775e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007762:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007766:	4619      	mov	r1, r3
 8007768:	2200      	movs	r2, #0
 800776a:	4b75      	ldr	r3, [pc, #468]	; (8007940 <_dtoa_r+0x300>)
 800776c:	f7f8 fda4 	bl	80002b8 <__aeabi_dsub>
 8007770:	a367      	add	r3, pc, #412	; (adr r3, 8007910 <_dtoa_r+0x2d0>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 ff57 	bl	8000628 <__aeabi_dmul>
 800777a:	a367      	add	r3, pc, #412	; (adr r3, 8007918 <_dtoa_r+0x2d8>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f7f8 fd9c 	bl	80002bc <__adddf3>
 8007784:	4606      	mov	r6, r0
 8007786:	4628      	mov	r0, r5
 8007788:	460f      	mov	r7, r1
 800778a:	f7f8 fee3 	bl	8000554 <__aeabi_i2d>
 800778e:	a364      	add	r3, pc, #400	; (adr r3, 8007920 <_dtoa_r+0x2e0>)
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	f7f8 ff48 	bl	8000628 <__aeabi_dmul>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4630      	mov	r0, r6
 800779e:	4639      	mov	r1, r7
 80077a0:	f7f8 fd8c 	bl	80002bc <__adddf3>
 80077a4:	4606      	mov	r6, r0
 80077a6:	460f      	mov	r7, r1
 80077a8:	f7f9 f9ee 	bl	8000b88 <__aeabi_d2iz>
 80077ac:	2200      	movs	r2, #0
 80077ae:	4683      	mov	fp, r0
 80077b0:	2300      	movs	r3, #0
 80077b2:	4630      	mov	r0, r6
 80077b4:	4639      	mov	r1, r7
 80077b6:	f7f9 f9a9 	bl	8000b0c <__aeabi_dcmplt>
 80077ba:	b148      	cbz	r0, 80077d0 <_dtoa_r+0x190>
 80077bc:	4658      	mov	r0, fp
 80077be:	f7f8 fec9 	bl	8000554 <__aeabi_i2d>
 80077c2:	4632      	mov	r2, r6
 80077c4:	463b      	mov	r3, r7
 80077c6:	f7f9 f997 	bl	8000af8 <__aeabi_dcmpeq>
 80077ca:	b908      	cbnz	r0, 80077d0 <_dtoa_r+0x190>
 80077cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077d0:	f1bb 0f16 	cmp.w	fp, #22
 80077d4:	d857      	bhi.n	8007886 <_dtoa_r+0x246>
 80077d6:	4b5b      	ldr	r3, [pc, #364]	; (8007944 <_dtoa_r+0x304>)
 80077d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	ec51 0b18 	vmov	r0, r1, d8
 80077e4:	f7f9 f992 	bl	8000b0c <__aeabi_dcmplt>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d04e      	beq.n	800788a <_dtoa_r+0x24a>
 80077ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077f0:	2300      	movs	r3, #0
 80077f2:	930c      	str	r3, [sp, #48]	; 0x30
 80077f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077f6:	1b5b      	subs	r3, r3, r5
 80077f8:	1e5a      	subs	r2, r3, #1
 80077fa:	bf45      	ittet	mi
 80077fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8007800:	9305      	strmi	r3, [sp, #20]
 8007802:	2300      	movpl	r3, #0
 8007804:	2300      	movmi	r3, #0
 8007806:	9206      	str	r2, [sp, #24]
 8007808:	bf54      	ite	pl
 800780a:	9305      	strpl	r3, [sp, #20]
 800780c:	9306      	strmi	r3, [sp, #24]
 800780e:	f1bb 0f00 	cmp.w	fp, #0
 8007812:	db3c      	blt.n	800788e <_dtoa_r+0x24e>
 8007814:	9b06      	ldr	r3, [sp, #24]
 8007816:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800781a:	445b      	add	r3, fp
 800781c:	9306      	str	r3, [sp, #24]
 800781e:	2300      	movs	r3, #0
 8007820:	9308      	str	r3, [sp, #32]
 8007822:	9b07      	ldr	r3, [sp, #28]
 8007824:	2b09      	cmp	r3, #9
 8007826:	d868      	bhi.n	80078fa <_dtoa_r+0x2ba>
 8007828:	2b05      	cmp	r3, #5
 800782a:	bfc4      	itt	gt
 800782c:	3b04      	subgt	r3, #4
 800782e:	9307      	strgt	r3, [sp, #28]
 8007830:	9b07      	ldr	r3, [sp, #28]
 8007832:	f1a3 0302 	sub.w	r3, r3, #2
 8007836:	bfcc      	ite	gt
 8007838:	2500      	movgt	r5, #0
 800783a:	2501      	movle	r5, #1
 800783c:	2b03      	cmp	r3, #3
 800783e:	f200 8085 	bhi.w	800794c <_dtoa_r+0x30c>
 8007842:	e8df f003 	tbb	[pc, r3]
 8007846:	3b2e      	.short	0x3b2e
 8007848:	5839      	.short	0x5839
 800784a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800784e:	441d      	add	r5, r3
 8007850:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007854:	2b20      	cmp	r3, #32
 8007856:	bfc1      	itttt	gt
 8007858:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800785c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007860:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007864:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007868:	bfd6      	itet	le
 800786a:	f1c3 0320 	rsble	r3, r3, #32
 800786e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007872:	fa06 f003 	lslle.w	r0, r6, r3
 8007876:	f7f8 fe5d 	bl	8000534 <__aeabi_ui2d>
 800787a:	2201      	movs	r2, #1
 800787c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007880:	3d01      	subs	r5, #1
 8007882:	920e      	str	r2, [sp, #56]	; 0x38
 8007884:	e76f      	b.n	8007766 <_dtoa_r+0x126>
 8007886:	2301      	movs	r3, #1
 8007888:	e7b3      	b.n	80077f2 <_dtoa_r+0x1b2>
 800788a:	900c      	str	r0, [sp, #48]	; 0x30
 800788c:	e7b2      	b.n	80077f4 <_dtoa_r+0x1b4>
 800788e:	9b05      	ldr	r3, [sp, #20]
 8007890:	eba3 030b 	sub.w	r3, r3, fp
 8007894:	9305      	str	r3, [sp, #20]
 8007896:	f1cb 0300 	rsb	r3, fp, #0
 800789a:	9308      	str	r3, [sp, #32]
 800789c:	2300      	movs	r3, #0
 800789e:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a0:	e7bf      	b.n	8007822 <_dtoa_r+0x1e2>
 80078a2:	2300      	movs	r3, #0
 80078a4:	9309      	str	r3, [sp, #36]	; 0x24
 80078a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dc52      	bgt.n	8007952 <_dtoa_r+0x312>
 80078ac:	2301      	movs	r3, #1
 80078ae:	9301      	str	r3, [sp, #4]
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	461a      	mov	r2, r3
 80078b4:	920a      	str	r2, [sp, #40]	; 0x28
 80078b6:	e00b      	b.n	80078d0 <_dtoa_r+0x290>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e7f3      	b.n	80078a4 <_dtoa_r+0x264>
 80078bc:	2300      	movs	r3, #0
 80078be:	9309      	str	r3, [sp, #36]	; 0x24
 80078c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c2:	445b      	add	r3, fp
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	3301      	adds	r3, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	bfb8      	it	lt
 80078ce:	2301      	movlt	r3, #1
 80078d0:	69e0      	ldr	r0, [r4, #28]
 80078d2:	2100      	movs	r1, #0
 80078d4:	2204      	movs	r2, #4
 80078d6:	f102 0614 	add.w	r6, r2, #20
 80078da:	429e      	cmp	r6, r3
 80078dc:	d93d      	bls.n	800795a <_dtoa_r+0x31a>
 80078de:	6041      	str	r1, [r0, #4]
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 fd9f 	bl	8008424 <_Balloc>
 80078e6:	9000      	str	r0, [sp, #0]
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d139      	bne.n	8007960 <_dtoa_r+0x320>
 80078ec:	4b16      	ldr	r3, [pc, #88]	; (8007948 <_dtoa_r+0x308>)
 80078ee:	4602      	mov	r2, r0
 80078f0:	f240 11af 	movw	r1, #431	; 0x1af
 80078f4:	e6bd      	b.n	8007672 <_dtoa_r+0x32>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e7e1      	b.n	80078be <_dtoa_r+0x27e>
 80078fa:	2501      	movs	r5, #1
 80078fc:	2300      	movs	r3, #0
 80078fe:	9307      	str	r3, [sp, #28]
 8007900:	9509      	str	r5, [sp, #36]	; 0x24
 8007902:	f04f 33ff 	mov.w	r3, #4294967295
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	9304      	str	r3, [sp, #16]
 800790a:	2200      	movs	r2, #0
 800790c:	2312      	movs	r3, #18
 800790e:	e7d1      	b.n	80078b4 <_dtoa_r+0x274>
 8007910:	636f4361 	.word	0x636f4361
 8007914:	3fd287a7 	.word	0x3fd287a7
 8007918:	8b60c8b3 	.word	0x8b60c8b3
 800791c:	3fc68a28 	.word	0x3fc68a28
 8007920:	509f79fb 	.word	0x509f79fb
 8007924:	3fd34413 	.word	0x3fd34413
 8007928:	08009451 	.word	0x08009451
 800792c:	08009468 	.word	0x08009468
 8007930:	7ff00000 	.word	0x7ff00000
 8007934:	0800944d 	.word	0x0800944d
 8007938:	08009444 	.word	0x08009444
 800793c:	08009421 	.word	0x08009421
 8007940:	3ff80000 	.word	0x3ff80000
 8007944:	08009558 	.word	0x08009558
 8007948:	080094c0 	.word	0x080094c0
 800794c:	2301      	movs	r3, #1
 800794e:	9309      	str	r3, [sp, #36]	; 0x24
 8007950:	e7d7      	b.n	8007902 <_dtoa_r+0x2c2>
 8007952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	e7ba      	b.n	80078d0 <_dtoa_r+0x290>
 800795a:	3101      	adds	r1, #1
 800795c:	0052      	lsls	r2, r2, #1
 800795e:	e7ba      	b.n	80078d6 <_dtoa_r+0x296>
 8007960:	69e3      	ldr	r3, [r4, #28]
 8007962:	9a00      	ldr	r2, [sp, #0]
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	9b04      	ldr	r3, [sp, #16]
 8007968:	2b0e      	cmp	r3, #14
 800796a:	f200 80a8 	bhi.w	8007abe <_dtoa_r+0x47e>
 800796e:	2d00      	cmp	r5, #0
 8007970:	f000 80a5 	beq.w	8007abe <_dtoa_r+0x47e>
 8007974:	f1bb 0f00 	cmp.w	fp, #0
 8007978:	dd38      	ble.n	80079ec <_dtoa_r+0x3ac>
 800797a:	4bc0      	ldr	r3, [pc, #768]	; (8007c7c <_dtoa_r+0x63c>)
 800797c:	f00b 020f 	and.w	r2, fp, #15
 8007980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007984:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007988:	e9d3 6700 	ldrd	r6, r7, [r3]
 800798c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007990:	d019      	beq.n	80079c6 <_dtoa_r+0x386>
 8007992:	4bbb      	ldr	r3, [pc, #748]	; (8007c80 <_dtoa_r+0x640>)
 8007994:	ec51 0b18 	vmov	r0, r1, d8
 8007998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800799c:	f7f8 ff6e 	bl	800087c <__aeabi_ddiv>
 80079a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079a4:	f008 080f 	and.w	r8, r8, #15
 80079a8:	2503      	movs	r5, #3
 80079aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007c80 <_dtoa_r+0x640>
 80079ae:	f1b8 0f00 	cmp.w	r8, #0
 80079b2:	d10a      	bne.n	80079ca <_dtoa_r+0x38a>
 80079b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079b8:	4632      	mov	r2, r6
 80079ba:	463b      	mov	r3, r7
 80079bc:	f7f8 ff5e 	bl	800087c <__aeabi_ddiv>
 80079c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079c4:	e02b      	b.n	8007a1e <_dtoa_r+0x3de>
 80079c6:	2502      	movs	r5, #2
 80079c8:	e7ef      	b.n	80079aa <_dtoa_r+0x36a>
 80079ca:	f018 0f01 	tst.w	r8, #1
 80079ce:	d008      	beq.n	80079e2 <_dtoa_r+0x3a2>
 80079d0:	4630      	mov	r0, r6
 80079d2:	4639      	mov	r1, r7
 80079d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80079d8:	f7f8 fe26 	bl	8000628 <__aeabi_dmul>
 80079dc:	3501      	adds	r5, #1
 80079de:	4606      	mov	r6, r0
 80079e0:	460f      	mov	r7, r1
 80079e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80079e6:	f109 0908 	add.w	r9, r9, #8
 80079ea:	e7e0      	b.n	80079ae <_dtoa_r+0x36e>
 80079ec:	f000 809f 	beq.w	8007b2e <_dtoa_r+0x4ee>
 80079f0:	f1cb 0600 	rsb	r6, fp, #0
 80079f4:	4ba1      	ldr	r3, [pc, #644]	; (8007c7c <_dtoa_r+0x63c>)
 80079f6:	4fa2      	ldr	r7, [pc, #648]	; (8007c80 <_dtoa_r+0x640>)
 80079f8:	f006 020f 	and.w	r2, r6, #15
 80079fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	ec51 0b18 	vmov	r0, r1, d8
 8007a08:	f7f8 fe0e 	bl	8000628 <__aeabi_dmul>
 8007a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a10:	1136      	asrs	r6, r6, #4
 8007a12:	2300      	movs	r3, #0
 8007a14:	2502      	movs	r5, #2
 8007a16:	2e00      	cmp	r6, #0
 8007a18:	d17e      	bne.n	8007b18 <_dtoa_r+0x4d8>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1d0      	bne.n	80079c0 <_dtoa_r+0x380>
 8007a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8084 	beq.w	8007b32 <_dtoa_r+0x4f2>
 8007a2a:	4b96      	ldr	r3, [pc, #600]	; (8007c84 <_dtoa_r+0x644>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4640      	mov	r0, r8
 8007a30:	4649      	mov	r1, r9
 8007a32:	f7f9 f86b 	bl	8000b0c <__aeabi_dcmplt>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d07b      	beq.n	8007b32 <_dtoa_r+0x4f2>
 8007a3a:	9b04      	ldr	r3, [sp, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d078      	beq.n	8007b32 <_dtoa_r+0x4f2>
 8007a40:	9b01      	ldr	r3, [sp, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dd39      	ble.n	8007aba <_dtoa_r+0x47a>
 8007a46:	4b90      	ldr	r3, [pc, #576]	; (8007c88 <_dtoa_r+0x648>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	f7f8 fdeb 	bl	8000628 <__aeabi_dmul>
 8007a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a56:	9e01      	ldr	r6, [sp, #4]
 8007a58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a62:	4628      	mov	r0, r5
 8007a64:	f7f8 fd76 	bl	8000554 <__aeabi_i2d>
 8007a68:	4642      	mov	r2, r8
 8007a6a:	464b      	mov	r3, r9
 8007a6c:	f7f8 fddc 	bl	8000628 <__aeabi_dmul>
 8007a70:	4b86      	ldr	r3, [pc, #536]	; (8007c8c <_dtoa_r+0x64c>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	f7f8 fc22 	bl	80002bc <__adddf3>
 8007a78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a80:	9303      	str	r3, [sp, #12]
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d158      	bne.n	8007b38 <_dtoa_r+0x4f8>
 8007a86:	4b82      	ldr	r3, [pc, #520]	; (8007c90 <_dtoa_r+0x650>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	f7f8 fc13 	bl	80002b8 <__aeabi_dsub>
 8007a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a96:	4680      	mov	r8, r0
 8007a98:	4689      	mov	r9, r1
 8007a9a:	f7f9 f855 	bl	8000b48 <__aeabi_dcmpgt>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f040 8296 	bne.w	8007fd0 <_dtoa_r+0x990>
 8007aa4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aae:	4649      	mov	r1, r9
 8007ab0:	f7f9 f82c 	bl	8000b0c <__aeabi_dcmplt>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f040 8289 	bne.w	8007fcc <_dtoa_r+0x98c>
 8007aba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f2c0 814e 	blt.w	8007d62 <_dtoa_r+0x722>
 8007ac6:	f1bb 0f0e 	cmp.w	fp, #14
 8007aca:	f300 814a 	bgt.w	8007d62 <_dtoa_r+0x722>
 8007ace:	4b6b      	ldr	r3, [pc, #428]	; (8007c7c <_dtoa_r+0x63c>)
 8007ad0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f280 80dc 	bge.w	8007c98 <_dtoa_r+0x658>
 8007ae0:	9b04      	ldr	r3, [sp, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f300 80d8 	bgt.w	8007c98 <_dtoa_r+0x658>
 8007ae8:	f040 826f 	bne.w	8007fca <_dtoa_r+0x98a>
 8007aec:	4b68      	ldr	r3, [pc, #416]	; (8007c90 <_dtoa_r+0x650>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	4640      	mov	r0, r8
 8007af2:	4649      	mov	r1, r9
 8007af4:	f7f8 fd98 	bl	8000628 <__aeabi_dmul>
 8007af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007afc:	f7f9 f81a 	bl	8000b34 <__aeabi_dcmpge>
 8007b00:	9e04      	ldr	r6, [sp, #16]
 8007b02:	4637      	mov	r7, r6
 8007b04:	2800      	cmp	r0, #0
 8007b06:	f040 8245 	bne.w	8007f94 <_dtoa_r+0x954>
 8007b0a:	9d00      	ldr	r5, [sp, #0]
 8007b0c:	2331      	movs	r3, #49	; 0x31
 8007b0e:	f805 3b01 	strb.w	r3, [r5], #1
 8007b12:	f10b 0b01 	add.w	fp, fp, #1
 8007b16:	e241      	b.n	8007f9c <_dtoa_r+0x95c>
 8007b18:	07f2      	lsls	r2, r6, #31
 8007b1a:	d505      	bpl.n	8007b28 <_dtoa_r+0x4e8>
 8007b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b20:	f7f8 fd82 	bl	8000628 <__aeabi_dmul>
 8007b24:	3501      	adds	r5, #1
 8007b26:	2301      	movs	r3, #1
 8007b28:	1076      	asrs	r6, r6, #1
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	e773      	b.n	8007a16 <_dtoa_r+0x3d6>
 8007b2e:	2502      	movs	r5, #2
 8007b30:	e775      	b.n	8007a1e <_dtoa_r+0x3de>
 8007b32:	9e04      	ldr	r6, [sp, #16]
 8007b34:	465f      	mov	r7, fp
 8007b36:	e792      	b.n	8007a5e <_dtoa_r+0x41e>
 8007b38:	9900      	ldr	r1, [sp, #0]
 8007b3a:	4b50      	ldr	r3, [pc, #320]	; (8007c7c <_dtoa_r+0x63c>)
 8007b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b40:	4431      	add	r1, r6
 8007b42:	9102      	str	r1, [sp, #8]
 8007b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b46:	eeb0 9a47 	vmov.f32	s18, s14
 8007b4a:	eef0 9a67 	vmov.f32	s19, s15
 8007b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b56:	2900      	cmp	r1, #0
 8007b58:	d044      	beq.n	8007be4 <_dtoa_r+0x5a4>
 8007b5a:	494e      	ldr	r1, [pc, #312]	; (8007c94 <_dtoa_r+0x654>)
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f7f8 fe8d 	bl	800087c <__aeabi_ddiv>
 8007b62:	ec53 2b19 	vmov	r2, r3, d9
 8007b66:	f7f8 fba7 	bl	80002b8 <__aeabi_dsub>
 8007b6a:	9d00      	ldr	r5, [sp, #0]
 8007b6c:	ec41 0b19 	vmov	d9, r0, r1
 8007b70:	4649      	mov	r1, r9
 8007b72:	4640      	mov	r0, r8
 8007b74:	f7f9 f808 	bl	8000b88 <__aeabi_d2iz>
 8007b78:	4606      	mov	r6, r0
 8007b7a:	f7f8 fceb 	bl	8000554 <__aeabi_i2d>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4640      	mov	r0, r8
 8007b84:	4649      	mov	r1, r9
 8007b86:	f7f8 fb97 	bl	80002b8 <__aeabi_dsub>
 8007b8a:	3630      	adds	r6, #48	; 0x30
 8007b8c:	f805 6b01 	strb.w	r6, [r5], #1
 8007b90:	ec53 2b19 	vmov	r2, r3, d9
 8007b94:	4680      	mov	r8, r0
 8007b96:	4689      	mov	r9, r1
 8007b98:	f7f8 ffb8 	bl	8000b0c <__aeabi_dcmplt>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d164      	bne.n	8007c6a <_dtoa_r+0x62a>
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	4937      	ldr	r1, [pc, #220]	; (8007c84 <_dtoa_r+0x644>)
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	f7f8 fb86 	bl	80002b8 <__aeabi_dsub>
 8007bac:	ec53 2b19 	vmov	r2, r3, d9
 8007bb0:	f7f8 ffac 	bl	8000b0c <__aeabi_dcmplt>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f040 80b6 	bne.w	8007d26 <_dtoa_r+0x6e6>
 8007bba:	9b02      	ldr	r3, [sp, #8]
 8007bbc:	429d      	cmp	r5, r3
 8007bbe:	f43f af7c 	beq.w	8007aba <_dtoa_r+0x47a>
 8007bc2:	4b31      	ldr	r3, [pc, #196]	; (8007c88 <_dtoa_r+0x648>)
 8007bc4:	ec51 0b19 	vmov	r0, r1, d9
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f7f8 fd2d 	bl	8000628 <__aeabi_dmul>
 8007bce:	4b2e      	ldr	r3, [pc, #184]	; (8007c88 <_dtoa_r+0x648>)
 8007bd0:	ec41 0b19 	vmov	d9, r0, r1
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	4649      	mov	r1, r9
 8007bda:	f7f8 fd25 	bl	8000628 <__aeabi_dmul>
 8007bde:	4680      	mov	r8, r0
 8007be0:	4689      	mov	r9, r1
 8007be2:	e7c5      	b.n	8007b70 <_dtoa_r+0x530>
 8007be4:	ec51 0b17 	vmov	r0, r1, d7
 8007be8:	f7f8 fd1e 	bl	8000628 <__aeabi_dmul>
 8007bec:	9b02      	ldr	r3, [sp, #8]
 8007bee:	9d00      	ldr	r5, [sp, #0]
 8007bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bf2:	ec41 0b19 	vmov	d9, r0, r1
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	f7f8 ffc5 	bl	8000b88 <__aeabi_d2iz>
 8007bfe:	4606      	mov	r6, r0
 8007c00:	f7f8 fca8 	bl	8000554 <__aeabi_i2d>
 8007c04:	3630      	adds	r6, #48	; 0x30
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	f7f8 fb53 	bl	80002b8 <__aeabi_dsub>
 8007c12:	f805 6b01 	strb.w	r6, [r5], #1
 8007c16:	9b02      	ldr	r3, [sp, #8]
 8007c18:	429d      	cmp	r5, r3
 8007c1a:	4680      	mov	r8, r0
 8007c1c:	4689      	mov	r9, r1
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	d124      	bne.n	8007c6e <_dtoa_r+0x62e>
 8007c24:	4b1b      	ldr	r3, [pc, #108]	; (8007c94 <_dtoa_r+0x654>)
 8007c26:	ec51 0b19 	vmov	r0, r1, d9
 8007c2a:	f7f8 fb47 	bl	80002bc <__adddf3>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4640      	mov	r0, r8
 8007c34:	4649      	mov	r1, r9
 8007c36:	f7f8 ff87 	bl	8000b48 <__aeabi_dcmpgt>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d173      	bne.n	8007d26 <_dtoa_r+0x6e6>
 8007c3e:	ec53 2b19 	vmov	r2, r3, d9
 8007c42:	4914      	ldr	r1, [pc, #80]	; (8007c94 <_dtoa_r+0x654>)
 8007c44:	2000      	movs	r0, #0
 8007c46:	f7f8 fb37 	bl	80002b8 <__aeabi_dsub>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4640      	mov	r0, r8
 8007c50:	4649      	mov	r1, r9
 8007c52:	f7f8 ff5b 	bl	8000b0c <__aeabi_dcmplt>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f43f af2f 	beq.w	8007aba <_dtoa_r+0x47a>
 8007c5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c5e:	1e6b      	subs	r3, r5, #1
 8007c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c66:	2b30      	cmp	r3, #48	; 0x30
 8007c68:	d0f8      	beq.n	8007c5c <_dtoa_r+0x61c>
 8007c6a:	46bb      	mov	fp, r7
 8007c6c:	e04a      	b.n	8007d04 <_dtoa_r+0x6c4>
 8007c6e:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <_dtoa_r+0x648>)
 8007c70:	f7f8 fcda 	bl	8000628 <__aeabi_dmul>
 8007c74:	4680      	mov	r8, r0
 8007c76:	4689      	mov	r9, r1
 8007c78:	e7bd      	b.n	8007bf6 <_dtoa_r+0x5b6>
 8007c7a:	bf00      	nop
 8007c7c:	08009558 	.word	0x08009558
 8007c80:	08009530 	.word	0x08009530
 8007c84:	3ff00000 	.word	0x3ff00000
 8007c88:	40240000 	.word	0x40240000
 8007c8c:	401c0000 	.word	0x401c0000
 8007c90:	40140000 	.word	0x40140000
 8007c94:	3fe00000 	.word	0x3fe00000
 8007c98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c9c:	9d00      	ldr	r5, [sp, #0]
 8007c9e:	4642      	mov	r2, r8
 8007ca0:	464b      	mov	r3, r9
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	f7f8 fde9 	bl	800087c <__aeabi_ddiv>
 8007caa:	f7f8 ff6d 	bl	8000b88 <__aeabi_d2iz>
 8007cae:	9001      	str	r0, [sp, #4]
 8007cb0:	f7f8 fc50 	bl	8000554 <__aeabi_i2d>
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	f7f8 fcb6 	bl	8000628 <__aeabi_dmul>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 faf8 	bl	80002b8 <__aeabi_dsub>
 8007cc8:	9e01      	ldr	r6, [sp, #4]
 8007cca:	9f04      	ldr	r7, [sp, #16]
 8007ccc:	3630      	adds	r6, #48	; 0x30
 8007cce:	f805 6b01 	strb.w	r6, [r5], #1
 8007cd2:	9e00      	ldr	r6, [sp, #0]
 8007cd4:	1bae      	subs	r6, r5, r6
 8007cd6:	42b7      	cmp	r7, r6
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	d134      	bne.n	8007d48 <_dtoa_r+0x708>
 8007cde:	f7f8 faed 	bl	80002bc <__adddf3>
 8007ce2:	4642      	mov	r2, r8
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	460f      	mov	r7, r1
 8007cea:	f7f8 ff2d 	bl	8000b48 <__aeabi_dcmpgt>
 8007cee:	b9c8      	cbnz	r0, 8007d24 <_dtoa_r+0x6e4>
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	f7f8 fefe 	bl	8000af8 <__aeabi_dcmpeq>
 8007cfc:	b110      	cbz	r0, 8007d04 <_dtoa_r+0x6c4>
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	07db      	lsls	r3, r3, #31
 8007d02:	d40f      	bmi.n	8007d24 <_dtoa_r+0x6e4>
 8007d04:	4651      	mov	r1, sl
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 fbcc 	bl	80084a4 <_Bfree>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d10:	702b      	strb	r3, [r5, #0]
 8007d12:	f10b 0301 	add.w	r3, fp, #1
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f43f ace2 	beq.w	80076e4 <_dtoa_r+0xa4>
 8007d20:	601d      	str	r5, [r3, #0]
 8007d22:	e4df      	b.n	80076e4 <_dtoa_r+0xa4>
 8007d24:	465f      	mov	r7, fp
 8007d26:	462b      	mov	r3, r5
 8007d28:	461d      	mov	r5, r3
 8007d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d2e:	2a39      	cmp	r2, #57	; 0x39
 8007d30:	d106      	bne.n	8007d40 <_dtoa_r+0x700>
 8007d32:	9a00      	ldr	r2, [sp, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d1f7      	bne.n	8007d28 <_dtoa_r+0x6e8>
 8007d38:	9900      	ldr	r1, [sp, #0]
 8007d3a:	2230      	movs	r2, #48	; 0x30
 8007d3c:	3701      	adds	r7, #1
 8007d3e:	700a      	strb	r2, [r1, #0]
 8007d40:	781a      	ldrb	r2, [r3, #0]
 8007d42:	3201      	adds	r2, #1
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	e790      	b.n	8007c6a <_dtoa_r+0x62a>
 8007d48:	4ba3      	ldr	r3, [pc, #652]	; (8007fd8 <_dtoa_r+0x998>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f7f8 fc6c 	bl	8000628 <__aeabi_dmul>
 8007d50:	2200      	movs	r2, #0
 8007d52:	2300      	movs	r3, #0
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	f7f8 fece 	bl	8000af8 <__aeabi_dcmpeq>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d09e      	beq.n	8007c9e <_dtoa_r+0x65e>
 8007d60:	e7d0      	b.n	8007d04 <_dtoa_r+0x6c4>
 8007d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	f000 80ca 	beq.w	8007efe <_dtoa_r+0x8be>
 8007d6a:	9a07      	ldr	r2, [sp, #28]
 8007d6c:	2a01      	cmp	r2, #1
 8007d6e:	f300 80ad 	bgt.w	8007ecc <_dtoa_r+0x88c>
 8007d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	f000 80a5 	beq.w	8007ec4 <_dtoa_r+0x884>
 8007d7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d7e:	9e08      	ldr	r6, [sp, #32]
 8007d80:	9d05      	ldr	r5, [sp, #20]
 8007d82:	9a05      	ldr	r2, [sp, #20]
 8007d84:	441a      	add	r2, r3
 8007d86:	9205      	str	r2, [sp, #20]
 8007d88:	9a06      	ldr	r2, [sp, #24]
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	441a      	add	r2, r3
 8007d8e:	4620      	mov	r0, r4
 8007d90:	9206      	str	r2, [sp, #24]
 8007d92:	f000 fc3d 	bl	8008610 <__i2b>
 8007d96:	4607      	mov	r7, r0
 8007d98:	b165      	cbz	r5, 8007db4 <_dtoa_r+0x774>
 8007d9a:	9b06      	ldr	r3, [sp, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	dd09      	ble.n	8007db4 <_dtoa_r+0x774>
 8007da0:	42ab      	cmp	r3, r5
 8007da2:	9a05      	ldr	r2, [sp, #20]
 8007da4:	bfa8      	it	ge
 8007da6:	462b      	movge	r3, r5
 8007da8:	1ad2      	subs	r2, r2, r3
 8007daa:	9205      	str	r2, [sp, #20]
 8007dac:	9a06      	ldr	r2, [sp, #24]
 8007dae:	1aed      	subs	r5, r5, r3
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	9306      	str	r3, [sp, #24]
 8007db4:	9b08      	ldr	r3, [sp, #32]
 8007db6:	b1f3      	cbz	r3, 8007df6 <_dtoa_r+0x7b6>
 8007db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 80a3 	beq.w	8007f06 <_dtoa_r+0x8c6>
 8007dc0:	2e00      	cmp	r6, #0
 8007dc2:	dd10      	ble.n	8007de6 <_dtoa_r+0x7a6>
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	4632      	mov	r2, r6
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 fce1 	bl	8008790 <__pow5mult>
 8007dce:	4652      	mov	r2, sl
 8007dd0:	4601      	mov	r1, r0
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 fc31 	bl	800863c <__multiply>
 8007dda:	4651      	mov	r1, sl
 8007ddc:	4680      	mov	r8, r0
 8007dde:	4620      	mov	r0, r4
 8007de0:	f000 fb60 	bl	80084a4 <_Bfree>
 8007de4:	46c2      	mov	sl, r8
 8007de6:	9b08      	ldr	r3, [sp, #32]
 8007de8:	1b9a      	subs	r2, r3, r6
 8007dea:	d004      	beq.n	8007df6 <_dtoa_r+0x7b6>
 8007dec:	4651      	mov	r1, sl
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 fcce 	bl	8008790 <__pow5mult>
 8007df4:	4682      	mov	sl, r0
 8007df6:	2101      	movs	r1, #1
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fc09 	bl	8008610 <__i2b>
 8007dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	4606      	mov	r6, r0
 8007e04:	f340 8081 	ble.w	8007f0a <_dtoa_r+0x8ca>
 8007e08:	461a      	mov	r2, r3
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 fcbf 	bl	8008790 <__pow5mult>
 8007e12:	9b07      	ldr	r3, [sp, #28]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	4606      	mov	r6, r0
 8007e18:	dd7a      	ble.n	8007f10 <_dtoa_r+0x8d0>
 8007e1a:	f04f 0800 	mov.w	r8, #0
 8007e1e:	6933      	ldr	r3, [r6, #16]
 8007e20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e24:	6918      	ldr	r0, [r3, #16]
 8007e26:	f000 fba5 	bl	8008574 <__hi0bits>
 8007e2a:	f1c0 0020 	rsb	r0, r0, #32
 8007e2e:	9b06      	ldr	r3, [sp, #24]
 8007e30:	4418      	add	r0, r3
 8007e32:	f010 001f 	ands.w	r0, r0, #31
 8007e36:	f000 8094 	beq.w	8007f62 <_dtoa_r+0x922>
 8007e3a:	f1c0 0320 	rsb	r3, r0, #32
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	f340 8085 	ble.w	8007f4e <_dtoa_r+0x90e>
 8007e44:	9b05      	ldr	r3, [sp, #20]
 8007e46:	f1c0 001c 	rsb	r0, r0, #28
 8007e4a:	4403      	add	r3, r0
 8007e4c:	9305      	str	r3, [sp, #20]
 8007e4e:	9b06      	ldr	r3, [sp, #24]
 8007e50:	4403      	add	r3, r0
 8007e52:	4405      	add	r5, r0
 8007e54:	9306      	str	r3, [sp, #24]
 8007e56:	9b05      	ldr	r3, [sp, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	dd05      	ble.n	8007e68 <_dtoa_r+0x828>
 8007e5c:	4651      	mov	r1, sl
 8007e5e:	461a      	mov	r2, r3
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fcef 	bl	8008844 <__lshift>
 8007e66:	4682      	mov	sl, r0
 8007e68:	9b06      	ldr	r3, [sp, #24]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	dd05      	ble.n	8007e7a <_dtoa_r+0x83a>
 8007e6e:	4631      	mov	r1, r6
 8007e70:	461a      	mov	r2, r3
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 fce6 	bl	8008844 <__lshift>
 8007e78:	4606      	mov	r6, r0
 8007e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d072      	beq.n	8007f66 <_dtoa_r+0x926>
 8007e80:	4631      	mov	r1, r6
 8007e82:	4650      	mov	r0, sl
 8007e84:	f000 fd4a 	bl	800891c <__mcmp>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	da6c      	bge.n	8007f66 <_dtoa_r+0x926>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4651      	mov	r1, sl
 8007e90:	220a      	movs	r2, #10
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 fb28 	bl	80084e8 <__multadd>
 8007e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e9e:	4682      	mov	sl, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 81b0 	beq.w	8008206 <_dtoa_r+0xbc6>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	4639      	mov	r1, r7
 8007eaa:	220a      	movs	r2, #10
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fb1b 	bl	80084e8 <__multadd>
 8007eb2:	9b01      	ldr	r3, [sp, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	f300 8096 	bgt.w	8007fe8 <_dtoa_r+0x9a8>
 8007ebc:	9b07      	ldr	r3, [sp, #28]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	dc59      	bgt.n	8007f76 <_dtoa_r+0x936>
 8007ec2:	e091      	b.n	8007fe8 <_dtoa_r+0x9a8>
 8007ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007eca:	e758      	b.n	8007d7e <_dtoa_r+0x73e>
 8007ecc:	9b04      	ldr	r3, [sp, #16]
 8007ece:	1e5e      	subs	r6, r3, #1
 8007ed0:	9b08      	ldr	r3, [sp, #32]
 8007ed2:	42b3      	cmp	r3, r6
 8007ed4:	bfbf      	itttt	lt
 8007ed6:	9b08      	ldrlt	r3, [sp, #32]
 8007ed8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007eda:	9608      	strlt	r6, [sp, #32]
 8007edc:	1af3      	sublt	r3, r6, r3
 8007ede:	bfb4      	ite	lt
 8007ee0:	18d2      	addlt	r2, r2, r3
 8007ee2:	1b9e      	subge	r6, r3, r6
 8007ee4:	9b04      	ldr	r3, [sp, #16]
 8007ee6:	bfbc      	itt	lt
 8007ee8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007eea:	2600      	movlt	r6, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bfb7      	itett	lt
 8007ef0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007ef4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007ef8:	1a9d      	sublt	r5, r3, r2
 8007efa:	2300      	movlt	r3, #0
 8007efc:	e741      	b.n	8007d82 <_dtoa_r+0x742>
 8007efe:	9e08      	ldr	r6, [sp, #32]
 8007f00:	9d05      	ldr	r5, [sp, #20]
 8007f02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f04:	e748      	b.n	8007d98 <_dtoa_r+0x758>
 8007f06:	9a08      	ldr	r2, [sp, #32]
 8007f08:	e770      	b.n	8007dec <_dtoa_r+0x7ac>
 8007f0a:	9b07      	ldr	r3, [sp, #28]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	dc19      	bgt.n	8007f44 <_dtoa_r+0x904>
 8007f10:	9b02      	ldr	r3, [sp, #8]
 8007f12:	b9bb      	cbnz	r3, 8007f44 <_dtoa_r+0x904>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f1a:	b99b      	cbnz	r3, 8007f44 <_dtoa_r+0x904>
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f22:	0d1b      	lsrs	r3, r3, #20
 8007f24:	051b      	lsls	r3, r3, #20
 8007f26:	b183      	cbz	r3, 8007f4a <_dtoa_r+0x90a>
 8007f28:	9b05      	ldr	r3, [sp, #20]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	9305      	str	r3, [sp, #20]
 8007f2e:	9b06      	ldr	r3, [sp, #24]
 8007f30:	3301      	adds	r3, #1
 8007f32:	9306      	str	r3, [sp, #24]
 8007f34:	f04f 0801 	mov.w	r8, #1
 8007f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f47f af6f 	bne.w	8007e1e <_dtoa_r+0x7de>
 8007f40:	2001      	movs	r0, #1
 8007f42:	e774      	b.n	8007e2e <_dtoa_r+0x7ee>
 8007f44:	f04f 0800 	mov.w	r8, #0
 8007f48:	e7f6      	b.n	8007f38 <_dtoa_r+0x8f8>
 8007f4a:	4698      	mov	r8, r3
 8007f4c:	e7f4      	b.n	8007f38 <_dtoa_r+0x8f8>
 8007f4e:	d082      	beq.n	8007e56 <_dtoa_r+0x816>
 8007f50:	9a05      	ldr	r2, [sp, #20]
 8007f52:	331c      	adds	r3, #28
 8007f54:	441a      	add	r2, r3
 8007f56:	9205      	str	r2, [sp, #20]
 8007f58:	9a06      	ldr	r2, [sp, #24]
 8007f5a:	441a      	add	r2, r3
 8007f5c:	441d      	add	r5, r3
 8007f5e:	9206      	str	r2, [sp, #24]
 8007f60:	e779      	b.n	8007e56 <_dtoa_r+0x816>
 8007f62:	4603      	mov	r3, r0
 8007f64:	e7f4      	b.n	8007f50 <_dtoa_r+0x910>
 8007f66:	9b04      	ldr	r3, [sp, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	dc37      	bgt.n	8007fdc <_dtoa_r+0x99c>
 8007f6c:	9b07      	ldr	r3, [sp, #28]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	dd34      	ble.n	8007fdc <_dtoa_r+0x99c>
 8007f72:	9b04      	ldr	r3, [sp, #16]
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	9b01      	ldr	r3, [sp, #4]
 8007f78:	b963      	cbnz	r3, 8007f94 <_dtoa_r+0x954>
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	2205      	movs	r2, #5
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 fab2 	bl	80084e8 <__multadd>
 8007f84:	4601      	mov	r1, r0
 8007f86:	4606      	mov	r6, r0
 8007f88:	4650      	mov	r0, sl
 8007f8a:	f000 fcc7 	bl	800891c <__mcmp>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	f73f adbb 	bgt.w	8007b0a <_dtoa_r+0x4ca>
 8007f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f96:	9d00      	ldr	r5, [sp, #0]
 8007f98:	ea6f 0b03 	mvn.w	fp, r3
 8007f9c:	f04f 0800 	mov.w	r8, #0
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fa7e 	bl	80084a4 <_Bfree>
 8007fa8:	2f00      	cmp	r7, #0
 8007faa:	f43f aeab 	beq.w	8007d04 <_dtoa_r+0x6c4>
 8007fae:	f1b8 0f00 	cmp.w	r8, #0
 8007fb2:	d005      	beq.n	8007fc0 <_dtoa_r+0x980>
 8007fb4:	45b8      	cmp	r8, r7
 8007fb6:	d003      	beq.n	8007fc0 <_dtoa_r+0x980>
 8007fb8:	4641      	mov	r1, r8
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fa72 	bl	80084a4 <_Bfree>
 8007fc0:	4639      	mov	r1, r7
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 fa6e 	bl	80084a4 <_Bfree>
 8007fc8:	e69c      	b.n	8007d04 <_dtoa_r+0x6c4>
 8007fca:	2600      	movs	r6, #0
 8007fcc:	4637      	mov	r7, r6
 8007fce:	e7e1      	b.n	8007f94 <_dtoa_r+0x954>
 8007fd0:	46bb      	mov	fp, r7
 8007fd2:	4637      	mov	r7, r6
 8007fd4:	e599      	b.n	8007b0a <_dtoa_r+0x4ca>
 8007fd6:	bf00      	nop
 8007fd8:	40240000 	.word	0x40240000
 8007fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 80c8 	beq.w	8008174 <_dtoa_r+0xb34>
 8007fe4:	9b04      	ldr	r3, [sp, #16]
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	2d00      	cmp	r5, #0
 8007fea:	dd05      	ble.n	8007ff8 <_dtoa_r+0x9b8>
 8007fec:	4639      	mov	r1, r7
 8007fee:	462a      	mov	r2, r5
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 fc27 	bl	8008844 <__lshift>
 8007ff6:	4607      	mov	r7, r0
 8007ff8:	f1b8 0f00 	cmp.w	r8, #0
 8007ffc:	d05b      	beq.n	80080b6 <_dtoa_r+0xa76>
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	4620      	mov	r0, r4
 8008002:	f000 fa0f 	bl	8008424 <_Balloc>
 8008006:	4605      	mov	r5, r0
 8008008:	b928      	cbnz	r0, 8008016 <_dtoa_r+0x9d6>
 800800a:	4b83      	ldr	r3, [pc, #524]	; (8008218 <_dtoa_r+0xbd8>)
 800800c:	4602      	mov	r2, r0
 800800e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008012:	f7ff bb2e 	b.w	8007672 <_dtoa_r+0x32>
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	3202      	adds	r2, #2
 800801a:	0092      	lsls	r2, r2, #2
 800801c:	f107 010c 	add.w	r1, r7, #12
 8008020:	300c      	adds	r0, #12
 8008022:	f001 f847 	bl	80090b4 <memcpy>
 8008026:	2201      	movs	r2, #1
 8008028:	4629      	mov	r1, r5
 800802a:	4620      	mov	r0, r4
 800802c:	f000 fc0a 	bl	8008844 <__lshift>
 8008030:	9b00      	ldr	r3, [sp, #0]
 8008032:	3301      	adds	r3, #1
 8008034:	9304      	str	r3, [sp, #16]
 8008036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800803a:	4413      	add	r3, r2
 800803c:	9308      	str	r3, [sp, #32]
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	46b8      	mov	r8, r7
 8008046:	9306      	str	r3, [sp, #24]
 8008048:	4607      	mov	r7, r0
 800804a:	9b04      	ldr	r3, [sp, #16]
 800804c:	4631      	mov	r1, r6
 800804e:	3b01      	subs	r3, #1
 8008050:	4650      	mov	r0, sl
 8008052:	9301      	str	r3, [sp, #4]
 8008054:	f7ff fa69 	bl	800752a <quorem>
 8008058:	4641      	mov	r1, r8
 800805a:	9002      	str	r0, [sp, #8]
 800805c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008060:	4650      	mov	r0, sl
 8008062:	f000 fc5b 	bl	800891c <__mcmp>
 8008066:	463a      	mov	r2, r7
 8008068:	9005      	str	r0, [sp, #20]
 800806a:	4631      	mov	r1, r6
 800806c:	4620      	mov	r0, r4
 800806e:	f000 fc71 	bl	8008954 <__mdiff>
 8008072:	68c2      	ldr	r2, [r0, #12]
 8008074:	4605      	mov	r5, r0
 8008076:	bb02      	cbnz	r2, 80080ba <_dtoa_r+0xa7a>
 8008078:	4601      	mov	r1, r0
 800807a:	4650      	mov	r0, sl
 800807c:	f000 fc4e 	bl	800891c <__mcmp>
 8008080:	4602      	mov	r2, r0
 8008082:	4629      	mov	r1, r5
 8008084:	4620      	mov	r0, r4
 8008086:	9209      	str	r2, [sp, #36]	; 0x24
 8008088:	f000 fa0c 	bl	80084a4 <_Bfree>
 800808c:	9b07      	ldr	r3, [sp, #28]
 800808e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008090:	9d04      	ldr	r5, [sp, #16]
 8008092:	ea43 0102 	orr.w	r1, r3, r2
 8008096:	9b06      	ldr	r3, [sp, #24]
 8008098:	4319      	orrs	r1, r3
 800809a:	d110      	bne.n	80080be <_dtoa_r+0xa7e>
 800809c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080a0:	d029      	beq.n	80080f6 <_dtoa_r+0xab6>
 80080a2:	9b05      	ldr	r3, [sp, #20]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dd02      	ble.n	80080ae <_dtoa_r+0xa6e>
 80080a8:	9b02      	ldr	r3, [sp, #8]
 80080aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	f883 9000 	strb.w	r9, [r3]
 80080b4:	e774      	b.n	8007fa0 <_dtoa_r+0x960>
 80080b6:	4638      	mov	r0, r7
 80080b8:	e7ba      	b.n	8008030 <_dtoa_r+0x9f0>
 80080ba:	2201      	movs	r2, #1
 80080bc:	e7e1      	b.n	8008082 <_dtoa_r+0xa42>
 80080be:	9b05      	ldr	r3, [sp, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	db04      	blt.n	80080ce <_dtoa_r+0xa8e>
 80080c4:	9907      	ldr	r1, [sp, #28]
 80080c6:	430b      	orrs	r3, r1
 80080c8:	9906      	ldr	r1, [sp, #24]
 80080ca:	430b      	orrs	r3, r1
 80080cc:	d120      	bne.n	8008110 <_dtoa_r+0xad0>
 80080ce:	2a00      	cmp	r2, #0
 80080d0:	dded      	ble.n	80080ae <_dtoa_r+0xa6e>
 80080d2:	4651      	mov	r1, sl
 80080d4:	2201      	movs	r2, #1
 80080d6:	4620      	mov	r0, r4
 80080d8:	f000 fbb4 	bl	8008844 <__lshift>
 80080dc:	4631      	mov	r1, r6
 80080de:	4682      	mov	sl, r0
 80080e0:	f000 fc1c 	bl	800891c <__mcmp>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	dc03      	bgt.n	80080f0 <_dtoa_r+0xab0>
 80080e8:	d1e1      	bne.n	80080ae <_dtoa_r+0xa6e>
 80080ea:	f019 0f01 	tst.w	r9, #1
 80080ee:	d0de      	beq.n	80080ae <_dtoa_r+0xa6e>
 80080f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080f4:	d1d8      	bne.n	80080a8 <_dtoa_r+0xa68>
 80080f6:	9a01      	ldr	r2, [sp, #4]
 80080f8:	2339      	movs	r3, #57	; 0x39
 80080fa:	7013      	strb	r3, [r2, #0]
 80080fc:	462b      	mov	r3, r5
 80080fe:	461d      	mov	r5, r3
 8008100:	3b01      	subs	r3, #1
 8008102:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008106:	2a39      	cmp	r2, #57	; 0x39
 8008108:	d06c      	beq.n	80081e4 <_dtoa_r+0xba4>
 800810a:	3201      	adds	r2, #1
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	e747      	b.n	8007fa0 <_dtoa_r+0x960>
 8008110:	2a00      	cmp	r2, #0
 8008112:	dd07      	ble.n	8008124 <_dtoa_r+0xae4>
 8008114:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008118:	d0ed      	beq.n	80080f6 <_dtoa_r+0xab6>
 800811a:	9a01      	ldr	r2, [sp, #4]
 800811c:	f109 0301 	add.w	r3, r9, #1
 8008120:	7013      	strb	r3, [r2, #0]
 8008122:	e73d      	b.n	8007fa0 <_dtoa_r+0x960>
 8008124:	9b04      	ldr	r3, [sp, #16]
 8008126:	9a08      	ldr	r2, [sp, #32]
 8008128:	f803 9c01 	strb.w	r9, [r3, #-1]
 800812c:	4293      	cmp	r3, r2
 800812e:	d043      	beq.n	80081b8 <_dtoa_r+0xb78>
 8008130:	4651      	mov	r1, sl
 8008132:	2300      	movs	r3, #0
 8008134:	220a      	movs	r2, #10
 8008136:	4620      	mov	r0, r4
 8008138:	f000 f9d6 	bl	80084e8 <__multadd>
 800813c:	45b8      	cmp	r8, r7
 800813e:	4682      	mov	sl, r0
 8008140:	f04f 0300 	mov.w	r3, #0
 8008144:	f04f 020a 	mov.w	r2, #10
 8008148:	4641      	mov	r1, r8
 800814a:	4620      	mov	r0, r4
 800814c:	d107      	bne.n	800815e <_dtoa_r+0xb1e>
 800814e:	f000 f9cb 	bl	80084e8 <__multadd>
 8008152:	4680      	mov	r8, r0
 8008154:	4607      	mov	r7, r0
 8008156:	9b04      	ldr	r3, [sp, #16]
 8008158:	3301      	adds	r3, #1
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	e775      	b.n	800804a <_dtoa_r+0xa0a>
 800815e:	f000 f9c3 	bl	80084e8 <__multadd>
 8008162:	4639      	mov	r1, r7
 8008164:	4680      	mov	r8, r0
 8008166:	2300      	movs	r3, #0
 8008168:	220a      	movs	r2, #10
 800816a:	4620      	mov	r0, r4
 800816c:	f000 f9bc 	bl	80084e8 <__multadd>
 8008170:	4607      	mov	r7, r0
 8008172:	e7f0      	b.n	8008156 <_dtoa_r+0xb16>
 8008174:	9b04      	ldr	r3, [sp, #16]
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	9d00      	ldr	r5, [sp, #0]
 800817a:	4631      	mov	r1, r6
 800817c:	4650      	mov	r0, sl
 800817e:	f7ff f9d4 	bl	800752a <quorem>
 8008182:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008186:	9b00      	ldr	r3, [sp, #0]
 8008188:	f805 9b01 	strb.w	r9, [r5], #1
 800818c:	1aea      	subs	r2, r5, r3
 800818e:	9b01      	ldr	r3, [sp, #4]
 8008190:	4293      	cmp	r3, r2
 8008192:	dd07      	ble.n	80081a4 <_dtoa_r+0xb64>
 8008194:	4651      	mov	r1, sl
 8008196:	2300      	movs	r3, #0
 8008198:	220a      	movs	r2, #10
 800819a:	4620      	mov	r0, r4
 800819c:	f000 f9a4 	bl	80084e8 <__multadd>
 80081a0:	4682      	mov	sl, r0
 80081a2:	e7ea      	b.n	800817a <_dtoa_r+0xb3a>
 80081a4:	9b01      	ldr	r3, [sp, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	bfc8      	it	gt
 80081aa:	461d      	movgt	r5, r3
 80081ac:	9b00      	ldr	r3, [sp, #0]
 80081ae:	bfd8      	it	le
 80081b0:	2501      	movle	r5, #1
 80081b2:	441d      	add	r5, r3
 80081b4:	f04f 0800 	mov.w	r8, #0
 80081b8:	4651      	mov	r1, sl
 80081ba:	2201      	movs	r2, #1
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 fb41 	bl	8008844 <__lshift>
 80081c2:	4631      	mov	r1, r6
 80081c4:	4682      	mov	sl, r0
 80081c6:	f000 fba9 	bl	800891c <__mcmp>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	dc96      	bgt.n	80080fc <_dtoa_r+0xabc>
 80081ce:	d102      	bne.n	80081d6 <_dtoa_r+0xb96>
 80081d0:	f019 0f01 	tst.w	r9, #1
 80081d4:	d192      	bne.n	80080fc <_dtoa_r+0xabc>
 80081d6:	462b      	mov	r3, r5
 80081d8:	461d      	mov	r5, r3
 80081da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081de:	2a30      	cmp	r2, #48	; 0x30
 80081e0:	d0fa      	beq.n	80081d8 <_dtoa_r+0xb98>
 80081e2:	e6dd      	b.n	8007fa0 <_dtoa_r+0x960>
 80081e4:	9a00      	ldr	r2, [sp, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d189      	bne.n	80080fe <_dtoa_r+0xabe>
 80081ea:	f10b 0b01 	add.w	fp, fp, #1
 80081ee:	2331      	movs	r3, #49	; 0x31
 80081f0:	e796      	b.n	8008120 <_dtoa_r+0xae0>
 80081f2:	4b0a      	ldr	r3, [pc, #40]	; (800821c <_dtoa_r+0xbdc>)
 80081f4:	f7ff ba99 	b.w	800772a <_dtoa_r+0xea>
 80081f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f47f aa6d 	bne.w	80076da <_dtoa_r+0x9a>
 8008200:	4b07      	ldr	r3, [pc, #28]	; (8008220 <_dtoa_r+0xbe0>)
 8008202:	f7ff ba92 	b.w	800772a <_dtoa_r+0xea>
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	dcb5      	bgt.n	8008178 <_dtoa_r+0xb38>
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	2b02      	cmp	r3, #2
 8008210:	f73f aeb1 	bgt.w	8007f76 <_dtoa_r+0x936>
 8008214:	e7b0      	b.n	8008178 <_dtoa_r+0xb38>
 8008216:	bf00      	nop
 8008218:	080094c0 	.word	0x080094c0
 800821c:	08009420 	.word	0x08009420
 8008220:	08009444 	.word	0x08009444

08008224 <_free_r>:
 8008224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008226:	2900      	cmp	r1, #0
 8008228:	d044      	beq.n	80082b4 <_free_r+0x90>
 800822a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800822e:	9001      	str	r0, [sp, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f1a1 0404 	sub.w	r4, r1, #4
 8008236:	bfb8      	it	lt
 8008238:	18e4      	addlt	r4, r4, r3
 800823a:	f000 f8e7 	bl	800840c <__malloc_lock>
 800823e:	4a1e      	ldr	r2, [pc, #120]	; (80082b8 <_free_r+0x94>)
 8008240:	9801      	ldr	r0, [sp, #4]
 8008242:	6813      	ldr	r3, [r2, #0]
 8008244:	b933      	cbnz	r3, 8008254 <_free_r+0x30>
 8008246:	6063      	str	r3, [r4, #4]
 8008248:	6014      	str	r4, [r2, #0]
 800824a:	b003      	add	sp, #12
 800824c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008250:	f000 b8e2 	b.w	8008418 <__malloc_unlock>
 8008254:	42a3      	cmp	r3, r4
 8008256:	d908      	bls.n	800826a <_free_r+0x46>
 8008258:	6825      	ldr	r5, [r4, #0]
 800825a:	1961      	adds	r1, r4, r5
 800825c:	428b      	cmp	r3, r1
 800825e:	bf01      	itttt	eq
 8008260:	6819      	ldreq	r1, [r3, #0]
 8008262:	685b      	ldreq	r3, [r3, #4]
 8008264:	1949      	addeq	r1, r1, r5
 8008266:	6021      	streq	r1, [r4, #0]
 8008268:	e7ed      	b.n	8008246 <_free_r+0x22>
 800826a:	461a      	mov	r2, r3
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	b10b      	cbz	r3, 8008274 <_free_r+0x50>
 8008270:	42a3      	cmp	r3, r4
 8008272:	d9fa      	bls.n	800826a <_free_r+0x46>
 8008274:	6811      	ldr	r1, [r2, #0]
 8008276:	1855      	adds	r5, r2, r1
 8008278:	42a5      	cmp	r5, r4
 800827a:	d10b      	bne.n	8008294 <_free_r+0x70>
 800827c:	6824      	ldr	r4, [r4, #0]
 800827e:	4421      	add	r1, r4
 8008280:	1854      	adds	r4, r2, r1
 8008282:	42a3      	cmp	r3, r4
 8008284:	6011      	str	r1, [r2, #0]
 8008286:	d1e0      	bne.n	800824a <_free_r+0x26>
 8008288:	681c      	ldr	r4, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	6053      	str	r3, [r2, #4]
 800828e:	440c      	add	r4, r1
 8008290:	6014      	str	r4, [r2, #0]
 8008292:	e7da      	b.n	800824a <_free_r+0x26>
 8008294:	d902      	bls.n	800829c <_free_r+0x78>
 8008296:	230c      	movs	r3, #12
 8008298:	6003      	str	r3, [r0, #0]
 800829a:	e7d6      	b.n	800824a <_free_r+0x26>
 800829c:	6825      	ldr	r5, [r4, #0]
 800829e:	1961      	adds	r1, r4, r5
 80082a0:	428b      	cmp	r3, r1
 80082a2:	bf04      	itt	eq
 80082a4:	6819      	ldreq	r1, [r3, #0]
 80082a6:	685b      	ldreq	r3, [r3, #4]
 80082a8:	6063      	str	r3, [r4, #4]
 80082aa:	bf04      	itt	eq
 80082ac:	1949      	addeq	r1, r1, r5
 80082ae:	6021      	streq	r1, [r4, #0]
 80082b0:	6054      	str	r4, [r2, #4]
 80082b2:	e7ca      	b.n	800824a <_free_r+0x26>
 80082b4:	b003      	add	sp, #12
 80082b6:	bd30      	pop	{r4, r5, pc}
 80082b8:	20000530 	.word	0x20000530

080082bc <malloc>:
 80082bc:	4b02      	ldr	r3, [pc, #8]	; (80082c8 <malloc+0xc>)
 80082be:	4601      	mov	r1, r0
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	f000 b823 	b.w	800830c <_malloc_r>
 80082c6:	bf00      	nop
 80082c8:	20000064 	.word	0x20000064

080082cc <sbrk_aligned>:
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	4e0e      	ldr	r6, [pc, #56]	; (8008308 <sbrk_aligned+0x3c>)
 80082d0:	460c      	mov	r4, r1
 80082d2:	6831      	ldr	r1, [r6, #0]
 80082d4:	4605      	mov	r5, r0
 80082d6:	b911      	cbnz	r1, 80082de <sbrk_aligned+0x12>
 80082d8:	f000 fedc 	bl	8009094 <_sbrk_r>
 80082dc:	6030      	str	r0, [r6, #0]
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f000 fed7 	bl	8009094 <_sbrk_r>
 80082e6:	1c43      	adds	r3, r0, #1
 80082e8:	d00a      	beq.n	8008300 <sbrk_aligned+0x34>
 80082ea:	1cc4      	adds	r4, r0, #3
 80082ec:	f024 0403 	bic.w	r4, r4, #3
 80082f0:	42a0      	cmp	r0, r4
 80082f2:	d007      	beq.n	8008304 <sbrk_aligned+0x38>
 80082f4:	1a21      	subs	r1, r4, r0
 80082f6:	4628      	mov	r0, r5
 80082f8:	f000 fecc 	bl	8009094 <_sbrk_r>
 80082fc:	3001      	adds	r0, #1
 80082fe:	d101      	bne.n	8008304 <sbrk_aligned+0x38>
 8008300:	f04f 34ff 	mov.w	r4, #4294967295
 8008304:	4620      	mov	r0, r4
 8008306:	bd70      	pop	{r4, r5, r6, pc}
 8008308:	20000534 	.word	0x20000534

0800830c <_malloc_r>:
 800830c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008310:	1ccd      	adds	r5, r1, #3
 8008312:	f025 0503 	bic.w	r5, r5, #3
 8008316:	3508      	adds	r5, #8
 8008318:	2d0c      	cmp	r5, #12
 800831a:	bf38      	it	cc
 800831c:	250c      	movcc	r5, #12
 800831e:	2d00      	cmp	r5, #0
 8008320:	4607      	mov	r7, r0
 8008322:	db01      	blt.n	8008328 <_malloc_r+0x1c>
 8008324:	42a9      	cmp	r1, r5
 8008326:	d905      	bls.n	8008334 <_malloc_r+0x28>
 8008328:	230c      	movs	r3, #12
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	2600      	movs	r6, #0
 800832e:	4630      	mov	r0, r6
 8008330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008334:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008408 <_malloc_r+0xfc>
 8008338:	f000 f868 	bl	800840c <__malloc_lock>
 800833c:	f8d8 3000 	ldr.w	r3, [r8]
 8008340:	461c      	mov	r4, r3
 8008342:	bb5c      	cbnz	r4, 800839c <_malloc_r+0x90>
 8008344:	4629      	mov	r1, r5
 8008346:	4638      	mov	r0, r7
 8008348:	f7ff ffc0 	bl	80082cc <sbrk_aligned>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	4604      	mov	r4, r0
 8008350:	d155      	bne.n	80083fe <_malloc_r+0xf2>
 8008352:	f8d8 4000 	ldr.w	r4, [r8]
 8008356:	4626      	mov	r6, r4
 8008358:	2e00      	cmp	r6, #0
 800835a:	d145      	bne.n	80083e8 <_malloc_r+0xdc>
 800835c:	2c00      	cmp	r4, #0
 800835e:	d048      	beq.n	80083f2 <_malloc_r+0xe6>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	4631      	mov	r1, r6
 8008364:	4638      	mov	r0, r7
 8008366:	eb04 0903 	add.w	r9, r4, r3
 800836a:	f000 fe93 	bl	8009094 <_sbrk_r>
 800836e:	4581      	cmp	r9, r0
 8008370:	d13f      	bne.n	80083f2 <_malloc_r+0xe6>
 8008372:	6821      	ldr	r1, [r4, #0]
 8008374:	1a6d      	subs	r5, r5, r1
 8008376:	4629      	mov	r1, r5
 8008378:	4638      	mov	r0, r7
 800837a:	f7ff ffa7 	bl	80082cc <sbrk_aligned>
 800837e:	3001      	adds	r0, #1
 8008380:	d037      	beq.n	80083f2 <_malloc_r+0xe6>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	442b      	add	r3, r5
 8008386:	6023      	str	r3, [r4, #0]
 8008388:	f8d8 3000 	ldr.w	r3, [r8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d038      	beq.n	8008402 <_malloc_r+0xf6>
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	42a2      	cmp	r2, r4
 8008394:	d12b      	bne.n	80083ee <_malloc_r+0xe2>
 8008396:	2200      	movs	r2, #0
 8008398:	605a      	str	r2, [r3, #4]
 800839a:	e00f      	b.n	80083bc <_malloc_r+0xb0>
 800839c:	6822      	ldr	r2, [r4, #0]
 800839e:	1b52      	subs	r2, r2, r5
 80083a0:	d41f      	bmi.n	80083e2 <_malloc_r+0xd6>
 80083a2:	2a0b      	cmp	r2, #11
 80083a4:	d917      	bls.n	80083d6 <_malloc_r+0xca>
 80083a6:	1961      	adds	r1, r4, r5
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	6025      	str	r5, [r4, #0]
 80083ac:	bf18      	it	ne
 80083ae:	6059      	strne	r1, [r3, #4]
 80083b0:	6863      	ldr	r3, [r4, #4]
 80083b2:	bf08      	it	eq
 80083b4:	f8c8 1000 	streq.w	r1, [r8]
 80083b8:	5162      	str	r2, [r4, r5]
 80083ba:	604b      	str	r3, [r1, #4]
 80083bc:	4638      	mov	r0, r7
 80083be:	f104 060b 	add.w	r6, r4, #11
 80083c2:	f000 f829 	bl	8008418 <__malloc_unlock>
 80083c6:	f026 0607 	bic.w	r6, r6, #7
 80083ca:	1d23      	adds	r3, r4, #4
 80083cc:	1af2      	subs	r2, r6, r3
 80083ce:	d0ae      	beq.n	800832e <_malloc_r+0x22>
 80083d0:	1b9b      	subs	r3, r3, r6
 80083d2:	50a3      	str	r3, [r4, r2]
 80083d4:	e7ab      	b.n	800832e <_malloc_r+0x22>
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	6862      	ldr	r2, [r4, #4]
 80083da:	d1dd      	bne.n	8008398 <_malloc_r+0x8c>
 80083dc:	f8c8 2000 	str.w	r2, [r8]
 80083e0:	e7ec      	b.n	80083bc <_malloc_r+0xb0>
 80083e2:	4623      	mov	r3, r4
 80083e4:	6864      	ldr	r4, [r4, #4]
 80083e6:	e7ac      	b.n	8008342 <_malloc_r+0x36>
 80083e8:	4634      	mov	r4, r6
 80083ea:	6876      	ldr	r6, [r6, #4]
 80083ec:	e7b4      	b.n	8008358 <_malloc_r+0x4c>
 80083ee:	4613      	mov	r3, r2
 80083f0:	e7cc      	b.n	800838c <_malloc_r+0x80>
 80083f2:	230c      	movs	r3, #12
 80083f4:	603b      	str	r3, [r7, #0]
 80083f6:	4638      	mov	r0, r7
 80083f8:	f000 f80e 	bl	8008418 <__malloc_unlock>
 80083fc:	e797      	b.n	800832e <_malloc_r+0x22>
 80083fe:	6025      	str	r5, [r4, #0]
 8008400:	e7dc      	b.n	80083bc <_malloc_r+0xb0>
 8008402:	605b      	str	r3, [r3, #4]
 8008404:	deff      	udf	#255	; 0xff
 8008406:	bf00      	nop
 8008408:	20000530 	.word	0x20000530

0800840c <__malloc_lock>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__malloc_lock+0x8>)
 800840e:	f7ff b88a 	b.w	8007526 <__retarget_lock_acquire_recursive>
 8008412:	bf00      	nop
 8008414:	2000052c 	.word	0x2000052c

08008418 <__malloc_unlock>:
 8008418:	4801      	ldr	r0, [pc, #4]	; (8008420 <__malloc_unlock+0x8>)
 800841a:	f7ff b885 	b.w	8007528 <__retarget_lock_release_recursive>
 800841e:	bf00      	nop
 8008420:	2000052c 	.word	0x2000052c

08008424 <_Balloc>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	69c6      	ldr	r6, [r0, #28]
 8008428:	4604      	mov	r4, r0
 800842a:	460d      	mov	r5, r1
 800842c:	b976      	cbnz	r6, 800844c <_Balloc+0x28>
 800842e:	2010      	movs	r0, #16
 8008430:	f7ff ff44 	bl	80082bc <malloc>
 8008434:	4602      	mov	r2, r0
 8008436:	61e0      	str	r0, [r4, #28]
 8008438:	b920      	cbnz	r0, 8008444 <_Balloc+0x20>
 800843a:	4b18      	ldr	r3, [pc, #96]	; (800849c <_Balloc+0x78>)
 800843c:	4818      	ldr	r0, [pc, #96]	; (80084a0 <_Balloc+0x7c>)
 800843e:	216b      	movs	r1, #107	; 0x6b
 8008440:	f000 fe46 	bl	80090d0 <__assert_func>
 8008444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008448:	6006      	str	r6, [r0, #0]
 800844a:	60c6      	str	r6, [r0, #12]
 800844c:	69e6      	ldr	r6, [r4, #28]
 800844e:	68f3      	ldr	r3, [r6, #12]
 8008450:	b183      	cbz	r3, 8008474 <_Balloc+0x50>
 8008452:	69e3      	ldr	r3, [r4, #28]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800845a:	b9b8      	cbnz	r0, 800848c <_Balloc+0x68>
 800845c:	2101      	movs	r1, #1
 800845e:	fa01 f605 	lsl.w	r6, r1, r5
 8008462:	1d72      	adds	r2, r6, #5
 8008464:	0092      	lsls	r2, r2, #2
 8008466:	4620      	mov	r0, r4
 8008468:	f000 fe50 	bl	800910c <_calloc_r>
 800846c:	b160      	cbz	r0, 8008488 <_Balloc+0x64>
 800846e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008472:	e00e      	b.n	8008492 <_Balloc+0x6e>
 8008474:	2221      	movs	r2, #33	; 0x21
 8008476:	2104      	movs	r1, #4
 8008478:	4620      	mov	r0, r4
 800847a:	f000 fe47 	bl	800910c <_calloc_r>
 800847e:	69e3      	ldr	r3, [r4, #28]
 8008480:	60f0      	str	r0, [r6, #12]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e4      	bne.n	8008452 <_Balloc+0x2e>
 8008488:	2000      	movs	r0, #0
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	6802      	ldr	r2, [r0, #0]
 800848e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008492:	2300      	movs	r3, #0
 8008494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008498:	e7f7      	b.n	800848a <_Balloc+0x66>
 800849a:	bf00      	nop
 800849c:	08009451 	.word	0x08009451
 80084a0:	080094d1 	.word	0x080094d1

080084a4 <_Bfree>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	69c6      	ldr	r6, [r0, #28]
 80084a8:	4605      	mov	r5, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	b976      	cbnz	r6, 80084cc <_Bfree+0x28>
 80084ae:	2010      	movs	r0, #16
 80084b0:	f7ff ff04 	bl	80082bc <malloc>
 80084b4:	4602      	mov	r2, r0
 80084b6:	61e8      	str	r0, [r5, #28]
 80084b8:	b920      	cbnz	r0, 80084c4 <_Bfree+0x20>
 80084ba:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <_Bfree+0x3c>)
 80084bc:	4809      	ldr	r0, [pc, #36]	; (80084e4 <_Bfree+0x40>)
 80084be:	218f      	movs	r1, #143	; 0x8f
 80084c0:	f000 fe06 	bl	80090d0 <__assert_func>
 80084c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084c8:	6006      	str	r6, [r0, #0]
 80084ca:	60c6      	str	r6, [r0, #12]
 80084cc:	b13c      	cbz	r4, 80084de <_Bfree+0x3a>
 80084ce:	69eb      	ldr	r3, [r5, #28]
 80084d0:	6862      	ldr	r2, [r4, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084d8:	6021      	str	r1, [r4, #0]
 80084da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	08009451 	.word	0x08009451
 80084e4:	080094d1 	.word	0x080094d1

080084e8 <__multadd>:
 80084e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ec:	690d      	ldr	r5, [r1, #16]
 80084ee:	4607      	mov	r7, r0
 80084f0:	460c      	mov	r4, r1
 80084f2:	461e      	mov	r6, r3
 80084f4:	f101 0c14 	add.w	ip, r1, #20
 80084f8:	2000      	movs	r0, #0
 80084fa:	f8dc 3000 	ldr.w	r3, [ip]
 80084fe:	b299      	uxth	r1, r3
 8008500:	fb02 6101 	mla	r1, r2, r1, r6
 8008504:	0c1e      	lsrs	r6, r3, #16
 8008506:	0c0b      	lsrs	r3, r1, #16
 8008508:	fb02 3306 	mla	r3, r2, r6, r3
 800850c:	b289      	uxth	r1, r1
 800850e:	3001      	adds	r0, #1
 8008510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008514:	4285      	cmp	r5, r0
 8008516:	f84c 1b04 	str.w	r1, [ip], #4
 800851a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800851e:	dcec      	bgt.n	80084fa <__multadd+0x12>
 8008520:	b30e      	cbz	r6, 8008566 <__multadd+0x7e>
 8008522:	68a3      	ldr	r3, [r4, #8]
 8008524:	42ab      	cmp	r3, r5
 8008526:	dc19      	bgt.n	800855c <__multadd+0x74>
 8008528:	6861      	ldr	r1, [r4, #4]
 800852a:	4638      	mov	r0, r7
 800852c:	3101      	adds	r1, #1
 800852e:	f7ff ff79 	bl	8008424 <_Balloc>
 8008532:	4680      	mov	r8, r0
 8008534:	b928      	cbnz	r0, 8008542 <__multadd+0x5a>
 8008536:	4602      	mov	r2, r0
 8008538:	4b0c      	ldr	r3, [pc, #48]	; (800856c <__multadd+0x84>)
 800853a:	480d      	ldr	r0, [pc, #52]	; (8008570 <__multadd+0x88>)
 800853c:	21ba      	movs	r1, #186	; 0xba
 800853e:	f000 fdc7 	bl	80090d0 <__assert_func>
 8008542:	6922      	ldr	r2, [r4, #16]
 8008544:	3202      	adds	r2, #2
 8008546:	f104 010c 	add.w	r1, r4, #12
 800854a:	0092      	lsls	r2, r2, #2
 800854c:	300c      	adds	r0, #12
 800854e:	f000 fdb1 	bl	80090b4 <memcpy>
 8008552:	4621      	mov	r1, r4
 8008554:	4638      	mov	r0, r7
 8008556:	f7ff ffa5 	bl	80084a4 <_Bfree>
 800855a:	4644      	mov	r4, r8
 800855c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008560:	3501      	adds	r5, #1
 8008562:	615e      	str	r6, [r3, #20]
 8008564:	6125      	str	r5, [r4, #16]
 8008566:	4620      	mov	r0, r4
 8008568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800856c:	080094c0 	.word	0x080094c0
 8008570:	080094d1 	.word	0x080094d1

08008574 <__hi0bits>:
 8008574:	0c03      	lsrs	r3, r0, #16
 8008576:	041b      	lsls	r3, r3, #16
 8008578:	b9d3      	cbnz	r3, 80085b0 <__hi0bits+0x3c>
 800857a:	0400      	lsls	r0, r0, #16
 800857c:	2310      	movs	r3, #16
 800857e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008582:	bf04      	itt	eq
 8008584:	0200      	lsleq	r0, r0, #8
 8008586:	3308      	addeq	r3, #8
 8008588:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800858c:	bf04      	itt	eq
 800858e:	0100      	lsleq	r0, r0, #4
 8008590:	3304      	addeq	r3, #4
 8008592:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008596:	bf04      	itt	eq
 8008598:	0080      	lsleq	r0, r0, #2
 800859a:	3302      	addeq	r3, #2
 800859c:	2800      	cmp	r0, #0
 800859e:	db05      	blt.n	80085ac <__hi0bits+0x38>
 80085a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085a4:	f103 0301 	add.w	r3, r3, #1
 80085a8:	bf08      	it	eq
 80085aa:	2320      	moveq	r3, #32
 80085ac:	4618      	mov	r0, r3
 80085ae:	4770      	bx	lr
 80085b0:	2300      	movs	r3, #0
 80085b2:	e7e4      	b.n	800857e <__hi0bits+0xa>

080085b4 <__lo0bits>:
 80085b4:	6803      	ldr	r3, [r0, #0]
 80085b6:	f013 0207 	ands.w	r2, r3, #7
 80085ba:	d00c      	beq.n	80085d6 <__lo0bits+0x22>
 80085bc:	07d9      	lsls	r1, r3, #31
 80085be:	d422      	bmi.n	8008606 <__lo0bits+0x52>
 80085c0:	079a      	lsls	r2, r3, #30
 80085c2:	bf49      	itett	mi
 80085c4:	085b      	lsrmi	r3, r3, #1
 80085c6:	089b      	lsrpl	r3, r3, #2
 80085c8:	6003      	strmi	r3, [r0, #0]
 80085ca:	2201      	movmi	r2, #1
 80085cc:	bf5c      	itt	pl
 80085ce:	6003      	strpl	r3, [r0, #0]
 80085d0:	2202      	movpl	r2, #2
 80085d2:	4610      	mov	r0, r2
 80085d4:	4770      	bx	lr
 80085d6:	b299      	uxth	r1, r3
 80085d8:	b909      	cbnz	r1, 80085de <__lo0bits+0x2a>
 80085da:	0c1b      	lsrs	r3, r3, #16
 80085dc:	2210      	movs	r2, #16
 80085de:	b2d9      	uxtb	r1, r3
 80085e0:	b909      	cbnz	r1, 80085e6 <__lo0bits+0x32>
 80085e2:	3208      	adds	r2, #8
 80085e4:	0a1b      	lsrs	r3, r3, #8
 80085e6:	0719      	lsls	r1, r3, #28
 80085e8:	bf04      	itt	eq
 80085ea:	091b      	lsreq	r3, r3, #4
 80085ec:	3204      	addeq	r2, #4
 80085ee:	0799      	lsls	r1, r3, #30
 80085f0:	bf04      	itt	eq
 80085f2:	089b      	lsreq	r3, r3, #2
 80085f4:	3202      	addeq	r2, #2
 80085f6:	07d9      	lsls	r1, r3, #31
 80085f8:	d403      	bmi.n	8008602 <__lo0bits+0x4e>
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	f102 0201 	add.w	r2, r2, #1
 8008600:	d003      	beq.n	800860a <__lo0bits+0x56>
 8008602:	6003      	str	r3, [r0, #0]
 8008604:	e7e5      	b.n	80085d2 <__lo0bits+0x1e>
 8008606:	2200      	movs	r2, #0
 8008608:	e7e3      	b.n	80085d2 <__lo0bits+0x1e>
 800860a:	2220      	movs	r2, #32
 800860c:	e7e1      	b.n	80085d2 <__lo0bits+0x1e>
	...

08008610 <__i2b>:
 8008610:	b510      	push	{r4, lr}
 8008612:	460c      	mov	r4, r1
 8008614:	2101      	movs	r1, #1
 8008616:	f7ff ff05 	bl	8008424 <_Balloc>
 800861a:	4602      	mov	r2, r0
 800861c:	b928      	cbnz	r0, 800862a <__i2b+0x1a>
 800861e:	4b05      	ldr	r3, [pc, #20]	; (8008634 <__i2b+0x24>)
 8008620:	4805      	ldr	r0, [pc, #20]	; (8008638 <__i2b+0x28>)
 8008622:	f240 1145 	movw	r1, #325	; 0x145
 8008626:	f000 fd53 	bl	80090d0 <__assert_func>
 800862a:	2301      	movs	r3, #1
 800862c:	6144      	str	r4, [r0, #20]
 800862e:	6103      	str	r3, [r0, #16]
 8008630:	bd10      	pop	{r4, pc}
 8008632:	bf00      	nop
 8008634:	080094c0 	.word	0x080094c0
 8008638:	080094d1 	.word	0x080094d1

0800863c <__multiply>:
 800863c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008640:	4691      	mov	r9, r2
 8008642:	690a      	ldr	r2, [r1, #16]
 8008644:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008648:	429a      	cmp	r2, r3
 800864a:	bfb8      	it	lt
 800864c:	460b      	movlt	r3, r1
 800864e:	460c      	mov	r4, r1
 8008650:	bfbc      	itt	lt
 8008652:	464c      	movlt	r4, r9
 8008654:	4699      	movlt	r9, r3
 8008656:	6927      	ldr	r7, [r4, #16]
 8008658:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800865c:	68a3      	ldr	r3, [r4, #8]
 800865e:	6861      	ldr	r1, [r4, #4]
 8008660:	eb07 060a 	add.w	r6, r7, sl
 8008664:	42b3      	cmp	r3, r6
 8008666:	b085      	sub	sp, #20
 8008668:	bfb8      	it	lt
 800866a:	3101      	addlt	r1, #1
 800866c:	f7ff feda 	bl	8008424 <_Balloc>
 8008670:	b930      	cbnz	r0, 8008680 <__multiply+0x44>
 8008672:	4602      	mov	r2, r0
 8008674:	4b44      	ldr	r3, [pc, #272]	; (8008788 <__multiply+0x14c>)
 8008676:	4845      	ldr	r0, [pc, #276]	; (800878c <__multiply+0x150>)
 8008678:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800867c:	f000 fd28 	bl	80090d0 <__assert_func>
 8008680:	f100 0514 	add.w	r5, r0, #20
 8008684:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008688:	462b      	mov	r3, r5
 800868a:	2200      	movs	r2, #0
 800868c:	4543      	cmp	r3, r8
 800868e:	d321      	bcc.n	80086d4 <__multiply+0x98>
 8008690:	f104 0314 	add.w	r3, r4, #20
 8008694:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008698:	f109 0314 	add.w	r3, r9, #20
 800869c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086a0:	9202      	str	r2, [sp, #8]
 80086a2:	1b3a      	subs	r2, r7, r4
 80086a4:	3a15      	subs	r2, #21
 80086a6:	f022 0203 	bic.w	r2, r2, #3
 80086aa:	3204      	adds	r2, #4
 80086ac:	f104 0115 	add.w	r1, r4, #21
 80086b0:	428f      	cmp	r7, r1
 80086b2:	bf38      	it	cc
 80086b4:	2204      	movcc	r2, #4
 80086b6:	9201      	str	r2, [sp, #4]
 80086b8:	9a02      	ldr	r2, [sp, #8]
 80086ba:	9303      	str	r3, [sp, #12]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d80c      	bhi.n	80086da <__multiply+0x9e>
 80086c0:	2e00      	cmp	r6, #0
 80086c2:	dd03      	ble.n	80086cc <__multiply+0x90>
 80086c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d05b      	beq.n	8008784 <__multiply+0x148>
 80086cc:	6106      	str	r6, [r0, #16]
 80086ce:	b005      	add	sp, #20
 80086d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d4:	f843 2b04 	str.w	r2, [r3], #4
 80086d8:	e7d8      	b.n	800868c <__multiply+0x50>
 80086da:	f8b3 a000 	ldrh.w	sl, [r3]
 80086de:	f1ba 0f00 	cmp.w	sl, #0
 80086e2:	d024      	beq.n	800872e <__multiply+0xf2>
 80086e4:	f104 0e14 	add.w	lr, r4, #20
 80086e8:	46a9      	mov	r9, r5
 80086ea:	f04f 0c00 	mov.w	ip, #0
 80086ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80086f2:	f8d9 1000 	ldr.w	r1, [r9]
 80086f6:	fa1f fb82 	uxth.w	fp, r2
 80086fa:	b289      	uxth	r1, r1
 80086fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8008700:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008704:	f8d9 2000 	ldr.w	r2, [r9]
 8008708:	4461      	add	r1, ip
 800870a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800870e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008712:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008716:	b289      	uxth	r1, r1
 8008718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800871c:	4577      	cmp	r7, lr
 800871e:	f849 1b04 	str.w	r1, [r9], #4
 8008722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008726:	d8e2      	bhi.n	80086ee <__multiply+0xb2>
 8008728:	9a01      	ldr	r2, [sp, #4]
 800872a:	f845 c002 	str.w	ip, [r5, r2]
 800872e:	9a03      	ldr	r2, [sp, #12]
 8008730:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008734:	3304      	adds	r3, #4
 8008736:	f1b9 0f00 	cmp.w	r9, #0
 800873a:	d021      	beq.n	8008780 <__multiply+0x144>
 800873c:	6829      	ldr	r1, [r5, #0]
 800873e:	f104 0c14 	add.w	ip, r4, #20
 8008742:	46ae      	mov	lr, r5
 8008744:	f04f 0a00 	mov.w	sl, #0
 8008748:	f8bc b000 	ldrh.w	fp, [ip]
 800874c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008750:	fb09 220b 	mla	r2, r9, fp, r2
 8008754:	4452      	add	r2, sl
 8008756:	b289      	uxth	r1, r1
 8008758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800875c:	f84e 1b04 	str.w	r1, [lr], #4
 8008760:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008764:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008768:	f8be 1000 	ldrh.w	r1, [lr]
 800876c:	fb09 110a 	mla	r1, r9, sl, r1
 8008770:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008774:	4567      	cmp	r7, ip
 8008776:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800877a:	d8e5      	bhi.n	8008748 <__multiply+0x10c>
 800877c:	9a01      	ldr	r2, [sp, #4]
 800877e:	50a9      	str	r1, [r5, r2]
 8008780:	3504      	adds	r5, #4
 8008782:	e799      	b.n	80086b8 <__multiply+0x7c>
 8008784:	3e01      	subs	r6, #1
 8008786:	e79b      	b.n	80086c0 <__multiply+0x84>
 8008788:	080094c0 	.word	0x080094c0
 800878c:	080094d1 	.word	0x080094d1

08008790 <__pow5mult>:
 8008790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008794:	4615      	mov	r5, r2
 8008796:	f012 0203 	ands.w	r2, r2, #3
 800879a:	4606      	mov	r6, r0
 800879c:	460f      	mov	r7, r1
 800879e:	d007      	beq.n	80087b0 <__pow5mult+0x20>
 80087a0:	4c25      	ldr	r4, [pc, #148]	; (8008838 <__pow5mult+0xa8>)
 80087a2:	3a01      	subs	r2, #1
 80087a4:	2300      	movs	r3, #0
 80087a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087aa:	f7ff fe9d 	bl	80084e8 <__multadd>
 80087ae:	4607      	mov	r7, r0
 80087b0:	10ad      	asrs	r5, r5, #2
 80087b2:	d03d      	beq.n	8008830 <__pow5mult+0xa0>
 80087b4:	69f4      	ldr	r4, [r6, #28]
 80087b6:	b97c      	cbnz	r4, 80087d8 <__pow5mult+0x48>
 80087b8:	2010      	movs	r0, #16
 80087ba:	f7ff fd7f 	bl	80082bc <malloc>
 80087be:	4602      	mov	r2, r0
 80087c0:	61f0      	str	r0, [r6, #28]
 80087c2:	b928      	cbnz	r0, 80087d0 <__pow5mult+0x40>
 80087c4:	4b1d      	ldr	r3, [pc, #116]	; (800883c <__pow5mult+0xac>)
 80087c6:	481e      	ldr	r0, [pc, #120]	; (8008840 <__pow5mult+0xb0>)
 80087c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80087cc:	f000 fc80 	bl	80090d0 <__assert_func>
 80087d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087d4:	6004      	str	r4, [r0, #0]
 80087d6:	60c4      	str	r4, [r0, #12]
 80087d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80087dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087e0:	b94c      	cbnz	r4, 80087f6 <__pow5mult+0x66>
 80087e2:	f240 2171 	movw	r1, #625	; 0x271
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7ff ff12 	bl	8008610 <__i2b>
 80087ec:	2300      	movs	r3, #0
 80087ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80087f2:	4604      	mov	r4, r0
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	f04f 0900 	mov.w	r9, #0
 80087fa:	07eb      	lsls	r3, r5, #31
 80087fc:	d50a      	bpl.n	8008814 <__pow5mult+0x84>
 80087fe:	4639      	mov	r1, r7
 8008800:	4622      	mov	r2, r4
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff ff1a 	bl	800863c <__multiply>
 8008808:	4639      	mov	r1, r7
 800880a:	4680      	mov	r8, r0
 800880c:	4630      	mov	r0, r6
 800880e:	f7ff fe49 	bl	80084a4 <_Bfree>
 8008812:	4647      	mov	r7, r8
 8008814:	106d      	asrs	r5, r5, #1
 8008816:	d00b      	beq.n	8008830 <__pow5mult+0xa0>
 8008818:	6820      	ldr	r0, [r4, #0]
 800881a:	b938      	cbnz	r0, 800882c <__pow5mult+0x9c>
 800881c:	4622      	mov	r2, r4
 800881e:	4621      	mov	r1, r4
 8008820:	4630      	mov	r0, r6
 8008822:	f7ff ff0b 	bl	800863c <__multiply>
 8008826:	6020      	str	r0, [r4, #0]
 8008828:	f8c0 9000 	str.w	r9, [r0]
 800882c:	4604      	mov	r4, r0
 800882e:	e7e4      	b.n	80087fa <__pow5mult+0x6a>
 8008830:	4638      	mov	r0, r7
 8008832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008836:	bf00      	nop
 8008838:	08009620 	.word	0x08009620
 800883c:	08009451 	.word	0x08009451
 8008840:	080094d1 	.word	0x080094d1

08008844 <__lshift>:
 8008844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	460c      	mov	r4, r1
 800884a:	6849      	ldr	r1, [r1, #4]
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008852:	68a3      	ldr	r3, [r4, #8]
 8008854:	4607      	mov	r7, r0
 8008856:	4691      	mov	r9, r2
 8008858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800885c:	f108 0601 	add.w	r6, r8, #1
 8008860:	42b3      	cmp	r3, r6
 8008862:	db0b      	blt.n	800887c <__lshift+0x38>
 8008864:	4638      	mov	r0, r7
 8008866:	f7ff fddd 	bl	8008424 <_Balloc>
 800886a:	4605      	mov	r5, r0
 800886c:	b948      	cbnz	r0, 8008882 <__lshift+0x3e>
 800886e:	4602      	mov	r2, r0
 8008870:	4b28      	ldr	r3, [pc, #160]	; (8008914 <__lshift+0xd0>)
 8008872:	4829      	ldr	r0, [pc, #164]	; (8008918 <__lshift+0xd4>)
 8008874:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008878:	f000 fc2a 	bl	80090d0 <__assert_func>
 800887c:	3101      	adds	r1, #1
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	e7ee      	b.n	8008860 <__lshift+0x1c>
 8008882:	2300      	movs	r3, #0
 8008884:	f100 0114 	add.w	r1, r0, #20
 8008888:	f100 0210 	add.w	r2, r0, #16
 800888c:	4618      	mov	r0, r3
 800888e:	4553      	cmp	r3, sl
 8008890:	db33      	blt.n	80088fa <__lshift+0xb6>
 8008892:	6920      	ldr	r0, [r4, #16]
 8008894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008898:	f104 0314 	add.w	r3, r4, #20
 800889c:	f019 091f 	ands.w	r9, r9, #31
 80088a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088a8:	d02b      	beq.n	8008902 <__lshift+0xbe>
 80088aa:	f1c9 0e20 	rsb	lr, r9, #32
 80088ae:	468a      	mov	sl, r1
 80088b0:	2200      	movs	r2, #0
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	fa00 f009 	lsl.w	r0, r0, r9
 80088b8:	4310      	orrs	r0, r2
 80088ba:	f84a 0b04 	str.w	r0, [sl], #4
 80088be:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c2:	459c      	cmp	ip, r3
 80088c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80088c8:	d8f3      	bhi.n	80088b2 <__lshift+0x6e>
 80088ca:	ebac 0304 	sub.w	r3, ip, r4
 80088ce:	3b15      	subs	r3, #21
 80088d0:	f023 0303 	bic.w	r3, r3, #3
 80088d4:	3304      	adds	r3, #4
 80088d6:	f104 0015 	add.w	r0, r4, #21
 80088da:	4584      	cmp	ip, r0
 80088dc:	bf38      	it	cc
 80088de:	2304      	movcc	r3, #4
 80088e0:	50ca      	str	r2, [r1, r3]
 80088e2:	b10a      	cbz	r2, 80088e8 <__lshift+0xa4>
 80088e4:	f108 0602 	add.w	r6, r8, #2
 80088e8:	3e01      	subs	r6, #1
 80088ea:	4638      	mov	r0, r7
 80088ec:	612e      	str	r6, [r5, #16]
 80088ee:	4621      	mov	r1, r4
 80088f0:	f7ff fdd8 	bl	80084a4 <_Bfree>
 80088f4:	4628      	mov	r0, r5
 80088f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80088fe:	3301      	adds	r3, #1
 8008900:	e7c5      	b.n	800888e <__lshift+0x4a>
 8008902:	3904      	subs	r1, #4
 8008904:	f853 2b04 	ldr.w	r2, [r3], #4
 8008908:	f841 2f04 	str.w	r2, [r1, #4]!
 800890c:	459c      	cmp	ip, r3
 800890e:	d8f9      	bhi.n	8008904 <__lshift+0xc0>
 8008910:	e7ea      	b.n	80088e8 <__lshift+0xa4>
 8008912:	bf00      	nop
 8008914:	080094c0 	.word	0x080094c0
 8008918:	080094d1 	.word	0x080094d1

0800891c <__mcmp>:
 800891c:	b530      	push	{r4, r5, lr}
 800891e:	6902      	ldr	r2, [r0, #16]
 8008920:	690c      	ldr	r4, [r1, #16]
 8008922:	1b12      	subs	r2, r2, r4
 8008924:	d10e      	bne.n	8008944 <__mcmp+0x28>
 8008926:	f100 0314 	add.w	r3, r0, #20
 800892a:	3114      	adds	r1, #20
 800892c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008930:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008934:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008938:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800893c:	42a5      	cmp	r5, r4
 800893e:	d003      	beq.n	8008948 <__mcmp+0x2c>
 8008940:	d305      	bcc.n	800894e <__mcmp+0x32>
 8008942:	2201      	movs	r2, #1
 8008944:	4610      	mov	r0, r2
 8008946:	bd30      	pop	{r4, r5, pc}
 8008948:	4283      	cmp	r3, r0
 800894a:	d3f3      	bcc.n	8008934 <__mcmp+0x18>
 800894c:	e7fa      	b.n	8008944 <__mcmp+0x28>
 800894e:	f04f 32ff 	mov.w	r2, #4294967295
 8008952:	e7f7      	b.n	8008944 <__mcmp+0x28>

08008954 <__mdiff>:
 8008954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008958:	460c      	mov	r4, r1
 800895a:	4606      	mov	r6, r0
 800895c:	4611      	mov	r1, r2
 800895e:	4620      	mov	r0, r4
 8008960:	4690      	mov	r8, r2
 8008962:	f7ff ffdb 	bl	800891c <__mcmp>
 8008966:	1e05      	subs	r5, r0, #0
 8008968:	d110      	bne.n	800898c <__mdiff+0x38>
 800896a:	4629      	mov	r1, r5
 800896c:	4630      	mov	r0, r6
 800896e:	f7ff fd59 	bl	8008424 <_Balloc>
 8008972:	b930      	cbnz	r0, 8008982 <__mdiff+0x2e>
 8008974:	4b3a      	ldr	r3, [pc, #232]	; (8008a60 <__mdiff+0x10c>)
 8008976:	4602      	mov	r2, r0
 8008978:	f240 2137 	movw	r1, #567	; 0x237
 800897c:	4839      	ldr	r0, [pc, #228]	; (8008a64 <__mdiff+0x110>)
 800897e:	f000 fba7 	bl	80090d0 <__assert_func>
 8008982:	2301      	movs	r3, #1
 8008984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898c:	bfa4      	itt	ge
 800898e:	4643      	movge	r3, r8
 8008990:	46a0      	movge	r8, r4
 8008992:	4630      	mov	r0, r6
 8008994:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008998:	bfa6      	itte	ge
 800899a:	461c      	movge	r4, r3
 800899c:	2500      	movge	r5, #0
 800899e:	2501      	movlt	r5, #1
 80089a0:	f7ff fd40 	bl	8008424 <_Balloc>
 80089a4:	b920      	cbnz	r0, 80089b0 <__mdiff+0x5c>
 80089a6:	4b2e      	ldr	r3, [pc, #184]	; (8008a60 <__mdiff+0x10c>)
 80089a8:	4602      	mov	r2, r0
 80089aa:	f240 2145 	movw	r1, #581	; 0x245
 80089ae:	e7e5      	b.n	800897c <__mdiff+0x28>
 80089b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089b4:	6926      	ldr	r6, [r4, #16]
 80089b6:	60c5      	str	r5, [r0, #12]
 80089b8:	f104 0914 	add.w	r9, r4, #20
 80089bc:	f108 0514 	add.w	r5, r8, #20
 80089c0:	f100 0e14 	add.w	lr, r0, #20
 80089c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80089c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089cc:	f108 0210 	add.w	r2, r8, #16
 80089d0:	46f2      	mov	sl, lr
 80089d2:	2100      	movs	r1, #0
 80089d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80089d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80089dc:	fa11 f88b 	uxtah	r8, r1, fp
 80089e0:	b299      	uxth	r1, r3
 80089e2:	0c1b      	lsrs	r3, r3, #16
 80089e4:	eba8 0801 	sub.w	r8, r8, r1
 80089e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80089f0:	fa1f f888 	uxth.w	r8, r8
 80089f4:	1419      	asrs	r1, r3, #16
 80089f6:	454e      	cmp	r6, r9
 80089f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80089fc:	f84a 3b04 	str.w	r3, [sl], #4
 8008a00:	d8e8      	bhi.n	80089d4 <__mdiff+0x80>
 8008a02:	1b33      	subs	r3, r6, r4
 8008a04:	3b15      	subs	r3, #21
 8008a06:	f023 0303 	bic.w	r3, r3, #3
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	3415      	adds	r4, #21
 8008a0e:	42a6      	cmp	r6, r4
 8008a10:	bf38      	it	cc
 8008a12:	2304      	movcc	r3, #4
 8008a14:	441d      	add	r5, r3
 8008a16:	4473      	add	r3, lr
 8008a18:	469e      	mov	lr, r3
 8008a1a:	462e      	mov	r6, r5
 8008a1c:	4566      	cmp	r6, ip
 8008a1e:	d30e      	bcc.n	8008a3e <__mdiff+0xea>
 8008a20:	f10c 0203 	add.w	r2, ip, #3
 8008a24:	1b52      	subs	r2, r2, r5
 8008a26:	f022 0203 	bic.w	r2, r2, #3
 8008a2a:	3d03      	subs	r5, #3
 8008a2c:	45ac      	cmp	ip, r5
 8008a2e:	bf38      	it	cc
 8008a30:	2200      	movcc	r2, #0
 8008a32:	4413      	add	r3, r2
 8008a34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008a38:	b17a      	cbz	r2, 8008a5a <__mdiff+0x106>
 8008a3a:	6107      	str	r7, [r0, #16]
 8008a3c:	e7a4      	b.n	8008988 <__mdiff+0x34>
 8008a3e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a42:	fa11 f288 	uxtah	r2, r1, r8
 8008a46:	1414      	asrs	r4, r2, #16
 8008a48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a4c:	b292      	uxth	r2, r2
 8008a4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a52:	f84e 2b04 	str.w	r2, [lr], #4
 8008a56:	1421      	asrs	r1, r4, #16
 8008a58:	e7e0      	b.n	8008a1c <__mdiff+0xc8>
 8008a5a:	3f01      	subs	r7, #1
 8008a5c:	e7ea      	b.n	8008a34 <__mdiff+0xe0>
 8008a5e:	bf00      	nop
 8008a60:	080094c0 	.word	0x080094c0
 8008a64:	080094d1 	.word	0x080094d1

08008a68 <__d2b>:
 8008a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a6c:	460f      	mov	r7, r1
 8008a6e:	2101      	movs	r1, #1
 8008a70:	ec59 8b10 	vmov	r8, r9, d0
 8008a74:	4616      	mov	r6, r2
 8008a76:	f7ff fcd5 	bl	8008424 <_Balloc>
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	b930      	cbnz	r0, 8008a8c <__d2b+0x24>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	4b24      	ldr	r3, [pc, #144]	; (8008b14 <__d2b+0xac>)
 8008a82:	4825      	ldr	r0, [pc, #148]	; (8008b18 <__d2b+0xb0>)
 8008a84:	f240 310f 	movw	r1, #783	; 0x30f
 8008a88:	f000 fb22 	bl	80090d0 <__assert_func>
 8008a8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a94:	bb2d      	cbnz	r5, 8008ae2 <__d2b+0x7a>
 8008a96:	9301      	str	r3, [sp, #4]
 8008a98:	f1b8 0300 	subs.w	r3, r8, #0
 8008a9c:	d026      	beq.n	8008aec <__d2b+0x84>
 8008a9e:	4668      	mov	r0, sp
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	f7ff fd87 	bl	80085b4 <__lo0bits>
 8008aa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008aaa:	b1e8      	cbz	r0, 8008ae8 <__d2b+0x80>
 8008aac:	f1c0 0320 	rsb	r3, r0, #32
 8008ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	40c2      	lsrs	r2, r0
 8008ab8:	6163      	str	r3, [r4, #20]
 8008aba:	9201      	str	r2, [sp, #4]
 8008abc:	9b01      	ldr	r3, [sp, #4]
 8008abe:	61a3      	str	r3, [r4, #24]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	bf14      	ite	ne
 8008ac4:	2202      	movne	r2, #2
 8008ac6:	2201      	moveq	r2, #1
 8008ac8:	6122      	str	r2, [r4, #16]
 8008aca:	b1bd      	cbz	r5, 8008afc <__d2b+0x94>
 8008acc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ad0:	4405      	add	r5, r0
 8008ad2:	603d      	str	r5, [r7, #0]
 8008ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ad8:	6030      	str	r0, [r6, #0]
 8008ada:	4620      	mov	r0, r4
 8008adc:	b003      	add	sp, #12
 8008ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ae6:	e7d6      	b.n	8008a96 <__d2b+0x2e>
 8008ae8:	6161      	str	r1, [r4, #20]
 8008aea:	e7e7      	b.n	8008abc <__d2b+0x54>
 8008aec:	a801      	add	r0, sp, #4
 8008aee:	f7ff fd61 	bl	80085b4 <__lo0bits>
 8008af2:	9b01      	ldr	r3, [sp, #4]
 8008af4:	6163      	str	r3, [r4, #20]
 8008af6:	3020      	adds	r0, #32
 8008af8:	2201      	movs	r2, #1
 8008afa:	e7e5      	b.n	8008ac8 <__d2b+0x60>
 8008afc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b04:	6038      	str	r0, [r7, #0]
 8008b06:	6918      	ldr	r0, [r3, #16]
 8008b08:	f7ff fd34 	bl	8008574 <__hi0bits>
 8008b0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b10:	e7e2      	b.n	8008ad8 <__d2b+0x70>
 8008b12:	bf00      	nop
 8008b14:	080094c0 	.word	0x080094c0
 8008b18:	080094d1 	.word	0x080094d1

08008b1c <__sfputc_r>:
 8008b1c:	6893      	ldr	r3, [r2, #8]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	b410      	push	{r4}
 8008b24:	6093      	str	r3, [r2, #8]
 8008b26:	da08      	bge.n	8008b3a <__sfputc_r+0x1e>
 8008b28:	6994      	ldr	r4, [r2, #24]
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	db01      	blt.n	8008b32 <__sfputc_r+0x16>
 8008b2e:	290a      	cmp	r1, #10
 8008b30:	d103      	bne.n	8008b3a <__sfputc_r+0x1e>
 8008b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b36:	f000 ba17 	b.w	8008f68 <__swbuf_r>
 8008b3a:	6813      	ldr	r3, [r2, #0]
 8008b3c:	1c58      	adds	r0, r3, #1
 8008b3e:	6010      	str	r0, [r2, #0]
 8008b40:	7019      	strb	r1, [r3, #0]
 8008b42:	4608      	mov	r0, r1
 8008b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <__sfputs_r>:
 8008b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460f      	mov	r7, r1
 8008b50:	4614      	mov	r4, r2
 8008b52:	18d5      	adds	r5, r2, r3
 8008b54:	42ac      	cmp	r4, r5
 8008b56:	d101      	bne.n	8008b5c <__sfputs_r+0x12>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	e007      	b.n	8008b6c <__sfputs_r+0x22>
 8008b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b60:	463a      	mov	r2, r7
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7ff ffda 	bl	8008b1c <__sfputc_r>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	d1f3      	bne.n	8008b54 <__sfputs_r+0xa>
 8008b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b70 <_vfiprintf_r>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	460d      	mov	r5, r1
 8008b76:	b09d      	sub	sp, #116	; 0x74
 8008b78:	4614      	mov	r4, r2
 8008b7a:	4698      	mov	r8, r3
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	b118      	cbz	r0, 8008b88 <_vfiprintf_r+0x18>
 8008b80:	6a03      	ldr	r3, [r0, #32]
 8008b82:	b90b      	cbnz	r3, 8008b88 <_vfiprintf_r+0x18>
 8008b84:	f7fe fbbe 	bl	8007304 <__sinit>
 8008b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b8a:	07d9      	lsls	r1, r3, #31
 8008b8c:	d405      	bmi.n	8008b9a <_vfiprintf_r+0x2a>
 8008b8e:	89ab      	ldrh	r3, [r5, #12]
 8008b90:	059a      	lsls	r2, r3, #22
 8008b92:	d402      	bmi.n	8008b9a <_vfiprintf_r+0x2a>
 8008b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b96:	f7fe fcc6 	bl	8007526 <__retarget_lock_acquire_recursive>
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	071b      	lsls	r3, r3, #28
 8008b9e:	d501      	bpl.n	8008ba4 <_vfiprintf_r+0x34>
 8008ba0:	692b      	ldr	r3, [r5, #16]
 8008ba2:	b99b      	cbnz	r3, 8008bcc <_vfiprintf_r+0x5c>
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f000 fa1c 	bl	8008fe4 <__swsetup_r>
 8008bac:	b170      	cbz	r0, 8008bcc <_vfiprintf_r+0x5c>
 8008bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bb0:	07dc      	lsls	r4, r3, #31
 8008bb2:	d504      	bpl.n	8008bbe <_vfiprintf_r+0x4e>
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	b01d      	add	sp, #116	; 0x74
 8008bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbe:	89ab      	ldrh	r3, [r5, #12]
 8008bc0:	0598      	lsls	r0, r3, #22
 8008bc2:	d4f7      	bmi.n	8008bb4 <_vfiprintf_r+0x44>
 8008bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bc6:	f7fe fcaf 	bl	8007528 <__retarget_lock_release_recursive>
 8008bca:	e7f3      	b.n	8008bb4 <_vfiprintf_r+0x44>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd0:	2320      	movs	r3, #32
 8008bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bda:	2330      	movs	r3, #48	; 0x30
 8008bdc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008d90 <_vfiprintf_r+0x220>
 8008be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008be4:	f04f 0901 	mov.w	r9, #1
 8008be8:	4623      	mov	r3, r4
 8008bea:	469a      	mov	sl, r3
 8008bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bf0:	b10a      	cbz	r2, 8008bf6 <_vfiprintf_r+0x86>
 8008bf2:	2a25      	cmp	r2, #37	; 0x25
 8008bf4:	d1f9      	bne.n	8008bea <_vfiprintf_r+0x7a>
 8008bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8008bfa:	d00b      	beq.n	8008c14 <_vfiprintf_r+0xa4>
 8008bfc:	465b      	mov	r3, fp
 8008bfe:	4622      	mov	r2, r4
 8008c00:	4629      	mov	r1, r5
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7ff ffa1 	bl	8008b4a <__sfputs_r>
 8008c08:	3001      	adds	r0, #1
 8008c0a:	f000 80a9 	beq.w	8008d60 <_vfiprintf_r+0x1f0>
 8008c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c10:	445a      	add	r2, fp
 8008c12:	9209      	str	r2, [sp, #36]	; 0x24
 8008c14:	f89a 3000 	ldrb.w	r3, [sl]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 80a1 	beq.w	8008d60 <_vfiprintf_r+0x1f0>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f04f 32ff 	mov.w	r2, #4294967295
 8008c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c28:	f10a 0a01 	add.w	sl, sl, #1
 8008c2c:	9304      	str	r3, [sp, #16]
 8008c2e:	9307      	str	r3, [sp, #28]
 8008c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c34:	931a      	str	r3, [sp, #104]	; 0x68
 8008c36:	4654      	mov	r4, sl
 8008c38:	2205      	movs	r2, #5
 8008c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3e:	4854      	ldr	r0, [pc, #336]	; (8008d90 <_vfiprintf_r+0x220>)
 8008c40:	f7f7 fade 	bl	8000200 <memchr>
 8008c44:	9a04      	ldr	r2, [sp, #16]
 8008c46:	b9d8      	cbnz	r0, 8008c80 <_vfiprintf_r+0x110>
 8008c48:	06d1      	lsls	r1, r2, #27
 8008c4a:	bf44      	itt	mi
 8008c4c:	2320      	movmi	r3, #32
 8008c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c52:	0713      	lsls	r3, r2, #28
 8008c54:	bf44      	itt	mi
 8008c56:	232b      	movmi	r3, #43	; 0x2b
 8008c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c60:	2b2a      	cmp	r3, #42	; 0x2a
 8008c62:	d015      	beq.n	8008c90 <_vfiprintf_r+0x120>
 8008c64:	9a07      	ldr	r2, [sp, #28]
 8008c66:	4654      	mov	r4, sl
 8008c68:	2000      	movs	r0, #0
 8008c6a:	f04f 0c0a 	mov.w	ip, #10
 8008c6e:	4621      	mov	r1, r4
 8008c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c74:	3b30      	subs	r3, #48	; 0x30
 8008c76:	2b09      	cmp	r3, #9
 8008c78:	d94d      	bls.n	8008d16 <_vfiprintf_r+0x1a6>
 8008c7a:	b1b0      	cbz	r0, 8008caa <_vfiprintf_r+0x13a>
 8008c7c:	9207      	str	r2, [sp, #28]
 8008c7e:	e014      	b.n	8008caa <_vfiprintf_r+0x13a>
 8008c80:	eba0 0308 	sub.w	r3, r0, r8
 8008c84:	fa09 f303 	lsl.w	r3, r9, r3
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	46a2      	mov	sl, r4
 8008c8e:	e7d2      	b.n	8008c36 <_vfiprintf_r+0xc6>
 8008c90:	9b03      	ldr	r3, [sp, #12]
 8008c92:	1d19      	adds	r1, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	9103      	str	r1, [sp, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bfbb      	ittet	lt
 8008c9c:	425b      	neglt	r3, r3
 8008c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8008ca2:	9307      	strge	r3, [sp, #28]
 8008ca4:	9307      	strlt	r3, [sp, #28]
 8008ca6:	bfb8      	it	lt
 8008ca8:	9204      	strlt	r2, [sp, #16]
 8008caa:	7823      	ldrb	r3, [r4, #0]
 8008cac:	2b2e      	cmp	r3, #46	; 0x2e
 8008cae:	d10c      	bne.n	8008cca <_vfiprintf_r+0x15a>
 8008cb0:	7863      	ldrb	r3, [r4, #1]
 8008cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb4:	d134      	bne.n	8008d20 <_vfiprintf_r+0x1b0>
 8008cb6:	9b03      	ldr	r3, [sp, #12]
 8008cb8:	1d1a      	adds	r2, r3, #4
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	9203      	str	r2, [sp, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfb8      	it	lt
 8008cc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cc6:	3402      	adds	r4, #2
 8008cc8:	9305      	str	r3, [sp, #20]
 8008cca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008da0 <_vfiprintf_r+0x230>
 8008cce:	7821      	ldrb	r1, [r4, #0]
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	4650      	mov	r0, sl
 8008cd4:	f7f7 fa94 	bl	8000200 <memchr>
 8008cd8:	b138      	cbz	r0, 8008cea <_vfiprintf_r+0x17a>
 8008cda:	9b04      	ldr	r3, [sp, #16]
 8008cdc:	eba0 000a 	sub.w	r0, r0, sl
 8008ce0:	2240      	movs	r2, #64	; 0x40
 8008ce2:	4082      	lsls	r2, r0
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	3401      	adds	r4, #1
 8008ce8:	9304      	str	r3, [sp, #16]
 8008cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cee:	4829      	ldr	r0, [pc, #164]	; (8008d94 <_vfiprintf_r+0x224>)
 8008cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cf4:	2206      	movs	r2, #6
 8008cf6:	f7f7 fa83 	bl	8000200 <memchr>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d03f      	beq.n	8008d7e <_vfiprintf_r+0x20e>
 8008cfe:	4b26      	ldr	r3, [pc, #152]	; (8008d98 <_vfiprintf_r+0x228>)
 8008d00:	bb1b      	cbnz	r3, 8008d4a <_vfiprintf_r+0x1da>
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	3307      	adds	r3, #7
 8008d06:	f023 0307 	bic.w	r3, r3, #7
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	9303      	str	r3, [sp, #12]
 8008d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d10:	443b      	add	r3, r7
 8008d12:	9309      	str	r3, [sp, #36]	; 0x24
 8008d14:	e768      	b.n	8008be8 <_vfiprintf_r+0x78>
 8008d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	2001      	movs	r0, #1
 8008d1e:	e7a6      	b.n	8008c6e <_vfiprintf_r+0xfe>
 8008d20:	2300      	movs	r3, #0
 8008d22:	3401      	adds	r4, #1
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	4619      	mov	r1, r3
 8008d28:	f04f 0c0a 	mov.w	ip, #10
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d32:	3a30      	subs	r2, #48	; 0x30
 8008d34:	2a09      	cmp	r2, #9
 8008d36:	d903      	bls.n	8008d40 <_vfiprintf_r+0x1d0>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0c6      	beq.n	8008cca <_vfiprintf_r+0x15a>
 8008d3c:	9105      	str	r1, [sp, #20]
 8008d3e:	e7c4      	b.n	8008cca <_vfiprintf_r+0x15a>
 8008d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d44:	4604      	mov	r4, r0
 8008d46:	2301      	movs	r3, #1
 8008d48:	e7f0      	b.n	8008d2c <_vfiprintf_r+0x1bc>
 8008d4a:	ab03      	add	r3, sp, #12
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	462a      	mov	r2, r5
 8008d50:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <_vfiprintf_r+0x22c>)
 8008d52:	a904      	add	r1, sp, #16
 8008d54:	4630      	mov	r0, r6
 8008d56:	f7fd fe83 	bl	8006a60 <_printf_float>
 8008d5a:	4607      	mov	r7, r0
 8008d5c:	1c78      	adds	r0, r7, #1
 8008d5e:	d1d6      	bne.n	8008d0e <_vfiprintf_r+0x19e>
 8008d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d62:	07d9      	lsls	r1, r3, #31
 8008d64:	d405      	bmi.n	8008d72 <_vfiprintf_r+0x202>
 8008d66:	89ab      	ldrh	r3, [r5, #12]
 8008d68:	059a      	lsls	r2, r3, #22
 8008d6a:	d402      	bmi.n	8008d72 <_vfiprintf_r+0x202>
 8008d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d6e:	f7fe fbdb 	bl	8007528 <__retarget_lock_release_recursive>
 8008d72:	89ab      	ldrh	r3, [r5, #12]
 8008d74:	065b      	lsls	r3, r3, #25
 8008d76:	f53f af1d 	bmi.w	8008bb4 <_vfiprintf_r+0x44>
 8008d7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d7c:	e71c      	b.n	8008bb8 <_vfiprintf_r+0x48>
 8008d7e:	ab03      	add	r3, sp, #12
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	462a      	mov	r2, r5
 8008d84:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <_vfiprintf_r+0x22c>)
 8008d86:	a904      	add	r1, sp, #16
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f7fe f90d 	bl	8006fa8 <_printf_i>
 8008d8e:	e7e4      	b.n	8008d5a <_vfiprintf_r+0x1ea>
 8008d90:	0800962c 	.word	0x0800962c
 8008d94:	08009636 	.word	0x08009636
 8008d98:	08006a61 	.word	0x08006a61
 8008d9c:	08008b4b 	.word	0x08008b4b
 8008da0:	08009632 	.word	0x08009632

08008da4 <__sflush_r>:
 8008da4:	898a      	ldrh	r2, [r1, #12]
 8008da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008daa:	4605      	mov	r5, r0
 8008dac:	0710      	lsls	r0, r2, #28
 8008dae:	460c      	mov	r4, r1
 8008db0:	d458      	bmi.n	8008e64 <__sflush_r+0xc0>
 8008db2:	684b      	ldr	r3, [r1, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dc05      	bgt.n	8008dc4 <__sflush_r+0x20>
 8008db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dc02      	bgt.n	8008dc4 <__sflush_r+0x20>
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	d0f9      	beq.n	8008dbe <__sflush_r+0x1a>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008dd0:	682f      	ldr	r7, [r5, #0]
 8008dd2:	6a21      	ldr	r1, [r4, #32]
 8008dd4:	602b      	str	r3, [r5, #0]
 8008dd6:	d032      	beq.n	8008e3e <__sflush_r+0x9a>
 8008dd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	075a      	lsls	r2, r3, #29
 8008dde:	d505      	bpl.n	8008dec <__sflush_r+0x48>
 8008de0:	6863      	ldr	r3, [r4, #4]
 8008de2:	1ac0      	subs	r0, r0, r3
 8008de4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008de6:	b10b      	cbz	r3, 8008dec <__sflush_r+0x48>
 8008de8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dea:	1ac0      	subs	r0, r0, r3
 8008dec:	2300      	movs	r3, #0
 8008dee:	4602      	mov	r2, r0
 8008df0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008df2:	6a21      	ldr	r1, [r4, #32]
 8008df4:	4628      	mov	r0, r5
 8008df6:	47b0      	blx	r6
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	d106      	bne.n	8008e0c <__sflush_r+0x68>
 8008dfe:	6829      	ldr	r1, [r5, #0]
 8008e00:	291d      	cmp	r1, #29
 8008e02:	d82b      	bhi.n	8008e5c <__sflush_r+0xb8>
 8008e04:	4a29      	ldr	r2, [pc, #164]	; (8008eac <__sflush_r+0x108>)
 8008e06:	410a      	asrs	r2, r1
 8008e08:	07d6      	lsls	r6, r2, #31
 8008e0a:	d427      	bmi.n	8008e5c <__sflush_r+0xb8>
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	6062      	str	r2, [r4, #4]
 8008e10:	04d9      	lsls	r1, r3, #19
 8008e12:	6922      	ldr	r2, [r4, #16]
 8008e14:	6022      	str	r2, [r4, #0]
 8008e16:	d504      	bpl.n	8008e22 <__sflush_r+0x7e>
 8008e18:	1c42      	adds	r2, r0, #1
 8008e1a:	d101      	bne.n	8008e20 <__sflush_r+0x7c>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b903      	cbnz	r3, 8008e22 <__sflush_r+0x7e>
 8008e20:	6560      	str	r0, [r4, #84]	; 0x54
 8008e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e24:	602f      	str	r7, [r5, #0]
 8008e26:	2900      	cmp	r1, #0
 8008e28:	d0c9      	beq.n	8008dbe <__sflush_r+0x1a>
 8008e2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e2e:	4299      	cmp	r1, r3
 8008e30:	d002      	beq.n	8008e38 <__sflush_r+0x94>
 8008e32:	4628      	mov	r0, r5
 8008e34:	f7ff f9f6 	bl	8008224 <_free_r>
 8008e38:	2000      	movs	r0, #0
 8008e3a:	6360      	str	r0, [r4, #52]	; 0x34
 8008e3c:	e7c0      	b.n	8008dc0 <__sflush_r+0x1c>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4628      	mov	r0, r5
 8008e42:	47b0      	blx	r6
 8008e44:	1c41      	adds	r1, r0, #1
 8008e46:	d1c8      	bne.n	8008dda <__sflush_r+0x36>
 8008e48:	682b      	ldr	r3, [r5, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0c5      	beq.n	8008dda <__sflush_r+0x36>
 8008e4e:	2b1d      	cmp	r3, #29
 8008e50:	d001      	beq.n	8008e56 <__sflush_r+0xb2>
 8008e52:	2b16      	cmp	r3, #22
 8008e54:	d101      	bne.n	8008e5a <__sflush_r+0xb6>
 8008e56:	602f      	str	r7, [r5, #0]
 8008e58:	e7b1      	b.n	8008dbe <__sflush_r+0x1a>
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e60:	81a3      	strh	r3, [r4, #12]
 8008e62:	e7ad      	b.n	8008dc0 <__sflush_r+0x1c>
 8008e64:	690f      	ldr	r7, [r1, #16]
 8008e66:	2f00      	cmp	r7, #0
 8008e68:	d0a9      	beq.n	8008dbe <__sflush_r+0x1a>
 8008e6a:	0793      	lsls	r3, r2, #30
 8008e6c:	680e      	ldr	r6, [r1, #0]
 8008e6e:	bf08      	it	eq
 8008e70:	694b      	ldreq	r3, [r1, #20]
 8008e72:	600f      	str	r7, [r1, #0]
 8008e74:	bf18      	it	ne
 8008e76:	2300      	movne	r3, #0
 8008e78:	eba6 0807 	sub.w	r8, r6, r7
 8008e7c:	608b      	str	r3, [r1, #8]
 8008e7e:	f1b8 0f00 	cmp.w	r8, #0
 8008e82:	dd9c      	ble.n	8008dbe <__sflush_r+0x1a>
 8008e84:	6a21      	ldr	r1, [r4, #32]
 8008e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e88:	4643      	mov	r3, r8
 8008e8a:	463a      	mov	r2, r7
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b0      	blx	r6
 8008e90:	2800      	cmp	r0, #0
 8008e92:	dc06      	bgt.n	8008ea2 <__sflush_r+0xfe>
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	e78e      	b.n	8008dc0 <__sflush_r+0x1c>
 8008ea2:	4407      	add	r7, r0
 8008ea4:	eba8 0800 	sub.w	r8, r8, r0
 8008ea8:	e7e9      	b.n	8008e7e <__sflush_r+0xda>
 8008eaa:	bf00      	nop
 8008eac:	dfbffffe 	.word	0xdfbffffe

08008eb0 <_fflush_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	690b      	ldr	r3, [r1, #16]
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	b913      	cbnz	r3, 8008ec0 <_fflush_r+0x10>
 8008eba:	2500      	movs	r5, #0
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	b118      	cbz	r0, 8008eca <_fflush_r+0x1a>
 8008ec2:	6a03      	ldr	r3, [r0, #32]
 8008ec4:	b90b      	cbnz	r3, 8008eca <_fflush_r+0x1a>
 8008ec6:	f7fe fa1d 	bl	8007304 <__sinit>
 8008eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0f3      	beq.n	8008eba <_fflush_r+0xa>
 8008ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ed4:	07d0      	lsls	r0, r2, #31
 8008ed6:	d404      	bmi.n	8008ee2 <_fflush_r+0x32>
 8008ed8:	0599      	lsls	r1, r3, #22
 8008eda:	d402      	bmi.n	8008ee2 <_fflush_r+0x32>
 8008edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ede:	f7fe fb22 	bl	8007526 <__retarget_lock_acquire_recursive>
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7ff ff5d 	bl	8008da4 <__sflush_r>
 8008eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eec:	07da      	lsls	r2, r3, #31
 8008eee:	4605      	mov	r5, r0
 8008ef0:	d4e4      	bmi.n	8008ebc <_fflush_r+0xc>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	059b      	lsls	r3, r3, #22
 8008ef6:	d4e1      	bmi.n	8008ebc <_fflush_r+0xc>
 8008ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008efa:	f7fe fb15 	bl	8007528 <__retarget_lock_release_recursive>
 8008efe:	e7dd      	b.n	8008ebc <_fflush_r+0xc>

08008f00 <_putc_r>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	460d      	mov	r5, r1
 8008f04:	4614      	mov	r4, r2
 8008f06:	4606      	mov	r6, r0
 8008f08:	b118      	cbz	r0, 8008f12 <_putc_r+0x12>
 8008f0a:	6a03      	ldr	r3, [r0, #32]
 8008f0c:	b90b      	cbnz	r3, 8008f12 <_putc_r+0x12>
 8008f0e:	f7fe f9f9 	bl	8007304 <__sinit>
 8008f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f14:	07d8      	lsls	r0, r3, #31
 8008f16:	d405      	bmi.n	8008f24 <_putc_r+0x24>
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	0599      	lsls	r1, r3, #22
 8008f1c:	d402      	bmi.n	8008f24 <_putc_r+0x24>
 8008f1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f20:	f7fe fb01 	bl	8007526 <__retarget_lock_acquire_recursive>
 8008f24:	68a3      	ldr	r3, [r4, #8]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	60a3      	str	r3, [r4, #8]
 8008f2c:	da05      	bge.n	8008f3a <_putc_r+0x3a>
 8008f2e:	69a2      	ldr	r2, [r4, #24]
 8008f30:	4293      	cmp	r3, r2
 8008f32:	db12      	blt.n	8008f5a <_putc_r+0x5a>
 8008f34:	b2eb      	uxtb	r3, r5
 8008f36:	2b0a      	cmp	r3, #10
 8008f38:	d00f      	beq.n	8008f5a <_putc_r+0x5a>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	6022      	str	r2, [r4, #0]
 8008f40:	701d      	strb	r5, [r3, #0]
 8008f42:	b2ed      	uxtb	r5, r5
 8008f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f46:	07da      	lsls	r2, r3, #31
 8008f48:	d405      	bmi.n	8008f56 <_putc_r+0x56>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	059b      	lsls	r3, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_putc_r+0x56>
 8008f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f52:	f7fe fae9 	bl	8007528 <__retarget_lock_release_recursive>
 8008f56:	4628      	mov	r0, r5
 8008f58:	bd70      	pop	{r4, r5, r6, pc}
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f000 f802 	bl	8008f68 <__swbuf_r>
 8008f64:	4605      	mov	r5, r0
 8008f66:	e7ed      	b.n	8008f44 <_putc_r+0x44>

08008f68 <__swbuf_r>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	460e      	mov	r6, r1
 8008f6c:	4614      	mov	r4, r2
 8008f6e:	4605      	mov	r5, r0
 8008f70:	b118      	cbz	r0, 8008f7a <__swbuf_r+0x12>
 8008f72:	6a03      	ldr	r3, [r0, #32]
 8008f74:	b90b      	cbnz	r3, 8008f7a <__swbuf_r+0x12>
 8008f76:	f7fe f9c5 	bl	8007304 <__sinit>
 8008f7a:	69a3      	ldr	r3, [r4, #24]
 8008f7c:	60a3      	str	r3, [r4, #8]
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	071a      	lsls	r2, r3, #28
 8008f82:	d525      	bpl.n	8008fd0 <__swbuf_r+0x68>
 8008f84:	6923      	ldr	r3, [r4, #16]
 8008f86:	b31b      	cbz	r3, 8008fd0 <__swbuf_r+0x68>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	6922      	ldr	r2, [r4, #16]
 8008f8c:	1a98      	subs	r0, r3, r2
 8008f8e:	6963      	ldr	r3, [r4, #20]
 8008f90:	b2f6      	uxtb	r6, r6
 8008f92:	4283      	cmp	r3, r0
 8008f94:	4637      	mov	r7, r6
 8008f96:	dc04      	bgt.n	8008fa2 <__swbuf_r+0x3a>
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f7ff ff88 	bl	8008eb0 <_fflush_r>
 8008fa0:	b9e0      	cbnz	r0, 8008fdc <__swbuf_r+0x74>
 8008fa2:	68a3      	ldr	r3, [r4, #8]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	60a3      	str	r3, [r4, #8]
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	701e      	strb	r6, [r3, #0]
 8008fb0:	6962      	ldr	r2, [r4, #20]
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d004      	beq.n	8008fc2 <__swbuf_r+0x5a>
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	07db      	lsls	r3, r3, #31
 8008fbc:	d506      	bpl.n	8008fcc <__swbuf_r+0x64>
 8008fbe:	2e0a      	cmp	r6, #10
 8008fc0:	d104      	bne.n	8008fcc <__swbuf_r+0x64>
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f7ff ff73 	bl	8008eb0 <_fflush_r>
 8008fca:	b938      	cbnz	r0, 8008fdc <__swbuf_r+0x74>
 8008fcc:	4638      	mov	r0, r7
 8008fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f000 f806 	bl	8008fe4 <__swsetup_r>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d0d5      	beq.n	8008f88 <__swbuf_r+0x20>
 8008fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8008fe0:	e7f4      	b.n	8008fcc <__swbuf_r+0x64>
	...

08008fe4 <__swsetup_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4b2a      	ldr	r3, [pc, #168]	; (8009090 <__swsetup_r+0xac>)
 8008fe8:	4605      	mov	r5, r0
 8008fea:	6818      	ldr	r0, [r3, #0]
 8008fec:	460c      	mov	r4, r1
 8008fee:	b118      	cbz	r0, 8008ff8 <__swsetup_r+0x14>
 8008ff0:	6a03      	ldr	r3, [r0, #32]
 8008ff2:	b90b      	cbnz	r3, 8008ff8 <__swsetup_r+0x14>
 8008ff4:	f7fe f986 	bl	8007304 <__sinit>
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ffe:	0718      	lsls	r0, r3, #28
 8009000:	d422      	bmi.n	8009048 <__swsetup_r+0x64>
 8009002:	06d9      	lsls	r1, r3, #27
 8009004:	d407      	bmi.n	8009016 <__swsetup_r+0x32>
 8009006:	2309      	movs	r3, #9
 8009008:	602b      	str	r3, [r5, #0]
 800900a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	e034      	b.n	8009080 <__swsetup_r+0x9c>
 8009016:	0758      	lsls	r0, r3, #29
 8009018:	d512      	bpl.n	8009040 <__swsetup_r+0x5c>
 800901a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800901c:	b141      	cbz	r1, 8009030 <__swsetup_r+0x4c>
 800901e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009022:	4299      	cmp	r1, r3
 8009024:	d002      	beq.n	800902c <__swsetup_r+0x48>
 8009026:	4628      	mov	r0, r5
 8009028:	f7ff f8fc 	bl	8008224 <_free_r>
 800902c:	2300      	movs	r3, #0
 800902e:	6363      	str	r3, [r4, #52]	; 0x34
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	2300      	movs	r3, #0
 800903a:	6063      	str	r3, [r4, #4]
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f043 0308 	orr.w	r3, r3, #8
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	b94b      	cbnz	r3, 8009060 <__swsetup_r+0x7c>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009056:	d003      	beq.n	8009060 <__swsetup_r+0x7c>
 8009058:	4621      	mov	r1, r4
 800905a:	4628      	mov	r0, r5
 800905c:	f000 f8c4 	bl	80091e8 <__smakebuf_r>
 8009060:	89a0      	ldrh	r0, [r4, #12]
 8009062:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009066:	f010 0301 	ands.w	r3, r0, #1
 800906a:	d00a      	beq.n	8009082 <__swsetup_r+0x9e>
 800906c:	2300      	movs	r3, #0
 800906e:	60a3      	str	r3, [r4, #8]
 8009070:	6963      	ldr	r3, [r4, #20]
 8009072:	425b      	negs	r3, r3
 8009074:	61a3      	str	r3, [r4, #24]
 8009076:	6923      	ldr	r3, [r4, #16]
 8009078:	b943      	cbnz	r3, 800908c <__swsetup_r+0xa8>
 800907a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800907e:	d1c4      	bne.n	800900a <__swsetup_r+0x26>
 8009080:	bd38      	pop	{r3, r4, r5, pc}
 8009082:	0781      	lsls	r1, r0, #30
 8009084:	bf58      	it	pl
 8009086:	6963      	ldrpl	r3, [r4, #20]
 8009088:	60a3      	str	r3, [r4, #8]
 800908a:	e7f4      	b.n	8009076 <__swsetup_r+0x92>
 800908c:	2000      	movs	r0, #0
 800908e:	e7f7      	b.n	8009080 <__swsetup_r+0x9c>
 8009090:	20000064 	.word	0x20000064

08009094 <_sbrk_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d06      	ldr	r5, [pc, #24]	; (80090b0 <_sbrk_r+0x1c>)
 8009098:	2300      	movs	r3, #0
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	f7f8 fda0 	bl	8001be4 <_sbrk>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_sbrk_r+0x1a>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_sbrk_r+0x1a>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	20000528 	.word	0x20000528

080090b4 <memcpy>:
 80090b4:	440a      	add	r2, r1
 80090b6:	4291      	cmp	r1, r2
 80090b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090bc:	d100      	bne.n	80090c0 <memcpy+0xc>
 80090be:	4770      	bx	lr
 80090c0:	b510      	push	{r4, lr}
 80090c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090ca:	4291      	cmp	r1, r2
 80090cc:	d1f9      	bne.n	80090c2 <memcpy+0xe>
 80090ce:	bd10      	pop	{r4, pc}

080090d0 <__assert_func>:
 80090d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090d2:	4614      	mov	r4, r2
 80090d4:	461a      	mov	r2, r3
 80090d6:	4b09      	ldr	r3, [pc, #36]	; (80090fc <__assert_func+0x2c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4605      	mov	r5, r0
 80090dc:	68d8      	ldr	r0, [r3, #12]
 80090de:	b14c      	cbz	r4, 80090f4 <__assert_func+0x24>
 80090e0:	4b07      	ldr	r3, [pc, #28]	; (8009100 <__assert_func+0x30>)
 80090e2:	9100      	str	r1, [sp, #0]
 80090e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090e8:	4906      	ldr	r1, [pc, #24]	; (8009104 <__assert_func+0x34>)
 80090ea:	462b      	mov	r3, r5
 80090ec:	f000 f844 	bl	8009178 <fiprintf>
 80090f0:	f000 f8d8 	bl	80092a4 <abort>
 80090f4:	4b04      	ldr	r3, [pc, #16]	; (8009108 <__assert_func+0x38>)
 80090f6:	461c      	mov	r4, r3
 80090f8:	e7f3      	b.n	80090e2 <__assert_func+0x12>
 80090fa:	bf00      	nop
 80090fc:	20000064 	.word	0x20000064
 8009100:	08009647 	.word	0x08009647
 8009104:	08009654 	.word	0x08009654
 8009108:	08009682 	.word	0x08009682

0800910c <_calloc_r>:
 800910c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800910e:	fba1 2402 	umull	r2, r4, r1, r2
 8009112:	b94c      	cbnz	r4, 8009128 <_calloc_r+0x1c>
 8009114:	4611      	mov	r1, r2
 8009116:	9201      	str	r2, [sp, #4]
 8009118:	f7ff f8f8 	bl	800830c <_malloc_r>
 800911c:	9a01      	ldr	r2, [sp, #4]
 800911e:	4605      	mov	r5, r0
 8009120:	b930      	cbnz	r0, 8009130 <_calloc_r+0x24>
 8009122:	4628      	mov	r0, r5
 8009124:	b003      	add	sp, #12
 8009126:	bd30      	pop	{r4, r5, pc}
 8009128:	220c      	movs	r2, #12
 800912a:	6002      	str	r2, [r0, #0]
 800912c:	2500      	movs	r5, #0
 800912e:	e7f8      	b.n	8009122 <_calloc_r+0x16>
 8009130:	4621      	mov	r1, r4
 8009132:	f7fe f97a 	bl	800742a <memset>
 8009136:	e7f4      	b.n	8009122 <_calloc_r+0x16>

08009138 <__ascii_mbtowc>:
 8009138:	b082      	sub	sp, #8
 800913a:	b901      	cbnz	r1, 800913e <__ascii_mbtowc+0x6>
 800913c:	a901      	add	r1, sp, #4
 800913e:	b142      	cbz	r2, 8009152 <__ascii_mbtowc+0x1a>
 8009140:	b14b      	cbz	r3, 8009156 <__ascii_mbtowc+0x1e>
 8009142:	7813      	ldrb	r3, [r2, #0]
 8009144:	600b      	str	r3, [r1, #0]
 8009146:	7812      	ldrb	r2, [r2, #0]
 8009148:	1e10      	subs	r0, r2, #0
 800914a:	bf18      	it	ne
 800914c:	2001      	movne	r0, #1
 800914e:	b002      	add	sp, #8
 8009150:	4770      	bx	lr
 8009152:	4610      	mov	r0, r2
 8009154:	e7fb      	b.n	800914e <__ascii_mbtowc+0x16>
 8009156:	f06f 0001 	mvn.w	r0, #1
 800915a:	e7f8      	b.n	800914e <__ascii_mbtowc+0x16>

0800915c <__ascii_wctomb>:
 800915c:	b149      	cbz	r1, 8009172 <__ascii_wctomb+0x16>
 800915e:	2aff      	cmp	r2, #255	; 0xff
 8009160:	bf85      	ittet	hi
 8009162:	238a      	movhi	r3, #138	; 0x8a
 8009164:	6003      	strhi	r3, [r0, #0]
 8009166:	700a      	strbls	r2, [r1, #0]
 8009168:	f04f 30ff 	movhi.w	r0, #4294967295
 800916c:	bf98      	it	ls
 800916e:	2001      	movls	r0, #1
 8009170:	4770      	bx	lr
 8009172:	4608      	mov	r0, r1
 8009174:	4770      	bx	lr
	...

08009178 <fiprintf>:
 8009178:	b40e      	push	{r1, r2, r3}
 800917a:	b503      	push	{r0, r1, lr}
 800917c:	4601      	mov	r1, r0
 800917e:	ab03      	add	r3, sp, #12
 8009180:	4805      	ldr	r0, [pc, #20]	; (8009198 <fiprintf+0x20>)
 8009182:	f853 2b04 	ldr.w	r2, [r3], #4
 8009186:	6800      	ldr	r0, [r0, #0]
 8009188:	9301      	str	r3, [sp, #4]
 800918a:	f7ff fcf1 	bl	8008b70 <_vfiprintf_r>
 800918e:	b002      	add	sp, #8
 8009190:	f85d eb04 	ldr.w	lr, [sp], #4
 8009194:	b003      	add	sp, #12
 8009196:	4770      	bx	lr
 8009198:	20000064 	.word	0x20000064

0800919c <__swhatbuf_r>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	460c      	mov	r4, r1
 80091a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a4:	2900      	cmp	r1, #0
 80091a6:	b096      	sub	sp, #88	; 0x58
 80091a8:	4615      	mov	r5, r2
 80091aa:	461e      	mov	r6, r3
 80091ac:	da0d      	bge.n	80091ca <__swhatbuf_r+0x2e>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091b4:	f04f 0100 	mov.w	r1, #0
 80091b8:	bf0c      	ite	eq
 80091ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80091be:	2340      	movne	r3, #64	; 0x40
 80091c0:	2000      	movs	r0, #0
 80091c2:	6031      	str	r1, [r6, #0]
 80091c4:	602b      	str	r3, [r5, #0]
 80091c6:	b016      	add	sp, #88	; 0x58
 80091c8:	bd70      	pop	{r4, r5, r6, pc}
 80091ca:	466a      	mov	r2, sp
 80091cc:	f000 f848 	bl	8009260 <_fstat_r>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	dbec      	blt.n	80091ae <__swhatbuf_r+0x12>
 80091d4:	9901      	ldr	r1, [sp, #4]
 80091d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80091da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80091de:	4259      	negs	r1, r3
 80091e0:	4159      	adcs	r1, r3
 80091e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091e6:	e7eb      	b.n	80091c0 <__swhatbuf_r+0x24>

080091e8 <__smakebuf_r>:
 80091e8:	898b      	ldrh	r3, [r1, #12]
 80091ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091ec:	079d      	lsls	r5, r3, #30
 80091ee:	4606      	mov	r6, r0
 80091f0:	460c      	mov	r4, r1
 80091f2:	d507      	bpl.n	8009204 <__smakebuf_r+0x1c>
 80091f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	6123      	str	r3, [r4, #16]
 80091fc:	2301      	movs	r3, #1
 80091fe:	6163      	str	r3, [r4, #20]
 8009200:	b002      	add	sp, #8
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	ab01      	add	r3, sp, #4
 8009206:	466a      	mov	r2, sp
 8009208:	f7ff ffc8 	bl	800919c <__swhatbuf_r>
 800920c:	9900      	ldr	r1, [sp, #0]
 800920e:	4605      	mov	r5, r0
 8009210:	4630      	mov	r0, r6
 8009212:	f7ff f87b 	bl	800830c <_malloc_r>
 8009216:	b948      	cbnz	r0, 800922c <__smakebuf_r+0x44>
 8009218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800921c:	059a      	lsls	r2, r3, #22
 800921e:	d4ef      	bmi.n	8009200 <__smakebuf_r+0x18>
 8009220:	f023 0303 	bic.w	r3, r3, #3
 8009224:	f043 0302 	orr.w	r3, r3, #2
 8009228:	81a3      	strh	r3, [r4, #12]
 800922a:	e7e3      	b.n	80091f4 <__smakebuf_r+0xc>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	6020      	str	r0, [r4, #0]
 8009230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	9b00      	ldr	r3, [sp, #0]
 8009238:	6163      	str	r3, [r4, #20]
 800923a:	9b01      	ldr	r3, [sp, #4]
 800923c:	6120      	str	r0, [r4, #16]
 800923e:	b15b      	cbz	r3, 8009258 <__smakebuf_r+0x70>
 8009240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009244:	4630      	mov	r0, r6
 8009246:	f000 f81d 	bl	8009284 <_isatty_r>
 800924a:	b128      	cbz	r0, 8009258 <__smakebuf_r+0x70>
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	f023 0303 	bic.w	r3, r3, #3
 8009252:	f043 0301 	orr.w	r3, r3, #1
 8009256:	81a3      	strh	r3, [r4, #12]
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	431d      	orrs	r5, r3
 800925c:	81a5      	strh	r5, [r4, #12]
 800925e:	e7cf      	b.n	8009200 <__smakebuf_r+0x18>

08009260 <_fstat_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4d07      	ldr	r5, [pc, #28]	; (8009280 <_fstat_r+0x20>)
 8009264:	2300      	movs	r3, #0
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	4611      	mov	r1, r2
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	f7f8 fc90 	bl	8001b92 <_fstat>
 8009272:	1c43      	adds	r3, r0, #1
 8009274:	d102      	bne.n	800927c <_fstat_r+0x1c>
 8009276:	682b      	ldr	r3, [r5, #0]
 8009278:	b103      	cbz	r3, 800927c <_fstat_r+0x1c>
 800927a:	6023      	str	r3, [r4, #0]
 800927c:	bd38      	pop	{r3, r4, r5, pc}
 800927e:	bf00      	nop
 8009280:	20000528 	.word	0x20000528

08009284 <_isatty_r>:
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	4d06      	ldr	r5, [pc, #24]	; (80092a0 <_isatty_r+0x1c>)
 8009288:	2300      	movs	r3, #0
 800928a:	4604      	mov	r4, r0
 800928c:	4608      	mov	r0, r1
 800928e:	602b      	str	r3, [r5, #0]
 8009290:	f7f8 fc8f 	bl	8001bb2 <_isatty>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d102      	bne.n	800929e <_isatty_r+0x1a>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	b103      	cbz	r3, 800929e <_isatty_r+0x1a>
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	20000528 	.word	0x20000528

080092a4 <abort>:
 80092a4:	b508      	push	{r3, lr}
 80092a6:	2006      	movs	r0, #6
 80092a8:	f000 f82c 	bl	8009304 <raise>
 80092ac:	2001      	movs	r0, #1
 80092ae:	f7f8 fc21 	bl	8001af4 <_exit>

080092b2 <_raise_r>:
 80092b2:	291f      	cmp	r1, #31
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	d904      	bls.n	80092c6 <_raise_r+0x14>
 80092bc:	2316      	movs	r3, #22
 80092be:	6003      	str	r3, [r0, #0]
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295
 80092c4:	bd38      	pop	{r3, r4, r5, pc}
 80092c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80092c8:	b112      	cbz	r2, 80092d0 <_raise_r+0x1e>
 80092ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092ce:	b94b      	cbnz	r3, 80092e4 <_raise_r+0x32>
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 f831 	bl	8009338 <_getpid_r>
 80092d6:	462a      	mov	r2, r5
 80092d8:	4601      	mov	r1, r0
 80092da:	4620      	mov	r0, r4
 80092dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e0:	f000 b818 	b.w	8009314 <_kill_r>
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d00a      	beq.n	80092fe <_raise_r+0x4c>
 80092e8:	1c59      	adds	r1, r3, #1
 80092ea:	d103      	bne.n	80092f4 <_raise_r+0x42>
 80092ec:	2316      	movs	r3, #22
 80092ee:	6003      	str	r3, [r0, #0]
 80092f0:	2001      	movs	r0, #1
 80092f2:	e7e7      	b.n	80092c4 <_raise_r+0x12>
 80092f4:	2400      	movs	r4, #0
 80092f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092fa:	4628      	mov	r0, r5
 80092fc:	4798      	blx	r3
 80092fe:	2000      	movs	r0, #0
 8009300:	e7e0      	b.n	80092c4 <_raise_r+0x12>
	...

08009304 <raise>:
 8009304:	4b02      	ldr	r3, [pc, #8]	; (8009310 <raise+0xc>)
 8009306:	4601      	mov	r1, r0
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	f7ff bfd2 	b.w	80092b2 <_raise_r>
 800930e:	bf00      	nop
 8009310:	20000064 	.word	0x20000064

08009314 <_kill_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d07      	ldr	r5, [pc, #28]	; (8009334 <_kill_r+0x20>)
 8009318:	2300      	movs	r3, #0
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	4611      	mov	r1, r2
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	f7f8 fbd7 	bl	8001ad4 <_kill>
 8009326:	1c43      	adds	r3, r0, #1
 8009328:	d102      	bne.n	8009330 <_kill_r+0x1c>
 800932a:	682b      	ldr	r3, [r5, #0]
 800932c:	b103      	cbz	r3, 8009330 <_kill_r+0x1c>
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	bd38      	pop	{r3, r4, r5, pc}
 8009332:	bf00      	nop
 8009334:	20000528 	.word	0x20000528

08009338 <_getpid_r>:
 8009338:	f7f8 bbc4 	b.w	8001ac4 <_getpid>

0800933c <_init>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	bf00      	nop
 8009340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009342:	bc08      	pop	{r3}
 8009344:	469e      	mov	lr, r3
 8009346:	4770      	bx	lr

08009348 <_fini>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	bf00      	nop
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr
