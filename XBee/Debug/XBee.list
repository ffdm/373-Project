
XBee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800b1a8  0800b1a8  0001b1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b70c  0800b70c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b70c  0800b70c  0001b70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b714  0800b714  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b714  0800b714  0001b714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b718  0800b718  0001b718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b71c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  200001d4  0800b8f0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  0800b8f0  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184dd  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce9  00000000  00000000  00038724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003b410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001148  00000000  00000000  0003ca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c163  00000000  00000000  0003db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0b8  00000000  00000000  00069cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ebbd  00000000  00000000  00084d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f78  00000000  00000000  00193920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0019a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b190 	.word	0x0800b190

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	0800b190 	.word	0x0800b190

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <lcd_command>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void lcd_command(uint8_t lcd_addr, uint8_t cmd) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	uint8_t lcd_write_addr = lcd_addr << 1;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]

	uint8_t cmd_buffer[5];
	uint8_t upper_nibble = cmd & 0xf0; // keep upper 4 bits of cmd and set lower 4 bits to 0
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	f023 030f 	bic.w	r3, r3, #15
 8000ef0:	73bb      	strb	r3, [r7, #14]
	uint8_t lower_nibble = cmd << 4; // shift lower 4 bits of cmd into upper 4 bits and set lower 4 bits to 0
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	737b      	strb	r3, [r7, #13]

	cmd_buffer[0] = upper_nibble | (0b1100);
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	f043 030c 	orr.w	r3, r3, #12
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	723b      	strb	r3, [r7, #8]
	cmd_buffer[1] = upper_nibble | (0b1000);
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	727b      	strb	r3, [r7, #9]
	cmd_buffer[2] = lower_nibble | (0b1100);
 8000f0c:	7b7b      	ldrb	r3, [r7, #13]
 8000f0e:	f043 030c 	orr.w	r3, r3, #12
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	72bb      	strb	r3, [r7, #10]
	cmd_buffer[3] = lower_nibble | (0b1000);
 8000f16:	7b7b      	ldrb	r3, [r7, #13]
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, lcd_write_addr, cmd_buffer, 4, 10);
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	b299      	uxth	r1, r3
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	230a      	movs	r3, #10
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <lcd_command+0x70>)
 8000f30:	f002 f826 	bl	8002f80 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000f34:	2005      	movs	r0, #5
 8000f36:	f001 fbed 	bl	8002714 <HAL_Delay>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001f0 	.word	0x200001f0

08000f48 <lcd_data>:

void lcd_data(uint8_t lcd_addr, uint8_t cmd) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460a      	mov	r2, r1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]
	uint8_t lcd_write_addr = lcd_addr << 1;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]

	uint8_t data_buffer[5];
	uint8_t upper_nibble = cmd & 0xf0; // keep upper 4 bits of cmd and set lower 4 bits to 0
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	f023 030f 	bic.w	r3, r3, #15
 8000f64:	73bb      	strb	r3, [r7, #14]
	uint8_t lower_nibble = cmd << 4; // shift lower 4 bits of cmd into upper 4 bits and set lower 4 bits to 0
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	737b      	strb	r3, [r7, #13]

	data_buffer[0] = upper_nibble | (0b1101);
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	f043 030d 	orr.w	r3, r3, #13
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	723b      	strb	r3, [r7, #8]
	data_buffer[1] = upper_nibble | (0b1001);
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	f043 0309 	orr.w	r3, r3, #9
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	727b      	strb	r3, [r7, #9]
	data_buffer[2] = lower_nibble | (0b1101);
 8000f80:	7b7b      	ldrb	r3, [r7, #13]
 8000f82:	f043 030d 	orr.w	r3, r3, #13
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	72bb      	strb	r3, [r7, #10]
	data_buffer[3] = lower_nibble | (0b1001);
 8000f8a:	7b7b      	ldrb	r3, [r7, #13]
 8000f8c:	f043 0309 	orr.w	r3, r3, #9
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, lcd_write_addr, data_buffer, 4, 10);
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	b299      	uxth	r1, r3
 8000f98:	f107 0208 	add.w	r2, r7, #8
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <lcd_data+0x70>)
 8000fa4:	f001 ffec 	bl	8002f80 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000fa8:	2005      	movs	r0, #5
 8000faa:	f001 fbb3 	bl	8002714 <HAL_Delay>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001f0 	.word	0x200001f0

08000fbc <lcd_clear>:

void lcd_clear() {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	lcd_command(0x27, 0x01); // 0x01 -> Clear display (and clear DDRAM)
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2027      	movs	r0, #39	; 0x27
 8000fc4:	f7ff ff86 	bl	8000ed4 <lcd_command>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <lcd_string>:

// Writes a C-string to the lcd at the given row and col
void lcd_string(uint8_t lcd_addr, uint8_t row, uint8_t col, const char* message) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	71bb      	strb	r3, [r7, #6]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	717b      	strb	r3, [r7, #5]

	uint8_t start_pos = 0x80 + (row * 0x40) + col;
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	019b      	lsls	r3, r3, #6
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	797b      	ldrb	r3, [r7, #5]
 8000fec:	4413      	add	r3, r2
 8000fee:	73fb      	strb	r3, [r7, #15]

	lcd_command(lcd_addr, start_pos); // bring cursor to start
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff6c 	bl	8000ed4 <lcd_command>

	while(*message != '\0') {
 8000ffc:	e009      	b.n	8001012 <lcd_string+0x46>
		lcd_data(lcd_addr, message[0]);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff9e 	bl	8000f48 <lcd_data>
		message ++ ;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	603b      	str	r3, [r7, #0]
	while(*message != '\0') {
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f1      	bne.n	8000ffe <lcd_string+0x32>
	}
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <lcd_init>:

void lcd_init(uint8_t lcd_addr) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	uint8_t lcd_write_addr = lcd_addr << 1;
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]

	// 1. Set to 4 bit operation (only this instruction executes as 8 bit)
	HAL_Delay(100); // must wait at least 40 ms after booting
 8001034:	2064      	movs	r0, #100	; 0x64
 8001036:	f001 fb6d 	bl	8002714 <HAL_Delay>
	lcd_command(lcd_addr, 0x30);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2130      	movs	r1, #48	; 0x30
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff48 	bl	8000ed4 <lcd_command>
	HAL_Delay(10);
 8001044:	200a      	movs	r0, #10
 8001046:	f001 fb65 	bl	8002714 <HAL_Delay>
	lcd_command(lcd_addr, 0x28); // 0x28 -> function set 4 bits, 2 lines // 0010,1000
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2128      	movs	r1, #40	; 0x28
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff40 	bl	8000ed4 <lcd_command>
	HAL_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f001 fb5d 	bl	8002714 <HAL_Delay>
	lcd_command(lcd_addr, 0x08); // 0x08 -> Clear display (without clearing DDRAM)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2108      	movs	r1, #8
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff38 	bl	8000ed4 <lcd_command>
	HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f001 fb55 	bl	8002714 <HAL_Delay>
	lcd_command(lcd_addr, 0x01); // 0x01 -> Clear display (and clear DDRAM)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff30 	bl	8000ed4 <lcd_command>
	HAL_Delay(10);
 8001074:	200a      	movs	r0, #10
 8001076:	f001 fb4d 	bl	8002714 <HAL_Delay>
	lcd_command(lcd_addr, 0x06); // 0x06 -> entry mode
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2106      	movs	r1, #6
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff28 	bl	8000ed4 <lcd_command>
	HAL_Delay(10);
 8001084:	200a      	movs	r0, #10
 8001086:	f001 fb45 	bl	8002714 <HAL_Delay>
	lcd_command(lcd_addr, 0x0C); // 0x0C -> display on cursor off
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	210c      	movs	r1, #12
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff20 	bl	8000ed4 <lcd_command>
	HAL_Delay(10);
 8001094:	200a      	movs	r0, #10
 8001096:	f001 fb3d 	bl	8002714 <HAL_Delay>

	lcd_command(0x27, 0x80);
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	2027      	movs	r0, #39	; 0x27
 800109e:	f7ff ff19 	bl	8000ed4 <lcd_command>
	HAL_Delay(10);
 80010a2:	200a      	movs	r0, #10
 80010a4:	f001 fb36 	bl	8002714 <HAL_Delay>
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <start_race>:

void start_race() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	printf("Starting race\n");
 80010b4:	482e      	ldr	r0, [pc, #184]	; (8001170 <start_race+0xc0>)
 80010b6:	f008 f899 	bl	80091ec <puts>
	lcd_clear();
 80010ba:	f7ff ff7f 	bl	8000fbc <lcd_clear>
	lcd_string(0x27, 0, 0, "Starting Race!");
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <start_race+0xc4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2027      	movs	r0, #39	; 0x27
 80010c6:	f7ff ff81 	bl	8000fcc <lcd_string>
	car_finished1 = 0; car_finished2 = 0;
 80010ca:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <start_race+0xc8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	4b2a      	ldr	r3, [pc, #168]	; (800117c <start_race+0xcc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
	car_time1 = 0; car_time2 = 0;
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <start_race+0xd0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <start_race+0xd4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]

	HAL_Delay(1000);
 80010e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e6:	f001 fb15 	bl	8002714 <HAL_Delay>
	lcd_clear();
 80010ea:	f7ff ff67 	bl	8000fbc <lcd_clear>
	lcd_string(0x27, 0, 0, "3");
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <start_race+0xd8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2027      	movs	r0, #39	; 0x27
 80010f6:	f7ff ff69 	bl	8000fcc <lcd_string>
	HAL_Delay(1000);
 80010fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fe:	f001 fb09 	bl	8002714 <HAL_Delay>

	lcd_clear();
 8001102:	f7ff ff5b 	bl	8000fbc <lcd_clear>
	lcd_string(0x27, 0, 0, "2");
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <start_race+0xdc>)
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2027      	movs	r0, #39	; 0x27
 800110e:	f7ff ff5d 	bl	8000fcc <lcd_string>
	HAL_Delay(1000);
 8001112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001116:	f001 fafd 	bl	8002714 <HAL_Delay>

	lcd_clear();
 800111a:	f7ff ff4f 	bl	8000fbc <lcd_clear>
	lcd_string(0x27, 0, 0, "1");
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <start_race+0xe0>)
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2027      	movs	r0, #39	; 0x27
 8001126:	f7ff ff51 	bl	8000fcc <lcd_string>
	HAL_Delay(1000);
 800112a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112e:	f001 faf1 	bl	8002714 <HAL_Delay>

	lcd_clear();
 8001132:	f7ff ff43 	bl	8000fbc <lcd_clear>
	lcd_string(0x27, 0, 0, "Go!");
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <start_race+0xe4>)
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2027      	movs	r0, #39	; 0x27
 800113e:	f7ff ff45 	bl	8000fcc <lcd_string>
	HAL_Delay(1000);
 8001142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001146:	f001 fae5 	bl	8002714 <HAL_Delay>

	HAL_UART_Receive_IT(&huart2, rx_data1, 1);
 800114a:	2201      	movs	r2, #1
 800114c:	4912      	ldr	r1, [pc, #72]	; (8001198 <start_race+0xe8>)
 800114e:	4813      	ldr	r0, [pc, #76]	; (800119c <start_race+0xec>)
 8001150:	f005 fa0a 	bl	8006568 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, rx_data2, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	4912      	ldr	r1, [pc, #72]	; (80011a0 <start_race+0xf0>)
 8001158:	4812      	ldr	r0, [pc, #72]	; (80011a4 <start_race+0xf4>)
 800115a:	f005 fa05 	bl	8006568 <HAL_UART_Receive_IT>



	htim2.Instance->CNT = 0;
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <start_race+0xf8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
	race_started = 1;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <start_race+0xfc>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	0800b1a8 	.word	0x0800b1a8
 8001174:	0800b1b8 	.word	0x0800b1b8
 8001178:	20000524 	.word	0x20000524
 800117c:	20000528 	.word	0x20000528
 8001180:	2000051c 	.word	0x2000051c
 8001184:	20000520 	.word	0x20000520
 8001188:	0800b1c8 	.word	0x0800b1c8
 800118c:	0800b1cc 	.word	0x0800b1cc
 8001190:	0800b1d0 	.word	0x0800b1d0
 8001194:	0800b1d4 	.word	0x0800b1d4
 8001198:	20000514 	.word	0x20000514
 800119c:	200002d8 	.word	0x200002d8
 80011a0:	20000518 	.word	0x20000518
 80011a4:	2000036c 	.word	0x2000036c
 80011a8:	200004c8 	.word	0x200004c8
 80011ac:	2000052c 	.word	0x2000052c

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b098      	sub	sp, #96	; 0x60
 80011b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2101      	movs	r1, #1
 80011ba:	4887      	ldr	r0, [pc, #540]	; (80013d8 <main+0x228>)
 80011bc:	f001 fe2c 	bl	8002e18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2102      	movs	r1, #2
 80011c4:	4884      	ldr	r0, [pc, #528]	; (80013d8 <main+0x228>)
 80011c6:	f001 fe27 	bl	8002e18 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ca:	f001 fa2e 	bl	800262a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 f925 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f000 fb79 	bl	80018c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011d6:	f000 f9f1 	bl	80015bc <MX_USART2_UART_Init>
  MX_LPUART1_UART_Init();
 80011da:	f000 f9a3 	bl	8001524 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80011de:	f000 fa85 	bl	80016ec <MX_SPI1_Init>
  MX_SPI3_Init();
 80011e2:	f000 fac1 	bl	8001768 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80011e6:	f000 fa35 	bl	8001654 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80011ea:	f000 fafb 	bl	80017e4 <MX_TIM2_Init>
  MX_I2C1_Init();
 80011ee:	f000 f95b 	bl	80014a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80011f2:	487a      	ldr	r0, [pc, #488]	; (80013dc <main+0x22c>)
 80011f4:	f004 fbca 	bl	800598c <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 80011f8:	2064      	movs	r0, #100	; 0x64
 80011fa:	f001 fa8b 	bl	8002714 <HAL_Delay>
  lcd_init(0x27);
 80011fe:	2027      	movs	r0, #39	; 0x27
 8001200:	f7ff ff10 	bl	8001024 <lcd_init>
  HAL_Delay(100);
 8001204:	2064      	movs	r0, #100	; 0x64
 8001206:	f001 fa85 	bl	8002714 <HAL_Delay>

  uint8_t not_analog[6] = {0, 0, 128, 128, 128, 128};
 800120a:	4a75      	ldr	r2, [pc, #468]	; (80013e0 <main+0x230>)
 800120c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001210:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001214:	6018      	str	r0, [r3, #0]
 8001216:	3304      	adds	r3, #4
 8001218:	8019      	strh	r1, [r3, #0]
  uint8_t spi_trs[21] = {0x01, 0x42};
 800121a:	f244 2301 	movw	r3, #16897	; 0x4201
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
 8001220:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	741a      	strb	r2, [r3, #16]
  uint8_t spi_rec1[21];
  uint8_t spi_rec2[21];

  lcd_string(0x27, 0, 0, "LCD Init");
 8001230:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <main+0x234>)
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2027      	movs	r0, #39	; 0x27
 8001238:	f7ff fec8 	bl	8000fcc <lcd_string>
//  		   itoa(73, num_buffer, 10);
//  		   lcd_string(0x27, 1, 6, num_buffer);
//  		   lcd_string(0x27, 1, 13, "sec");
  //

  race_started = 0;
 800123c:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <main+0x238>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
  while (1)
  {
	 # define DEBUG_MODE 1;

	// Read Controller 1 (SPI 1)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001248:	4868      	ldr	r0, [pc, #416]	; (80013ec <main+0x23c>)
 800124a:	f001 fde5 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, spi_trs, spi_rec1, 9, HAL_MAX_DELAY);
 800124e:	f107 0218 	add.w	r2, r7, #24
 8001252:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2309      	movs	r3, #9
 800125e:	4864      	ldr	r0, [pc, #400]	; (80013f0 <main+0x240>)
 8001260:	f003 ffb5 	bl	80051ce <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126a:	4860      	ldr	r0, [pc, #384]	; (80013ec <main+0x23c>)
 800126c:	f001 fdd4 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f001 fa4f 	bl	8002714 <HAL_Delay>

	// Read Controller 2 (SPI 3)
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET); // ATT
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127c:	485d      	ldr	r0, [pc, #372]	; (80013f4 <main+0x244>)
 800127e:	f001 fdcb 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, spi_trs, spi_rec2, 9, HAL_MAX_DELAY);
 8001282:	463a      	mov	r2, r7
 8001284:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2309      	movs	r3, #9
 8001290:	4859      	ldr	r0, [pc, #356]	; (80013f8 <main+0x248>)
 8001292:	f003 ff9c 	bl	80051ce <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET); // ATT
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129c:	4855      	ldr	r0, [pc, #340]	; (80013f4 <main+0x244>)
 800129e:	f001 fdbb 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f001 fa36 	bl	8002714 <HAL_Delay>
//		}
//		printf("\n");
	#endif

	// Transmit to Car 1
	if(spi_rec1[1] == 0x73 && !car_finished1) {
 80012a8:	7e7b      	ldrb	r3, [r7, #25]
 80012aa:	2b73      	cmp	r3, #115	; 0x73
 80012ac:	d10d      	bne.n	80012ca <main+0x11a>
 80012ae:	4b53      	ldr	r3, [pc, #332]	; (80013fc <main+0x24c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d109      	bne.n	80012ca <main+0x11a>
		HAL_UART_Transmit(&huart2, spi_rec1 + 3, 6, HAL_MAX_DELAY);
 80012b6:	f107 0118 	add.w	r1, r7, #24
 80012ba:	3103      	adds	r1, #3
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	2206      	movs	r2, #6
 80012c2:	484f      	ldr	r0, [pc, #316]	; (8001400 <main+0x250>)
 80012c4:	f005 f8c0 	bl	8006448 <HAL_UART_Transmit>
 80012c8:	e007      	b.n	80012da <main+0x12a>
	} else {
		HAL_UART_Transmit(&huart2, not_analog, 6, HAL_MAX_DELAY);
 80012ca:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	2206      	movs	r2, #6
 80012d4:	484a      	ldr	r0, [pc, #296]	; (8001400 <main+0x250>)
 80012d6:	f005 f8b7 	bl	8006448 <HAL_UART_Transmit>
	} HAL_Delay(5);
 80012da:	2005      	movs	r0, #5
 80012dc:	f001 fa1a 	bl	8002714 <HAL_Delay>

	// Transmit to Car 2
	if(spi_rec2[1] == 0x73 && !car_finished2) {
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b73      	cmp	r3, #115	; 0x73
 80012e4:	d123      	bne.n	800132e <main+0x17e>
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <main+0x254>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11f      	bne.n	800132e <main+0x17e>
		printf("Controller 2: ");
 80012ee:	4846      	ldr	r0, [pc, #280]	; (8001408 <main+0x258>)
 80012f0:	f007 ff0e 	bl	8009110 <iprintf>
			for (int i = 0; i < 9; ++i) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	657b      	str	r3, [r7, #84]	; 0x54
 80012f8:	e00a      	b.n	8001310 <main+0x160>
				printf("%2x ", spi_rec2[i]);
 80012fa:	463a      	mov	r2, r7
 80012fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012fe:	4413      	add	r3, r2
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4841      	ldr	r0, [pc, #260]	; (800140c <main+0x25c>)
 8001306:	f007 ff03 	bl	8009110 <iprintf>
			for (int i = 0; i < 9; ++i) {
 800130a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800130c:	3301      	adds	r3, #1
 800130e:	657b      	str	r3, [r7, #84]	; 0x54
 8001310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001312:	2b08      	cmp	r3, #8
 8001314:	ddf1      	ble.n	80012fa <main+0x14a>
			}
			printf("\n");
 8001316:	200a      	movs	r0, #10
 8001318:	f007 ff0c 	bl	8009134 <putchar>
		HAL_UART_Transmit(&huart3, spi_rec2 + 3, 6, HAL_MAX_DELAY);
 800131c:	4639      	mov	r1, r7
 800131e:	3103      	adds	r1, #3
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	2206      	movs	r2, #6
 8001326:	483a      	ldr	r0, [pc, #232]	; (8001410 <main+0x260>)
 8001328:	f005 f88e 	bl	8006448 <HAL_UART_Transmit>
 800132c:	e022      	b.n	8001374 <main+0x1c4>
	} else {

		printf("Controller 2: ");
 800132e:	4836      	ldr	r0, [pc, #216]	; (8001408 <main+0x258>)
 8001330:	f007 feee 	bl	8009110 <iprintf>
		printf("69 69 69 ");
 8001334:	4837      	ldr	r0, [pc, #220]	; (8001414 <main+0x264>)
 8001336:	f007 feeb 	bl	8009110 <iprintf>
		for (int i = 0; i < 6; ++i) {
 800133a:	2300      	movs	r3, #0
 800133c:	653b      	str	r3, [r7, #80]	; 0x50
 800133e:	e00b      	b.n	8001358 <main+0x1a8>
			printf("%2x ", not_analog[i]);
 8001340:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	482f      	ldr	r0, [pc, #188]	; (800140c <main+0x25c>)
 800134e:	f007 fedf 	bl	8009110 <iprintf>
		for (int i = 0; i < 6; ++i) {
 8001352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001354:	3301      	adds	r3, #1
 8001356:	653b      	str	r3, [r7, #80]	; 0x50
 8001358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800135a:	2b05      	cmp	r3, #5
 800135c:	ddf0      	ble.n	8001340 <main+0x190>
		}
		printf("\n");
 800135e:	200a      	movs	r0, #10
 8001360:	f007 fee8 	bl	8009134 <putchar>

		HAL_UART_Transmit(&huart3, not_analog, 6, HAL_MAX_DELAY);
 8001364:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	2206      	movs	r2, #6
 800136e:	4828      	ldr	r0, [pc, #160]	; (8001410 <main+0x260>)
 8001370:	f005 f86a 	bl	8006448 <HAL_UART_Transmit>
	} HAL_Delay(5);
 8001374:	2005      	movs	r0, #5
 8001376:	f001 f9cd 	bl	8002714 <HAL_Delay>
	// Start condition for race
	// start button pressed on both controllers and both controllers are in analog mode
	//
//	uint8_t analog1 = (spi_rec1[1] == 0x73);
//	uint8_t analog2 = (spi_rec2[1] == 0x73);
	uint8_t start1 = !((spi_rec1[3] & (1 << 5)) >> 5);
 800137a:	7efb      	ldrb	r3, [r7, #27]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf0c      	ite	eq
 8001384:	2301      	moveq	r3, #1
 8001386:	2300      	movne	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t start2 = !((spi_rec2[3] & (1 << 5)) >> 5);
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	printf("start1, 2: %d %d \n", start1, start2);
 80013a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013a6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80013aa:	4619      	mov	r1, r3
 80013ac:	481a      	ldr	r0, [pc, #104]	; (8001418 <main+0x268>)
 80013ae:	f007 feaf 	bl	8009110 <iprintf>
	if (start1 && start2 && !race_started) {
 80013b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f43f af43 	beq.w	8001242 <main+0x92>
 80013bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f43f af3e 	beq.w	8001242 <main+0x92>
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <main+0x238>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f47f af39 	bne.w	8001242 <main+0x92>
		start_race();
 80013d0:	f7ff fe6e 	bl	80010b0 <start_race>
  {
 80013d4:	e735      	b.n	8001242 <main+0x92>
 80013d6:	bf00      	nop
 80013d8:	48001800 	.word	0x48001800
 80013dc:	200004c8 	.word	0x200004c8
 80013e0:	0800b21c 	.word	0x0800b21c
 80013e4:	0800b1d8 	.word	0x0800b1d8
 80013e8:	2000052c 	.word	0x2000052c
 80013ec:	48000800 	.word	0x48000800
 80013f0:	20000400 	.word	0x20000400
 80013f4:	48001400 	.word	0x48001400
 80013f8:	20000464 	.word	0x20000464
 80013fc:	20000524 	.word	0x20000524
 8001400:	200002d8 	.word	0x200002d8
 8001404:	20000528 	.word	0x20000528
 8001408:	0800b1e4 	.word	0x0800b1e4
 800140c:	0800b1f4 	.word	0x0800b1f4
 8001410:	2000036c 	.word	0x2000036c
 8001414:	0800b1fc 	.word	0x0800b1fc
 8001418:	0800b208 	.word	0x0800b208

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b096      	sub	sp, #88	; 0x58
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	2244      	movs	r2, #68	; 0x44
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f007 ffbe 	bl	80093ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800143e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001442:	f002 f97d 	bl	8003740 <HAL_PWREx_ControlVoltageScaling>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800144c:	f000 fd58 	bl	8001f00 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001450:	2310      	movs	r3, #16
 8001452:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001454:	2301      	movs	r3, #1
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800145c:	2360      	movs	r3, #96	; 0x60
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001460:	2300      	movs	r3, #0
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fa1d 	bl	80038a8 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001474:	f000 fd44 	bl	8001f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fe23 	bl	80040dc <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800149c:	f000 fd30 	bl	8001f00 <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3758      	adds	r7, #88	; 0x58
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <MX_I2C1_Init+0x74>)
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <MX_I2C1_Init+0x78>)
 80014b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_I2C1_Init+0x74>)
 80014b4:	f640 6214 	movw	r2, #3604	; 0xe14
 80014b8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <MX_I2C1_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_I2C1_Init+0x74>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_I2C1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_I2C1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_I2C1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_I2C1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_I2C1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_I2C1_Init+0x74>)
 80014e6:	f001 fcaf 	bl	8002e48 <HAL_I2C_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014f0:	f000 fd06 	bl	8001f00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f4:	2100      	movs	r1, #0
 80014f6:	4809      	ldr	r0, [pc, #36]	; (800151c <MX_I2C1_Init+0x74>)
 80014f8:	f002 f86a 	bl	80035d0 <HAL_I2CEx_ConfigAnalogFilter>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001502:	f000 fcfd 	bl	8001f00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001506:	2100      	movs	r1, #0
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_I2C1_Init+0x74>)
 800150a:	f002 f8ac 	bl	8003666 <HAL_I2CEx_ConfigDigitalFilter>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001514:	f000 fcf4 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200001f0 	.word	0x200001f0
 8001520:	40005400 	.word	0x40005400

08001524 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 800152a:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <MX_LPUART1_UART_Init+0x94>)
 800152c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 800156e:	f004 ff1b 	bl	80063a8 <HAL_UART_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001578:	f000 fcc2 	bl	8001f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157c:	2100      	movs	r1, #0
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 8001580:	f006 ff77 	bl	8008472 <HAL_UARTEx_SetTxFifoThreshold>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800158a:	f000 fcb9 	bl	8001f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158e:	2100      	movs	r1, #0
 8001590:	4808      	ldr	r0, [pc, #32]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 8001592:	f006 ffac 	bl	80084ee <HAL_UARTEx_SetRxFifoThreshold>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800159c:	f000 fcb0 	bl	8001f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_LPUART1_UART_Init+0x90>)
 80015a2:	f006 ff2d 	bl	8008400 <HAL_UARTEx_DisableFifoMode>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015ac:	f000 fca8 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000244 	.word	0x20000244
 80015b8:	40008000 	.word	0x40008000

080015bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <MX_USART2_UART_Init+0x90>)
 80015c2:	4a23      	ldr	r2, [pc, #140]	; (8001650 <MX_USART2_UART_Init+0x94>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_USART2_UART_Init+0x90>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_USART2_UART_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_USART2_UART_Init+0x90>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_USART2_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_USART2_UART_Init+0x90>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_USART2_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_USART2_UART_Init+0x90>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_USART2_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_USART2_UART_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_USART2_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001604:	4811      	ldr	r0, [pc, #68]	; (800164c <MX_USART2_UART_Init+0x90>)
 8001606:	f004 fecf 	bl	80063a8 <HAL_UART_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001610:	f000 fc76 	bl	8001f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001614:	2100      	movs	r1, #0
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_USART2_UART_Init+0x90>)
 8001618:	f006 ff2b 	bl	8008472 <HAL_UARTEx_SetTxFifoThreshold>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001622:	f000 fc6d 	bl	8001f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001626:	2100      	movs	r1, #0
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <MX_USART2_UART_Init+0x90>)
 800162a:	f006 ff60 	bl	80084ee <HAL_UARTEx_SetRxFifoThreshold>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001634:	f000 fc64 	bl	8001f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_USART2_UART_Init+0x90>)
 800163a:	f006 fee1 	bl	8008400 <HAL_UARTEx_DisableFifoMode>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001644:	f000 fc5c 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200002d8 	.word	0x200002d8
 8001650:	40004400 	.word	0x40004400

08001654 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 800165a:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <MX_USART3_UART_Init+0x94>)
 800165c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800169c:	4811      	ldr	r0, [pc, #68]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 800169e:	f004 fe83 	bl	80063a8 <HAL_UART_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016a8:	f000 fc2a 	bl	8001f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ac:	2100      	movs	r1, #0
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 80016b0:	f006 fedf 	bl	8008472 <HAL_UARTEx_SetTxFifoThreshold>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016ba:	f000 fc21 	bl	8001f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016be:	2100      	movs	r1, #0
 80016c0:	4808      	ldr	r0, [pc, #32]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 80016c2:	f006 ff14 	bl	80084ee <HAL_UARTEx_SetRxFifoThreshold>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016cc:	f000 fc18 	bl	8001f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_USART3_UART_Init+0x90>)
 80016d2:	f006 fe95 	bl	8008400 <HAL_UARTEx_DisableFifoMode>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016dc:	f000 fc10 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000036c 	.word	0x2000036c
 80016e8:	40004800 	.word	0x40004800

080016ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_SPI1_Init+0x74>)
 80016f2:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <MX_SPI1_Init+0x78>)
 80016f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_SPI1_Init+0x74>)
 80016f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_SPI1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_SPI1_Init+0x74>)
 8001706:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800170a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <MX_SPI1_Init+0x74>)
 800170e:	2202      	movs	r2, #2
 8001710:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <MX_SPI1_Init+0x74>)
 8001714:	2201      	movs	r2, #1
 8001716:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_SPI1_Init+0x74>)
 800171a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_SPI1_Init+0x74>)
 8001722:	2220      	movs	r2, #32
 8001724:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_SPI1_Init+0x74>)
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_SPI1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_SPI1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_SPI1_Init+0x74>)
 800173a:	2207      	movs	r2, #7
 800173c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_SPI1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_SPI1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_SPI1_Init+0x74>)
 800174c:	f003 fc9c 	bl	8005088 <HAL_SPI_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001756:	f000 fbd3 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000400 	.word	0x20000400
 8001764:	40013000 	.word	0x40013000

08001768 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_SPI3_Init+0x74>)
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <MX_SPI3_Init+0x78>)
 8001770:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_SPI3_Init+0x74>)
 8001774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001778:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_SPI3_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_SPI3_Init+0x74>)
 8001782:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001786:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_SPI3_Init+0x74>)
 800178a:	2202      	movs	r2, #2
 800178c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_SPI3_Init+0x74>)
 8001790:	2201      	movs	r2, #1
 8001792:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_SPI3_Init+0x74>)
 8001796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_SPI3_Init+0x74>)
 800179e:	2220      	movs	r2, #32
 80017a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_SPI3_Init+0x74>)
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_SPI3_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_SPI3_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_SPI3_Init+0x74>)
 80017b6:	2207      	movs	r2, #7
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_SPI3_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_SPI3_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_SPI3_Init+0x74>)
 80017c8:	f003 fc5e 	bl	8005088 <HAL_SPI_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80017d2:	f000 fb95 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000464 	.word	0x20000464
 80017e0:	40003c00 	.word	0x40003c00

080017e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <MX_TIM2_Init+0xe0>)
 8001812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <MX_TIM2_Init+0xe0>)
 800181a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800181e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <MX_TIM2_Init+0xe0>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001826:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <MX_TIM2_Init+0xe0>)
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <MX_TIM2_Init+0xe0>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <MX_TIM2_Init+0xe0>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800183a:	4822      	ldr	r0, [pc, #136]	; (80018c4 <MX_TIM2_Init+0xe0>)
 800183c:	f004 f84e 	bl	80058dc <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001846:	f000 fb5b 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	4619      	mov	r1, r3
 8001856:	481b      	ldr	r0, [pc, #108]	; (80018c4 <MX_TIM2_Init+0xe0>)
 8001858:	f004 f9fd 	bl	8005c56 <HAL_TIM_ConfigClockSource>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001862:	f000 fb4d 	bl	8001f00 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001866:	4817      	ldr	r0, [pc, #92]	; (80018c4 <MX_TIM2_Init+0xe0>)
 8001868:	f004 f8f8 	bl	8005a5c <HAL_TIM_IC_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001872:	f000 fb45 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	480f      	ldr	r0, [pc, #60]	; (80018c4 <MX_TIM2_Init+0xe0>)
 8001886:	f004 fd07 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001890:	f000 fb36 	bl	8001f00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001898:	2301      	movs	r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <MX_TIM2_Init+0xe0>)
 80018ac:	f004 f937 	bl	8005b1e <HAL_TIM_IC_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80018b6:	f000 fb23 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	; 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200004c8 	.word	0x200004c8

080018c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08e      	sub	sp, #56	; 0x38
 80018cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018de:	4bb2      	ldr	r3, [pc, #712]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4ab1      	ldr	r2, [pc, #708]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 80018e4:	f043 0310 	orr.w	r3, r3, #16
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4baf      	ldr	r3, [pc, #700]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	623b      	str	r3, [r7, #32]
 80018f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f6:	4bac      	ldr	r3, [pc, #688]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4aab      	ldr	r2, [pc, #684]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001902:	4ba9      	ldr	r3, [pc, #676]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800190e:	4ba6      	ldr	r3, [pc, #664]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4aa5      	ldr	r2, [pc, #660]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001914:	f043 0320 	orr.w	r3, r3, #32
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4ba3      	ldr	r3, [pc, #652]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001926:	4ba0      	ldr	r3, [pc, #640]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a9f      	ldr	r2, [pc, #636]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 800192c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b9d      	ldr	r3, [pc, #628]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b9a      	ldr	r3, [pc, #616]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a99      	ldr	r2, [pc, #612]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b97      	ldr	r3, [pc, #604]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b94      	ldr	r3, [pc, #592]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a93      	ldr	r2, [pc, #588]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b91      	ldr	r3, [pc, #580]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800196e:	4b8e      	ldr	r3, [pc, #568]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a8d      	ldr	r2, [pc, #564]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b8b      	ldr	r3, [pc, #556]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a87      	ldr	r2, [pc, #540]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b85      	ldr	r3, [pc, #532]	; (8001ba8 <MX_GPIO_Init+0x2e0>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800199e:	f001 ff73 	bl	8003888 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a8:	4880      	ldr	r0, [pc, #512]	; (8001bac <MX_GPIO_Init+0x2e4>)
 80019aa:	f001 fa35 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2103      	movs	r1, #3
 80019b2:	487f      	ldr	r0, [pc, #508]	; (8001bb0 <MX_GPIO_Init+0x2e8>)
 80019b4:	f001 fa30 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019be:	487d      	ldr	r0, [pc, #500]	; (8001bb4 <MX_GPIO_Init+0x2ec>)
 80019c0:	f001 fa2a 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	487b      	ldr	r0, [pc, #492]	; (8001bb8 <MX_GPIO_Init+0x2f0>)
 80019ca:	f001 fa25 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ce:	230c      	movs	r3, #12
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80019de:	230d      	movs	r3, #13
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4874      	ldr	r0, [pc, #464]	; (8001bbc <MX_GPIO_Init+0x2f4>)
 80019ea:	f001 f883 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019ee:	2307      	movs	r3, #7
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f2:	2312      	movs	r3, #18
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019fe:	2304      	movs	r3, #4
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a06:	4619      	mov	r1, r3
 8001a08:	4868      	ldr	r0, [pc, #416]	; (8001bac <MX_GPIO_Init+0x2e4>)
 8001a0a:	f001 f873 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001a1e:	230d      	movs	r3, #13
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a26:	4619      	mov	r1, r3
 8001a28:	4860      	ldr	r0, [pc, #384]	; (8001bac <MX_GPIO_Init+0x2e4>)
 8001a2a:	f001 f863 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a2e:	233f      	movs	r3, #63	; 0x3f
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a32:	230b      	movs	r3, #11
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3e:	4619      	mov	r1, r3
 8001a40:	485c      	ldr	r0, [pc, #368]	; (8001bb4 <MX_GPIO_Init+0x2ec>)
 8001a42:	f001 f857 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001a46:	230a      	movs	r3, #10
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a4a:	230b      	movs	r3, #11
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	4619      	mov	r1, r3
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5c:	f001 f84a 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a60:	2301      	movs	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a70:	2302      	movs	r3, #2
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	484f      	ldr	r0, [pc, #316]	; (8001bb8 <MX_GPIO_Init+0x2f0>)
 8001a7c:	f001 f83a 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a80:	2302      	movs	r3, #2
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a84:	230b      	movs	r3, #11
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a90:	4619      	mov	r1, r3
 8001a92:	4849      	ldr	r0, [pc, #292]	; (8001bb8 <MX_GPIO_Init+0x2f0>)
 8001a94:	f001 f82e 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001a98:	2344      	movs	r3, #68	; 0x44
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4843      	ldr	r0, [pc, #268]	; (8001bb8 <MX_GPIO_Init+0x2f0>)
 8001aac:	f001 f822 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4838      	ldr	r0, [pc, #224]	; (8001bac <MX_GPIO_Init+0x2e4>)
 8001aca:	f001 f813 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4832      	ldr	r0, [pc, #200]	; (8001bb0 <MX_GPIO_Init+0x2e8>)
 8001ae6:	f001 f805 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001aea:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b04:	4619      	mov	r1, r3
 8001b06:	482d      	ldr	r0, [pc, #180]	; (8001bbc <MX_GPIO_Init+0x2f4>)
 8001b08:	f000 fff4 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b26:	4619      	mov	r1, r3
 8001b28:	4824      	ldr	r0, [pc, #144]	; (8001bbc <MX_GPIO_Init+0x2f4>)
 8001b2a:	f000 ffe3 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001b2e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001b40:	230d      	movs	r3, #13
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <MX_GPIO_Init+0x2f0>)
 8001b4c:	f000 ffd2 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001b62:	230e      	movs	r3, #14
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4812      	ldr	r0, [pc, #72]	; (8001bb8 <MX_GPIO_Init+0x2f0>)
 8001b6e:	f000 ffc1 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b72:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b84:	2302      	movs	r3, #2
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <MX_GPIO_Init+0x2f8>)
 8001b90:	f000 ffb0 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b94:	2340      	movs	r3, #64	; 0x40
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001ba4:	230d      	movs	r3, #13
 8001ba6:	e00d      	b.n	8001bc4 <MX_GPIO_Init+0x2fc>
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48001400 	.word	0x48001400
 8001bb0:	48001800 	.word	0x48001800
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	48001000 	.word	0x48001000
 8001bc0:	48000c00 	.word	0x48000c00
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bca:	4619      	mov	r1, r3
 8001bcc:	484a      	ldr	r0, [pc, #296]	; (8001cf8 <MX_GPIO_Init+0x430>)
 8001bce:	f000 ff91 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001be2:	2302      	movs	r3, #2
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bea:	4619      	mov	r1, r3
 8001bec:	4842      	ldr	r0, [pc, #264]	; (8001cf8 <MX_GPIO_Init+0x430>)
 8001bee:	f000 ff81 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	483b      	ldr	r0, [pc, #236]	; (8001cf8 <MX_GPIO_Init+0x430>)
 8001c0c:	f000 ff72 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c10:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c22:	230c      	movs	r3, #12
 8001c24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4832      	ldr	r0, [pc, #200]	; (8001cf8 <MX_GPIO_Init+0x430>)
 8001c2e:	f000 ff61 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001c32:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c44:	230a      	movs	r3, #10
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f000 ff4f 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6e:	f000 ff41 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c72:	2301      	movs	r3, #1
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c82:	2309      	movs	r3, #9
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	481b      	ldr	r0, [pc, #108]	; (8001cfc <MX_GPIO_Init+0x434>)
 8001c8e:	f000 ff31 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c92:	2304      	movs	r3, #4
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	4813      	ldr	r0, [pc, #76]	; (8001cfc <MX_GPIO_Init+0x434>)
 8001cae:	f000 ff21 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_GPIO_Init+0x438>)
 8001cca:	f000 ff13 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4806      	ldr	r0, [pc, #24]	; (8001d04 <MX_GPIO_Init+0x43c>)
 8001cea:	f000 ff03 	bl	8002af4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cee:	bf00      	nop
 8001cf0:	3738      	adds	r7, #56	; 0x38
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	48000c00 	.word	0x48000c00
 8001d00:	48000400 	.word	0x48000400
 8001d04:	48001000 	.word	0x48001000

08001d08 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001d10:	1d39      	adds	r1, r7, #4
 8001d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d16:	2201      	movs	r2, #1
 8001d18:	4803      	ldr	r0, [pc, #12]	; (8001d28 <__io_putchar+0x20>)
 8001d1a:	f004 fb95 	bl	8006448 <HAL_UART_Transmit>
  return ch;
 8001d1e:	687b      	ldr	r3, [r7, #4]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000244 	.word	0x20000244

08001d2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
   UNUSED(huart);

   uint32_t curr_time = htim2.Instance->CNT;
 8001d34:	4b5c      	ldr	r3, [pc, #368]	; (8001ea8 <HAL_UART_RxCpltCallback+0x17c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

//   int car_finished1 = 0; // bool: has car finished race?
//   int car_finished2 = 0; // bool: has car finished race?
//   int race_started = 0;

   lcd_clear();
 8001d3c:	f7ff f93e 	bl	8000fbc <lcd_clear>

   if(huart == &huart2) { // Received from car 1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a5a      	ldr	r2, [pc, #360]	; (8001eac <HAL_UART_RxCpltCallback+0x180>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d14b      	bne.n	8001de0 <HAL_UART_RxCpltCallback+0xb4>
	   printf("Received interrupt from car 1\n");
 8001d48:	4859      	ldr	r0, [pc, #356]	; (8001eb0 <HAL_UART_RxCpltCallback+0x184>)
 8001d4a:	f007 fa4f 	bl	80091ec <puts>
	   printf("Car 1 finished in %d milliseconds\n", curr_time);
 8001d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d50:	4858      	ldr	r0, [pc, #352]	; (8001eb4 <HAL_UART_RxCpltCallback+0x188>)
 8001d52:	f007 f9dd 	bl	8009110 <iprintf>

	   int time = curr_time / 1000;
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	4a57      	ldr	r2, [pc, #348]	; (8001eb8 <HAL_UART_RxCpltCallback+0x18c>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	099b      	lsrs	r3, r3, #6
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24

	   if(!car_finished2) {
 8001d62:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <HAL_UART_RxCpltCallback+0x190>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d120      	bne.n	8001dac <HAL_UART_RxCpltCallback+0x80>
		   lcd_string(0x27, 0, 0, "Car 1 Wins");
 8001d6a:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <HAL_UART_RxCpltCallback+0x194>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2027      	movs	r0, #39	; 0x27
 8001d72:	f7ff f92b 	bl	8000fcc <lcd_string>
		   lcd_string(0x27, 1, 0, "time: ");
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_UART_RxCpltCallback+0x198>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2027      	movs	r0, #39	; 0x27
 8001d7e:	f7ff f925 	bl	8000fcc <lcd_string>
		   char num_buffer[10];
		   itoa(time, num_buffer, 10);
 8001d82:	f107 0318 	add.w	r3, r7, #24
 8001d86:	220a      	movs	r2, #10
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d8c:	f006 fc54 	bl	8008638 <itoa>
		   lcd_string(0x27, 1, 6, num_buffer);
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	2206      	movs	r2, #6
 8001d96:	2101      	movs	r1, #1
 8001d98:	2027      	movs	r0, #39	; 0x27
 8001d9a:	f7ff f917 	bl	8000fcc <lcd_string>
		   lcd_string(0x27, 1, 13, "sec");
 8001d9e:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_UART_RxCpltCallback+0x19c>)
 8001da0:	220d      	movs	r2, #13
 8001da2:	2101      	movs	r1, #1
 8001da4:	2027      	movs	r0, #39	; 0x27
 8001da6:	f7ff f911 	bl	8000fcc <lcd_string>
 8001daa:	e005      	b.n	8001db8 <HAL_UART_RxCpltCallback+0x8c>
	   } else {
		   lcd_string(0x27, 0, 0, "Car 1 Finished");
 8001dac:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_UART_RxCpltCallback+0x1a0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	2027      	movs	r0, #39	; 0x27
 8001db4:	f7ff f90a 	bl	8000fcc <lcd_string>
	   }

	   car_time1 = curr_time;
 8001db8:	4a45      	ldr	r2, [pc, #276]	; (8001ed0 <HAL_UART_RxCpltCallback+0x1a4>)
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	6013      	str	r3, [r2, #0]
	   car_finished1 = 1;
 8001dbe:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <HAL_UART_RxCpltCallback+0x1a8>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
	   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	4843      	ldr	r0, [pc, #268]	; (8001ed8 <HAL_UART_RxCpltCallback+0x1ac>)
 8001dca:	f001 f825 	bl	8002e18 <HAL_GPIO_WritePin>
	   HAL_Delay(10);
 8001dce:	200a      	movs	r0, #10
 8001dd0:	f000 fca0 	bl	8002714 <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	483f      	ldr	r0, [pc, #252]	; (8001ed8 <HAL_UART_RxCpltCallback+0x1ac>)
 8001dda:	f001 f81d 	bl	8002e18 <HAL_GPIO_WritePin>
 8001dde:	e054      	b.n	8001e8a <HAL_UART_RxCpltCallback+0x15e>

   } else if(huart == &huart3) { // Received from car 2
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a3e      	ldr	r2, [pc, #248]	; (8001edc <HAL_UART_RxCpltCallback+0x1b0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d150      	bne.n	8001e8a <HAL_UART_RxCpltCallback+0x15e>
	   printf("Received interrupt from car 2\n");
 8001de8:	483d      	ldr	r0, [pc, #244]	; (8001ee0 <HAL_UART_RxCpltCallback+0x1b4>)
 8001dea:	f007 f9ff 	bl	80091ec <puts>
	   printf("Car 2 finished in %u milliseconds\n", curr_time);
 8001dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001df0:	483c      	ldr	r0, [pc, #240]	; (8001ee4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001df2:	f007 f98d 	bl	8009110 <iprintf>
	   printf("rx_data2[0]: %d, \n", rx_data2[0]);
 8001df6:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <HAL_UART_RxCpltCallback+0x1bc>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	483b      	ldr	r0, [pc, #236]	; (8001eec <HAL_UART_RxCpltCallback+0x1c0>)
 8001dfe:	f007 f987 	bl	8009110 <iprintf>

	   int time = curr_time / 1000;
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	4a2c      	ldr	r2, [pc, #176]	; (8001eb8 <HAL_UART_RxCpltCallback+0x18c>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	099b      	lsrs	r3, r3, #6
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28

	   if(!car_finished1) {
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_UART_RxCpltCallback+0x1a8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d120      	bne.n	8001e58 <HAL_UART_RxCpltCallback+0x12c>
	   		   lcd_string(0x27, 0, 0, "Car 2 Wins");
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2027      	movs	r0, #39	; 0x27
 8001e1e:	f7ff f8d5 	bl	8000fcc <lcd_string>
			   lcd_string(0x27, 1, 0, "time: ");
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_UART_RxCpltCallback+0x198>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	2101      	movs	r1, #1
 8001e28:	2027      	movs	r0, #39	; 0x27
 8001e2a:	f7ff f8cf 	bl	8000fcc <lcd_string>
			   char num_buffer[10];
			   itoa(time, num_buffer, 10);
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	220a      	movs	r2, #10
 8001e34:	4619      	mov	r1, r3
 8001e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e38:	f006 fbfe 	bl	8008638 <itoa>
			   lcd_string(0x27, 1, 6, num_buffer);
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2206      	movs	r2, #6
 8001e42:	2101      	movs	r1, #1
 8001e44:	2027      	movs	r0, #39	; 0x27
 8001e46:	f7ff f8c1 	bl	8000fcc <lcd_string>
			   lcd_string(0x27, 1, 13, "sec");
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_UART_RxCpltCallback+0x19c>)
 8001e4c:	220d      	movs	r2, #13
 8001e4e:	2101      	movs	r1, #1
 8001e50:	2027      	movs	r0, #39	; 0x27
 8001e52:	f7ff f8bb 	bl	8000fcc <lcd_string>
 8001e56:	e005      	b.n	8001e64 <HAL_UART_RxCpltCallback+0x138>
	   } else {
		   lcd_string(0x27, 0, 0, "Car 2 Finished");
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2027      	movs	r0, #39	; 0x27
 8001e60:	f7ff f8b4 	bl	8000fcc <lcd_string>
	   }

	   car_time2 = curr_time;
 8001e64:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e68:	6013      	str	r3, [r2, #0]
	   car_finished2 = 1;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_UART_RxCpltCallback+0x190>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
	   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2102      	movs	r1, #2
 8001e74:	4818      	ldr	r0, [pc, #96]	; (8001ed8 <HAL_UART_RxCpltCallback+0x1ac>)
 8001e76:	f000 ffcf 	bl	8002e18 <HAL_GPIO_WritePin>
	   HAL_Delay(10);
 8001e7a:	200a      	movs	r0, #10
 8001e7c:	f000 fc4a 	bl	8002714 <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2102      	movs	r1, #2
 8001e84:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <HAL_UART_RxCpltCallback+0x1ac>)
 8001e86:	f000 ffc7 	bl	8002e18 <HAL_GPIO_WritePin>
   }

   if(car_finished1 && car_finished2) {
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_UART_RxCpltCallback+0x1a8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <HAL_UART_RxCpltCallback+0x174>
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_UART_RxCpltCallback+0x190>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_UART_RxCpltCallback+0x174>
	   race_started = 0;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_UART_RxCpltCallback+0x1d0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
   }
 }
 8001ea0:	bf00      	nop
 8001ea2:	3730      	adds	r7, #48	; 0x30
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200004c8 	.word	0x200004c8
 8001eac:	200002d8 	.word	0x200002d8
 8001eb0:	0800b224 	.word	0x0800b224
 8001eb4:	0800b244 	.word	0x0800b244
 8001eb8:	10624dd3 	.word	0x10624dd3
 8001ebc:	20000528 	.word	0x20000528
 8001ec0:	0800b268 	.word	0x0800b268
 8001ec4:	0800b274 	.word	0x0800b274
 8001ec8:	0800b27c 	.word	0x0800b27c
 8001ecc:	0800b280 	.word	0x0800b280
 8001ed0:	2000051c 	.word	0x2000051c
 8001ed4:	20000524 	.word	0x20000524
 8001ed8:	48001800 	.word	0x48001800
 8001edc:	2000036c 	.word	0x2000036c
 8001ee0:	0800b290 	.word	0x0800b290
 8001ee4:	0800b2b0 	.word	0x0800b2b0
 8001ee8:	20000518 	.word	0x20000518
 8001eec:	0800b2d4 	.word	0x0800b2d4
 8001ef0:	0800b2e8 	.word	0x0800b2e8
 8001ef4:	0800b2f4 	.word	0x0800b2f4
 8001ef8:	20000520 	.word	0x20000520
 8001efc:	2000052c 	.word	0x2000052c

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <Error_Handler+0x8>
	...

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_MspInit+0x44>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <HAL_MspInit+0x44>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_MspInit+0x44>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_MspInit+0x44>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <HAL_MspInit+0x44>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_MspInit+0x44>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000

08001f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b0ae      	sub	sp, #184	; 0xb8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	2294      	movs	r2, #148	; 0x94
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f007 fa19 	bl	80093ac <memset>
  if(hi2c->Instance==I2C1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a21      	ldr	r2, [pc, #132]	; (8002004 <HAL_I2C_MspInit+0xb0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d13b      	bne.n	8001ffc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f84:	2340      	movs	r3, #64	; 0x40
 8001f86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	4618      	mov	r0, r3
 8001f92:	f002 fb61 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f9c:	f7ff ffb0 	bl	8001f00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_I2C_MspInit+0xb4>)
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_I2C_MspInit+0xb4>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_I2C_MspInit+0xb4>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc0:	2312      	movs	r3, #18
 8001fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480b      	ldr	r0, [pc, #44]	; (800200c <HAL_I2C_MspInit+0xb8>)
 8001fe0:	f000 fd88 	bl	8002af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_I2C_MspInit+0xb4>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_I2C_MspInit+0xb4>)
 8001fea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_I2C_MspInit+0xb4>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ffc:	bf00      	nop
 8001ffe:	37b8      	adds	r7, #184	; 0xb8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40005400 	.word	0x40005400
 8002008:	40021000 	.word	0x40021000
 800200c:	48000400 	.word	0x48000400

08002010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b0b2      	sub	sp, #200	; 0xc8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	2294      	movs	r2, #148	; 0x94
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f007 f9bb 	bl	80093ac <memset>
  if(huart->Instance==LPUART1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6c      	ldr	r2, [pc, #432]	; (80021ec <HAL_UART_MspInit+0x1dc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d13e      	bne.n	80020be <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002040:	2320      	movs	r3, #32
 8002042:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002044:	2300      	movs	r3, #0
 8002046:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002048:	f107 0320 	add.w	r3, r7, #32
 800204c:	4618      	mov	r0, r3
 800204e:	f002 fb03 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002058:	f7ff ff52 	bl	8001f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800205c:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	4a63      	ldr	r2, [pc, #396]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002068:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002074:	4b5e      	ldr	r3, [pc, #376]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	4a5d      	ldr	r2, [pc, #372]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 800207a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800207e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002080:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 8002082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800208c:	f001 fbfc 	bl	8003888 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002090:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80020aa:	2308      	movs	r3, #8
 80020ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020b4:	4619      	mov	r1, r3
 80020b6:	484f      	ldr	r0, [pc, #316]	; (80021f4 <HAL_UART_MspInit+0x1e4>)
 80020b8:	f000 fd1c 	bl	8002af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020bc:	e091      	b.n	80021e2 <HAL_UART_MspInit+0x1d2>
  else if(huart->Instance==USART2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_UART_MspInit+0x1e8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d143      	bne.n	8002150 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d0:	f107 0320 	add.w	r3, r7, #32
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 fabf 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80020e0:	f7ff ff0e 	bl	8001f00 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e4:	4b42      	ldr	r3, [pc, #264]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	4a41      	ldr	r2, [pc, #260]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 80020ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ee:	6593      	str	r3, [r2, #88]	; 0x58
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fc:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	4a3b      	ldr	r2, [pc, #236]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002108:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 800210a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002114:	2378      	movs	r3, #120	; 0x78
 8002116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800212c:	2307      	movs	r3, #7
 800212e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002132:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002136:	4619      	mov	r1, r3
 8002138:	4830      	ldr	r0, [pc, #192]	; (80021fc <HAL_UART_MspInit+0x1ec>)
 800213a:	f000 fcdb 	bl	8002af4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	2026      	movs	r0, #38	; 0x26
 8002144:	f000 fbe5 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002148:	2026      	movs	r0, #38	; 0x26
 800214a:	f000 fbfe 	bl	800294a <HAL_NVIC_EnableIRQ>
}
 800214e:	e048      	b.n	80021e2 <HAL_UART_MspInit+0x1d2>
  else if(huart->Instance==USART3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <HAL_UART_MspInit+0x1f0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d143      	bne.n	80021e2 <HAL_UART_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800215a:	2304      	movs	r3, #4
 800215c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800215e:	2300      	movs	r3, #0
 8002160:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002162:	f107 0320 	add.w	r3, r7, #32
 8002166:	4618      	mov	r0, r3
 8002168:	f002 fa76 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8002172:	f7ff fec5 	bl	8001f00 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002176:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002180:	6593      	str	r3, [r2, #88]	; 0x58
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_UART_MspInit+0x1e0>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021c0:	2307      	movs	r3, #7
 80021c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021ca:	4619      	mov	r1, r3
 80021cc:	480b      	ldr	r0, [pc, #44]	; (80021fc <HAL_UART_MspInit+0x1ec>)
 80021ce:	f000 fc91 	bl	8002af4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2027      	movs	r0, #39	; 0x27
 80021d8:	f000 fb9b 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021dc:	2027      	movs	r0, #39	; 0x27
 80021de:	f000 fbb4 	bl	800294a <HAL_NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	37c8      	adds	r7, #200	; 0xc8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40008000 	.word	0x40008000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	48001800 	.word	0x48001800
 80021f8:	40004400 	.word	0x40004400
 80021fc:	48000c00 	.word	0x48000c00
 8002200:	40004800 	.word	0x40004800

08002204 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2e      	ldr	r2, [pc, #184]	; (80022dc <HAL_SPI_MspInit+0xd8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d129      	bne.n	800227a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002226:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 8002228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222a:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 800222c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002230:	6613      	str	r3, [r2, #96]	; 0x60
 8002232:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224a:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002256:	23f0      	movs	r3, #240	; 0xf0
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002266:	2305      	movs	r3, #5
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002274:	f000 fc3e 	bl	8002af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002278:	e02c      	b.n	80022d4 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_SPI_MspInit+0xe0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d127      	bne.n	80022d4 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 800228a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_SPI_MspInit+0xdc>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80022b4:	2338      	movs	r3, #56	; 0x38
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022c4:	2306      	movs	r3, #6
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	4806      	ldr	r0, [pc, #24]	; (80022e8 <HAL_SPI_MspInit+0xe4>)
 80022d0:	f000 fc10 	bl	8002af4 <HAL_GPIO_Init>
}
 80022d4:	bf00      	nop
 80022d6:	3730      	adds	r7, #48	; 0x30
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40013000 	.word	0x40013000
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40003c00 	.word	0x40003c00
 80022e8:	48000400 	.word	0x48000400

080022ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230c:	d145      	bne.n	800239a <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230e:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	4a24      	ldr	r2, [pc, #144]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002356:	2301      	movs	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002366:	2301      	movs	r3, #1
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002374:	f000 fbbe 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800238a:	2301      	movs	r3, #1
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4804      	ldr	r0, [pc, #16]	; (80023a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002396:	f000 fbad 	bl	8002af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	3728      	adds	r7, #40	; 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	48000400 	.word	0x48000400

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b0:	e7fe      	b.n	80023b0 <NMI_Handler+0x4>

080023b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <HardFault_Handler+0x4>

080023b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <MemManage_Handler+0x4>

080023be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <UsageFault_Handler+0x4>

080023ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f8:	f000 f96c 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <USART2_IRQHandler+0x10>)
 8002406:	f004 f8fb 	bl	8006600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
//  HAL_UART_RxCpltCallback(&huart2);
  /* USER CODE END USART2_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200002d8 	.word	0x200002d8

08002414 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <USART3_IRQHandler+0x10>)
 800241a:	f004 f8f1 	bl	8006600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000036c 	.word	0x2000036c

08002428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return 1;
 800242c:	2301      	movs	r3, #1
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_kill>:

int _kill(int pid, int sig)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002442:	f007 f805 	bl	8009450 <__errno>
 8002446:	4603      	mov	r3, r0
 8002448:	2216      	movs	r2, #22
 800244a:	601a      	str	r2, [r3, #0]
  return -1;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <_exit>:

void _exit (int status)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ffe7 	bl	8002438 <_kill>
  while (1) {}    /* Make sure we hang here */
 800246a:	e7fe      	b.n	800246a <_exit+0x12>

0800246c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e00a      	b.n	8002494 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800247e:	f3af 8000 	nop.w
 8002482:	4601      	mov	r1, r0
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	60ba      	str	r2, [r7, #8]
 800248a:	b2ca      	uxtb	r2, r1
 800248c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3301      	adds	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	dbf0      	blt.n	800247e <_read+0x12>
  }

  return len;
 800249c:	687b      	ldr	r3, [r7, #4]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	e009      	b.n	80024cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	60ba      	str	r2, [r7, #8]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fc21 	bl	8001d08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbf1      	blt.n	80024b8 <_write+0x12>
  }
  return len;
 80024d4:	687b      	ldr	r3, [r7, #4]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_close>:

int _close(int file)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002506:	605a      	str	r2, [r3, #4]
  return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <_isatty>:

int _isatty(int file)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <_sbrk+0x5c>)
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <_sbrk+0x60>)
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <_sbrk+0x64>)
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <_sbrk+0x68>)
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <_sbrk+0x64>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	429a      	cmp	r2, r3
 8002576:	d207      	bcs.n	8002588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002578:	f006 ff6a 	bl	8009450 <__errno>
 800257c:	4603      	mov	r3, r0
 800257e:	220c      	movs	r2, #12
 8002580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e009      	b.n	800259c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <_sbrk+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <_sbrk+0x64>)
 8002598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200a0000 	.word	0x200a0000
 80025a8:	00000400 	.word	0x00000400
 80025ac:	20000530 	.word	0x20000530
 80025b0:	20000688 	.word	0x20000688

080025b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <SystemInit+0x20>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <SystemInit+0x20>)
 80025c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002610 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025dc:	f7ff ffea 	bl	80025b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025e0:	480c      	ldr	r0, [pc, #48]	; (8002614 <LoopForever+0x6>)
  ldr r1, =_edata
 80025e2:	490d      	ldr	r1, [pc, #52]	; (8002618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <LoopForever+0xe>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025f8:	4c0a      	ldr	r4, [pc, #40]	; (8002624 <LoopForever+0x16>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002606:	f006 ff29 	bl	800945c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800260a:	f7fe fdd1 	bl	80011b0 <main>

0800260e <LoopForever>:

LoopForever:
    b LoopForever
 800260e:	e7fe      	b.n	800260e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002610:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002618:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800261c:	0800b71c 	.word	0x0800b71c
  ldr r2, =_sbss
 8002620:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002624:	20000684 	.word	0x20000684

08002628 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC1_IRQHandler>

0800262a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002634:	2003      	movs	r0, #3
 8002636:	f000 f961 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800263a:	2000      	movs	r0, #0
 800263c:	f000 f80e 	bl	800265c <HAL_InitTick>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	71fb      	strb	r3, [r7, #7]
 800264a:	e001      	b.n	8002650 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800264c:	f7ff fc5e 	bl	8001f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002650:	79fb      	ldrb	r3, [r7, #7]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002668:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_InitTick+0x6c>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <HAL_InitTick+0x70>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_InitTick+0x6c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f96d 	bl	8002966 <HAL_SYSTICK_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b0f      	cmp	r3, #15
 8002696:	d809      	bhi.n	80026ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002698:	2200      	movs	r2, #0
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f000 f937 	bl	8002912 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_InitTick+0x74>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e007      	b.n	80026bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e004      	b.n	80026bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	e001      	b.n	80026bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000008 	.word	0x20000008
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000004 	.word	0x20000004

080026d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x20>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x24>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_IncTick+0x24>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000008 	.word	0x20000008
 80026f8:	20000534 	.word	0x20000534

080026fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_GetTick+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000534 	.word	0x20000534

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff ffee 	bl	80026fc <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d005      	beq.n	800273a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_Delay+0x44>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800273a:	bf00      	nop
 800273c:	f7ff ffde 	bl	80026fc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d8f7      	bhi.n	800273c <HAL_Delay+0x28>
  {
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000008 	.word	0x20000008

0800275c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__NVIC_GetPriorityGrouping+0x18>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0307 	and.w	r3, r3, #7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db0b      	blt.n	80027ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <__NVIC_EnableIRQ+0x38>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2001      	movs	r0, #1
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff29 	bl	800275c <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff3e 	bl	80027a4 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff31 	bl	80027c0 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffa2 	bl	80028b8 <SysTick_Config>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d008      	beq.n	80029a8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e040      	b.n	8002a2a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 020e 	bic.w	r2, r2, #14
 80029b6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c6:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	f003 021c 	and.w	r2, r3, #28
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00c      	beq.n	8002a18 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a0c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a16:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d005      	beq.n	8002a5a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2204      	movs	r2, #4
 8002a52:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	e047      	b.n	8002aea <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 020e 	bic.w	r2, r2, #14
 8002a68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f003 021c 	and.w	r2, r3, #28
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aa6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00c      	beq.n	8002aca <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002abe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ac8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
    }
  }
  return status;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b02:	e166      	b.n	8002dd2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	4013      	ands	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8158 	beq.w	8002dcc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d005      	beq.n	8002b34 <HAL_GPIO_Init+0x40>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d130      	bne.n	8002b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	f003 0201 	and.w	r2, r3, #1
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d017      	beq.n	8002bd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d123      	bne.n	8002c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	08da      	lsrs	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	08da      	lsrs	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3208      	adds	r2, #8
 8002c20:	6939      	ldr	r1, [r7, #16]
 8002c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0203 	and.w	r2, r3, #3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80b2 	beq.w	8002dcc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_GPIO_Init+0x2fc>)
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6c:	4a60      	ldr	r2, [pc, #384]	; (8002df0 <HAL_GPIO_Init+0x2fc>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6613      	str	r3, [r2, #96]	; 0x60
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <HAL_GPIO_Init+0x2fc>)
 8002c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c80:	4a5c      	ldr	r2, [pc, #368]	; (8002df4 <HAL_GPIO_Init+0x300>)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	3302      	adds	r3, #2
 8002c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	220f      	movs	r2, #15
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002caa:	d02b      	beq.n	8002d04 <HAL_GPIO_Init+0x210>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a52      	ldr	r2, [pc, #328]	; (8002df8 <HAL_GPIO_Init+0x304>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d025      	beq.n	8002d00 <HAL_GPIO_Init+0x20c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a51      	ldr	r2, [pc, #324]	; (8002dfc <HAL_GPIO_Init+0x308>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d01f      	beq.n	8002cfc <HAL_GPIO_Init+0x208>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a50      	ldr	r2, [pc, #320]	; (8002e00 <HAL_GPIO_Init+0x30c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d019      	beq.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a4f      	ldr	r2, [pc, #316]	; (8002e04 <HAL_GPIO_Init+0x310>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d013      	beq.n	8002cf4 <HAL_GPIO_Init+0x200>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a4e      	ldr	r2, [pc, #312]	; (8002e08 <HAL_GPIO_Init+0x314>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_GPIO_Init+0x1fc>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a4d      	ldr	r2, [pc, #308]	; (8002e0c <HAL_GPIO_Init+0x318>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d007      	beq.n	8002cec <HAL_GPIO_Init+0x1f8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a4c      	ldr	r2, [pc, #304]	; (8002e10 <HAL_GPIO_Init+0x31c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d101      	bne.n	8002ce8 <HAL_GPIO_Init+0x1f4>
 8002ce4:	2307      	movs	r3, #7
 8002ce6:	e00e      	b.n	8002d06 <HAL_GPIO_Init+0x212>
 8002ce8:	2308      	movs	r3, #8
 8002cea:	e00c      	b.n	8002d06 <HAL_GPIO_Init+0x212>
 8002cec:	2306      	movs	r3, #6
 8002cee:	e00a      	b.n	8002d06 <HAL_GPIO_Init+0x212>
 8002cf0:	2305      	movs	r3, #5
 8002cf2:	e008      	b.n	8002d06 <HAL_GPIO_Init+0x212>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	e006      	b.n	8002d06 <HAL_GPIO_Init+0x212>
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e004      	b.n	8002d06 <HAL_GPIO_Init+0x212>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e002      	b.n	8002d06 <HAL_GPIO_Init+0x212>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_GPIO_Init+0x212>
 8002d04:	2300      	movs	r3, #0
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	f002 0203 	and.w	r2, r2, #3
 8002d0c:	0092      	lsls	r2, r2, #2
 8002d0e:	4093      	lsls	r3, r2
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d16:	4937      	ldr	r1, [pc, #220]	; (8002df4 <HAL_GPIO_Init+0x300>)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d24:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_GPIO_Init+0x320>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d48:	4a32      	ldr	r2, [pc, #200]	; (8002e14 <HAL_GPIO_Init+0x320>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <HAL_GPIO_Init+0x320>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d72:	4a28      	ldr	r2, [pc, #160]	; (8002e14 <HAL_GPIO_Init+0x320>)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d78:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_GPIO_Init+0x320>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <HAL_GPIO_Init+0x320>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <HAL_GPIO_Init+0x320>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dc6:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <HAL_GPIO_Init+0x320>)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f47f ae91 	bne.w	8002b04 <HAL_GPIO_Init+0x10>
  }
}
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	48000400 	.word	0x48000400
 8002dfc:	48000800 	.word	0x48000800
 8002e00:	48000c00 	.word	0x48000c00
 8002e04:	48001000 	.word	0x48001000
 8002e08:	48001400 	.word	0x48001400
 8002e0c:	48001800 	.word	0x48001800
 8002e10:	48001c00 	.word	0x48001c00
 8002e14:	40010400 	.word	0x40010400

08002e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
 8002e24:	4613      	mov	r3, r2
 8002e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e28:	787b      	ldrb	r3, [r7, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e34:	e002      	b.n	8002e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e08d      	b.n	8002f76 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff f870 	bl	8001f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	e006      	b.n	8002ed0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ece:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d108      	bne.n	8002eea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	e007      	b.n	8002efa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69d9      	ldr	r1, [r3, #28]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	817b      	strh	r3, [r7, #10]
 8002f90:	4613      	mov	r3, r2
 8002f92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	f040 80fd 	bne.w	800319c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_I2C_Master_Transmit+0x30>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0f6      	b.n	800319e <HAL_I2C_Master_Transmit+0x21e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fb8:	f7ff fba0 	bl	80026fc <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2319      	movs	r3, #25
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f914 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0e1      	b.n	800319e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2221      	movs	r2, #33	; 0x21
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	893a      	ldrh	r2, [r7, #8]
 8002ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	2bff      	cmp	r3, #255	; 0xff
 800300a:	d906      	bls.n	800301a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	22ff      	movs	r2, #255	; 0xff
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e007      	b.n	800302a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003028:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	2b00      	cmp	r3, #0
 8003030:	d024      	beq.n	800307c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	b2da      	uxtb	r2, r3
 800306c:	8979      	ldrh	r1, [r7, #10]
 800306e:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <HAL_I2C_Master_Transmit+0x228>)
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fa79 	bl	800356c <I2C_TransferConfig>
 800307a:	e066      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003080:	b2da      	uxtb	r2, r3
 8003082:	8979      	ldrh	r1, [r7, #10]
 8003084:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <HAL_I2C_Master_Transmit+0x228>)
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fa6e 	bl	800356c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003090:	e05b      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f8fd 	bl	8003296 <I2C_WaitOnTXISFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e07b      	b.n	800319e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d034      	beq.n	800314a <HAL_I2C_Master_Transmit+0x1ca>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d130      	bne.n	800314a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	2200      	movs	r2, #0
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f880 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e04d      	b.n	800319e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	2bff      	cmp	r3, #255	; 0xff
 800310a:	d90e      	bls.n	800312a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	22ff      	movs	r2, #255	; 0xff
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	b2da      	uxtb	r2, r3
 8003118:	8979      	ldrh	r1, [r7, #10]
 800311a:	2300      	movs	r3, #0
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fa22 	bl	800356c <I2C_TransferConfig>
 8003128:	e00f      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	b2da      	uxtb	r2, r3
 800313a:	8979      	ldrh	r1, [r7, #10]
 800313c:	2300      	movs	r3, #0
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fa11 	bl	800356c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d19e      	bne.n	8003092 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	6a39      	ldr	r1, [r7, #32]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f8e3 	bl	8003324 <I2C_WaitOnSTOPFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e01a      	b.n	800319e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2220      	movs	r2, #32
 800316e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_I2C_Master_Transmit+0x22c>)
 800317c:	400b      	ands	r3, r1
 800317e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	80002000 	.word	0x80002000
 80031ac:	fe00e800 	.word	0xfe00e800

080031b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d103      	bne.n	80031ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d007      	beq.n	80031ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	619a      	str	r2, [r3, #24]
  }
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003208:	e031      	b.n	800326e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d02d      	beq.n	800326e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7ff fa73 	bl	80026fc <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d122      	bne.n	800326e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	429a      	cmp	r2, r3
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	429a      	cmp	r2, r3
 8003244:	d113      	bne.n	800326e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699a      	ldr	r2, [r3, #24]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	429a      	cmp	r2, r3
 800328a:	d0be      	beq.n	800320a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032a2:	e033      	b.n	800330c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f87f 	bl	80033ac <I2C_IsErrorOccurred>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e031      	b.n	800331c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d025      	beq.n	800330c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c0:	f7ff fa1c 	bl	80026fc <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11a      	bne.n	800330c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d013      	beq.n	800330c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e007      	b.n	800331c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d1c4      	bne.n	80032a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003330:	e02f      	b.n	8003392 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f838 	bl	80033ac <I2C_IsErrorOccurred>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e02d      	b.n	80033a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7ff f9d9 	bl	80026fc <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d11a      	bne.n	8003392 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b20      	cmp	r3, #32
 8003368:	d013      	beq.n	8003392 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e007      	b.n	80033a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b20      	cmp	r3, #32
 800339e:	d1c8      	bne.n	8003332 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d068      	beq.n	80034aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2210      	movs	r2, #16
 80033de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033e0:	e049      	b.n	8003476 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d045      	beq.n	8003476 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7ff f987 	bl	80026fc <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <I2C_IsErrorOccurred+0x54>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d13a      	bne.n	8003476 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003412:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003422:	d121      	bne.n	8003468 <I2C_IsErrorOccurred+0xbc>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800342a:	d01d      	beq.n	8003468 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	2b20      	cmp	r3, #32
 8003430:	d01a      	beq.n	8003468 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003440:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003442:	f7ff f95b 	bl	80026fc <HAL_GetTick>
 8003446:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003448:	e00e      	b.n	8003468 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800344a:	f7ff f957 	bl	80026fc <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b19      	cmp	r3, #25
 8003456:	d907      	bls.n	8003468 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	f043 0320 	orr.w	r3, r3, #32
 800345e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003466:	e006      	b.n	8003476 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b20      	cmp	r3, #32
 8003474:	d1e9      	bne.n	800344a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d003      	beq.n	800348c <I2C_IsErrorOccurred+0xe0>
 8003484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0aa      	beq.n	80033e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800348c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003490:	2b00      	cmp	r3, #0
 8003492:	d103      	bne.n	800349c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2220      	movs	r2, #32
 800349a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	f043 0304 	orr.w	r3, r3, #4
 80034a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00b      	beq.n	80034d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00b      	beq.n	8003518 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	f043 0302 	orr.w	r3, r3, #2
 8003506:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003510:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01c      	beq.n	800355a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff fe45 	bl	80031b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <I2C_IsErrorOccurred+0x1bc>)
 8003532:	400b      	ands	r3, r1
 8003534:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	431a      	orrs	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800355a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800355e:	4618      	mov	r0, r3
 8003560:	3728      	adds	r7, #40	; 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	fe00e800 	.word	0xfe00e800

0800356c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	607b      	str	r3, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	4613      	mov	r3, r2
 800357c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003584:	7a7b      	ldrb	r3, [r7, #9]
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800358c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	4313      	orrs	r3, r2
 8003596:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800359a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	0d5b      	lsrs	r3, r3, #21
 80035a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <I2C_TransferConfig+0x60>)
 80035ac:	430b      	orrs	r3, r1
 80035ae:	43db      	mvns	r3, r3
 80035b0:	ea02 0103 	and.w	r1, r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	03ff63ff 	.word	0x03ff63ff

080035d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d138      	bne.n	8003658 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e032      	b.n	800365a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003622:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6819      	ldr	r1, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003658:	2302      	movs	r3, #2
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b20      	cmp	r3, #32
 800367a:	d139      	bne.n	80036f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003686:	2302      	movs	r3, #2
 8003688:	e033      	b.n	80036f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2224      	movs	r2, #36	; 0x24
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e000      	b.n	80036f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003704:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003710:	d102      	bne.n	8003718 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003716:	e00b      	b.n	8003730 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <HAL_PWREx_GetVoltageRange+0x3c>)
 800371a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	d102      	bne.n	800372e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800372c:	e000      	b.n	8003730 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800372e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40007000 	.word	0x40007000

08003740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d141      	bne.n	80037d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800374e:	4b4b      	ldr	r3, [pc, #300]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d131      	bne.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800375c:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003762:	4a46      	ldr	r2, [pc, #280]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800376c:	4b43      	ldr	r3, [pc, #268]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003774:	4a41      	ldr	r2, [pc, #260]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800377a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800377c:	4b40      	ldr	r3, [pc, #256]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2232      	movs	r2, #50	; 0x32
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	4a3f      	ldr	r2, [pc, #252]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	0c9b      	lsrs	r3, r3, #18
 800378e:	3301      	adds	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003792:	e002      	b.n	800379a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3b01      	subs	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800379a:	4b38      	ldr	r3, [pc, #224]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a6:	d102      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f2      	bne.n	8003794 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037ae:	4b33      	ldr	r3, [pc, #204]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ba:	d158      	bne.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e057      	b.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037c0:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c6:	4a2d      	ldr	r2, [pc, #180]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037d0:	e04d      	b.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d141      	bne.n	800385e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037da:	4b28      	ldr	r3, [pc, #160]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e6:	d131      	bne.n	800384c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ee:	4a23      	ldr	r2, [pc, #140]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003800:	4a1e      	ldr	r2, [pc, #120]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003806:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2232      	movs	r2, #50	; 0x32
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	0c9b      	lsrs	r3, r3, #18
 800381a:	3301      	adds	r3, #1
 800381c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381e:	e002      	b.n	8003826 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3b01      	subs	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003832:	d102      	bne.n	800383a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f2      	bne.n	8003820 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	d112      	bne.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e011      	b.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003858:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800385c:	e007      	b.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003866:	4a05      	ldr	r2, [pc, #20]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800386c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40007000 	.word	0x40007000
 8003880:	20000000 	.word	0x20000000
 8003884:	431bde83 	.word	0x431bde83

08003888 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003896:	6053      	str	r3, [r2, #4]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40007000 	.word	0x40007000

080038a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f000 bc08 	b.w	80040cc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038bc:	4b96      	ldr	r3, [pc, #600]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c6:	4b94      	ldr	r3, [pc, #592]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80e4 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <HAL_RCC_OscConfig+0x4c>
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	f040 808b 	bne.w	8003a02 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	f040 8087 	bne.w	8003a02 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038f4:	4b88      	ldr	r3, [pc, #544]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_OscConfig+0x64>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e3df      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1a      	ldr	r2, [r3, #32]
 8003910:	4b81      	ldr	r3, [pc, #516]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <HAL_RCC_OscConfig+0x7e>
 800391c:	4b7e      	ldr	r3, [pc, #504]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003924:	e005      	b.n	8003932 <HAL_RCC_OscConfig+0x8a>
 8003926:	4b7c      	ldr	r3, [pc, #496]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003932:	4293      	cmp	r3, r2
 8003934:	d223      	bcs.n	800397e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fdcc 	bl	80044d8 <RCC_SetFlashLatencyFromMSIRange>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e3c0      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800394a:	4b73      	ldr	r3, [pc, #460]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a72      	ldr	r2, [pc, #456]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003950:	f043 0308 	orr.w	r3, r3, #8
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b70      	ldr	r3, [pc, #448]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	496d      	ldr	r1, [pc, #436]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003968:	4b6b      	ldr	r3, [pc, #428]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	4968      	ldr	r1, [pc, #416]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
 800397c:	e025      	b.n	80039ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800397e:	4b66      	ldr	r3, [pc, #408]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a65      	ldr	r2, [pc, #404]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003984:	f043 0308 	orr.w	r3, r3, #8
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b63      	ldr	r3, [pc, #396]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4960      	ldr	r1, [pc, #384]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800399c:	4b5e      	ldr	r3, [pc, #376]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	495b      	ldr	r1, [pc, #364]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fd8c 	bl	80044d8 <RCC_SetFlashLatencyFromMSIRange>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e380      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039ca:	f000 fcc1 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	4950      	ldr	r1, [pc, #320]	; (8003b1c <HAL_RCC_OscConfig+0x274>)
 80039dc:	5ccb      	ldrb	r3, [r1, r3]
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	fa22 f303 	lsr.w	r3, r2, r3
 80039e6:	4a4e      	ldr	r2, [pc, #312]	; (8003b20 <HAL_RCC_OscConfig+0x278>)
 80039e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039ea:	4b4e      	ldr	r3, [pc, #312]	; (8003b24 <HAL_RCC_OscConfig+0x27c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fe34 	bl	800265c <HAL_InitTick>
 80039f4:	4603      	mov	r3, r0
 80039f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d052      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	e364      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d032      	beq.n	8003a70 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a0a:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a42      	ldr	r2, [pc, #264]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a16:	f7fe fe71 	bl	80026fc <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a1e:	f7fe fe6d 	bl	80026fc <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e34d      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a30:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a3c:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a35      	ldr	r2, [pc, #212]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a42:	f043 0308 	orr.w	r3, r3, #8
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4930      	ldr	r1, [pc, #192]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a5a:	4b2f      	ldr	r3, [pc, #188]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	492b      	ldr	r1, [pc, #172]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
 8003a6e:	e01a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a70:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a28      	ldr	r2, [pc, #160]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fe3e 	bl	80026fc <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a84:	f7fe fe3a 	bl	80026fc <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e31a      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x1dc>
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d073      	beq.n	8003b9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x21c>
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d10e      	bne.n	8003adc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d063      	beq.n	8003b98 <HAL_RCC_OscConfig+0x2f0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d15f      	bne.n	8003b98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e2f7      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCC_OscConfig+0x24c>
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e025      	b.n	8003b40 <HAL_RCC_OscConfig+0x298>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003afc:	d114      	bne.n	8003b28 <HAL_RCC_OscConfig+0x280>
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a05      	ldr	r2, [pc, #20]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a02      	ldr	r2, [pc, #8]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e013      	b.n	8003b40 <HAL_RCC_OscConfig+0x298>
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	0800b304 	.word	0x0800b304
 8003b20:	20000000 	.word	0x20000000
 8003b24:	20000004 	.word	0x20000004
 8003b28:	4ba0      	ldr	r3, [pc, #640]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a9f      	ldr	r2, [pc, #636]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b9d      	ldr	r3, [pc, #628]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a9c      	ldr	r2, [pc, #624]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d013      	beq.n	8003b70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fe fdd8 	bl	80026fc <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fe fdd4 	bl	80026fc <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e2b4      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b62:	4b92      	ldr	r3, [pc, #584]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x2a8>
 8003b6e:	e014      	b.n	8003b9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe fdc4 	bl	80026fc <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fe fdc0 	bl	80026fc <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e2a0      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8a:	4b88      	ldr	r3, [pc, #544]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2d0>
 8003b96:	e000      	b.n	8003b9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d060      	beq.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x310>
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b0c      	cmp	r3, #12
 8003bb0:	d119      	bne.n	8003be6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d116      	bne.n	8003be6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb8:	4b7c      	ldr	r3, [pc, #496]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x328>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e27d      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	4973      	ldr	r1, [pc, #460]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be4:	e040      	b.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d023      	beq.n	8003c36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bee:	4b6f      	ldr	r3, [pc, #444]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6e      	ldr	r2, [pc, #440]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fe fd7f 	bl	80026fc <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fe fd7b 	bl	80026fc <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e25b      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c14:	4b65      	ldr	r3, [pc, #404]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c20:	4b62      	ldr	r3, [pc, #392]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	061b      	lsls	r3, r3, #24
 8003c2e:	495f      	ldr	r1, [pc, #380]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]
 8003c34:	e018      	b.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c36:	4b5d      	ldr	r3, [pc, #372]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a5c      	ldr	r2, [pc, #368]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fe fd5b 	bl	80026fc <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7fe fd57 	bl	80026fc <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e237      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c5c:	4b53      	ldr	r3, [pc, #332]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d03c      	beq.n	8003cee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01c      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c82:	4a4a      	ldr	r2, [pc, #296]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fe fd36 	bl	80026fc <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c94:	f7fe fd32 	bl	80026fc <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e212      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca6:	4b41      	ldr	r3, [pc, #260]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ef      	beq.n	8003c94 <HAL_RCC_OscConfig+0x3ec>
 8003cb4:	e01b      	b.n	8003cee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb6:	4b3d      	ldr	r3, [pc, #244]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbc:	4a3b      	ldr	r2, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7fe fd19 	bl	80026fc <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cce:	f7fe fd15 	bl	80026fc <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e1f5      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce0:	4b32      	ldr	r3, [pc, #200]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ef      	bne.n	8003cce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80a6 	beq.w	8003e48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d00:	4b2a      	ldr	r3, [pc, #168]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10d      	bne.n	8003d28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0c:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	4a26      	ldr	r2, [pc, #152]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d16:	6593      	str	r3, [r2, #88]	; 0x58
 8003d18:	4b24      	ldr	r3, [pc, #144]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d24:	2301      	movs	r3, #1
 8003d26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d28:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <HAL_RCC_OscConfig+0x508>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d118      	bne.n	8003d66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d34:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <HAL_RCC_OscConfig+0x508>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <HAL_RCC_OscConfig+0x508>)
 8003d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d40:	f7fe fcdc 	bl	80026fc <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d48:	f7fe fcd8 	bl	80026fc <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e1b8      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <HAL_RCC_OscConfig+0x508>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d108      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4d8>
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	4a0d      	ldr	r2, [pc, #52]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d7e:	e029      	b.n	8003dd4 <HAL_RCC_OscConfig+0x52c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b05      	cmp	r3, #5
 8003d86:	d115      	bne.n	8003db4 <HAL_RCC_OscConfig+0x50c>
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	4a07      	ldr	r2, [pc, #28]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	4a03      	ldr	r2, [pc, #12]	; (8003dac <HAL_RCC_OscConfig+0x504>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da8:	e014      	b.n	8003dd4 <HAL_RCC_OscConfig+0x52c>
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40007000 	.word	0x40007000
 8003db4:	4b9d      	ldr	r3, [pc, #628]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	4a9c      	ldr	r2, [pc, #624]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc4:	4b99      	ldr	r3, [pc, #612]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	4a98      	ldr	r2, [pc, #608]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ddc:	f7fe fc8e 	bl	80026fc <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fe fc8a 	bl	80026fc <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e168      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfa:	4b8c      	ldr	r3, [pc, #560]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ed      	beq.n	8003de4 <HAL_RCC_OscConfig+0x53c>
 8003e08:	e015      	b.n	8003e36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0a:	f7fe fc77 	bl	80026fc <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fe fc73 	bl	80026fc <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e151      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e28:	4b80      	ldr	r3, [pc, #512]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ed      	bne.n	8003e12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e36:	7ffb      	ldrb	r3, [r7, #31]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3c:	4b7b      	ldr	r3, [pc, #492]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e40:	4a7a      	ldr	r2, [pc, #488]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d03c      	beq.n	8003ece <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01c      	beq.n	8003e96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e5c:	4b73      	ldr	r3, [pc, #460]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e62:	4a72      	ldr	r2, [pc, #456]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fe fc46 	bl	80026fc <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e74:	f7fe fc42 	bl	80026fc <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e122      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e86:	4b69      	ldr	r3, [pc, #420]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <HAL_RCC_OscConfig+0x5cc>
 8003e94:	e01b      	b.n	8003ece <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e96:	4b65      	ldr	r3, [pc, #404]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e9c:	4a63      	ldr	r2, [pc, #396]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fe fc29 	bl	80026fc <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eae:	f7fe fc25 	bl	80026fc <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e105      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ec0:	4b5a      	ldr	r3, [pc, #360]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1ef      	bne.n	8003eae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80f9 	beq.w	80040ca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	f040 80cf 	bne.w	8004080 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ee2:	4b52      	ldr	r3, [pc, #328]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0203 	and.w	r2, r3, #3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d12c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	3b01      	subs	r3, #1
 8003f02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d123      	bne.n	8003f50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d11b      	bne.n	8003f50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d113      	bne.n	8003f50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	3b01      	subs	r3, #1
 8003f36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d109      	bne.n	8003f50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d071      	beq.n	8004034 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d068      	beq.n	8004028 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f56:	4b35      	ldr	r3, [pc, #212]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f62:	4b32      	ldr	r3, [pc, #200]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0ac      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f72:	4b2e      	ldr	r3, [pc, #184]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2d      	ldr	r2, [pc, #180]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003f78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f7e:	f7fe fbbd 	bl	80026fc <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fe fbb9 	bl	80026fc <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e099      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f98:	4b24      	ldr	r3, [pc, #144]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa4:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_RCC_OscConfig+0x788>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fb4:	3a01      	subs	r2, #1
 8003fb6:	0112      	lsls	r2, r2, #4
 8003fb8:	4311      	orrs	r1, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fbe:	0212      	lsls	r2, r2, #8
 8003fc0:	4311      	orrs	r1, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fc6:	0852      	lsrs	r2, r2, #1
 8003fc8:	3a01      	subs	r2, #1
 8003fca:	0552      	lsls	r2, r2, #21
 8003fcc:	4311      	orrs	r1, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fd2:	0852      	lsrs	r2, r2, #1
 8003fd4:	3a01      	subs	r2, #1
 8003fd6:	0652      	lsls	r2, r2, #25
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fde:	06d2      	lsls	r2, r2, #27
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	4912      	ldr	r1, [pc, #72]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fe8:	4b10      	ldr	r3, [pc, #64]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a0f      	ldr	r2, [pc, #60]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a0c      	ldr	r2, [pc, #48]	; (800402c <HAL_RCC_OscConfig+0x784>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004000:	f7fe fb7c 	bl	80026fc <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004008:	f7fe fb78 	bl	80026fc <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e058      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401a:	4b04      	ldr	r3, [pc, #16]	; (800402c <HAL_RCC_OscConfig+0x784>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004026:	e050      	b.n	80040ca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e04f      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
 800402c:	40021000 	.word	0x40021000
 8004030:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004034:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d144      	bne.n	80040ca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004040:	4b24      	ldr	r3, [pc, #144]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a23      	ldr	r2, [pc, #140]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 8004046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800404a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800404c:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a20      	ldr	r2, [pc, #128]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004056:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004058:	f7fe fb50 	bl	80026fc <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe fb4c 	bl	80026fc <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e02c      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x7b8>
 800407e:	e024      	b.n	80040ca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d01f      	beq.n	80040c6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a12      	ldr	r2, [pc, #72]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 800408c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fe fb33 	bl	80026fc <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe fb2f 	bl	80026fc <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e00f      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f0      	bne.n	800409a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	4905      	ldr	r1, [pc, #20]	; (80040d4 <HAL_RCC_OscConfig+0x82c>)
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCC_OscConfig+0x830>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	60cb      	str	r3, [r1, #12]
 80040c4:	e001      	b.n	80040ca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000
 80040d8:	feeefffc 	.word	0xfeeefffc

080040dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e11d      	b.n	8004330 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f4:	4b90      	ldr	r3, [pc, #576]	; (8004338 <HAL_RCC_ClockConfig+0x25c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d910      	bls.n	8004124 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b8d      	ldr	r3, [pc, #564]	; (8004338 <HAL_RCC_ClockConfig+0x25c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 020f 	bic.w	r2, r3, #15
 800410a:	498b      	ldr	r1, [pc, #556]	; (8004338 <HAL_RCC_ClockConfig+0x25c>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b89      	ldr	r3, [pc, #548]	; (8004338 <HAL_RCC_ClockConfig+0x25c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e105      	b.n	8004330 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d010      	beq.n	8004152 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	4b81      	ldr	r3, [pc, #516]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413c:	429a      	cmp	r2, r3
 800413e:	d908      	bls.n	8004152 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	4b7e      	ldr	r3, [pc, #504]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	497b      	ldr	r1, [pc, #492]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d079      	beq.n	8004252 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d11e      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004166:	4b75      	ldr	r3, [pc, #468]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0dc      	b.n	8004330 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004176:	f000 fa09 	bl	800458c <RCC_GetSysClockFreqFromPLLSource>
 800417a:	4603      	mov	r3, r0
 800417c:	4a70      	ldr	r2, [pc, #448]	; (8004340 <HAL_RCC_ClockConfig+0x264>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d946      	bls.n	8004210 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004182:	4b6e      	ldr	r3, [pc, #440]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d140      	bne.n	8004210 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800418e:	4b6b      	ldr	r3, [pc, #428]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004196:	4a69      	ldr	r2, [pc, #420]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e035      	b.n	8004210 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ac:	4b63      	ldr	r3, [pc, #396]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d115      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0b9      	b.n	8004330 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d107      	bne.n	80041d4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041c4:	4b5d      	ldr	r3, [pc, #372]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0ad      	b.n	8004330 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d4:	4b59      	ldr	r3, [pc, #356]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0a5      	b.n	8004330 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80041e4:	f000 f8b4 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 80041e8:	4603      	mov	r3, r0
 80041ea:	4a55      	ldr	r2, [pc, #340]	; (8004340 <HAL_RCC_ClockConfig+0x264>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d90f      	bls.n	8004210 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041f0:	4b52      	ldr	r3, [pc, #328]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d109      	bne.n	8004210 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041fc:	4b4f      	ldr	r3, [pc, #316]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004204:	4a4d      	ldr	r2, [pc, #308]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004210:	4b4a      	ldr	r3, [pc, #296]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f023 0203 	bic.w	r2, r3, #3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4947      	ldr	r1, [pc, #284]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004222:	f7fe fa6b 	bl	80026fc <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004228:	e00a      	b.n	8004240 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422a:	f7fe fa67 	bl	80026fc <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e077      	b.n	8004330 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004240:	4b3e      	ldr	r3, [pc, #248]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 020c 	and.w	r2, r3, #12
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	429a      	cmp	r2, r3
 8004250:	d1eb      	bne.n	800422a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b80      	cmp	r3, #128	; 0x80
 8004256:	d105      	bne.n	8004264 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004258:	4b38      	ldr	r3, [pc, #224]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a37      	ldr	r2, [pc, #220]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 800425e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004262:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	4b31      	ldr	r3, [pc, #196]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800427c:	429a      	cmp	r2, r3
 800427e:	d208      	bcs.n	8004292 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b2e      	ldr	r3, [pc, #184]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	492b      	ldr	r1, [pc, #172]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004292:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCC_ClockConfig+0x25c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d210      	bcs.n	80042c2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <HAL_RCC_ClockConfig+0x25c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f023 020f 	bic.w	r2, r3, #15
 80042a8:	4923      	ldr	r1, [pc, #140]	; (8004338 <HAL_RCC_ClockConfig+0x25c>)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCC_ClockConfig+0x25c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d001      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e036      	b.n	8004330 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	4918      	ldr	r1, [pc, #96]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ec:	4b13      	ldr	r3, [pc, #76]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4910      	ldr	r1, [pc, #64]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004300:	f000 f826 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <HAL_RCC_ClockConfig+0x260>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	490c      	ldr	r1, [pc, #48]	; (8004344 <HAL_RCC_ClockConfig+0x268>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <HAL_RCC_ClockConfig+0x26c>)
 800431e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_RCC_ClockConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe f999 	bl	800265c <HAL_InitTick>
 800432a:	4603      	mov	r3, r0
 800432c:	73fb      	strb	r3, [r7, #15]

  return status;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40022000 	.word	0x40022000
 800433c:	40021000 	.word	0x40021000
 8004340:	04c4b400 	.word	0x04c4b400
 8004344:	0800b304 	.word	0x0800b304
 8004348:	20000000 	.word	0x20000000
 800434c:	20000004 	.word	0x20000004

08004350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800435e:	4b3e      	ldr	r3, [pc, #248]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004368:	4b3b      	ldr	r3, [pc, #236]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x34>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	d121      	bne.n	80043c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d11e      	bne.n	80043c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004384:	4b34      	ldr	r3, [pc, #208]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004390:	4b31      	ldr	r3, [pc, #196]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 8004392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e005      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043a0:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043ac:	4a2b      	ldr	r2, [pc, #172]	; (800445c <HAL_RCC_GetSysClockFreq+0x10c>)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10d      	bne.n	80043d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d102      	bne.n	80043ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <HAL_RCC_GetSysClockFreq+0x110>)
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e004      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043d4:	4b23      	ldr	r3, [pc, #140]	; (8004464 <HAL_RCC_GetSysClockFreq+0x114>)
 80043d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d134      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043de:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d003      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d003      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0xac>
 80043f4:	e005      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043f6:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <HAL_RCC_GetSysClockFreq+0x110>)
 80043f8:	617b      	str	r3, [r7, #20]
      break;
 80043fa:	e005      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043fc:	4b19      	ldr	r3, [pc, #100]	; (8004464 <HAL_RCC_GetSysClockFreq+0x114>)
 80043fe:	617b      	str	r3, [r7, #20]
      break;
 8004400:	e002      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	617b      	str	r3, [r7, #20]
      break;
 8004406:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	3301      	adds	r3, #1
 8004414:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	fb03 f202 	mul.w	r2, r3, r2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	0e5b      	lsrs	r3, r3, #25
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	3301      	adds	r3, #1
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004448:	69bb      	ldr	r3, [r7, #24]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	0800b31c 	.word	0x0800b31c
 8004460:	00f42400 	.word	0x00f42400
 8004464:	007a1200 	.word	0x007a1200

08004468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_RCC_GetHCLKFreq+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000000 	.word	0x20000000

08004480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004484:	f7ff fff0 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004488:	4602      	mov	r2, r0
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4904      	ldr	r1, [pc, #16]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004496:	5ccb      	ldrb	r3, [r1, r3]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	0800b314 	.word	0x0800b314

080044ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044b0:	f7ff ffda 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	0adb      	lsrs	r3, r3, #11
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4904      	ldr	r1, [pc, #16]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	0800b314 	.word	0x0800b314

080044d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044f0:	f7ff f906 	bl	8003700 <HAL_PWREx_GetVoltageRange>
 80044f4:	6178      	str	r0, [r7, #20]
 80044f6:	e014      	b.n	8004522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044f8:	4b22      	ldr	r3, [pc, #136]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	4a21      	ldr	r2, [pc, #132]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004502:	6593      	str	r3, [r2, #88]	; 0x58
 8004504:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004510:	f7ff f8f6 	bl	8003700 <HAL_PWREx_GetVoltageRange>
 8004514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004520:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004528:	d10b      	bne.n	8004542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d913      	bls.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2ba0      	cmp	r3, #160	; 0xa0
 8004534:	d902      	bls.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004536:	2302      	movs	r3, #2
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	e00d      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800453c:	2301      	movs	r3, #1
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e00a      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b7f      	cmp	r3, #127	; 0x7f
 8004546:	d902      	bls.n	800454e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004548:	2302      	movs	r3, #2
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e004      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b70      	cmp	r3, #112	; 0x70
 8004552:	d101      	bne.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004554:	2301      	movs	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 020f 	bic.w	r2, r3, #15
 8004560:	4909      	ldr	r1, [pc, #36]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	40022000 	.word	0x40022000

0800458c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004592:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d00b      	beq.n	80045ba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d825      	bhi.n	80045f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d008      	beq.n	80045c0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d11f      	bne.n	80045f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80045b6:	613b      	str	r3, [r7, #16]
    break;
 80045b8:	e01f      	b.n	80045fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80045ba:	4b25      	ldr	r3, [pc, #148]	; (8004650 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80045bc:	613b      	str	r3, [r7, #16]
    break;
 80045be:	e01c      	b.n	80045fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045c0:	4b21      	ldr	r3, [pc, #132]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d107      	bne.n	80045dc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045cc:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e005      	b.n	80045e8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80045e8:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f0:	613b      	str	r3, [r7, #16]
    break;
 80045f2:	e002      	b.n	80045fa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]
    break;
 80045f8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	3301      	adds	r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	0a1b      	lsrs	r3, r3, #8
 800460e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	fb03 f202 	mul.w	r2, r3, r2
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004620:	4b09      	ldr	r3, [pc, #36]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	0e5b      	lsrs	r3, r3, #25
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800463a:	683b      	ldr	r3, [r7, #0]
}
 800463c:	4618      	mov	r0, r3
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40021000 	.word	0x40021000
 800464c:	00f42400 	.word	0x00f42400
 8004650:	007a1200 	.word	0x007a1200
 8004654:	0800b31c 	.word	0x0800b31c

08004658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004660:	2300      	movs	r3, #0
 8004662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004664:	2300      	movs	r3, #0
 8004666:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004670:	2b00      	cmp	r3, #0
 8004672:	d040      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d02a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d825      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004680:	2b60      	cmp	r3, #96	; 0x60
 8004682:	d026      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004684:	2b60      	cmp	r3, #96	; 0x60
 8004686:	d821      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d006      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d81d      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d010      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004698:	e018      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800469a:	4b89      	ldr	r3, [pc, #548]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4a88      	ldr	r2, [pc, #544]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046a6:	e015      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fb02 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046b8:	e00c      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3320      	adds	r3, #32
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fbed 	bl	8004ea0 <RCCEx_PLLSAI2_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ca:	e003      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	74fb      	strb	r3, [r7, #19]
      break;
 80046d0:	e000      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80046d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046da:	4b79      	ldr	r3, [pc, #484]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046e0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e8:	4975      	ldr	r1, [pc, #468]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046f0:	e001      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d047      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470a:	d030      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004710:	d82a      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004716:	d02a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471c:	d824      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800471e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004722:	d008      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004728:	d81e      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800472e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004732:	d010      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004734:	e018      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004736:	4b62      	ldr	r3, [pc, #392]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	4a61      	ldr	r2, [pc, #388]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004740:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004742:	e015      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fab4 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004754:	e00c      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3320      	adds	r3, #32
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fb9f 	bl	8004ea0 <RCCEx_PLLSAI2_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004766:	e003      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	74fb      	strb	r3, [r7, #19]
      break;
 800476c:	e000      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800476e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10b      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004776:	4b52      	ldr	r3, [pc, #328]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800477c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	494e      	ldr	r1, [pc, #312]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800478c:	e001      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 809f 	beq.w	80048de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a0:	2300      	movs	r3, #0
 80047a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047a4:	4b46      	ldr	r3, [pc, #280]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80047b4:	2300      	movs	r3, #0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	4a40      	ldr	r2, [pc, #256]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6593      	str	r3, [r2, #88]	; 0x58
 80047c6:	4b3e      	ldr	r3, [pc, #248]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d2:	2301      	movs	r3, #1
 80047d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d6:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a3a      	ldr	r2, [pc, #232]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e2:	f7fd ff8b 	bl	80026fc <HAL_GetTick>
 80047e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047e8:	e009      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ea:	f7fd ff87 	bl	80026fc <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d902      	bls.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	74fb      	strb	r3, [r7, #19]
        break;
 80047fc:	e005      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047fe:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ef      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d15b      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01f      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	429a      	cmp	r2, r3
 800482c:	d019      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800482e:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004838:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800483a:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800484a:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004850:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800485a:	4a19      	ldr	r2, [pc, #100]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d016      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fd ff46 	bl	80026fc <HAL_GetTick>
 8004870:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004872:	e00b      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fd ff42 	bl	80026fc <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d902      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	74fb      	strb	r3, [r7, #19]
            break;
 800488a:	e006      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ec      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10c      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048b8:	e008      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ba:	7cfb      	ldrb	r3, [r7, #19]
 80048bc:	74bb      	strb	r3, [r7, #18]
 80048be:	e005      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048cc:	7c7b      	ldrb	r3, [r7, #17]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d105      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d2:	4ba0      	ldr	r3, [pc, #640]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	4a9f      	ldr	r2, [pc, #636]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ea:	4b9a      	ldr	r3, [pc, #616]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f023 0203 	bic.w	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f8:	4996      	ldr	r1, [pc, #600]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800490c:	4b91      	ldr	r3, [pc, #580]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f023 020c 	bic.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	498e      	ldr	r1, [pc, #568]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800492e:	4b89      	ldr	r3, [pc, #548]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	4985      	ldr	r1, [pc, #532]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004950:	4b80      	ldr	r3, [pc, #512]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	497d      	ldr	r1, [pc, #500]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004972:	4b78      	ldr	r3, [pc, #480]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	4974      	ldr	r1, [pc, #464]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004994:	4b6f      	ldr	r3, [pc, #444]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a2:	496c      	ldr	r1, [pc, #432]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049b6:	4b67      	ldr	r3, [pc, #412]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c4:	4963      	ldr	r1, [pc, #396]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049d8:	4b5e      	ldr	r3, [pc, #376]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e6:	495b      	ldr	r1, [pc, #364]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049fa:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	4952      	ldr	r1, [pc, #328]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a1c:	4b4d      	ldr	r3, [pc, #308]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	494a      	ldr	r1, [pc, #296]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a3e:	4b45      	ldr	r3, [pc, #276]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4c:	4941      	ldr	r1, [pc, #260]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a60:	4b3c      	ldr	r3, [pc, #240]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a66:	f023 0203 	bic.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6e:	4939      	ldr	r1, [pc, #228]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a82:	4b34      	ldr	r3, [pc, #208]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a90:	4930      	ldr	r1, [pc, #192]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa2:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	4a2b      	ldr	r2, [pc, #172]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aac:	60d3      	str	r3, [r2, #12]
 8004aae:	e011      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f8f9 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d04d      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae8:	d108      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004aea:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004af0:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004af6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004afa:	e012      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b02:	4a14      	ldr	r2, [pc, #80]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b1a:	490e      	ldr	r1, [pc, #56]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b2a:	d106      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b36:	60d3      	str	r3, [r2, #12]
 8004b38:	e020      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b42:	d109      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4a02      	ldr	r2, [pc, #8]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4e:	60d3      	str	r3, [r2, #12]
 8004b50:	e014      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3304      	adds	r3, #4
 8004b66:	2101      	movs	r1, #1
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f8a5 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d028      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b88:	4b4a      	ldr	r3, [pc, #296]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b96:	4947      	ldr	r1, [pc, #284]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba8:	4b42      	ldr	r3, [pc, #264]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a41      	ldr	r2, [pc, #260]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb2:	60d3      	str	r3, [r2, #12]
 8004bb4:	e011      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bbe:	d10c      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f876 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01e      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be6:	4b33      	ldr	r3, [pc, #204]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf6:	492f      	ldr	r1, [pc, #188]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f851 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00b      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c30:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c36:	f023 0204 	bic.w	r2, r3, #4
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c40:	491c      	ldr	r1, [pc, #112]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c54:	4b17      	ldr	r3, [pc, #92]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c5a:	f023 0218 	bic.w	r2, r3, #24
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	4913      	ldr	r1, [pc, #76]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d017      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c78:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c88:	490a      	ldr	r1, [pc, #40]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a04      	ldr	r2, [pc, #16]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ca8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000

08004cb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cc6:	4b72      	ldr	r3, [pc, #456]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00e      	beq.n	8004cf0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cd2:	4b6f      	ldr	r3, [pc, #444]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0203 	and.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d103      	bne.n	8004cea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d142      	bne.n	8004d70 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	73fb      	strb	r3, [r7, #15]
 8004cee:	e03f      	b.n	8004d70 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d018      	beq.n	8004d2a <RCCEx_PLLSAI1_Config+0x72>
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d825      	bhi.n	8004d48 <RCCEx_PLLSAI1_Config+0x90>
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d002      	beq.n	8004d06 <RCCEx_PLLSAI1_Config+0x4e>
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d009      	beq.n	8004d18 <RCCEx_PLLSAI1_Config+0x60>
 8004d04:	e020      	b.n	8004d48 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d06:	4b62      	ldr	r3, [pc, #392]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11d      	bne.n	8004d4e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d16:	e01a      	b.n	8004d4e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d18:	4b5d      	ldr	r3, [pc, #372]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d116      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d28:	e013      	b.n	8004d52 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d2a:	4b59      	ldr	r3, [pc, #356]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d36:	4b56      	ldr	r3, [pc, #344]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d109      	bne.n	8004d56 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d46:	e006      	b.n	8004d56 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4c:	e004      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d56:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d108      	bne.n	8004d70 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004d5e:	4b4c      	ldr	r3, [pc, #304]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f023 0203 	bic.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4949      	ldr	r1, [pc, #292]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f040 8086 	bne.w	8004e84 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d78:	4b45      	ldr	r3, [pc, #276]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a44      	ldr	r2, [pc, #272]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d84:	f7fd fcba 	bl	80026fc <HAL_GetTick>
 8004d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d8a:	e009      	b.n	8004da0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d8c:	f7fd fcb6 	bl	80026fc <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d902      	bls.n	8004da0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d9e:	e005      	b.n	8004dac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004da0:	4b3b      	ldr	r3, [pc, #236]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1ef      	bne.n	8004d8c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d168      	bne.n	8004e84 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d113      	bne.n	8004de0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004db8:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	4b35      	ldr	r3, [pc, #212]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6892      	ldr	r2, [r2, #8]
 8004dc4:	0211      	lsls	r1, r2, #8
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68d2      	ldr	r2, [r2, #12]
 8004dca:	06d2      	lsls	r2, r2, #27
 8004dcc:	4311      	orrs	r1, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6852      	ldr	r2, [r2, #4]
 8004dd2:	3a01      	subs	r2, #1
 8004dd4:	0112      	lsls	r2, r2, #4
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	492d      	ldr	r1, [pc, #180]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	610b      	str	r3, [r1, #16]
 8004dde:	e02d      	b.n	8004e3c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d115      	bne.n	8004e12 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004de6:	4b2a      	ldr	r3, [pc, #168]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6892      	ldr	r2, [r2, #8]
 8004df2:	0211      	lsls	r1, r2, #8
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6912      	ldr	r2, [r2, #16]
 8004df8:	0852      	lsrs	r2, r2, #1
 8004dfa:	3a01      	subs	r2, #1
 8004dfc:	0552      	lsls	r2, r2, #21
 8004dfe:	4311      	orrs	r1, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6852      	ldr	r2, [r2, #4]
 8004e04:	3a01      	subs	r2, #1
 8004e06:	0112      	lsls	r2, r2, #4
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	4921      	ldr	r1, [pc, #132]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	610b      	str	r3, [r1, #16]
 8004e10:	e014      	b.n	8004e3c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e12:	4b1f      	ldr	r3, [pc, #124]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6892      	ldr	r2, [r2, #8]
 8004e1e:	0211      	lsls	r1, r2, #8
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6952      	ldr	r2, [r2, #20]
 8004e24:	0852      	lsrs	r2, r2, #1
 8004e26:	3a01      	subs	r2, #1
 8004e28:	0652      	lsls	r2, r2, #25
 8004e2a:	4311      	orrs	r1, r2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6852      	ldr	r2, [r2, #4]
 8004e30:	3a01      	subs	r2, #1
 8004e32:	0112      	lsls	r2, r2, #4
 8004e34:	430a      	orrs	r2, r1
 8004e36:	4916      	ldr	r1, [pc, #88]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e3c:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fd fc58 	bl	80026fc <HAL_GetTick>
 8004e4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e4e:	e009      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e50:	f7fd fc54 	bl	80026fc <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d902      	bls.n	8004e64 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	73fb      	strb	r3, [r7, #15]
          break;
 8004e62:	e005      	b.n	8004e70 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e64:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0ef      	beq.n	8004e50 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	4904      	ldr	r1, [pc, #16]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40021000 	.word	0x40021000
 8004e94:	07ff800f 	.word	0x07ff800f
 8004e98:	ff9f800f 	.word	0xff9f800f
 8004e9c:	f9ff800f 	.word	0xf9ff800f

08004ea0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eae:	4b72      	ldr	r3, [pc, #456]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00e      	beq.n	8004ed8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004eba:	4b6f      	ldr	r3, [pc, #444]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0203 	and.w	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d103      	bne.n	8004ed2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
       ||
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d142      	bne.n	8004f58 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
 8004ed6:	e03f      	b.n	8004f58 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d018      	beq.n	8004f12 <RCCEx_PLLSAI2_Config+0x72>
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d825      	bhi.n	8004f30 <RCCEx_PLLSAI2_Config+0x90>
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d002      	beq.n	8004eee <RCCEx_PLLSAI2_Config+0x4e>
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d009      	beq.n	8004f00 <RCCEx_PLLSAI2_Config+0x60>
 8004eec:	e020      	b.n	8004f30 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eee:	4b62      	ldr	r3, [pc, #392]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11d      	bne.n	8004f36 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efe:	e01a      	b.n	8004f36 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f00:	4b5d      	ldr	r3, [pc, #372]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d116      	bne.n	8004f3a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f10:	e013      	b.n	8004f3a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f12:	4b59      	ldr	r3, [pc, #356]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f1e:	4b56      	ldr	r3, [pc, #344]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f2e:	e006      	b.n	8004f3e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      break;
 8004f34:	e004      	b.n	8004f40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f36:	bf00      	nop
 8004f38:	e002      	b.n	8004f40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d108      	bne.n	8004f58 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004f46:	4b4c      	ldr	r3, [pc, #304]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f023 0203 	bic.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4949      	ldr	r1, [pc, #292]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f040 8086 	bne.w	800506c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f60:	4b45      	ldr	r3, [pc, #276]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a44      	ldr	r2, [pc, #272]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6c:	f7fd fbc6 	bl	80026fc <HAL_GetTick>
 8004f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f72:	e009      	b.n	8004f88 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f74:	f7fd fbc2 	bl	80026fc <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d902      	bls.n	8004f88 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	73fb      	strb	r3, [r7, #15]
        break;
 8004f86:	e005      	b.n	8004f94 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f88:	4b3b      	ldr	r3, [pc, #236]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ef      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d168      	bne.n	800506c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d113      	bne.n	8004fc8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fa0:	4b35      	ldr	r3, [pc, #212]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	4b35      	ldr	r3, [pc, #212]	; (800507c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6892      	ldr	r2, [r2, #8]
 8004fac:	0211      	lsls	r1, r2, #8
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68d2      	ldr	r2, [r2, #12]
 8004fb2:	06d2      	lsls	r2, r2, #27
 8004fb4:	4311      	orrs	r1, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6852      	ldr	r2, [r2, #4]
 8004fba:	3a01      	subs	r2, #1
 8004fbc:	0112      	lsls	r2, r2, #4
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	492d      	ldr	r1, [pc, #180]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	614b      	str	r3, [r1, #20]
 8004fc6:	e02d      	b.n	8005024 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d115      	bne.n	8004ffa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fce:	4b2a      	ldr	r3, [pc, #168]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6892      	ldr	r2, [r2, #8]
 8004fda:	0211      	lsls	r1, r2, #8
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6912      	ldr	r2, [r2, #16]
 8004fe0:	0852      	lsrs	r2, r2, #1
 8004fe2:	3a01      	subs	r2, #1
 8004fe4:	0552      	lsls	r2, r2, #21
 8004fe6:	4311      	orrs	r1, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6852      	ldr	r2, [r2, #4]
 8004fec:	3a01      	subs	r2, #1
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	4921      	ldr	r1, [pc, #132]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	614b      	str	r3, [r1, #20]
 8004ff8:	e014      	b.n	8005024 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ffa:	4b1f      	ldr	r3, [pc, #124]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ffc:	695a      	ldr	r2, [r3, #20]
 8004ffe:	4b21      	ldr	r3, [pc, #132]	; (8005084 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005000:	4013      	ands	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6892      	ldr	r2, [r2, #8]
 8005006:	0211      	lsls	r1, r2, #8
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6952      	ldr	r2, [r2, #20]
 800500c:	0852      	lsrs	r2, r2, #1
 800500e:	3a01      	subs	r2, #1
 8005010:	0652      	lsls	r2, r2, #25
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6852      	ldr	r2, [r2, #4]
 8005018:	3a01      	subs	r2, #1
 800501a:	0112      	lsls	r2, r2, #4
 800501c:	430a      	orrs	r2, r1
 800501e:	4916      	ldr	r1, [pc, #88]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005020:	4313      	orrs	r3, r2
 8005022:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005024:	4b14      	ldr	r3, [pc, #80]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 800502a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005030:	f7fd fb64 	bl	80026fc <HAL_GetTick>
 8005034:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005036:	e009      	b.n	800504c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005038:	f7fd fb60 	bl	80026fc <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d902      	bls.n	800504c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	73fb      	strb	r3, [r7, #15]
          break;
 800504a:	e005      	b.n	8005058 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ef      	beq.n	8005038 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	4904      	ldr	r1, [pc, #16]	; (8005078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005068:	4313      	orrs	r3, r2
 800506a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000
 800507c:	07ff800f 	.word	0x07ff800f
 8005080:	ff9f800f 	.word	0xff9f800f
 8005084:	f9ff800f 	.word	0xf9ff800f

08005088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e095      	b.n	80051c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d108      	bne.n	80050b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050aa:	d009      	beq.n	80050c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	61da      	str	r2, [r3, #28]
 80050b2:	e005      	b.n	80050c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fd f892 	bl	8002204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005100:	d902      	bls.n	8005108 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e002      	b.n	800510e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800510c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005116:	d007      	beq.n	8005128 <HAL_SPI_Init+0xa0>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005120:	d002      	beq.n	8005128 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	ea42 0103 	orr.w	r1, r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	0c1b      	lsrs	r3, r3, #16
 8005184:	f003 0204 	and.w	r2, r3, #4
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051a4:	ea42 0103 	orr.w	r1, r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b08a      	sub	sp, #40	; 0x28
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
 80051da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051dc:	2301      	movs	r3, #1
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x26>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e20a      	b.n	800560a <HAL_SPI_TransmitReceive+0x43c>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051fc:	f7fd fa7e 	bl	80026fc <HAL_GetTick>
 8005200:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005208:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005210:	887b      	ldrh	r3, [r7, #2]
 8005212:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005214:	887b      	ldrh	r3, [r7, #2]
 8005216:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005218:	7efb      	ldrb	r3, [r7, #27]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d00e      	beq.n	800523c <HAL_SPI_TransmitReceive+0x6e>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005224:	d106      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d102      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x66>
 800522e:	7efb      	ldrb	r3, [r7, #27]
 8005230:	2b04      	cmp	r3, #4
 8005232:	d003      	beq.n	800523c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005234:	2302      	movs	r3, #2
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800523a:	e1e0      	b.n	80055fe <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_SPI_TransmitReceive+0x80>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <HAL_SPI_TransmitReceive+0x80>
 8005248:	887b      	ldrh	r3, [r7, #2]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005254:	e1d3      	b.n	80055fe <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b04      	cmp	r3, #4
 8005260:	d003      	beq.n	800526a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2205      	movs	r2, #5
 8005266:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	887a      	ldrh	r2, [r7, #2]
 800527a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	887a      	ldrh	r2, [r7, #2]
 8005282:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	887a      	ldrh	r2, [r7, #2]
 8005296:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052ac:	d802      	bhi.n	80052b4 <HAL_SPI_TransmitReceive+0xe6>
 80052ae:	8a3b      	ldrh	r3, [r7, #16]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d908      	bls.n	80052c6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052c2:	605a      	str	r2, [r3, #4]
 80052c4:	e007      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052d4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d007      	beq.n	80052f4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052fc:	f240 8081 	bls.w	8005402 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_SPI_TransmitReceive+0x140>
 8005308:	8a7b      	ldrh	r3, [r7, #18]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d16d      	bne.n	80053ea <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	881a      	ldrh	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	1c9a      	adds	r2, r3, #2
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005332:	e05a      	b.n	80053ea <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d11b      	bne.n	800537a <HAL_SPI_TransmitReceive+0x1ac>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d016      	beq.n	800537a <HAL_SPI_TransmitReceive+0x1ac>
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	2b01      	cmp	r3, #1
 8005350:	d113      	bne.n	800537a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	1c9a      	adds	r2, r3, #2
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	d11c      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x1f4>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d016      	beq.n	80053c2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	b292      	uxth	r2, r2
 80053a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	1c9a      	adds	r2, r3, #2
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053be:	2301      	movs	r3, #1
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053c2:	f7fd f99b 	bl	80026fc <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d80b      	bhi.n	80053ea <HAL_SPI_TransmitReceive+0x21c>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d007      	beq.n	80053ea <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80053e8:	e109      	b.n	80055fe <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d19f      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x166>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d199      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x166>
 8005400:	e0e3      	b.n	80055ca <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_SPI_TransmitReceive+0x244>
 800540a:	8a7b      	ldrh	r3, [r7, #18]
 800540c:	2b01      	cmp	r3, #1
 800540e:	f040 80cf 	bne.w	80055b0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d912      	bls.n	8005442 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	881a      	ldrh	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	1c9a      	adds	r2, r3, #2
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b02      	subs	r3, #2
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005440:	e0b6      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005468:	e0a2      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b02      	cmp	r3, #2
 8005476:	d134      	bne.n	80054e2 <HAL_SPI_TransmitReceive+0x314>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d02f      	beq.n	80054e2 <HAL_SPI_TransmitReceive+0x314>
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	2b01      	cmp	r3, #1
 8005486:	d12c      	bne.n	80054e2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d912      	bls.n	80054b8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	881a      	ldrh	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	1c9a      	adds	r2, r3, #2
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b02      	subs	r3, #2
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054b6:	e012      	b.n	80054de <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	7812      	ldrb	r2, [r2, #0]
 80054c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d148      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x3b4>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d042      	beq.n	8005582 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d923      	bls.n	8005550 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	b292      	uxth	r2, r2
 8005514:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	1c9a      	adds	r2, r3, #2
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b02      	subs	r3, #2
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b01      	cmp	r3, #1
 800553c:	d81f      	bhi.n	800557e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	e016      	b.n	800557e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f103 020c 	add.w	r2, r3, #12
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800557e:	2301      	movs	r3, #1
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005582:	f7fd f8bb 	bl	80026fc <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558e:	429a      	cmp	r2, r3
 8005590:	d803      	bhi.n	800559a <HAL_SPI_TransmitReceive+0x3cc>
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d102      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x3d2>
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	2b00      	cmp	r3, #0
 800559e:	d107      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80055ae:	e026      	b.n	80055fe <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f47f af57 	bne.w	800546a <HAL_SPI_TransmitReceive+0x29c>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f47f af50 	bne.w	800546a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f93e 	bl	8005850 <SPI_EndRxTxTransaction>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f4:	e003      	b.n	80055fe <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800560a:	4618      	mov	r0, r3
 800560c:	3728      	adds	r7, #40	; 0x28
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005624:	f7fd f86a 	bl	80026fc <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	4413      	add	r3, r2
 8005632:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005634:	f7fd f862 	bl	80026fc <HAL_GetTick>
 8005638:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800563a:	4b39      	ldr	r3, [pc, #228]	; (8005720 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	015b      	lsls	r3, r3, #5
 8005640:	0d1b      	lsrs	r3, r3, #20
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	fb02 f303 	mul.w	r3, r2, r3
 8005648:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800564a:	e054      	b.n	80056f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d050      	beq.n	80056f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005654:	f7fd f852 	bl	80026fc <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	429a      	cmp	r2, r3
 8005662:	d902      	bls.n	800566a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d13d      	bne.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005678:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005682:	d111      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800568c:	d004      	beq.n	8005698 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005696:	d107      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b0:	d10f      	bne.n	80056d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e017      	b.n	8005716 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	429a      	cmp	r2, r3
 8005712:	d19b      	bne.n	800564c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000000 	.word	0x20000000

08005724 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005736:	f7fc ffe1 	bl	80026fc <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	4413      	add	r3, r2
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005746:	f7fc ffd9 	bl	80026fc <HAL_GetTick>
 800574a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	330c      	adds	r3, #12
 8005752:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005754:	4b3d      	ldr	r3, [pc, #244]	; (800584c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	00da      	lsls	r2, r3, #3
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	0d1b      	lsrs	r3, r3, #20
 8005764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800576c:	e060      	b.n	8005830 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005774:	d107      	bne.n	8005786 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d104      	bne.n	8005786 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005784:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d050      	beq.n	8005830 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800578e:	f7fc ffb5 	bl	80026fc <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	429a      	cmp	r2, r3
 800579c:	d902      	bls.n	80057a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d13d      	bne.n	8005820 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057bc:	d111      	bne.n	80057e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c6:	d004      	beq.n	80057d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d0:	d107      	bne.n	80057e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ea:	d10f      	bne.n	800580c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800580a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e010      	b.n	8005842 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	3b01      	subs	r3, #1
 800582e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4013      	ands	r3, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d196      	bne.n	800576e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3728      	adds	r7, #40	; 0x28
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20000000 	.word	0x20000000

08005850 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2200      	movs	r2, #0
 8005864:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7ff ff5b 	bl	8005724 <SPI_WaitFifoStateUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005878:	f043 0220 	orr.w	r2, r3, #32
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e027      	b.n	80058d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2200      	movs	r2, #0
 800588c:	2180      	movs	r1, #128	; 0x80
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7ff fec0 	bl	8005614 <SPI_WaitFlagStateUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e014      	b.n	80058d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff ff34 	bl	8005724 <SPI_WaitFifoStateUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c6:	f043 0220 	orr.w	r2, r3, #32
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e000      	b.n	80058d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e049      	b.n	8005982 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fc fcf2 	bl	80022ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3304      	adds	r3, #4
 8005918:	4619      	mov	r1, r3
 800591a:	4610      	mov	r0, r2
 800591c:	f000 fa64 	bl	8005de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d001      	beq.n	80059a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e047      	b.n	8005a34 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a23      	ldr	r2, [pc, #140]	; (8005a40 <HAL_TIM_Base_Start+0xb4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01d      	beq.n	80059f2 <HAL_TIM_Base_Start+0x66>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059be:	d018      	beq.n	80059f2 <HAL_TIM_Base_Start+0x66>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <HAL_TIM_Base_Start+0xb8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_TIM_Base_Start+0x66>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <HAL_TIM_Base_Start+0xbc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_TIM_Base_Start+0x66>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1c      	ldr	r2, [pc, #112]	; (8005a4c <HAL_TIM_Base_Start+0xc0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_TIM_Base_Start+0x66>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1b      	ldr	r2, [pc, #108]	; (8005a50 <HAL_TIM_Base_Start+0xc4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIM_Base_Start+0x66>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <HAL_TIM_Base_Start+0xc8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d115      	bne.n	8005a1e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <HAL_TIM_Base_Start+0xcc>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b06      	cmp	r3, #6
 8005a02:	d015      	beq.n	8005a30 <HAL_TIM_Base_Start+0xa4>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0a:	d011      	beq.n	8005a30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1c:	e008      	b.n	8005a30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0201 	orr.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	e000      	b.n	8005a32 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40013400 	.word	0x40013400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	00010007 	.word	0x00010007

08005a5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e049      	b.n	8005b02 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f841 	bl	8005b0a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f000 f9a4 	bl	8005de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b086      	sub	sp, #24
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e088      	b.n	8005c4e <HAL_TIM_IC_ConfigChannel+0x130>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d11b      	bne.n	8005b82 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b5a:	f000 f9df 	bl	8005f1c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699a      	ldr	r2, [r3, #24]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 020c 	bic.w	r2, r2, #12
 8005b6c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6999      	ldr	r1, [r3, #24]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	619a      	str	r2, [r3, #24]
 8005b80:	e060      	b.n	8005c44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d11c      	bne.n	8005bc2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005b98:	f000 fa5d 	bl	8006056 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005baa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6999      	ldr	r1, [r3, #24]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	021a      	lsls	r2, r3, #8
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	619a      	str	r2, [r3, #24]
 8005bc0:	e040      	b.n	8005c44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d11b      	bne.n	8005c00 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005bd8:	f000 faaa 	bl	8006130 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 020c 	bic.w	r2, r2, #12
 8005bea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69d9      	ldr	r1, [r3, #28]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	61da      	str	r2, [r3, #28]
 8005bfe:	e021      	b.n	8005c44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d11c      	bne.n	8005c40 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c16:	f000 fac7 	bl	80061a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c28:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69d9      	ldr	r1, [r3, #28]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	021a      	lsls	r2, r3, #8
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	61da      	str	r2, [r3, #28]
 8005c3e:	e001      	b.n	8005c44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_TIM_ConfigClockSource+0x1c>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e0b6      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x18a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cae:	d03e      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0xd8>
 8005cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb4:	f200 8087 	bhi.w	8005dc6 <HAL_TIM_ConfigClockSource+0x170>
 8005cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbc:	f000 8086 	beq.w	8005dcc <HAL_TIM_ConfigClockSource+0x176>
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc4:	d87f      	bhi.n	8005dc6 <HAL_TIM_ConfigClockSource+0x170>
 8005cc6:	2b70      	cmp	r3, #112	; 0x70
 8005cc8:	d01a      	beq.n	8005d00 <HAL_TIM_ConfigClockSource+0xaa>
 8005cca:	2b70      	cmp	r3, #112	; 0x70
 8005ccc:	d87b      	bhi.n	8005dc6 <HAL_TIM_ConfigClockSource+0x170>
 8005cce:	2b60      	cmp	r3, #96	; 0x60
 8005cd0:	d050      	beq.n	8005d74 <HAL_TIM_ConfigClockSource+0x11e>
 8005cd2:	2b60      	cmp	r3, #96	; 0x60
 8005cd4:	d877      	bhi.n	8005dc6 <HAL_TIM_ConfigClockSource+0x170>
 8005cd6:	2b50      	cmp	r3, #80	; 0x50
 8005cd8:	d03c      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0xfe>
 8005cda:	2b50      	cmp	r3, #80	; 0x50
 8005cdc:	d873      	bhi.n	8005dc6 <HAL_TIM_ConfigClockSource+0x170>
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d058      	beq.n	8005d94 <HAL_TIM_ConfigClockSource+0x13e>
 8005ce2:	2b40      	cmp	r3, #64	; 0x40
 8005ce4:	d86f      	bhi.n	8005dc6 <HAL_TIM_ConfigClockSource+0x170>
 8005ce6:	2b30      	cmp	r3, #48	; 0x30
 8005ce8:	d064      	beq.n	8005db4 <HAL_TIM_ConfigClockSource+0x15e>
 8005cea:	2b30      	cmp	r3, #48	; 0x30
 8005cec:	d86b      	bhi.n	8005dc6 <HAL_TIM_ConfigClockSource+0x170>
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d060      	beq.n	8005db4 <HAL_TIM_ConfigClockSource+0x15e>
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d867      	bhi.n	8005dc6 <HAL_TIM_ConfigClockSource+0x170>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d05c      	beq.n	8005db4 <HAL_TIM_ConfigClockSource+0x15e>
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d05a      	beq.n	8005db4 <HAL_TIM_ConfigClockSource+0x15e>
 8005cfe:	e062      	b.n	8005dc6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d10:	f000 faa2 	bl	8006258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	609a      	str	r2, [r3, #8]
      break;
 8005d2c:	e04f      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d3e:	f000 fa8b 	bl	8006258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d50:	609a      	str	r2, [r3, #8]
      break;
 8005d52:	e03c      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d60:	461a      	mov	r2, r3
 8005d62:	f000 f949 	bl	8005ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2150      	movs	r1, #80	; 0x50
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fa58 	bl	8006222 <TIM_ITRx_SetConfig>
      break;
 8005d72:	e02c      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d80:	461a      	mov	r2, r3
 8005d82:	f000 f9a5 	bl	80060d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2160      	movs	r1, #96	; 0x60
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fa48 	bl	8006222 <TIM_ITRx_SetConfig>
      break;
 8005d92:	e01c      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da0:	461a      	mov	r2, r3
 8005da2:	f000 f929 	bl	8005ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2140      	movs	r1, #64	; 0x40
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fa38 	bl	8006222 <TIM_ITRx_SetConfig>
      break;
 8005db2:	e00c      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f000 fa2f 	bl	8006222 <TIM_ITRx_SetConfig>
      break;
 8005dc4:	e003      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dca:	e000      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005dcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a40      	ldr	r2, [pc, #256]	; (8005efc <TIM_Base_SetConfig+0x114>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d013      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e06:	d00f      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a3d      	ldr	r2, [pc, #244]	; (8005f00 <TIM_Base_SetConfig+0x118>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00b      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a3c      	ldr	r2, [pc, #240]	; (8005f04 <TIM_Base_SetConfig+0x11c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a3b      	ldr	r2, [pc, #236]	; (8005f08 <TIM_Base_SetConfig+0x120>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a3a      	ldr	r2, [pc, #232]	; (8005f0c <TIM_Base_SetConfig+0x124>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d108      	bne.n	8005e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2f      	ldr	r2, [pc, #188]	; (8005efc <TIM_Base_SetConfig+0x114>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01f      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e48:	d01b      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2c      	ldr	r2, [pc, #176]	; (8005f00 <TIM_Base_SetConfig+0x118>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d017      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2b      	ldr	r2, [pc, #172]	; (8005f04 <TIM_Base_SetConfig+0x11c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2a      	ldr	r2, [pc, #168]	; (8005f08 <TIM_Base_SetConfig+0x120>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00f      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <TIM_Base_SetConfig+0x124>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00b      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a28      	ldr	r2, [pc, #160]	; (8005f10 <TIM_Base_SetConfig+0x128>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d007      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a27      	ldr	r2, [pc, #156]	; (8005f14 <TIM_Base_SetConfig+0x12c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a26      	ldr	r2, [pc, #152]	; (8005f18 <TIM_Base_SetConfig+0x130>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d108      	bne.n	8005e94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a10      	ldr	r2, [pc, #64]	; (8005efc <TIM_Base_SetConfig+0x114>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00f      	beq.n	8005ee0 <TIM_Base_SetConfig+0xf8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a12      	ldr	r2, [pc, #72]	; (8005f0c <TIM_Base_SetConfig+0x124>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00b      	beq.n	8005ee0 <TIM_Base_SetConfig+0xf8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a11      	ldr	r2, [pc, #68]	; (8005f10 <TIM_Base_SetConfig+0x128>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <TIM_Base_SetConfig+0xf8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a10      	ldr	r2, [pc, #64]	; (8005f14 <TIM_Base_SetConfig+0x12c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_Base_SetConfig+0xf8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a0f      	ldr	r2, [pc, #60]	; (8005f18 <TIM_Base_SetConfig+0x130>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d103      	bne.n	8005ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	615a      	str	r2, [r3, #20]
}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40012c00 	.word	0x40012c00
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40000800 	.word	0x40000800
 8005f08:	40000c00 	.word	0x40000c00
 8005f0c:	40013400 	.word	0x40013400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400
 8005f18:	40014800 	.word	0x40014800

08005f1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	f023 0201 	bic.w	r2, r3, #1
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a26      	ldr	r2, [pc, #152]	; (8005fe0 <TIM_TI1_SetConfig+0xc4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d017      	beq.n	8005f7a <TIM_TI1_SetConfig+0x5e>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f50:	d013      	beq.n	8005f7a <TIM_TI1_SetConfig+0x5e>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a23      	ldr	r2, [pc, #140]	; (8005fe4 <TIM_TI1_SetConfig+0xc8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00f      	beq.n	8005f7a <TIM_TI1_SetConfig+0x5e>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a22      	ldr	r2, [pc, #136]	; (8005fe8 <TIM_TI1_SetConfig+0xcc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00b      	beq.n	8005f7a <TIM_TI1_SetConfig+0x5e>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4a21      	ldr	r2, [pc, #132]	; (8005fec <TIM_TI1_SetConfig+0xd0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d007      	beq.n	8005f7a <TIM_TI1_SetConfig+0x5e>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a20      	ldr	r2, [pc, #128]	; (8005ff0 <TIM_TI1_SetConfig+0xd4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_TI1_SetConfig+0x5e>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4a1f      	ldr	r2, [pc, #124]	; (8005ff4 <TIM_TI1_SetConfig+0xd8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d101      	bne.n	8005f7e <TIM_TI1_SetConfig+0x62>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <TIM_TI1_SetConfig+0x64>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	e003      	b.n	8005f9e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f023 030a 	bic.w	r3, r3, #10
 8005fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f003 030a 	and.w	r3, r3, #10
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40000800 	.word	0x40000800
 8005fec:	40000c00 	.word	0x40000c00
 8005ff0:	40013400 	.word	0x40013400
 8005ff4:	40014000 	.word	0x40014000

08005ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	f023 0201 	bic.w	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f023 030a 	bic.w	r3, r3, #10
 8006034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	621a      	str	r2, [r3, #32]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006056:	b480      	push	{r7}
 8006058:	b087      	sub	sp, #28
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	f023 0210 	bic.w	r2, r3, #16
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	031b      	lsls	r3, r3, #12
 800609a:	b29b      	uxth	r3, r3
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	621a      	str	r2, [r3, #32]
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f023 0210 	bic.w	r2, r3, #16
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	031b      	lsls	r3, r3, #12
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	4313      	orrs	r3, r2
 8006104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800610c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	621a      	str	r2, [r3, #32]
}
 8006124:	bf00      	nop
 8006126:	371c      	adds	r7, #28
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f023 0303 	bic.w	r3, r3, #3
 800615c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800616c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	b2db      	uxtb	r3, r3
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006180:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	621a      	str	r2, [r3, #32]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	031b      	lsls	r3, r3, #12
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80061fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	031b      	lsls	r3, r3, #12
 8006200:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	f043 0307 	orr.w	r3, r3, #7
 8006244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	609a      	str	r2, [r3, #8]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	021a      	lsls	r2, r3, #8
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	431a      	orrs	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4313      	orrs	r3, r2
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	609a      	str	r2, [r3, #8]
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e068      	b.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2e      	ldr	r2, [pc, #184]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d004      	beq.n	80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2d      	ldr	r2, [pc, #180]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d108      	bne.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d01d      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006322:	d018      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1a      	ldr	r2, [pc, #104]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a18      	ldr	r2, [pc, #96]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a13      	ldr	r2, [pc, #76]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10c      	bne.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	4313      	orrs	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40013400 	.word	0x40013400
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800
 80063a0:	40000c00 	.word	0x40000c00
 80063a4:	40014000 	.word	0x40014000

080063a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e042      	b.n	8006440 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d106      	bne.n	80063d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7fb fe1f 	bl	8002010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2224      	movs	r2, #36	; 0x24
 80063d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 ff44 	bl	8007280 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fc45 	bl	8006c88 <UART_SetConfig>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e01b      	b.n	8006440 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 ffc3 	bl	80073c4 <UART_CheckIdleState>
 800643e:	4603      	mov	r3, r0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645e:	2b20      	cmp	r3, #32
 8006460:	d17c      	bne.n	800655c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_UART_Transmit+0x26>
 8006468:	88fb      	ldrh	r3, [r7, #6]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e075      	b.n	800655e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2221      	movs	r2, #33	; 0x21
 800647e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006482:	f7fc f93b 	bl	80026fc <HAL_GetTick>
 8006486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	88fa      	ldrh	r2, [r7, #6]
 800648c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a0:	d108      	bne.n	80064b4 <HAL_UART_Transmit+0x6c>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	e003      	b.n	80064bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064bc:	e031      	b.n	8006522 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2200      	movs	r2, #0
 80064c6:	2180      	movs	r1, #128	; 0x80
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f001 f825 	bl	8007518 <UART_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e03e      	b.n	800655e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10b      	bne.n	80064fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	881a      	ldrh	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f2:	b292      	uxth	r2, r2
 80064f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	3302      	adds	r3, #2
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	e008      	b.n	8006510 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	781a      	ldrb	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	b292      	uxth	r2, r2
 8006508:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1c7      	bne.n	80064be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2200      	movs	r2, #0
 8006536:	2140      	movs	r1, #64	; 0x40
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 ffed 	bl	8007518 <UART_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e006      	b.n	800655e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	e000      	b.n	800655e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
  }
}
 800655e:	4618      	mov	r0, r3
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	; 0x28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	4613      	mov	r3, r2
 8006574:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657c:	2b20      	cmp	r3, #32
 800657e:	d137      	bne.n	80065f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_UART_Receive_IT+0x24>
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e030      	b.n	80065f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a18      	ldr	r2, [pc, #96]	; (80065fc <HAL_UART_Receive_IT+0x94>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d01f      	beq.n	80065e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d018      	beq.n	80065e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	613b      	str	r3, [r7, #16]
   return(result);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	623b      	str	r3, [r7, #32]
 80065ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	69f9      	ldr	r1, [r7, #28]
 80065d2:	6a3a      	ldr	r2, [r7, #32]
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e6      	bne.n	80065ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065e0:	88fb      	ldrh	r3, [r7, #6]
 80065e2:	461a      	mov	r2, r3
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fffe 	bl	80075e8 <UART_Start_Receive_IT>
 80065ec:	4603      	mov	r3, r0
 80065ee:	e000      	b.n	80065f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065f0:	2302      	movs	r3, #2
  }
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3728      	adds	r7, #40	; 0x28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40008000 	.word	0x40008000

08006600 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b0ba      	sub	sp, #232	; 0xe8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006626:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800662a:	f640 030f 	movw	r3, #2063	; 0x80f
 800662e:	4013      	ands	r3, r2
 8006630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d11b      	bne.n	8006674 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d015      	beq.n	8006674 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 82e3 	beq.w	8006c30 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
      }
      return;
 8006672:	e2dd      	b.n	8006c30 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8123 	beq.w	80068c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800667e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006682:	4b8d      	ldr	r3, [pc, #564]	; (80068b8 <HAL_UART_IRQHandler+0x2b8>)
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800668a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800668e:	4b8b      	ldr	r3, [pc, #556]	; (80068bc <HAL_UART_IRQHandler+0x2bc>)
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 8116 	beq.w	80068c4 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d011      	beq.n	80066c8 <HAL_UART_IRQHandler+0xc8>
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2201      	movs	r2, #1
 80066b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066be:	f043 0201 	orr.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d011      	beq.n	80066f8 <HAL_UART_IRQHandler+0xf8>
 80066d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2202      	movs	r2, #2
 80066e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ee:	f043 0204 	orr.w	r2, r3, #4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d011      	beq.n	8006728 <HAL_UART_IRQHandler+0x128>
 8006704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2204      	movs	r2, #4
 8006716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671e:	f043 0202 	orr.w	r2, r3, #2
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b00      	cmp	r3, #0
 8006732:	d017      	beq.n	8006764 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d105      	bne.n	800674c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006740:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006744:	4b5c      	ldr	r3, [pc, #368]	; (80068b8 <HAL_UART_IRQHandler+0x2b8>)
 8006746:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2208      	movs	r2, #8
 8006752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	f043 0208 	orr.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676c:	2b00      	cmp	r3, #0
 800676e:	d012      	beq.n	8006796 <HAL_UART_IRQHandler+0x196>
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00c      	beq.n	8006796 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678c:	f043 0220 	orr.w	r2, r3, #32
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 8249 	beq.w	8006c34 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d013      	beq.n	80067d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d105      	bne.n	80067c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b40      	cmp	r3, #64	; 0x40
 80067ec:	d005      	beq.n	80067fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d054      	beq.n	80068a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 f816 	bl	800782c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d146      	bne.n	800689c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800683a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800683e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006846:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1d9      	bne.n	800680e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006860:	2b00      	cmp	r3, #0
 8006862:	d017      	beq.n	8006894 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686a:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <HAL_UART_IRQHandler+0x2c0>)
 800686c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006874:	4618      	mov	r0, r3
 8006876:	f7fc f8de 	bl	8002a36 <HAL_DMA_Abort_IT>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d019      	beq.n	80068b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800688e:	4610      	mov	r0, r2
 8006890:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006892:	e00f      	b.n	80068b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f9e1 	bl	8006c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689a:	e00b      	b.n	80068b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f9dd 	bl	8006c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a2:	e007      	b.n	80068b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f9d9 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80068b2:	e1bf      	b.n	8006c34 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b4:	bf00      	nop
    return;
 80068b6:	e1bd      	b.n	8006c34 <HAL_UART_IRQHandler+0x634>
 80068b8:	10000001 	.word	0x10000001
 80068bc:	04000120 	.word	0x04000120
 80068c0:	080078f9 	.word	0x080078f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	f040 8153 	bne.w	8006b74 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	f003 0310 	and.w	r3, r3, #16
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 814c 	beq.w	8006b74 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 8145 	beq.w	8006b74 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2210      	movs	r2, #16
 80068f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	f040 80bb 	bne.w	8006a78 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 818f 	beq.w	8006c38 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006920:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006924:	429a      	cmp	r2, r3
 8006926:	f080 8187 	bcs.w	8006c38 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006930:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	f040 8087 	bne.w	8006a56 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800695c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006972:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006976:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800697e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800698a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1da      	bne.n	8006948 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3308      	adds	r3, #8
 8006998:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a4:	f023 0301 	bic.w	r3, r3, #1
 80069a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e1      	bne.n	8006992 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3308      	adds	r3, #8
 80069ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e3      	bne.n	80069ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a24:	f023 0310 	bic.w	r3, r3, #16
 8006a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a36:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a3e:	e841 2300 	strex	r3, r2, [r1]
 8006a42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1e4      	bne.n	8006a14 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fb ff94 	bl	800297e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f8fd 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a76:	e0df      	b.n	8006c38 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80d1 	beq.w	8006c3c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 80cc 	beq.w	8006c3c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ac8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e4      	bne.n	8006aa4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3308      	adds	r3, #8
 8006afe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b02:	633a      	str	r2, [r7, #48]	; 0x30
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e1      	bne.n	8006ada <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 0310 	bic.w	r3, r3, #16
 8006b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	69b9      	ldr	r1, [r7, #24]
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	617b      	str	r3, [r7, #20]
   return(result);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e4      	bne.n	8006b2a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f87f 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b72:	e063      	b.n	8006c3c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00e      	beq.n	8006b9e <HAL_UART_IRQHandler+0x59e>
 8006b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d008      	beq.n	8006b9e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fc14 	bl	80083c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b9c:	e051      	b.n	8006c42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d014      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d105      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d008      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d03a      	beq.n	8006c40 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
    }
    return;
 8006bd2:	e035      	b.n	8006c40 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d009      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x5f4>
 8006be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fe99 	bl	8007924 <UART_EndTransmit_IT>
    return;
 8006bf2:	e026      	b.n	8006c42 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d009      	beq.n	8006c14 <HAL_UART_IRQHandler+0x614>
 8006c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 fbed 	bl	80083ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c12:	e016      	b.n	8006c42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d010      	beq.n	8006c42 <HAL_UART_IRQHandler+0x642>
 8006c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	da0c      	bge.n	8006c42 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 fbd5 	bl	80083d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c2e:	e008      	b.n	8006c42 <HAL_UART_IRQHandler+0x642>
      return;
 8006c30:	bf00      	nop
 8006c32:	e006      	b.n	8006c42 <HAL_UART_IRQHandler+0x642>
    return;
 8006c34:	bf00      	nop
 8006c36:	e004      	b.n	8006c42 <HAL_UART_IRQHandler+0x642>
      return;
 8006c38:	bf00      	nop
 8006c3a:	e002      	b.n	8006c42 <HAL_UART_IRQHandler+0x642>
      return;
 8006c3c:	bf00      	nop
 8006c3e:	e000      	b.n	8006c42 <HAL_UART_IRQHandler+0x642>
    return;
 8006c40:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006c42:	37e8      	adds	r7, #232	; 0xe8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c8c:	b08c      	sub	sp, #48	; 0x30
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4baa      	ldr	r3, [pc, #680]	; (8006f60 <UART_SetConfig+0x2d8>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	6812      	ldr	r2, [r2, #0]
 8006cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a9f      	ldr	r2, [pc, #636]	; (8006f64 <UART_SetConfig+0x2dc>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d004      	beq.n	8006cf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006cfe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	6812      	ldr	r2, [r2, #0]
 8006d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d12:	f023 010f 	bic.w	r1, r3, #15
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a90      	ldr	r2, [pc, #576]	; (8006f68 <UART_SetConfig+0x2e0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d125      	bne.n	8006d78 <UART_SetConfig+0xf0>
 8006d2c:	4b8f      	ldr	r3, [pc, #572]	; (8006f6c <UART_SetConfig+0x2e4>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d81a      	bhi.n	8006d70 <UART_SetConfig+0xe8>
 8006d3a:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <UART_SetConfig+0xb8>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006d51 	.word	0x08006d51
 8006d44:	08006d61 	.word	0x08006d61
 8006d48:	08006d59 	.word	0x08006d59
 8006d4c:	08006d69 	.word	0x08006d69
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d56:	e116      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5e:	e112      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006d60:	2304      	movs	r3, #4
 8006d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d66:	e10e      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d6e:	e10a      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d76:	e106      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a7c      	ldr	r2, [pc, #496]	; (8006f70 <UART_SetConfig+0x2e8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d138      	bne.n	8006df4 <UART_SetConfig+0x16c>
 8006d82:	4b7a      	ldr	r3, [pc, #488]	; (8006f6c <UART_SetConfig+0x2e4>)
 8006d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d88:	f003 030c 	and.w	r3, r3, #12
 8006d8c:	2b0c      	cmp	r3, #12
 8006d8e:	d82d      	bhi.n	8006dec <UART_SetConfig+0x164>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0x110>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006dcd 	.word	0x08006dcd
 8006d9c:	08006ded 	.word	0x08006ded
 8006da0:	08006ded 	.word	0x08006ded
 8006da4:	08006ded 	.word	0x08006ded
 8006da8:	08006ddd 	.word	0x08006ddd
 8006dac:	08006ded 	.word	0x08006ded
 8006db0:	08006ded 	.word	0x08006ded
 8006db4:	08006ded 	.word	0x08006ded
 8006db8:	08006dd5 	.word	0x08006dd5
 8006dbc:	08006ded 	.word	0x08006ded
 8006dc0:	08006ded 	.word	0x08006ded
 8006dc4:	08006ded 	.word	0x08006ded
 8006dc8:	08006de5 	.word	0x08006de5
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dd2:	e0d8      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dda:	e0d4      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006ddc:	2304      	movs	r3, #4
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de2:	e0d0      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006de4:	2308      	movs	r3, #8
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dea:	e0cc      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006dec:	2310      	movs	r3, #16
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df2:	e0c8      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a5e      	ldr	r2, [pc, #376]	; (8006f74 <UART_SetConfig+0x2ec>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d125      	bne.n	8006e4a <UART_SetConfig+0x1c2>
 8006dfe:	4b5b      	ldr	r3, [pc, #364]	; (8006f6c <UART_SetConfig+0x2e4>)
 8006e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e08:	2b30      	cmp	r3, #48	; 0x30
 8006e0a:	d016      	beq.n	8006e3a <UART_SetConfig+0x1b2>
 8006e0c:	2b30      	cmp	r3, #48	; 0x30
 8006e0e:	d818      	bhi.n	8006e42 <UART_SetConfig+0x1ba>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d00a      	beq.n	8006e2a <UART_SetConfig+0x1a2>
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d814      	bhi.n	8006e42 <UART_SetConfig+0x1ba>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <UART_SetConfig+0x19a>
 8006e1c:	2b10      	cmp	r3, #16
 8006e1e:	d008      	beq.n	8006e32 <UART_SetConfig+0x1aa>
 8006e20:	e00f      	b.n	8006e42 <UART_SetConfig+0x1ba>
 8006e22:	2300      	movs	r3, #0
 8006e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e28:	e0ad      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e30:	e0a9      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006e32:	2304      	movs	r3, #4
 8006e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e38:	e0a5      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006e3a:	2308      	movs	r3, #8
 8006e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e40:	e0a1      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006e42:	2310      	movs	r3, #16
 8006e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e48:	e09d      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a4a      	ldr	r2, [pc, #296]	; (8006f78 <UART_SetConfig+0x2f0>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d125      	bne.n	8006ea0 <UART_SetConfig+0x218>
 8006e54:	4b45      	ldr	r3, [pc, #276]	; (8006f6c <UART_SetConfig+0x2e4>)
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e60:	d016      	beq.n	8006e90 <UART_SetConfig+0x208>
 8006e62:	2bc0      	cmp	r3, #192	; 0xc0
 8006e64:	d818      	bhi.n	8006e98 <UART_SetConfig+0x210>
 8006e66:	2b80      	cmp	r3, #128	; 0x80
 8006e68:	d00a      	beq.n	8006e80 <UART_SetConfig+0x1f8>
 8006e6a:	2b80      	cmp	r3, #128	; 0x80
 8006e6c:	d814      	bhi.n	8006e98 <UART_SetConfig+0x210>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <UART_SetConfig+0x1f0>
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d008      	beq.n	8006e88 <UART_SetConfig+0x200>
 8006e76:	e00f      	b.n	8006e98 <UART_SetConfig+0x210>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7e:	e082      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006e80:	2302      	movs	r3, #2
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e86:	e07e      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e8e:	e07a      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006e90:	2308      	movs	r3, #8
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e96:	e076      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006e98:	2310      	movs	r3, #16
 8006e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e9e:	e072      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a35      	ldr	r2, [pc, #212]	; (8006f7c <UART_SetConfig+0x2f4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d12a      	bne.n	8006f00 <UART_SetConfig+0x278>
 8006eaa:	4b30      	ldr	r3, [pc, #192]	; (8006f6c <UART_SetConfig+0x2e4>)
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eb8:	d01a      	beq.n	8006ef0 <UART_SetConfig+0x268>
 8006eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ebe:	d81b      	bhi.n	8006ef8 <UART_SetConfig+0x270>
 8006ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec4:	d00c      	beq.n	8006ee0 <UART_SetConfig+0x258>
 8006ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eca:	d815      	bhi.n	8006ef8 <UART_SetConfig+0x270>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <UART_SetConfig+0x250>
 8006ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed4:	d008      	beq.n	8006ee8 <UART_SetConfig+0x260>
 8006ed6:	e00f      	b.n	8006ef8 <UART_SetConfig+0x270>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ede:	e052      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ee6:	e04e      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006ee8:	2304      	movs	r3, #4
 8006eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eee:	e04a      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006ef0:	2308      	movs	r3, #8
 8006ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ef6:	e046      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006ef8:	2310      	movs	r3, #16
 8006efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006efe:	e042      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a17      	ldr	r2, [pc, #92]	; (8006f64 <UART_SetConfig+0x2dc>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d13a      	bne.n	8006f80 <UART_SetConfig+0x2f8>
 8006f0a:	4b18      	ldr	r3, [pc, #96]	; (8006f6c <UART_SetConfig+0x2e4>)
 8006f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f18:	d01a      	beq.n	8006f50 <UART_SetConfig+0x2c8>
 8006f1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f1e:	d81b      	bhi.n	8006f58 <UART_SetConfig+0x2d0>
 8006f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f24:	d00c      	beq.n	8006f40 <UART_SetConfig+0x2b8>
 8006f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2a:	d815      	bhi.n	8006f58 <UART_SetConfig+0x2d0>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <UART_SetConfig+0x2b0>
 8006f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f34:	d008      	beq.n	8006f48 <UART_SetConfig+0x2c0>
 8006f36:	e00f      	b.n	8006f58 <UART_SetConfig+0x2d0>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f3e:	e022      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006f40:	2302      	movs	r3, #2
 8006f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f46:	e01e      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006f48:	2304      	movs	r3, #4
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f4e:	e01a      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006f50:	2308      	movs	r3, #8
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f56:	e016      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006f58:	2310      	movs	r3, #16
 8006f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f5e:	e012      	b.n	8006f86 <UART_SetConfig+0x2fe>
 8006f60:	cfff69f3 	.word	0xcfff69f3
 8006f64:	40008000 	.word	0x40008000
 8006f68:	40013800 	.word	0x40013800
 8006f6c:	40021000 	.word	0x40021000
 8006f70:	40004400 	.word	0x40004400
 8006f74:	40004800 	.word	0x40004800
 8006f78:	40004c00 	.word	0x40004c00
 8006f7c:	40005000 	.word	0x40005000
 8006f80:	2310      	movs	r3, #16
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4aae      	ldr	r2, [pc, #696]	; (8007244 <UART_SetConfig+0x5bc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	f040 8097 	bne.w	80070c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	d823      	bhi.n	8006fe2 <UART_SetConfig+0x35a>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <UART_SetConfig+0x318>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fc5 	.word	0x08006fc5
 8006fa4:	08006fe3 	.word	0x08006fe3
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fe3 	.word	0x08006fe3
 8006fb0:	08006fd3 	.word	0x08006fd3
 8006fb4:	08006fe3 	.word	0x08006fe3
 8006fb8:	08006fe3 	.word	0x08006fe3
 8006fbc:	08006fe3 	.word	0x08006fe3
 8006fc0:	08006fdb 	.word	0x08006fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc4:	f7fd fa5c 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 8006fc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fca:	e010      	b.n	8006fee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fcc:	4b9e      	ldr	r3, [pc, #632]	; (8007248 <UART_SetConfig+0x5c0>)
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fd0:	e00d      	b.n	8006fee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fd2:	f7fd f9bd 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8006fd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fd8:	e009      	b.n	8006fee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fe0:	e005      	b.n	8006fee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8130 	beq.w	8007256 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	4a94      	ldr	r2, [pc, #592]	; (800724c <UART_SetConfig+0x5c4>)
 8006ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007000:	461a      	mov	r2, r3
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	fbb3 f3f2 	udiv	r3, r3, r2
 8007008:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	4413      	add	r3, r2
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	429a      	cmp	r2, r3
 8007018:	d305      	bcc.n	8007026 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	429a      	cmp	r2, r3
 8007024:	d903      	bls.n	800702e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800702c:	e113      	b.n	8007256 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	2200      	movs	r2, #0
 8007032:	60bb      	str	r3, [r7, #8]
 8007034:	60fa      	str	r2, [r7, #12]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	4a84      	ldr	r2, [pc, #528]	; (800724c <UART_SetConfig+0x5c4>)
 800703c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007040:	b29b      	uxth	r3, r3
 8007042:	2200      	movs	r2, #0
 8007044:	603b      	str	r3, [r7, #0]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800704c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007050:	f7f9 fdc2 	bl	8000bd8 <__aeabi_uldivmod>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4610      	mov	r0, r2
 800705a:	4619      	mov	r1, r3
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	020b      	lsls	r3, r1, #8
 8007066:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800706a:	0202      	lsls	r2, r0, #8
 800706c:	6979      	ldr	r1, [r7, #20]
 800706e:	6849      	ldr	r1, [r1, #4]
 8007070:	0849      	lsrs	r1, r1, #1
 8007072:	2000      	movs	r0, #0
 8007074:	460c      	mov	r4, r1
 8007076:	4605      	mov	r5, r0
 8007078:	eb12 0804 	adds.w	r8, r2, r4
 800707c:	eb43 0905 	adc.w	r9, r3, r5
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	469a      	mov	sl, r3
 8007088:	4693      	mov	fp, r2
 800708a:	4652      	mov	r2, sl
 800708c:	465b      	mov	r3, fp
 800708e:	4640      	mov	r0, r8
 8007090:	4649      	mov	r1, r9
 8007092:	f7f9 fda1 	bl	8000bd8 <__aeabi_uldivmod>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4613      	mov	r3, r2
 800709c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070a4:	d308      	bcc.n	80070b8 <UART_SetConfig+0x430>
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ac:	d204      	bcs.n	80070b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6a3a      	ldr	r2, [r7, #32]
 80070b4:	60da      	str	r2, [r3, #12]
 80070b6:	e0ce      	b.n	8007256 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070be:	e0ca      	b.n	8007256 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c8:	d166      	bne.n	8007198 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80070ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d827      	bhi.n	8007122 <UART_SetConfig+0x49a>
 80070d2:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <UART_SetConfig+0x450>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	080070fd 	.word	0x080070fd
 80070dc:	08007105 	.word	0x08007105
 80070e0:	0800710d 	.word	0x0800710d
 80070e4:	08007123 	.word	0x08007123
 80070e8:	08007113 	.word	0x08007113
 80070ec:	08007123 	.word	0x08007123
 80070f0:	08007123 	.word	0x08007123
 80070f4:	08007123 	.word	0x08007123
 80070f8:	0800711b 	.word	0x0800711b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070fc:	f7fd f9c0 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 8007100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007102:	e014      	b.n	800712e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007104:	f7fd f9d2 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8007108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800710a:	e010      	b.n	800712e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800710c:	4b4e      	ldr	r3, [pc, #312]	; (8007248 <UART_SetConfig+0x5c0>)
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007110:	e00d      	b.n	800712e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007112:	f7fd f91d 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8007116:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007118:	e009      	b.n	800712e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800711a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007120:	e005      	b.n	800712e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800712c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 8090 	beq.w	8007256 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	4a44      	ldr	r2, [pc, #272]	; (800724c <UART_SetConfig+0x5c4>)
 800713c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007140:	461a      	mov	r2, r3
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	fbb3 f3f2 	udiv	r3, r3, r2
 8007148:	005a      	lsls	r2, r3, #1
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	441a      	add	r2, r3
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	fbb2 f3f3 	udiv	r3, r2, r3
 800715a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	2b0f      	cmp	r3, #15
 8007160:	d916      	bls.n	8007190 <UART_SetConfig+0x508>
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007168:	d212      	bcs.n	8007190 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	b29b      	uxth	r3, r3
 800716e:	f023 030f 	bic.w	r3, r3, #15
 8007172:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	085b      	lsrs	r3, r3, #1
 8007178:	b29b      	uxth	r3, r3
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	b29a      	uxth	r2, r3
 8007180:	8bfb      	ldrh	r3, [r7, #30]
 8007182:	4313      	orrs	r3, r2
 8007184:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	8bfa      	ldrh	r2, [r7, #30]
 800718c:	60da      	str	r2, [r3, #12]
 800718e:	e062      	b.n	8007256 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007196:	e05e      	b.n	8007256 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007198:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800719c:	2b08      	cmp	r3, #8
 800719e:	d828      	bhi.n	80071f2 <UART_SetConfig+0x56a>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <UART_SetConfig+0x520>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071cd 	.word	0x080071cd
 80071ac:	080071d5 	.word	0x080071d5
 80071b0:	080071dd 	.word	0x080071dd
 80071b4:	080071f3 	.word	0x080071f3
 80071b8:	080071e3 	.word	0x080071e3
 80071bc:	080071f3 	.word	0x080071f3
 80071c0:	080071f3 	.word	0x080071f3
 80071c4:	080071f3 	.word	0x080071f3
 80071c8:	080071eb 	.word	0x080071eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071cc:	f7fd f958 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 80071d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071d2:	e014      	b.n	80071fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071d4:	f7fd f96a 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 80071d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071da:	e010      	b.n	80071fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071dc:	4b1a      	ldr	r3, [pc, #104]	; (8007248 <UART_SetConfig+0x5c0>)
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071e0:	e00d      	b.n	80071fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071e2:	f7fd f8b5 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 80071e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071e8:	e009      	b.n	80071fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071f0:	e005      	b.n	80071fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071fc:	bf00      	nop
    }

    if (pclk != 0U)
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	d028      	beq.n	8007256 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	4a10      	ldr	r2, [pc, #64]	; (800724c <UART_SetConfig+0x5c4>)
 800720a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800720e:	461a      	mov	r2, r3
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	fbb3 f2f2 	udiv	r2, r3, r2
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	441a      	add	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	fbb2 f3f3 	udiv	r3, r2, r3
 8007226:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	2b0f      	cmp	r3, #15
 800722c:	d910      	bls.n	8007250 <UART_SetConfig+0x5c8>
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007234:	d20c      	bcs.n	8007250 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	b29a      	uxth	r2, r3
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60da      	str	r2, [r3, #12]
 8007240:	e009      	b.n	8007256 <UART_SetConfig+0x5ce>
 8007242:	bf00      	nop
 8007244:	40008000 	.word	0x40008000
 8007248:	00f42400 	.word	0x00f42400
 800724c:	0800b34c 	.word	0x0800b34c
      }
      else
      {
        ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2201      	movs	r2, #1
 800725a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2201      	movs	r2, #1
 8007262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2200      	movs	r2, #0
 800726a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	2200      	movs	r2, #0
 8007270:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007272:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007276:	4618      	mov	r0, r3
 8007278:	3730      	adds	r7, #48	; 0x30
 800727a:	46bd      	mov	sp, r7
 800727c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01a      	beq.n	8007396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800737e:	d10a      	bne.n	8007396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	605a      	str	r2, [r3, #4]
  }
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b098      	sub	sp, #96	; 0x60
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073d4:	f7fb f992 	bl	80026fc <HAL_GetTick>
 80073d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d12f      	bne.n	8007448 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f0:	2200      	movs	r2, #0
 80073f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f88e 	bl	8007518 <UART_WaitOnFlagUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d022      	beq.n	8007448 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007416:	653b      	str	r3, [r7, #80]	; 0x50
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007420:	647b      	str	r3, [r7, #68]	; 0x44
 8007422:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800742e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e6      	bne.n	8007402 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2220      	movs	r2, #32
 8007438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e063      	b.n	8007510 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0304 	and.w	r3, r3, #4
 8007452:	2b04      	cmp	r3, #4
 8007454:	d149      	bne.n	80074ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007456:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800745e:	2200      	movs	r2, #0
 8007460:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f857 	bl	8007518 <UART_WaitOnFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d03c      	beq.n	80074ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	623b      	str	r3, [r7, #32]
   return(result);
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007484:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748e:	633b      	str	r3, [r7, #48]	; 0x30
 8007490:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e6      	bne.n	8007470 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3308      	adds	r3, #8
 80074a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	e853 3f00 	ldrex	r3, [r3]
 80074b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c2:	61fa      	str	r2, [r7, #28]
 80074c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	69b9      	ldr	r1, [r7, #24]
 80074c8:	69fa      	ldr	r2, [r7, #28]
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	617b      	str	r3, [r7, #20]
   return(result);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e5      	bne.n	80074a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e012      	b.n	8007510 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3758      	adds	r7, #88	; 0x58
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	4613      	mov	r3, r2
 8007526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007528:	e049      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d045      	beq.n	80075be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007532:	f7fb f8e3 	bl	80026fc <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	429a      	cmp	r2, r3
 8007540:	d302      	bcc.n	8007548 <UART_WaitOnFlagUntilTimeout+0x30>
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e048      	b.n	80075de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d031      	beq.n	80075be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b08      	cmp	r3, #8
 8007566:	d110      	bne.n	800758a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2208      	movs	r2, #8
 800756e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 f95b 	bl	800782c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2208      	movs	r2, #8
 800757a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e029      	b.n	80075de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007598:	d111      	bne.n	80075be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f941 	bl	800782c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e00f      	b.n	80075de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69da      	ldr	r2, [r3, #28]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4013      	ands	r3, r2
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	bf0c      	ite	eq
 80075ce:	2301      	moveq	r3, #1
 80075d0:	2300      	movne	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d0a6      	beq.n	800752a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b0a3      	sub	sp, #140	; 0x8c
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	88fa      	ldrh	r2, [r7, #6]
 8007600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761a:	d10e      	bne.n	800763a <UART_Start_Receive_IT+0x52>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d105      	bne.n	8007630 <UART_Start_Receive_IT+0x48>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f240 12ff 	movw	r2, #511	; 0x1ff
 800762a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800762e:	e02d      	b.n	800768c <UART_Start_Receive_IT+0xa4>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	22ff      	movs	r2, #255	; 0xff
 8007634:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007638:	e028      	b.n	800768c <UART_Start_Receive_IT+0xa4>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10d      	bne.n	800765e <UART_Start_Receive_IT+0x76>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d104      	bne.n	8007654 <UART_Start_Receive_IT+0x6c>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	22ff      	movs	r2, #255	; 0xff
 800764e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007652:	e01b      	b.n	800768c <UART_Start_Receive_IT+0xa4>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	227f      	movs	r2, #127	; 0x7f
 8007658:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800765c:	e016      	b.n	800768c <UART_Start_Receive_IT+0xa4>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007666:	d10d      	bne.n	8007684 <UART_Start_Receive_IT+0x9c>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <UART_Start_Receive_IT+0x92>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	227f      	movs	r2, #127	; 0x7f
 8007674:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007678:	e008      	b.n	800768c <UART_Start_Receive_IT+0xa4>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	223f      	movs	r2, #63	; 0x3f
 800767e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007682:	e003      	b.n	800768c <UART_Start_Receive_IT+0xa4>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2222      	movs	r2, #34	; 0x22
 8007698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3308      	adds	r3, #8
 80076a2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80076ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80076c0:	673a      	str	r2, [r7, #112]	; 0x70
 80076c2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80076c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80076ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e3      	bne.n	800769c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076dc:	d14f      	bne.n	800777e <UART_Start_Receive_IT+0x196>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076e4:	88fa      	ldrh	r2, [r7, #6]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d349      	bcc.n	800777e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f2:	d107      	bne.n	8007704 <UART_Start_Receive_IT+0x11c>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d103      	bne.n	8007704 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4a47      	ldr	r2, [pc, #284]	; (800781c <UART_Start_Receive_IT+0x234>)
 8007700:	675a      	str	r2, [r3, #116]	; 0x74
 8007702:	e002      	b.n	800770a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4a46      	ldr	r2, [pc, #280]	; (8007820 <UART_Start_Receive_IT+0x238>)
 8007708:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d01a      	beq.n	8007748 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007726:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007734:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007736:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800773a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e4      	bne.n	8007712 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3308      	adds	r3, #8
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007768:	64ba      	str	r2, [r7, #72]	; 0x48
 800776a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800776e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e5      	bne.n	8007748 <UART_Start_Receive_IT+0x160>
 800777c:	e046      	b.n	800780c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007786:	d107      	bne.n	8007798 <UART_Start_Receive_IT+0x1b0>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d103      	bne.n	8007798 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a24      	ldr	r2, [pc, #144]	; (8007824 <UART_Start_Receive_IT+0x23c>)
 8007794:	675a      	str	r2, [r3, #116]	; 0x74
 8007796:	e002      	b.n	800779e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a23      	ldr	r2, [pc, #140]	; (8007828 <UART_Start_Receive_IT+0x240>)
 800779c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d019      	beq.n	80077da <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80077ba:	677b      	str	r3, [r7, #116]	; 0x74
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
 80077c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e6      	bne.n	80077a6 <UART_Start_Receive_IT+0x1be>
 80077d8:	e018      	b.n	800780c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	613b      	str	r3, [r7, #16]
   return(result);
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f043 0320 	orr.w	r3, r3, #32
 80077ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f8:	623b      	str	r3, [r7, #32]
 80077fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	69f9      	ldr	r1, [r7, #28]
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	61bb      	str	r3, [r7, #24]
   return(result);
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e6      	bne.n	80077da <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	378c      	adds	r7, #140	; 0x8c
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	08008059 	.word	0x08008059
 8007820:	08007cf5 	.word	0x08007cf5
 8007824:	08007b39 	.word	0x08007b39
 8007828:	0800797d 	.word	0x0800797d

0800782c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b095      	sub	sp, #84	; 0x54
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007852:	643b      	str	r3, [r7, #64]	; 0x40
 8007854:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e6      	bne.n	8007834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	61fb      	str	r3, [r7, #28]
   return(result);
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	64bb      	str	r3, [r7, #72]	; 0x48
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800788a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800788c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e3      	bne.n	8007866 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d118      	bne.n	80078d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f023 0310 	bic.w	r3, r3, #16
 80078ba:	647b      	str	r3, [r7, #68]	; 0x44
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6979      	ldr	r1, [r7, #20]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	613b      	str	r3, [r7, #16]
   return(result);
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e6      	bne.n	80078a6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078ec:	bf00      	nop
 80078ee:	3754      	adds	r7, #84	; 0x54
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007904:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7ff f9a0 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	60bb      	str	r3, [r7, #8]
   return(result);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007940:	61fb      	str	r3, [r7, #28]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	61bb      	str	r3, [r7, #24]
 800794c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	6979      	ldr	r1, [r7, #20]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	613b      	str	r3, [r7, #16]
   return(result);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e6      	bne.n	800792c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7ff f96b 	bl	8006c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007972:	bf00      	nop
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b09c      	sub	sp, #112	; 0x70
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800798a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007994:	2b22      	cmp	r3, #34	; 0x22
 8007996:	f040 80be 	bne.w	8007b16 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80079a8:	b2d9      	uxtb	r1, r3
 80079aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b4:	400a      	ands	r2, r1
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f040 80a3 	bne.w	8007b2a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a02:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e6      	bne.n	80079e4 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a36:	647a      	str	r2, [r7, #68]	; 0x44
 8007a38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e5      	bne.n	8007a16 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a34      	ldr	r2, [pc, #208]	; (8007b34 <UART_RxISR_8BIT+0x1b8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d01f      	beq.n	8007aa8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d018      	beq.n	8007aa8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	623b      	str	r3, [r7, #32]
   return(result);
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a94:	633b      	str	r3, [r7, #48]	; 0x30
 8007a96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e6      	bne.n	8007a76 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d12e      	bne.n	8007b0e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0310 	bic.w	r3, r3, #16
 8007aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad4:	61fb      	str	r3, [r7, #28]
 8007ad6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	69b9      	ldr	r1, [r7, #24]
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e6      	bne.n	8007ab6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	2b10      	cmp	r3, #16
 8007af4:	d103      	bne.n	8007afe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2210      	movs	r2, #16
 8007afc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff f8b2 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b0c:	e00d      	b.n	8007b2a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fa f90c 	bl	8001d2c <HAL_UART_RxCpltCallback>
}
 8007b14:	e009      	b.n	8007b2a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	8b1b      	ldrh	r3, [r3, #24]
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0208 	orr.w	r2, r2, #8
 8007b26:	b292      	uxth	r2, r2
 8007b28:	831a      	strh	r2, [r3, #24]
}
 8007b2a:	bf00      	nop
 8007b2c:	3770      	adds	r7, #112	; 0x70
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	40008000 	.word	0x40008000

08007b38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b09c      	sub	sp, #112	; 0x70
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b50:	2b22      	cmp	r3, #34	; 0x22
 8007b52:	f040 80be 	bne.w	8007cd2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b64:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007b6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b6e:	4013      	ands	r3, r2
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7a:	1c9a      	adds	r2, r3, #2
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f040 80a3 	bne.w	8007ce6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8007bc0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e6      	bne.n	8007ba0 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	f023 0301 	bic.w	r3, r3, #1
 8007be8:	663b      	str	r3, [r7, #96]	; 0x60
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3308      	adds	r3, #8
 8007bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bf2:	643a      	str	r2, [r7, #64]	; 0x40
 8007bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e5      	bne.n	8007bd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a34      	ldr	r2, [pc, #208]	; (8007cf0 <UART_RxISR_16BIT+0x1b8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d01f      	beq.n	8007c64 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d018      	beq.n	8007c64 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c52:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e6      	bne.n	8007c32 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d12e      	bne.n	8007cca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f023 0310 	bic.w	r3, r3, #16
 8007c86:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c90:	61bb      	str	r3, [r7, #24]
 8007c92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6979      	ldr	r1, [r7, #20]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e6      	bne.n	8007c72 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	f003 0310 	and.w	r3, r3, #16
 8007cae:	2b10      	cmp	r3, #16
 8007cb0:	d103      	bne.n	8007cba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2210      	movs	r2, #16
 8007cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7fe ffd4 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cc8:	e00d      	b.n	8007ce6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7fa f82e 	bl	8001d2c <HAL_UART_RxCpltCallback>
}
 8007cd0:	e009      	b.n	8007ce6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	8b1b      	ldrh	r3, [r3, #24]
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0208 	orr.w	r2, r2, #8
 8007ce2:	b292      	uxth	r2, r2
 8007ce4:	831a      	strh	r2, [r3, #24]
}
 8007ce6:	bf00      	nop
 8007ce8:	3770      	adds	r7, #112	; 0x70
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	40008000 	.word	0x40008000

08007cf4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b0ac      	sub	sp, #176	; 0xb0
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d02:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d2a:	2b22      	cmp	r3, #34	; 0x22
 8007d2c:	f040 8182 	bne.w	8008034 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d36:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d3a:	e125      	b.n	8007f88 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d42:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d46:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007d4a:	b2d9      	uxtb	r1, r3
 8007d4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	400a      	ands	r2, r1
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d053      	beq.n	8007e36 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d011      	beq.n	8007dbe <UART_RxISR_8BIT_FIFOEN+0xca>
 8007d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00b      	beq.n	8007dbe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2201      	movs	r2, #1
 8007dac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db4:	f043 0201 	orr.w	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d011      	beq.n	8007dee <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de4:	f043 0204 	orr.w	r2, r3, #4
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d011      	beq.n	8007e1e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e14:	f043 0202 	orr.w	r2, r3, #2
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d006      	beq.n	8007e36 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7fe ff17 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f040 80a2 	bne.w	8007f88 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	461a      	mov	r2, r3
 8007e62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e68:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007e6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e4      	bne.n	8007e44 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e90:	f023 0301 	bic.w	r3, r3, #1
 8007e94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3308      	adds	r3, #8
 8007e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ea2:	66ba      	str	r2, [r7, #104]	; 0x68
 8007ea4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007ea8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007eb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e1      	bne.n	8007e7a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a60      	ldr	r2, [pc, #384]	; (8008050 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d021      	beq.n	8007f18 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01a      	beq.n	8007f18 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f04:	657b      	str	r3, [r7, #84]	; 0x54
 8007f06:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e4      	bne.n	8007ee2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d130      	bne.n	8007f82 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2e:	e853 3f00 	ldrex	r3, [r3]
 8007f32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	f023 0310 	bic.w	r3, r3, #16
 8007f3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f48:	643b      	str	r3, [r7, #64]	; 0x40
 8007f4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e4      	bne.n	8007f26 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f003 0310 	and.w	r3, r3, #16
 8007f66:	2b10      	cmp	r3, #16
 8007f68:	d103      	bne.n	8007f72 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2210      	movs	r2, #16
 8007f70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7fe fe78 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
 8007f80:	e002      	b.n	8007f88 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7f9 fed2 	bl	8001d2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f88:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d006      	beq.n	8007f9e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f94:	f003 0320 	and.w	r3, r3, #32
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f47f aecf 	bne.w	8007d3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fa4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007fa8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d04b      	beq.n	8008048 <UART_RxISR_8BIT_FIFOEN+0x354>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007fb6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d244      	bcs.n	8008048 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e3      	bne.n	8007fbe <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a16      	ldr	r2, [pc, #88]	; (8008054 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007ffa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	60bb      	str	r3, [r7, #8]
   return(result);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f043 0320 	orr.w	r3, r3, #32
 8008010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800801e:	61bb      	str	r3, [r7, #24]
 8008020:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6979      	ldr	r1, [r7, #20]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	613b      	str	r3, [r7, #16]
   return(result);
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e4      	bne.n	8007ffc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008032:	e009      	b.n	8008048 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	8b1b      	ldrh	r3, [r3, #24]
 800803a:	b29a      	uxth	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0208 	orr.w	r2, r2, #8
 8008044:	b292      	uxth	r2, r2
 8008046:	831a      	strh	r2, [r3, #24]
}
 8008048:	bf00      	nop
 800804a:	37b0      	adds	r7, #176	; 0xb0
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40008000 	.word	0x40008000
 8008054:	0800797d 	.word	0x0800797d

08008058 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b0ae      	sub	sp, #184	; 0xb8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008066:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800808e:	2b22      	cmp	r3, #34	; 0x22
 8008090:	f040 8186 	bne.w	80083a0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800809a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800809e:	e129      	b.n	80082f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80080a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80080b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80080b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80080ba:	4013      	ands	r3, r2
 80080bc:	b29a      	uxth	r2, r3
 80080be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c8:	1c9a      	adds	r2, r3, #2
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d053      	beq.n	800819e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d011      	beq.n	8008126 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00b      	beq.n	8008126 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2201      	movs	r2, #1
 8008114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811c:	f043 0201 	orr.w	r2, r3, #1
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008126:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d011      	beq.n	8008156 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008132:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2202      	movs	r2, #2
 8008144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814c:	f043 0204 	orr.w	r2, r3, #4
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d011      	beq.n	8008186 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008162:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00b      	beq.n	8008186 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2204      	movs	r2, #4
 8008174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817c:	f043 0202 	orr.w	r2, r3, #2
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818c:	2b00      	cmp	r3, #0
 800818e:	d006      	beq.n	800819e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fe fd63 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f040 80a4 	bne.w	80082f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081d2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e2      	bne.n	80081ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081fc:	f023 0301 	bic.w	r3, r3, #1
 8008200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3308      	adds	r3, #8
 800820a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800820e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008210:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008214:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800821c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e1      	bne.n	80081e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2220      	movs	r2, #32
 8008226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a60      	ldr	r2, [pc, #384]	; (80083bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d021      	beq.n	8008284 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d01a      	beq.n	8008284 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800825c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800825e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008262:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008270:	65bb      	str	r3, [r7, #88]	; 0x58
 8008272:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800827e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e4      	bne.n	800824e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008288:	2b01      	cmp	r3, #1
 800828a:	d130      	bne.n	80082ee <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a2:	f023 0310 	bic.w	r3, r3, #16
 80082a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082b4:	647b      	str	r3, [r7, #68]	; 0x44
 80082b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e4      	bne.n	8008292 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b10      	cmp	r3, #16
 80082d4:	d103      	bne.n	80082de <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2210      	movs	r2, #16
 80082dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fe fcc2 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
 80082ec:	e002      	b.n	80082f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7f9 fd1c 	bl	8001d2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d006      	beq.n	800830a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80082fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b00      	cmp	r3, #0
 8008306:	f47f aecb 	bne.w	80080a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008310:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008314:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008318:	2b00      	cmp	r3, #0
 800831a:	d04b      	beq.n	80083b4 <UART_RxISR_16BIT_FIFOEN+0x35c>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008322:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008326:	429a      	cmp	r2, r3
 8008328:	d244      	bcs.n	80083b4 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3308      	adds	r3, #8
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	623b      	str	r3, [r7, #32]
   return(result);
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3308      	adds	r3, #8
 800834a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800834e:	633a      	str	r2, [r7, #48]	; 0x30
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e3      	bne.n	800832a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a16      	ldr	r2, [pc, #88]	; (80083c0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008366:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	60fb      	str	r3, [r7, #12]
   return(result);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f043 0320 	orr.w	r3, r3, #32
 800837c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800838a:	61fb      	str	r3, [r7, #28]
 800838c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	69b9      	ldr	r1, [r7, #24]
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	617b      	str	r3, [r7, #20]
   return(result);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e4      	bne.n	8008368 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800839e:	e009      	b.n	80083b4 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	8b1b      	ldrh	r3, [r3, #24]
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f042 0208 	orr.w	r2, r2, #8
 80083b0:	b292      	uxth	r2, r2
 80083b2:	831a      	strh	r2, [r3, #24]
}
 80083b4:	bf00      	nop
 80083b6:	37b8      	adds	r7, #184	; 0xb8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	40008000 	.word	0x40008000
 80083c0:	08007b39 	.word	0x08007b39

080083c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800840e:	2b01      	cmp	r3, #1
 8008410:	d101      	bne.n	8008416 <HAL_UARTEx_DisableFifoMode+0x16>
 8008412:	2302      	movs	r3, #2
 8008414:	e027      	b.n	8008466 <HAL_UARTEx_DisableFifoMode+0x66>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2224      	movs	r2, #36	; 0x24
 8008422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0201 	bic.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008444:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008482:	2b01      	cmp	r3, #1
 8008484:	d101      	bne.n	800848a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008486:	2302      	movs	r3, #2
 8008488:	e02d      	b.n	80084e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2224      	movs	r2, #36	; 0x24
 8008496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 0201 	bic.w	r2, r2, #1
 80084b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f850 	bl	800856c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d101      	bne.n	8008506 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008502:	2302      	movs	r3, #2
 8008504:	e02d      	b.n	8008562 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2224      	movs	r2, #36	; 0x24
 8008512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 0201 	bic.w	r2, r2, #1
 800852c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f812 	bl	800856c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008578:	2b00      	cmp	r3, #0
 800857a:	d108      	bne.n	800858e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800858c:	e031      	b.n	80085f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800858e:	2308      	movs	r3, #8
 8008590:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008592:	2308      	movs	r3, #8
 8008594:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	0e5b      	lsrs	r3, r3, #25
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f003 0307 	and.w	r3, r3, #7
 80085a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	0f5b      	lsrs	r3, r3, #29
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	7b3a      	ldrb	r2, [r7, #12]
 80085ba:	4911      	ldr	r1, [pc, #68]	; (8008600 <UARTEx_SetNbDataToProcess+0x94>)
 80085bc:	5c8a      	ldrb	r2, [r1, r2]
 80085be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085c2:	7b3a      	ldrb	r2, [r7, #12]
 80085c4:	490f      	ldr	r1, [pc, #60]	; (8008604 <UARTEx_SetNbDataToProcess+0x98>)
 80085c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	7b7a      	ldrb	r2, [r7, #13]
 80085d8:	4909      	ldr	r1, [pc, #36]	; (8008600 <UARTEx_SetNbDataToProcess+0x94>)
 80085da:	5c8a      	ldrb	r2, [r1, r2]
 80085dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085e0:	7b7a      	ldrb	r2, [r7, #13]
 80085e2:	4908      	ldr	r1, [pc, #32]	; (8008604 <UARTEx_SetNbDataToProcess+0x98>)
 80085e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	0800b364 	.word	0x0800b364
 8008604:	0800b36c 	.word	0x0800b36c

08008608 <__itoa>:
 8008608:	1e93      	subs	r3, r2, #2
 800860a:	2b22      	cmp	r3, #34	; 0x22
 800860c:	b510      	push	{r4, lr}
 800860e:	460c      	mov	r4, r1
 8008610:	d904      	bls.n	800861c <__itoa+0x14>
 8008612:	2300      	movs	r3, #0
 8008614:	700b      	strb	r3, [r1, #0]
 8008616:	461c      	mov	r4, r3
 8008618:	4620      	mov	r0, r4
 800861a:	bd10      	pop	{r4, pc}
 800861c:	2a0a      	cmp	r2, #10
 800861e:	d109      	bne.n	8008634 <__itoa+0x2c>
 8008620:	2800      	cmp	r0, #0
 8008622:	da07      	bge.n	8008634 <__itoa+0x2c>
 8008624:	232d      	movs	r3, #45	; 0x2d
 8008626:	700b      	strb	r3, [r1, #0]
 8008628:	4240      	negs	r0, r0
 800862a:	2101      	movs	r1, #1
 800862c:	4421      	add	r1, r4
 800862e:	f000 f805 	bl	800863c <__utoa>
 8008632:	e7f1      	b.n	8008618 <__itoa+0x10>
 8008634:	2100      	movs	r1, #0
 8008636:	e7f9      	b.n	800862c <__itoa+0x24>

08008638 <itoa>:
 8008638:	f7ff bfe6 	b.w	8008608 <__itoa>

0800863c <__utoa>:
 800863c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800863e:	4c1f      	ldr	r4, [pc, #124]	; (80086bc <__utoa+0x80>)
 8008640:	b08b      	sub	sp, #44	; 0x2c
 8008642:	4605      	mov	r5, r0
 8008644:	460b      	mov	r3, r1
 8008646:	466e      	mov	r6, sp
 8008648:	f104 0c20 	add.w	ip, r4, #32
 800864c:	6820      	ldr	r0, [r4, #0]
 800864e:	6861      	ldr	r1, [r4, #4]
 8008650:	4637      	mov	r7, r6
 8008652:	c703      	stmia	r7!, {r0, r1}
 8008654:	3408      	adds	r4, #8
 8008656:	4564      	cmp	r4, ip
 8008658:	463e      	mov	r6, r7
 800865a:	d1f7      	bne.n	800864c <__utoa+0x10>
 800865c:	7921      	ldrb	r1, [r4, #4]
 800865e:	7139      	strb	r1, [r7, #4]
 8008660:	1e91      	subs	r1, r2, #2
 8008662:	6820      	ldr	r0, [r4, #0]
 8008664:	6038      	str	r0, [r7, #0]
 8008666:	2922      	cmp	r1, #34	; 0x22
 8008668:	f04f 0100 	mov.w	r1, #0
 800866c:	d904      	bls.n	8008678 <__utoa+0x3c>
 800866e:	7019      	strb	r1, [r3, #0]
 8008670:	460b      	mov	r3, r1
 8008672:	4618      	mov	r0, r3
 8008674:	b00b      	add	sp, #44	; 0x2c
 8008676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008678:	1e58      	subs	r0, r3, #1
 800867a:	4684      	mov	ip, r0
 800867c:	fbb5 f7f2 	udiv	r7, r5, r2
 8008680:	fb02 5617 	mls	r6, r2, r7, r5
 8008684:	3628      	adds	r6, #40	; 0x28
 8008686:	446e      	add	r6, sp
 8008688:	460c      	mov	r4, r1
 800868a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800868e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008692:	462e      	mov	r6, r5
 8008694:	42b2      	cmp	r2, r6
 8008696:	f101 0101 	add.w	r1, r1, #1
 800869a:	463d      	mov	r5, r7
 800869c:	d9ee      	bls.n	800867c <__utoa+0x40>
 800869e:	2200      	movs	r2, #0
 80086a0:	545a      	strb	r2, [r3, r1]
 80086a2:	1919      	adds	r1, r3, r4
 80086a4:	1aa5      	subs	r5, r4, r2
 80086a6:	42aa      	cmp	r2, r5
 80086a8:	dae3      	bge.n	8008672 <__utoa+0x36>
 80086aa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80086ae:	780e      	ldrb	r6, [r1, #0]
 80086b0:	7006      	strb	r6, [r0, #0]
 80086b2:	3201      	adds	r2, #1
 80086b4:	f801 5901 	strb.w	r5, [r1], #-1
 80086b8:	e7f4      	b.n	80086a4 <__utoa+0x68>
 80086ba:	bf00      	nop
 80086bc:	0800b374 	.word	0x0800b374

080086c0 <__cvt>:
 80086c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086c4:	ec55 4b10 	vmov	r4, r5, d0
 80086c8:	2d00      	cmp	r5, #0
 80086ca:	460e      	mov	r6, r1
 80086cc:	4619      	mov	r1, r3
 80086ce:	462b      	mov	r3, r5
 80086d0:	bfbb      	ittet	lt
 80086d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80086d6:	461d      	movlt	r5, r3
 80086d8:	2300      	movge	r3, #0
 80086da:	232d      	movlt	r3, #45	; 0x2d
 80086dc:	700b      	strb	r3, [r1, #0]
 80086de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086e4:	4691      	mov	r9, r2
 80086e6:	f023 0820 	bic.w	r8, r3, #32
 80086ea:	bfbc      	itt	lt
 80086ec:	4622      	movlt	r2, r4
 80086ee:	4614      	movlt	r4, r2
 80086f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086f4:	d005      	beq.n	8008702 <__cvt+0x42>
 80086f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086fa:	d100      	bne.n	80086fe <__cvt+0x3e>
 80086fc:	3601      	adds	r6, #1
 80086fe:	2102      	movs	r1, #2
 8008700:	e000      	b.n	8008704 <__cvt+0x44>
 8008702:	2103      	movs	r1, #3
 8008704:	ab03      	add	r3, sp, #12
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	ab02      	add	r3, sp, #8
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	ec45 4b10 	vmov	d0, r4, r5
 8008710:	4653      	mov	r3, sl
 8008712:	4632      	mov	r2, r6
 8008714:	f000 ff54 	bl	80095c0 <_dtoa_r>
 8008718:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800871c:	4607      	mov	r7, r0
 800871e:	d102      	bne.n	8008726 <__cvt+0x66>
 8008720:	f019 0f01 	tst.w	r9, #1
 8008724:	d022      	beq.n	800876c <__cvt+0xac>
 8008726:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800872a:	eb07 0906 	add.w	r9, r7, r6
 800872e:	d110      	bne.n	8008752 <__cvt+0x92>
 8008730:	783b      	ldrb	r3, [r7, #0]
 8008732:	2b30      	cmp	r3, #48	; 0x30
 8008734:	d10a      	bne.n	800874c <__cvt+0x8c>
 8008736:	2200      	movs	r2, #0
 8008738:	2300      	movs	r3, #0
 800873a:	4620      	mov	r0, r4
 800873c:	4629      	mov	r1, r5
 800873e:	f7f8 f9db 	bl	8000af8 <__aeabi_dcmpeq>
 8008742:	b918      	cbnz	r0, 800874c <__cvt+0x8c>
 8008744:	f1c6 0601 	rsb	r6, r6, #1
 8008748:	f8ca 6000 	str.w	r6, [sl]
 800874c:	f8da 3000 	ldr.w	r3, [sl]
 8008750:	4499      	add	r9, r3
 8008752:	2200      	movs	r2, #0
 8008754:	2300      	movs	r3, #0
 8008756:	4620      	mov	r0, r4
 8008758:	4629      	mov	r1, r5
 800875a:	f7f8 f9cd 	bl	8000af8 <__aeabi_dcmpeq>
 800875e:	b108      	cbz	r0, 8008764 <__cvt+0xa4>
 8008760:	f8cd 900c 	str.w	r9, [sp, #12]
 8008764:	2230      	movs	r2, #48	; 0x30
 8008766:	9b03      	ldr	r3, [sp, #12]
 8008768:	454b      	cmp	r3, r9
 800876a:	d307      	bcc.n	800877c <__cvt+0xbc>
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008770:	1bdb      	subs	r3, r3, r7
 8008772:	4638      	mov	r0, r7
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	b004      	add	sp, #16
 8008778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877c:	1c59      	adds	r1, r3, #1
 800877e:	9103      	str	r1, [sp, #12]
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	e7f0      	b.n	8008766 <__cvt+0xa6>

08008784 <__exponent>:
 8008784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008786:	4603      	mov	r3, r0
 8008788:	2900      	cmp	r1, #0
 800878a:	bfb8      	it	lt
 800878c:	4249      	neglt	r1, r1
 800878e:	f803 2b02 	strb.w	r2, [r3], #2
 8008792:	bfb4      	ite	lt
 8008794:	222d      	movlt	r2, #45	; 0x2d
 8008796:	222b      	movge	r2, #43	; 0x2b
 8008798:	2909      	cmp	r1, #9
 800879a:	7042      	strb	r2, [r0, #1]
 800879c:	dd2a      	ble.n	80087f4 <__exponent+0x70>
 800879e:	f10d 0207 	add.w	r2, sp, #7
 80087a2:	4617      	mov	r7, r2
 80087a4:	260a      	movs	r6, #10
 80087a6:	4694      	mov	ip, r2
 80087a8:	fb91 f5f6 	sdiv	r5, r1, r6
 80087ac:	fb06 1415 	mls	r4, r6, r5, r1
 80087b0:	3430      	adds	r4, #48	; 0x30
 80087b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80087b6:	460c      	mov	r4, r1
 80087b8:	2c63      	cmp	r4, #99	; 0x63
 80087ba:	f102 32ff 	add.w	r2, r2, #4294967295
 80087be:	4629      	mov	r1, r5
 80087c0:	dcf1      	bgt.n	80087a6 <__exponent+0x22>
 80087c2:	3130      	adds	r1, #48	; 0x30
 80087c4:	f1ac 0402 	sub.w	r4, ip, #2
 80087c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087cc:	1c41      	adds	r1, r0, #1
 80087ce:	4622      	mov	r2, r4
 80087d0:	42ba      	cmp	r2, r7
 80087d2:	d30a      	bcc.n	80087ea <__exponent+0x66>
 80087d4:	f10d 0209 	add.w	r2, sp, #9
 80087d8:	eba2 020c 	sub.w	r2, r2, ip
 80087dc:	42bc      	cmp	r4, r7
 80087de:	bf88      	it	hi
 80087e0:	2200      	movhi	r2, #0
 80087e2:	4413      	add	r3, r2
 80087e4:	1a18      	subs	r0, r3, r0
 80087e6:	b003      	add	sp, #12
 80087e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80087ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80087f2:	e7ed      	b.n	80087d0 <__exponent+0x4c>
 80087f4:	2330      	movs	r3, #48	; 0x30
 80087f6:	3130      	adds	r1, #48	; 0x30
 80087f8:	7083      	strb	r3, [r0, #2]
 80087fa:	70c1      	strb	r1, [r0, #3]
 80087fc:	1d03      	adds	r3, r0, #4
 80087fe:	e7f1      	b.n	80087e4 <__exponent+0x60>

08008800 <_printf_float>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	ed2d 8b02 	vpush	{d8}
 8008808:	b08d      	sub	sp, #52	; 0x34
 800880a:	460c      	mov	r4, r1
 800880c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008810:	4616      	mov	r6, r2
 8008812:	461f      	mov	r7, r3
 8008814:	4605      	mov	r5, r0
 8008816:	f000 fdd1 	bl	80093bc <_localeconv_r>
 800881a:	f8d0 a000 	ldr.w	sl, [r0]
 800881e:	4650      	mov	r0, sl
 8008820:	f7f7 fd3e 	bl	80002a0 <strlen>
 8008824:	2300      	movs	r3, #0
 8008826:	930a      	str	r3, [sp, #40]	; 0x28
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	9305      	str	r3, [sp, #20]
 800882c:	f8d8 3000 	ldr.w	r3, [r8]
 8008830:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008834:	3307      	adds	r3, #7
 8008836:	f023 0307 	bic.w	r3, r3, #7
 800883a:	f103 0208 	add.w	r2, r3, #8
 800883e:	f8c8 2000 	str.w	r2, [r8]
 8008842:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008846:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800884a:	9307      	str	r3, [sp, #28]
 800884c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008850:	ee08 0a10 	vmov	s16, r0
 8008854:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800885c:	4b9e      	ldr	r3, [pc, #632]	; (8008ad8 <_printf_float+0x2d8>)
 800885e:	f04f 32ff 	mov.w	r2, #4294967295
 8008862:	f7f8 f97b 	bl	8000b5c <__aeabi_dcmpun>
 8008866:	bb88      	cbnz	r0, 80088cc <_printf_float+0xcc>
 8008868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800886c:	4b9a      	ldr	r3, [pc, #616]	; (8008ad8 <_printf_float+0x2d8>)
 800886e:	f04f 32ff 	mov.w	r2, #4294967295
 8008872:	f7f8 f955 	bl	8000b20 <__aeabi_dcmple>
 8008876:	bb48      	cbnz	r0, 80088cc <_printf_float+0xcc>
 8008878:	2200      	movs	r2, #0
 800887a:	2300      	movs	r3, #0
 800887c:	4640      	mov	r0, r8
 800887e:	4649      	mov	r1, r9
 8008880:	f7f8 f944 	bl	8000b0c <__aeabi_dcmplt>
 8008884:	b110      	cbz	r0, 800888c <_printf_float+0x8c>
 8008886:	232d      	movs	r3, #45	; 0x2d
 8008888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800888c:	4a93      	ldr	r2, [pc, #588]	; (8008adc <_printf_float+0x2dc>)
 800888e:	4b94      	ldr	r3, [pc, #592]	; (8008ae0 <_printf_float+0x2e0>)
 8008890:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008894:	bf94      	ite	ls
 8008896:	4690      	movls	r8, r2
 8008898:	4698      	movhi	r8, r3
 800889a:	2303      	movs	r3, #3
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	9b05      	ldr	r3, [sp, #20]
 80088a0:	f023 0304 	bic.w	r3, r3, #4
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	f04f 0900 	mov.w	r9, #0
 80088aa:	9700      	str	r7, [sp, #0]
 80088ac:	4633      	mov	r3, r6
 80088ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80088b0:	4621      	mov	r1, r4
 80088b2:	4628      	mov	r0, r5
 80088b4:	f000 f9da 	bl	8008c6c <_printf_common>
 80088b8:	3001      	adds	r0, #1
 80088ba:	f040 8090 	bne.w	80089de <_printf_float+0x1de>
 80088be:	f04f 30ff 	mov.w	r0, #4294967295
 80088c2:	b00d      	add	sp, #52	; 0x34
 80088c4:	ecbd 8b02 	vpop	{d8}
 80088c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088cc:	4642      	mov	r2, r8
 80088ce:	464b      	mov	r3, r9
 80088d0:	4640      	mov	r0, r8
 80088d2:	4649      	mov	r1, r9
 80088d4:	f7f8 f942 	bl	8000b5c <__aeabi_dcmpun>
 80088d8:	b140      	cbz	r0, 80088ec <_printf_float+0xec>
 80088da:	464b      	mov	r3, r9
 80088dc:	2b00      	cmp	r3, #0
 80088de:	bfbc      	itt	lt
 80088e0:	232d      	movlt	r3, #45	; 0x2d
 80088e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088e6:	4a7f      	ldr	r2, [pc, #508]	; (8008ae4 <_printf_float+0x2e4>)
 80088e8:	4b7f      	ldr	r3, [pc, #508]	; (8008ae8 <_printf_float+0x2e8>)
 80088ea:	e7d1      	b.n	8008890 <_printf_float+0x90>
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80088f2:	9206      	str	r2, [sp, #24]
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	d13f      	bne.n	8008978 <_printf_float+0x178>
 80088f8:	2306      	movs	r3, #6
 80088fa:	6063      	str	r3, [r4, #4]
 80088fc:	9b05      	ldr	r3, [sp, #20]
 80088fe:	6861      	ldr	r1, [r4, #4]
 8008900:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008904:	2300      	movs	r3, #0
 8008906:	9303      	str	r3, [sp, #12]
 8008908:	ab0a      	add	r3, sp, #40	; 0x28
 800890a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800890e:	ab09      	add	r3, sp, #36	; 0x24
 8008910:	ec49 8b10 	vmov	d0, r8, r9
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	6022      	str	r2, [r4, #0]
 8008918:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800891c:	4628      	mov	r0, r5
 800891e:	f7ff fecf 	bl	80086c0 <__cvt>
 8008922:	9b06      	ldr	r3, [sp, #24]
 8008924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008926:	2b47      	cmp	r3, #71	; 0x47
 8008928:	4680      	mov	r8, r0
 800892a:	d108      	bne.n	800893e <_printf_float+0x13e>
 800892c:	1cc8      	adds	r0, r1, #3
 800892e:	db02      	blt.n	8008936 <_printf_float+0x136>
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	4299      	cmp	r1, r3
 8008934:	dd41      	ble.n	80089ba <_printf_float+0x1ba>
 8008936:	f1ab 0302 	sub.w	r3, fp, #2
 800893a:	fa5f fb83 	uxtb.w	fp, r3
 800893e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008942:	d820      	bhi.n	8008986 <_printf_float+0x186>
 8008944:	3901      	subs	r1, #1
 8008946:	465a      	mov	r2, fp
 8008948:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800894c:	9109      	str	r1, [sp, #36]	; 0x24
 800894e:	f7ff ff19 	bl	8008784 <__exponent>
 8008952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008954:	1813      	adds	r3, r2, r0
 8008956:	2a01      	cmp	r2, #1
 8008958:	4681      	mov	r9, r0
 800895a:	6123      	str	r3, [r4, #16]
 800895c:	dc02      	bgt.n	8008964 <_printf_float+0x164>
 800895e:	6822      	ldr	r2, [r4, #0]
 8008960:	07d2      	lsls	r2, r2, #31
 8008962:	d501      	bpl.n	8008968 <_printf_float+0x168>
 8008964:	3301      	adds	r3, #1
 8008966:	6123      	str	r3, [r4, #16]
 8008968:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800896c:	2b00      	cmp	r3, #0
 800896e:	d09c      	beq.n	80088aa <_printf_float+0xaa>
 8008970:	232d      	movs	r3, #45	; 0x2d
 8008972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008976:	e798      	b.n	80088aa <_printf_float+0xaa>
 8008978:	9a06      	ldr	r2, [sp, #24]
 800897a:	2a47      	cmp	r2, #71	; 0x47
 800897c:	d1be      	bne.n	80088fc <_printf_float+0xfc>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1bc      	bne.n	80088fc <_printf_float+0xfc>
 8008982:	2301      	movs	r3, #1
 8008984:	e7b9      	b.n	80088fa <_printf_float+0xfa>
 8008986:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800898a:	d118      	bne.n	80089be <_printf_float+0x1be>
 800898c:	2900      	cmp	r1, #0
 800898e:	6863      	ldr	r3, [r4, #4]
 8008990:	dd0b      	ble.n	80089aa <_printf_float+0x1aa>
 8008992:	6121      	str	r1, [r4, #16]
 8008994:	b913      	cbnz	r3, 800899c <_printf_float+0x19c>
 8008996:	6822      	ldr	r2, [r4, #0]
 8008998:	07d0      	lsls	r0, r2, #31
 800899a:	d502      	bpl.n	80089a2 <_printf_float+0x1a2>
 800899c:	3301      	adds	r3, #1
 800899e:	440b      	add	r3, r1
 80089a0:	6123      	str	r3, [r4, #16]
 80089a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80089a4:	f04f 0900 	mov.w	r9, #0
 80089a8:	e7de      	b.n	8008968 <_printf_float+0x168>
 80089aa:	b913      	cbnz	r3, 80089b2 <_printf_float+0x1b2>
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	07d2      	lsls	r2, r2, #31
 80089b0:	d501      	bpl.n	80089b6 <_printf_float+0x1b6>
 80089b2:	3302      	adds	r3, #2
 80089b4:	e7f4      	b.n	80089a0 <_printf_float+0x1a0>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e7f2      	b.n	80089a0 <_printf_float+0x1a0>
 80089ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80089be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c0:	4299      	cmp	r1, r3
 80089c2:	db05      	blt.n	80089d0 <_printf_float+0x1d0>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	6121      	str	r1, [r4, #16]
 80089c8:	07d8      	lsls	r0, r3, #31
 80089ca:	d5ea      	bpl.n	80089a2 <_printf_float+0x1a2>
 80089cc:	1c4b      	adds	r3, r1, #1
 80089ce:	e7e7      	b.n	80089a0 <_printf_float+0x1a0>
 80089d0:	2900      	cmp	r1, #0
 80089d2:	bfd4      	ite	le
 80089d4:	f1c1 0202 	rsble	r2, r1, #2
 80089d8:	2201      	movgt	r2, #1
 80089da:	4413      	add	r3, r2
 80089dc:	e7e0      	b.n	80089a0 <_printf_float+0x1a0>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	055a      	lsls	r2, r3, #21
 80089e2:	d407      	bmi.n	80089f4 <_printf_float+0x1f4>
 80089e4:	6923      	ldr	r3, [r4, #16]
 80089e6:	4642      	mov	r2, r8
 80089e8:	4631      	mov	r1, r6
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	d12c      	bne.n	8008a4c <_printf_float+0x24c>
 80089f2:	e764      	b.n	80088be <_printf_float+0xbe>
 80089f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089f8:	f240 80e0 	bls.w	8008bbc <_printf_float+0x3bc>
 80089fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a00:	2200      	movs	r2, #0
 8008a02:	2300      	movs	r3, #0
 8008a04:	f7f8 f878 	bl	8000af8 <__aeabi_dcmpeq>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d034      	beq.n	8008a76 <_printf_float+0x276>
 8008a0c:	4a37      	ldr	r2, [pc, #220]	; (8008aec <_printf_float+0x2ec>)
 8008a0e:	2301      	movs	r3, #1
 8008a10:	4631      	mov	r1, r6
 8008a12:	4628      	mov	r0, r5
 8008a14:	47b8      	blx	r7
 8008a16:	3001      	adds	r0, #1
 8008a18:	f43f af51 	beq.w	80088be <_printf_float+0xbe>
 8008a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a20:	429a      	cmp	r2, r3
 8008a22:	db02      	blt.n	8008a2a <_printf_float+0x22a>
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	07d8      	lsls	r0, r3, #31
 8008a28:	d510      	bpl.n	8008a4c <_printf_float+0x24c>
 8008a2a:	ee18 3a10 	vmov	r3, s16
 8008a2e:	4652      	mov	r2, sl
 8008a30:	4631      	mov	r1, r6
 8008a32:	4628      	mov	r0, r5
 8008a34:	47b8      	blx	r7
 8008a36:	3001      	adds	r0, #1
 8008a38:	f43f af41 	beq.w	80088be <_printf_float+0xbe>
 8008a3c:	f04f 0800 	mov.w	r8, #0
 8008a40:	f104 091a 	add.w	r9, r4, #26
 8008a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a46:	3b01      	subs	r3, #1
 8008a48:	4543      	cmp	r3, r8
 8008a4a:	dc09      	bgt.n	8008a60 <_printf_float+0x260>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	079b      	lsls	r3, r3, #30
 8008a50:	f100 8107 	bmi.w	8008c62 <_printf_float+0x462>
 8008a54:	68e0      	ldr	r0, [r4, #12]
 8008a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a58:	4298      	cmp	r0, r3
 8008a5a:	bfb8      	it	lt
 8008a5c:	4618      	movlt	r0, r3
 8008a5e:	e730      	b.n	80088c2 <_printf_float+0xc2>
 8008a60:	2301      	movs	r3, #1
 8008a62:	464a      	mov	r2, r9
 8008a64:	4631      	mov	r1, r6
 8008a66:	4628      	mov	r0, r5
 8008a68:	47b8      	blx	r7
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	f43f af27 	beq.w	80088be <_printf_float+0xbe>
 8008a70:	f108 0801 	add.w	r8, r8, #1
 8008a74:	e7e6      	b.n	8008a44 <_printf_float+0x244>
 8008a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	dc39      	bgt.n	8008af0 <_printf_float+0x2f0>
 8008a7c:	4a1b      	ldr	r2, [pc, #108]	; (8008aec <_printf_float+0x2ec>)
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4631      	mov	r1, r6
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	f43f af19 	beq.w	80088be <_printf_float+0xbe>
 8008a8c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a90:	4313      	orrs	r3, r2
 8008a92:	d102      	bne.n	8008a9a <_printf_float+0x29a>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	07d9      	lsls	r1, r3, #31
 8008a98:	d5d8      	bpl.n	8008a4c <_printf_float+0x24c>
 8008a9a:	ee18 3a10 	vmov	r3, s16
 8008a9e:	4652      	mov	r2, sl
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b8      	blx	r7
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f43f af09 	beq.w	80088be <_printf_float+0xbe>
 8008aac:	f04f 0900 	mov.w	r9, #0
 8008ab0:	f104 0a1a 	add.w	sl, r4, #26
 8008ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab6:	425b      	negs	r3, r3
 8008ab8:	454b      	cmp	r3, r9
 8008aba:	dc01      	bgt.n	8008ac0 <_printf_float+0x2c0>
 8008abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abe:	e792      	b.n	80089e6 <_printf_float+0x1e6>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	4652      	mov	r2, sl
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	f43f aef7 	beq.w	80088be <_printf_float+0xbe>
 8008ad0:	f109 0901 	add.w	r9, r9, #1
 8008ad4:	e7ee      	b.n	8008ab4 <_printf_float+0x2b4>
 8008ad6:	bf00      	nop
 8008ad8:	7fefffff 	.word	0x7fefffff
 8008adc:	0800b399 	.word	0x0800b399
 8008ae0:	0800b39d 	.word	0x0800b39d
 8008ae4:	0800b3a1 	.word	0x0800b3a1
 8008ae8:	0800b3a5 	.word	0x0800b3a5
 8008aec:	0800b3a9 	.word	0x0800b3a9
 8008af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008af4:	429a      	cmp	r2, r3
 8008af6:	bfa8      	it	ge
 8008af8:	461a      	movge	r2, r3
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	4691      	mov	r9, r2
 8008afe:	dc37      	bgt.n	8008b70 <_printf_float+0x370>
 8008b00:	f04f 0b00 	mov.w	fp, #0
 8008b04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b08:	f104 021a 	add.w	r2, r4, #26
 8008b0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b0e:	9305      	str	r3, [sp, #20]
 8008b10:	eba3 0309 	sub.w	r3, r3, r9
 8008b14:	455b      	cmp	r3, fp
 8008b16:	dc33      	bgt.n	8008b80 <_printf_float+0x380>
 8008b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	db3b      	blt.n	8008b98 <_printf_float+0x398>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	07da      	lsls	r2, r3, #31
 8008b24:	d438      	bmi.n	8008b98 <_printf_float+0x398>
 8008b26:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b2a:	eba2 0903 	sub.w	r9, r2, r3
 8008b2e:	9b05      	ldr	r3, [sp, #20]
 8008b30:	1ad2      	subs	r2, r2, r3
 8008b32:	4591      	cmp	r9, r2
 8008b34:	bfa8      	it	ge
 8008b36:	4691      	movge	r9, r2
 8008b38:	f1b9 0f00 	cmp.w	r9, #0
 8008b3c:	dc35      	bgt.n	8008baa <_printf_float+0x3aa>
 8008b3e:	f04f 0800 	mov.w	r8, #0
 8008b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b46:	f104 0a1a 	add.w	sl, r4, #26
 8008b4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b4e:	1a9b      	subs	r3, r3, r2
 8008b50:	eba3 0309 	sub.w	r3, r3, r9
 8008b54:	4543      	cmp	r3, r8
 8008b56:	f77f af79 	ble.w	8008a4c <_printf_float+0x24c>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4652      	mov	r2, sl
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4628      	mov	r0, r5
 8008b62:	47b8      	blx	r7
 8008b64:	3001      	adds	r0, #1
 8008b66:	f43f aeaa 	beq.w	80088be <_printf_float+0xbe>
 8008b6a:	f108 0801 	add.w	r8, r8, #1
 8008b6e:	e7ec      	b.n	8008b4a <_printf_float+0x34a>
 8008b70:	4613      	mov	r3, r2
 8008b72:	4631      	mov	r1, r6
 8008b74:	4642      	mov	r2, r8
 8008b76:	4628      	mov	r0, r5
 8008b78:	47b8      	blx	r7
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d1c0      	bne.n	8008b00 <_printf_float+0x300>
 8008b7e:	e69e      	b.n	80088be <_printf_float+0xbe>
 8008b80:	2301      	movs	r3, #1
 8008b82:	4631      	mov	r1, r6
 8008b84:	4628      	mov	r0, r5
 8008b86:	9205      	str	r2, [sp, #20]
 8008b88:	47b8      	blx	r7
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	f43f ae97 	beq.w	80088be <_printf_float+0xbe>
 8008b90:	9a05      	ldr	r2, [sp, #20]
 8008b92:	f10b 0b01 	add.w	fp, fp, #1
 8008b96:	e7b9      	b.n	8008b0c <_printf_float+0x30c>
 8008b98:	ee18 3a10 	vmov	r3, s16
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d1be      	bne.n	8008b26 <_printf_float+0x326>
 8008ba8:	e689      	b.n	80088be <_printf_float+0xbe>
 8008baa:	9a05      	ldr	r2, [sp, #20]
 8008bac:	464b      	mov	r3, r9
 8008bae:	4442      	add	r2, r8
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	47b8      	blx	r7
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d1c1      	bne.n	8008b3e <_printf_float+0x33e>
 8008bba:	e680      	b.n	80088be <_printf_float+0xbe>
 8008bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bbe:	2a01      	cmp	r2, #1
 8008bc0:	dc01      	bgt.n	8008bc6 <_printf_float+0x3c6>
 8008bc2:	07db      	lsls	r3, r3, #31
 8008bc4:	d53a      	bpl.n	8008c3c <_printf_float+0x43c>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4642      	mov	r2, r8
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4628      	mov	r0, r5
 8008bce:	47b8      	blx	r7
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	f43f ae74 	beq.w	80088be <_printf_float+0xbe>
 8008bd6:	ee18 3a10 	vmov	r3, s16
 8008bda:	4652      	mov	r2, sl
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f ae6b 	beq.w	80088be <_printf_float+0xbe>
 8008be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008bf4:	f7f7 ff80 	bl	8000af8 <__aeabi_dcmpeq>
 8008bf8:	b9d8      	cbnz	r0, 8008c32 <_printf_float+0x432>
 8008bfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008bfe:	f108 0201 	add.w	r2, r8, #1
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d10e      	bne.n	8008c2a <_printf_float+0x42a>
 8008c0c:	e657      	b.n	80088be <_printf_float+0xbe>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4652      	mov	r2, sl
 8008c12:	4631      	mov	r1, r6
 8008c14:	4628      	mov	r0, r5
 8008c16:	47b8      	blx	r7
 8008c18:	3001      	adds	r0, #1
 8008c1a:	f43f ae50 	beq.w	80088be <_printf_float+0xbe>
 8008c1e:	f108 0801 	add.w	r8, r8, #1
 8008c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c24:	3b01      	subs	r3, #1
 8008c26:	4543      	cmp	r3, r8
 8008c28:	dcf1      	bgt.n	8008c0e <_printf_float+0x40e>
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c30:	e6da      	b.n	80089e8 <_printf_float+0x1e8>
 8008c32:	f04f 0800 	mov.w	r8, #0
 8008c36:	f104 0a1a 	add.w	sl, r4, #26
 8008c3a:	e7f2      	b.n	8008c22 <_printf_float+0x422>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	4642      	mov	r2, r8
 8008c40:	e7df      	b.n	8008c02 <_printf_float+0x402>
 8008c42:	2301      	movs	r3, #1
 8008c44:	464a      	mov	r2, r9
 8008c46:	4631      	mov	r1, r6
 8008c48:	4628      	mov	r0, r5
 8008c4a:	47b8      	blx	r7
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	f43f ae36 	beq.w	80088be <_printf_float+0xbe>
 8008c52:	f108 0801 	add.w	r8, r8, #1
 8008c56:	68e3      	ldr	r3, [r4, #12]
 8008c58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c5a:	1a5b      	subs	r3, r3, r1
 8008c5c:	4543      	cmp	r3, r8
 8008c5e:	dcf0      	bgt.n	8008c42 <_printf_float+0x442>
 8008c60:	e6f8      	b.n	8008a54 <_printf_float+0x254>
 8008c62:	f04f 0800 	mov.w	r8, #0
 8008c66:	f104 0919 	add.w	r9, r4, #25
 8008c6a:	e7f4      	b.n	8008c56 <_printf_float+0x456>

08008c6c <_printf_common>:
 8008c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c70:	4616      	mov	r6, r2
 8008c72:	4699      	mov	r9, r3
 8008c74:	688a      	ldr	r2, [r1, #8]
 8008c76:	690b      	ldr	r3, [r1, #16]
 8008c78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	bfb8      	it	lt
 8008c80:	4613      	movlt	r3, r2
 8008c82:	6033      	str	r3, [r6, #0]
 8008c84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c88:	4607      	mov	r7, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	b10a      	cbz	r2, 8008c92 <_printf_common+0x26>
 8008c8e:	3301      	adds	r3, #1
 8008c90:	6033      	str	r3, [r6, #0]
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	0699      	lsls	r1, r3, #26
 8008c96:	bf42      	ittt	mi
 8008c98:	6833      	ldrmi	r3, [r6, #0]
 8008c9a:	3302      	addmi	r3, #2
 8008c9c:	6033      	strmi	r3, [r6, #0]
 8008c9e:	6825      	ldr	r5, [r4, #0]
 8008ca0:	f015 0506 	ands.w	r5, r5, #6
 8008ca4:	d106      	bne.n	8008cb4 <_printf_common+0x48>
 8008ca6:	f104 0a19 	add.w	sl, r4, #25
 8008caa:	68e3      	ldr	r3, [r4, #12]
 8008cac:	6832      	ldr	r2, [r6, #0]
 8008cae:	1a9b      	subs	r3, r3, r2
 8008cb0:	42ab      	cmp	r3, r5
 8008cb2:	dc26      	bgt.n	8008d02 <_printf_common+0x96>
 8008cb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cb8:	1e13      	subs	r3, r2, #0
 8008cba:	6822      	ldr	r2, [r4, #0]
 8008cbc:	bf18      	it	ne
 8008cbe:	2301      	movne	r3, #1
 8008cc0:	0692      	lsls	r2, r2, #26
 8008cc2:	d42b      	bmi.n	8008d1c <_printf_common+0xb0>
 8008cc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cc8:	4649      	mov	r1, r9
 8008cca:	4638      	mov	r0, r7
 8008ccc:	47c0      	blx	r8
 8008cce:	3001      	adds	r0, #1
 8008cd0:	d01e      	beq.n	8008d10 <_printf_common+0xa4>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	6922      	ldr	r2, [r4, #16]
 8008cd6:	f003 0306 	and.w	r3, r3, #6
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	bf02      	ittt	eq
 8008cde:	68e5      	ldreq	r5, [r4, #12]
 8008ce0:	6833      	ldreq	r3, [r6, #0]
 8008ce2:	1aed      	subeq	r5, r5, r3
 8008ce4:	68a3      	ldr	r3, [r4, #8]
 8008ce6:	bf0c      	ite	eq
 8008ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cec:	2500      	movne	r5, #0
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	bfc4      	itt	gt
 8008cf2:	1a9b      	subgt	r3, r3, r2
 8008cf4:	18ed      	addgt	r5, r5, r3
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	341a      	adds	r4, #26
 8008cfa:	42b5      	cmp	r5, r6
 8008cfc:	d11a      	bne.n	8008d34 <_printf_common+0xc8>
 8008cfe:	2000      	movs	r0, #0
 8008d00:	e008      	b.n	8008d14 <_printf_common+0xa8>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4652      	mov	r2, sl
 8008d06:	4649      	mov	r1, r9
 8008d08:	4638      	mov	r0, r7
 8008d0a:	47c0      	blx	r8
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d103      	bne.n	8008d18 <_printf_common+0xac>
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d18:	3501      	adds	r5, #1
 8008d1a:	e7c6      	b.n	8008caa <_printf_common+0x3e>
 8008d1c:	18e1      	adds	r1, r4, r3
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	2030      	movs	r0, #48	; 0x30
 8008d22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d26:	4422      	add	r2, r4
 8008d28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d30:	3302      	adds	r3, #2
 8008d32:	e7c7      	b.n	8008cc4 <_printf_common+0x58>
 8008d34:	2301      	movs	r3, #1
 8008d36:	4622      	mov	r2, r4
 8008d38:	4649      	mov	r1, r9
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	47c0      	blx	r8
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d0e6      	beq.n	8008d10 <_printf_common+0xa4>
 8008d42:	3601      	adds	r6, #1
 8008d44:	e7d9      	b.n	8008cfa <_printf_common+0x8e>
	...

08008d48 <_printf_i>:
 8008d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	7e0f      	ldrb	r7, [r1, #24]
 8008d4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d50:	2f78      	cmp	r7, #120	; 0x78
 8008d52:	4691      	mov	r9, r2
 8008d54:	4680      	mov	r8, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	469a      	mov	sl, r3
 8008d5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d5e:	d807      	bhi.n	8008d70 <_printf_i+0x28>
 8008d60:	2f62      	cmp	r7, #98	; 0x62
 8008d62:	d80a      	bhi.n	8008d7a <_printf_i+0x32>
 8008d64:	2f00      	cmp	r7, #0
 8008d66:	f000 80d4 	beq.w	8008f12 <_printf_i+0x1ca>
 8008d6a:	2f58      	cmp	r7, #88	; 0x58
 8008d6c:	f000 80c0 	beq.w	8008ef0 <_printf_i+0x1a8>
 8008d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d78:	e03a      	b.n	8008df0 <_printf_i+0xa8>
 8008d7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d7e:	2b15      	cmp	r3, #21
 8008d80:	d8f6      	bhi.n	8008d70 <_printf_i+0x28>
 8008d82:	a101      	add	r1, pc, #4	; (adr r1, 8008d88 <_printf_i+0x40>)
 8008d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d88:	08008de1 	.word	0x08008de1
 8008d8c:	08008df5 	.word	0x08008df5
 8008d90:	08008d71 	.word	0x08008d71
 8008d94:	08008d71 	.word	0x08008d71
 8008d98:	08008d71 	.word	0x08008d71
 8008d9c:	08008d71 	.word	0x08008d71
 8008da0:	08008df5 	.word	0x08008df5
 8008da4:	08008d71 	.word	0x08008d71
 8008da8:	08008d71 	.word	0x08008d71
 8008dac:	08008d71 	.word	0x08008d71
 8008db0:	08008d71 	.word	0x08008d71
 8008db4:	08008ef9 	.word	0x08008ef9
 8008db8:	08008e21 	.word	0x08008e21
 8008dbc:	08008eb3 	.word	0x08008eb3
 8008dc0:	08008d71 	.word	0x08008d71
 8008dc4:	08008d71 	.word	0x08008d71
 8008dc8:	08008f1b 	.word	0x08008f1b
 8008dcc:	08008d71 	.word	0x08008d71
 8008dd0:	08008e21 	.word	0x08008e21
 8008dd4:	08008d71 	.word	0x08008d71
 8008dd8:	08008d71 	.word	0x08008d71
 8008ddc:	08008ebb 	.word	0x08008ebb
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	1d1a      	adds	r2, r3, #4
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	602a      	str	r2, [r5, #0]
 8008de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008df0:	2301      	movs	r3, #1
 8008df2:	e09f      	b.n	8008f34 <_printf_i+0x1ec>
 8008df4:	6820      	ldr	r0, [r4, #0]
 8008df6:	682b      	ldr	r3, [r5, #0]
 8008df8:	0607      	lsls	r7, r0, #24
 8008dfa:	f103 0104 	add.w	r1, r3, #4
 8008dfe:	6029      	str	r1, [r5, #0]
 8008e00:	d501      	bpl.n	8008e06 <_printf_i+0xbe>
 8008e02:	681e      	ldr	r6, [r3, #0]
 8008e04:	e003      	b.n	8008e0e <_printf_i+0xc6>
 8008e06:	0646      	lsls	r6, r0, #25
 8008e08:	d5fb      	bpl.n	8008e02 <_printf_i+0xba>
 8008e0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e0e:	2e00      	cmp	r6, #0
 8008e10:	da03      	bge.n	8008e1a <_printf_i+0xd2>
 8008e12:	232d      	movs	r3, #45	; 0x2d
 8008e14:	4276      	negs	r6, r6
 8008e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e1a:	485a      	ldr	r0, [pc, #360]	; (8008f84 <_printf_i+0x23c>)
 8008e1c:	230a      	movs	r3, #10
 8008e1e:	e012      	b.n	8008e46 <_printf_i+0xfe>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	6820      	ldr	r0, [r4, #0]
 8008e24:	1d19      	adds	r1, r3, #4
 8008e26:	6029      	str	r1, [r5, #0]
 8008e28:	0605      	lsls	r5, r0, #24
 8008e2a:	d501      	bpl.n	8008e30 <_printf_i+0xe8>
 8008e2c:	681e      	ldr	r6, [r3, #0]
 8008e2e:	e002      	b.n	8008e36 <_printf_i+0xee>
 8008e30:	0641      	lsls	r1, r0, #25
 8008e32:	d5fb      	bpl.n	8008e2c <_printf_i+0xe4>
 8008e34:	881e      	ldrh	r6, [r3, #0]
 8008e36:	4853      	ldr	r0, [pc, #332]	; (8008f84 <_printf_i+0x23c>)
 8008e38:	2f6f      	cmp	r7, #111	; 0x6f
 8008e3a:	bf0c      	ite	eq
 8008e3c:	2308      	moveq	r3, #8
 8008e3e:	230a      	movne	r3, #10
 8008e40:	2100      	movs	r1, #0
 8008e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e46:	6865      	ldr	r5, [r4, #4]
 8008e48:	60a5      	str	r5, [r4, #8]
 8008e4a:	2d00      	cmp	r5, #0
 8008e4c:	bfa2      	ittt	ge
 8008e4e:	6821      	ldrge	r1, [r4, #0]
 8008e50:	f021 0104 	bicge.w	r1, r1, #4
 8008e54:	6021      	strge	r1, [r4, #0]
 8008e56:	b90e      	cbnz	r6, 8008e5c <_printf_i+0x114>
 8008e58:	2d00      	cmp	r5, #0
 8008e5a:	d04b      	beq.n	8008ef4 <_printf_i+0x1ac>
 8008e5c:	4615      	mov	r5, r2
 8008e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e62:	fb03 6711 	mls	r7, r3, r1, r6
 8008e66:	5dc7      	ldrb	r7, [r0, r7]
 8008e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e6c:	4637      	mov	r7, r6
 8008e6e:	42bb      	cmp	r3, r7
 8008e70:	460e      	mov	r6, r1
 8008e72:	d9f4      	bls.n	8008e5e <_printf_i+0x116>
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d10b      	bne.n	8008e90 <_printf_i+0x148>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	07de      	lsls	r6, r3, #31
 8008e7c:	d508      	bpl.n	8008e90 <_printf_i+0x148>
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	6861      	ldr	r1, [r4, #4]
 8008e82:	4299      	cmp	r1, r3
 8008e84:	bfde      	ittt	le
 8008e86:	2330      	movle	r3, #48	; 0x30
 8008e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e90:	1b52      	subs	r2, r2, r5
 8008e92:	6122      	str	r2, [r4, #16]
 8008e94:	f8cd a000 	str.w	sl, [sp]
 8008e98:	464b      	mov	r3, r9
 8008e9a:	aa03      	add	r2, sp, #12
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	f7ff fee4 	bl	8008c6c <_printf_common>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d14a      	bne.n	8008f3e <_printf_i+0x1f6>
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eac:	b004      	add	sp, #16
 8008eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	f043 0320 	orr.w	r3, r3, #32
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	4833      	ldr	r0, [pc, #204]	; (8008f88 <_printf_i+0x240>)
 8008ebc:	2778      	movs	r7, #120	; 0x78
 8008ebe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	6829      	ldr	r1, [r5, #0]
 8008ec6:	061f      	lsls	r7, r3, #24
 8008ec8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ecc:	d402      	bmi.n	8008ed4 <_printf_i+0x18c>
 8008ece:	065f      	lsls	r7, r3, #25
 8008ed0:	bf48      	it	mi
 8008ed2:	b2b6      	uxthmi	r6, r6
 8008ed4:	07df      	lsls	r7, r3, #31
 8008ed6:	bf48      	it	mi
 8008ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8008edc:	6029      	str	r1, [r5, #0]
 8008ede:	bf48      	it	mi
 8008ee0:	6023      	strmi	r3, [r4, #0]
 8008ee2:	b91e      	cbnz	r6, 8008eec <_printf_i+0x1a4>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	f023 0320 	bic.w	r3, r3, #32
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	2310      	movs	r3, #16
 8008eee:	e7a7      	b.n	8008e40 <_printf_i+0xf8>
 8008ef0:	4824      	ldr	r0, [pc, #144]	; (8008f84 <_printf_i+0x23c>)
 8008ef2:	e7e4      	b.n	8008ebe <_printf_i+0x176>
 8008ef4:	4615      	mov	r5, r2
 8008ef6:	e7bd      	b.n	8008e74 <_printf_i+0x12c>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	6826      	ldr	r6, [r4, #0]
 8008efc:	6961      	ldr	r1, [r4, #20]
 8008efe:	1d18      	adds	r0, r3, #4
 8008f00:	6028      	str	r0, [r5, #0]
 8008f02:	0635      	lsls	r5, r6, #24
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	d501      	bpl.n	8008f0c <_printf_i+0x1c4>
 8008f08:	6019      	str	r1, [r3, #0]
 8008f0a:	e002      	b.n	8008f12 <_printf_i+0x1ca>
 8008f0c:	0670      	lsls	r0, r6, #25
 8008f0e:	d5fb      	bpl.n	8008f08 <_printf_i+0x1c0>
 8008f10:	8019      	strh	r1, [r3, #0]
 8008f12:	2300      	movs	r3, #0
 8008f14:	6123      	str	r3, [r4, #16]
 8008f16:	4615      	mov	r5, r2
 8008f18:	e7bc      	b.n	8008e94 <_printf_i+0x14c>
 8008f1a:	682b      	ldr	r3, [r5, #0]
 8008f1c:	1d1a      	adds	r2, r3, #4
 8008f1e:	602a      	str	r2, [r5, #0]
 8008f20:	681d      	ldr	r5, [r3, #0]
 8008f22:	6862      	ldr	r2, [r4, #4]
 8008f24:	2100      	movs	r1, #0
 8008f26:	4628      	mov	r0, r5
 8008f28:	f7f7 f96a 	bl	8000200 <memchr>
 8008f2c:	b108      	cbz	r0, 8008f32 <_printf_i+0x1ea>
 8008f2e:	1b40      	subs	r0, r0, r5
 8008f30:	6060      	str	r0, [r4, #4]
 8008f32:	6863      	ldr	r3, [r4, #4]
 8008f34:	6123      	str	r3, [r4, #16]
 8008f36:	2300      	movs	r3, #0
 8008f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f3c:	e7aa      	b.n	8008e94 <_printf_i+0x14c>
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	462a      	mov	r2, r5
 8008f42:	4649      	mov	r1, r9
 8008f44:	4640      	mov	r0, r8
 8008f46:	47d0      	blx	sl
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d0ad      	beq.n	8008ea8 <_printf_i+0x160>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	079b      	lsls	r3, r3, #30
 8008f50:	d413      	bmi.n	8008f7a <_printf_i+0x232>
 8008f52:	68e0      	ldr	r0, [r4, #12]
 8008f54:	9b03      	ldr	r3, [sp, #12]
 8008f56:	4298      	cmp	r0, r3
 8008f58:	bfb8      	it	lt
 8008f5a:	4618      	movlt	r0, r3
 8008f5c:	e7a6      	b.n	8008eac <_printf_i+0x164>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	4632      	mov	r2, r6
 8008f62:	4649      	mov	r1, r9
 8008f64:	4640      	mov	r0, r8
 8008f66:	47d0      	blx	sl
 8008f68:	3001      	adds	r0, #1
 8008f6a:	d09d      	beq.n	8008ea8 <_printf_i+0x160>
 8008f6c:	3501      	adds	r5, #1
 8008f6e:	68e3      	ldr	r3, [r4, #12]
 8008f70:	9903      	ldr	r1, [sp, #12]
 8008f72:	1a5b      	subs	r3, r3, r1
 8008f74:	42ab      	cmp	r3, r5
 8008f76:	dcf2      	bgt.n	8008f5e <_printf_i+0x216>
 8008f78:	e7eb      	b.n	8008f52 <_printf_i+0x20a>
 8008f7a:	2500      	movs	r5, #0
 8008f7c:	f104 0619 	add.w	r6, r4, #25
 8008f80:	e7f5      	b.n	8008f6e <_printf_i+0x226>
 8008f82:	bf00      	nop
 8008f84:	0800b3ab 	.word	0x0800b3ab
 8008f88:	0800b3bc 	.word	0x0800b3bc

08008f8c <std>:
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	4604      	mov	r4, r0
 8008f92:	e9c0 3300 	strd	r3, r3, [r0]
 8008f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f9a:	6083      	str	r3, [r0, #8]
 8008f9c:	8181      	strh	r1, [r0, #12]
 8008f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8008fa0:	81c2      	strh	r2, [r0, #14]
 8008fa2:	6183      	str	r3, [r0, #24]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	2208      	movs	r2, #8
 8008fa8:	305c      	adds	r0, #92	; 0x5c
 8008faa:	f000 f9ff 	bl	80093ac <memset>
 8008fae:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <std+0x58>)
 8008fb0:	6263      	str	r3, [r4, #36]	; 0x24
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <std+0x5c>)
 8008fb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fb6:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <std+0x60>)
 8008fb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fba:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <std+0x64>)
 8008fbc:	6323      	str	r3, [r4, #48]	; 0x30
 8008fbe:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <std+0x68>)
 8008fc0:	6224      	str	r4, [r4, #32]
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	d006      	beq.n	8008fd4 <std+0x48>
 8008fc6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008fca:	4294      	cmp	r4, r2
 8008fcc:	d002      	beq.n	8008fd4 <std+0x48>
 8008fce:	33d0      	adds	r3, #208	; 0xd0
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	d105      	bne.n	8008fe0 <std+0x54>
 8008fd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fdc:	f000 ba62 	b.w	80094a4 <__retarget_lock_init_recursive>
 8008fe0:	bd10      	pop	{r4, pc}
 8008fe2:	bf00      	nop
 8008fe4:	080091fd 	.word	0x080091fd
 8008fe8:	0800921f 	.word	0x0800921f
 8008fec:	08009257 	.word	0x08009257
 8008ff0:	0800927b 	.word	0x0800927b
 8008ff4:	20000538 	.word	0x20000538

08008ff8 <stdio_exit_handler>:
 8008ff8:	4a02      	ldr	r2, [pc, #8]	; (8009004 <stdio_exit_handler+0xc>)
 8008ffa:	4903      	ldr	r1, [pc, #12]	; (8009008 <stdio_exit_handler+0x10>)
 8008ffc:	4803      	ldr	r0, [pc, #12]	; (800900c <stdio_exit_handler+0x14>)
 8008ffe:	f000 b869 	b.w	80090d4 <_fwalk_sglue>
 8009002:	bf00      	nop
 8009004:	2000000c 	.word	0x2000000c
 8009008:	0800ae31 	.word	0x0800ae31
 800900c:	20000018 	.word	0x20000018

08009010 <cleanup_stdio>:
 8009010:	6841      	ldr	r1, [r0, #4]
 8009012:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <cleanup_stdio+0x34>)
 8009014:	4299      	cmp	r1, r3
 8009016:	b510      	push	{r4, lr}
 8009018:	4604      	mov	r4, r0
 800901a:	d001      	beq.n	8009020 <cleanup_stdio+0x10>
 800901c:	f001 ff08 	bl	800ae30 <_fflush_r>
 8009020:	68a1      	ldr	r1, [r4, #8]
 8009022:	4b09      	ldr	r3, [pc, #36]	; (8009048 <cleanup_stdio+0x38>)
 8009024:	4299      	cmp	r1, r3
 8009026:	d002      	beq.n	800902e <cleanup_stdio+0x1e>
 8009028:	4620      	mov	r0, r4
 800902a:	f001 ff01 	bl	800ae30 <_fflush_r>
 800902e:	68e1      	ldr	r1, [r4, #12]
 8009030:	4b06      	ldr	r3, [pc, #24]	; (800904c <cleanup_stdio+0x3c>)
 8009032:	4299      	cmp	r1, r3
 8009034:	d004      	beq.n	8009040 <cleanup_stdio+0x30>
 8009036:	4620      	mov	r0, r4
 8009038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800903c:	f001 bef8 	b.w	800ae30 <_fflush_r>
 8009040:	bd10      	pop	{r4, pc}
 8009042:	bf00      	nop
 8009044:	20000538 	.word	0x20000538
 8009048:	200005a0 	.word	0x200005a0
 800904c:	20000608 	.word	0x20000608

08009050 <global_stdio_init.part.0>:
 8009050:	b510      	push	{r4, lr}
 8009052:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <global_stdio_init.part.0+0x30>)
 8009054:	4c0b      	ldr	r4, [pc, #44]	; (8009084 <global_stdio_init.part.0+0x34>)
 8009056:	4a0c      	ldr	r2, [pc, #48]	; (8009088 <global_stdio_init.part.0+0x38>)
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	4620      	mov	r0, r4
 800905c:	2200      	movs	r2, #0
 800905e:	2104      	movs	r1, #4
 8009060:	f7ff ff94 	bl	8008f8c <std>
 8009064:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009068:	2201      	movs	r2, #1
 800906a:	2109      	movs	r1, #9
 800906c:	f7ff ff8e 	bl	8008f8c <std>
 8009070:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009074:	2202      	movs	r2, #2
 8009076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800907a:	2112      	movs	r1, #18
 800907c:	f7ff bf86 	b.w	8008f8c <std>
 8009080:	20000670 	.word	0x20000670
 8009084:	20000538 	.word	0x20000538
 8009088:	08008ff9 	.word	0x08008ff9

0800908c <__sfp_lock_acquire>:
 800908c:	4801      	ldr	r0, [pc, #4]	; (8009094 <__sfp_lock_acquire+0x8>)
 800908e:	f000 ba0a 	b.w	80094a6 <__retarget_lock_acquire_recursive>
 8009092:	bf00      	nop
 8009094:	20000679 	.word	0x20000679

08009098 <__sfp_lock_release>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__sfp_lock_release+0x8>)
 800909a:	f000 ba05 	b.w	80094a8 <__retarget_lock_release_recursive>
 800909e:	bf00      	nop
 80090a0:	20000679 	.word	0x20000679

080090a4 <__sinit>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4604      	mov	r4, r0
 80090a8:	f7ff fff0 	bl	800908c <__sfp_lock_acquire>
 80090ac:	6a23      	ldr	r3, [r4, #32]
 80090ae:	b11b      	cbz	r3, 80090b8 <__sinit+0x14>
 80090b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090b4:	f7ff bff0 	b.w	8009098 <__sfp_lock_release>
 80090b8:	4b04      	ldr	r3, [pc, #16]	; (80090cc <__sinit+0x28>)
 80090ba:	6223      	str	r3, [r4, #32]
 80090bc:	4b04      	ldr	r3, [pc, #16]	; (80090d0 <__sinit+0x2c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1f5      	bne.n	80090b0 <__sinit+0xc>
 80090c4:	f7ff ffc4 	bl	8009050 <global_stdio_init.part.0>
 80090c8:	e7f2      	b.n	80090b0 <__sinit+0xc>
 80090ca:	bf00      	nop
 80090cc:	08009011 	.word	0x08009011
 80090d0:	20000670 	.word	0x20000670

080090d4 <_fwalk_sglue>:
 80090d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d8:	4607      	mov	r7, r0
 80090da:	4688      	mov	r8, r1
 80090dc:	4614      	mov	r4, r2
 80090de:	2600      	movs	r6, #0
 80090e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090e4:	f1b9 0901 	subs.w	r9, r9, #1
 80090e8:	d505      	bpl.n	80090f6 <_fwalk_sglue+0x22>
 80090ea:	6824      	ldr	r4, [r4, #0]
 80090ec:	2c00      	cmp	r4, #0
 80090ee:	d1f7      	bne.n	80090e0 <_fwalk_sglue+0xc>
 80090f0:	4630      	mov	r0, r6
 80090f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d907      	bls.n	800910c <_fwalk_sglue+0x38>
 80090fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009100:	3301      	adds	r3, #1
 8009102:	d003      	beq.n	800910c <_fwalk_sglue+0x38>
 8009104:	4629      	mov	r1, r5
 8009106:	4638      	mov	r0, r7
 8009108:	47c0      	blx	r8
 800910a:	4306      	orrs	r6, r0
 800910c:	3568      	adds	r5, #104	; 0x68
 800910e:	e7e9      	b.n	80090e4 <_fwalk_sglue+0x10>

08009110 <iprintf>:
 8009110:	b40f      	push	{r0, r1, r2, r3}
 8009112:	b507      	push	{r0, r1, r2, lr}
 8009114:	4906      	ldr	r1, [pc, #24]	; (8009130 <iprintf+0x20>)
 8009116:	ab04      	add	r3, sp, #16
 8009118:	6808      	ldr	r0, [r1, #0]
 800911a:	f853 2b04 	ldr.w	r2, [r3], #4
 800911e:	6881      	ldr	r1, [r0, #8]
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	f001 fce5 	bl	800aaf0 <_vfiprintf_r>
 8009126:	b003      	add	sp, #12
 8009128:	f85d eb04 	ldr.w	lr, [sp], #4
 800912c:	b004      	add	sp, #16
 800912e:	4770      	bx	lr
 8009130:	20000064 	.word	0x20000064

08009134 <putchar>:
 8009134:	4b02      	ldr	r3, [pc, #8]	; (8009140 <putchar+0xc>)
 8009136:	4601      	mov	r1, r0
 8009138:	6818      	ldr	r0, [r3, #0]
 800913a:	6882      	ldr	r2, [r0, #8]
 800913c:	f001 bf02 	b.w	800af44 <_putc_r>
 8009140:	20000064 	.word	0x20000064

08009144 <_puts_r>:
 8009144:	6a03      	ldr	r3, [r0, #32]
 8009146:	b570      	push	{r4, r5, r6, lr}
 8009148:	6884      	ldr	r4, [r0, #8]
 800914a:	4605      	mov	r5, r0
 800914c:	460e      	mov	r6, r1
 800914e:	b90b      	cbnz	r3, 8009154 <_puts_r+0x10>
 8009150:	f7ff ffa8 	bl	80090a4 <__sinit>
 8009154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009156:	07db      	lsls	r3, r3, #31
 8009158:	d405      	bmi.n	8009166 <_puts_r+0x22>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	0598      	lsls	r0, r3, #22
 800915e:	d402      	bmi.n	8009166 <_puts_r+0x22>
 8009160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009162:	f000 f9a0 	bl	80094a6 <__retarget_lock_acquire_recursive>
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	0719      	lsls	r1, r3, #28
 800916a:	d513      	bpl.n	8009194 <_puts_r+0x50>
 800916c:	6923      	ldr	r3, [r4, #16]
 800916e:	b18b      	cbz	r3, 8009194 <_puts_r+0x50>
 8009170:	3e01      	subs	r6, #1
 8009172:	68a3      	ldr	r3, [r4, #8]
 8009174:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009178:	3b01      	subs	r3, #1
 800917a:	60a3      	str	r3, [r4, #8]
 800917c:	b9e9      	cbnz	r1, 80091ba <_puts_r+0x76>
 800917e:	2b00      	cmp	r3, #0
 8009180:	da2e      	bge.n	80091e0 <_puts_r+0x9c>
 8009182:	4622      	mov	r2, r4
 8009184:	210a      	movs	r1, #10
 8009186:	4628      	mov	r0, r5
 8009188:	f000 f87b 	bl	8009282 <__swbuf_r>
 800918c:	3001      	adds	r0, #1
 800918e:	d007      	beq.n	80091a0 <_puts_r+0x5c>
 8009190:	250a      	movs	r5, #10
 8009192:	e007      	b.n	80091a4 <_puts_r+0x60>
 8009194:	4621      	mov	r1, r4
 8009196:	4628      	mov	r0, r5
 8009198:	f000 f8b0 	bl	80092fc <__swsetup_r>
 800919c:	2800      	cmp	r0, #0
 800919e:	d0e7      	beq.n	8009170 <_puts_r+0x2c>
 80091a0:	f04f 35ff 	mov.w	r5, #4294967295
 80091a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091a6:	07da      	lsls	r2, r3, #31
 80091a8:	d405      	bmi.n	80091b6 <_puts_r+0x72>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	059b      	lsls	r3, r3, #22
 80091ae:	d402      	bmi.n	80091b6 <_puts_r+0x72>
 80091b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091b2:	f000 f979 	bl	80094a8 <__retarget_lock_release_recursive>
 80091b6:	4628      	mov	r0, r5
 80091b8:	bd70      	pop	{r4, r5, r6, pc}
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	da04      	bge.n	80091c8 <_puts_r+0x84>
 80091be:	69a2      	ldr	r2, [r4, #24]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	dc06      	bgt.n	80091d2 <_puts_r+0x8e>
 80091c4:	290a      	cmp	r1, #10
 80091c6:	d004      	beq.n	80091d2 <_puts_r+0x8e>
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	6022      	str	r2, [r4, #0]
 80091ce:	7019      	strb	r1, [r3, #0]
 80091d0:	e7cf      	b.n	8009172 <_puts_r+0x2e>
 80091d2:	4622      	mov	r2, r4
 80091d4:	4628      	mov	r0, r5
 80091d6:	f000 f854 	bl	8009282 <__swbuf_r>
 80091da:	3001      	adds	r0, #1
 80091dc:	d1c9      	bne.n	8009172 <_puts_r+0x2e>
 80091de:	e7df      	b.n	80091a0 <_puts_r+0x5c>
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	250a      	movs	r5, #10
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	6022      	str	r2, [r4, #0]
 80091e8:	701d      	strb	r5, [r3, #0]
 80091ea:	e7db      	b.n	80091a4 <_puts_r+0x60>

080091ec <puts>:
 80091ec:	4b02      	ldr	r3, [pc, #8]	; (80091f8 <puts+0xc>)
 80091ee:	4601      	mov	r1, r0
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	f7ff bfa7 	b.w	8009144 <_puts_r>
 80091f6:	bf00      	nop
 80091f8:	20000064 	.word	0x20000064

080091fc <__sread>:
 80091fc:	b510      	push	{r4, lr}
 80091fe:	460c      	mov	r4, r1
 8009200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009204:	f000 f900 	bl	8009408 <_read_r>
 8009208:	2800      	cmp	r0, #0
 800920a:	bfab      	itete	ge
 800920c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800920e:	89a3      	ldrhlt	r3, [r4, #12]
 8009210:	181b      	addge	r3, r3, r0
 8009212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009216:	bfac      	ite	ge
 8009218:	6563      	strge	r3, [r4, #84]	; 0x54
 800921a:	81a3      	strhlt	r3, [r4, #12]
 800921c:	bd10      	pop	{r4, pc}

0800921e <__swrite>:
 800921e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009222:	461f      	mov	r7, r3
 8009224:	898b      	ldrh	r3, [r1, #12]
 8009226:	05db      	lsls	r3, r3, #23
 8009228:	4605      	mov	r5, r0
 800922a:	460c      	mov	r4, r1
 800922c:	4616      	mov	r6, r2
 800922e:	d505      	bpl.n	800923c <__swrite+0x1e>
 8009230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009234:	2302      	movs	r3, #2
 8009236:	2200      	movs	r2, #0
 8009238:	f000 f8d4 	bl	80093e4 <_lseek_r>
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009246:	81a3      	strh	r3, [r4, #12]
 8009248:	4632      	mov	r2, r6
 800924a:	463b      	mov	r3, r7
 800924c:	4628      	mov	r0, r5
 800924e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009252:	f000 b8eb 	b.w	800942c <_write_r>

08009256 <__sseek>:
 8009256:	b510      	push	{r4, lr}
 8009258:	460c      	mov	r4, r1
 800925a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925e:	f000 f8c1 	bl	80093e4 <_lseek_r>
 8009262:	1c43      	adds	r3, r0, #1
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	bf15      	itete	ne
 8009268:	6560      	strne	r0, [r4, #84]	; 0x54
 800926a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800926e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009272:	81a3      	strheq	r3, [r4, #12]
 8009274:	bf18      	it	ne
 8009276:	81a3      	strhne	r3, [r4, #12]
 8009278:	bd10      	pop	{r4, pc}

0800927a <__sclose>:
 800927a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927e:	f000 b8a1 	b.w	80093c4 <_close_r>

08009282 <__swbuf_r>:
 8009282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009284:	460e      	mov	r6, r1
 8009286:	4614      	mov	r4, r2
 8009288:	4605      	mov	r5, r0
 800928a:	b118      	cbz	r0, 8009294 <__swbuf_r+0x12>
 800928c:	6a03      	ldr	r3, [r0, #32]
 800928e:	b90b      	cbnz	r3, 8009294 <__swbuf_r+0x12>
 8009290:	f7ff ff08 	bl	80090a4 <__sinit>
 8009294:	69a3      	ldr	r3, [r4, #24]
 8009296:	60a3      	str	r3, [r4, #8]
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	071a      	lsls	r2, r3, #28
 800929c:	d525      	bpl.n	80092ea <__swbuf_r+0x68>
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	b31b      	cbz	r3, 80092ea <__swbuf_r+0x68>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	6922      	ldr	r2, [r4, #16]
 80092a6:	1a98      	subs	r0, r3, r2
 80092a8:	6963      	ldr	r3, [r4, #20]
 80092aa:	b2f6      	uxtb	r6, r6
 80092ac:	4283      	cmp	r3, r0
 80092ae:	4637      	mov	r7, r6
 80092b0:	dc04      	bgt.n	80092bc <__swbuf_r+0x3a>
 80092b2:	4621      	mov	r1, r4
 80092b4:	4628      	mov	r0, r5
 80092b6:	f001 fdbb 	bl	800ae30 <_fflush_r>
 80092ba:	b9e0      	cbnz	r0, 80092f6 <__swbuf_r+0x74>
 80092bc:	68a3      	ldr	r3, [r4, #8]
 80092be:	3b01      	subs	r3, #1
 80092c0:	60a3      	str	r3, [r4, #8]
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	6022      	str	r2, [r4, #0]
 80092c8:	701e      	strb	r6, [r3, #0]
 80092ca:	6962      	ldr	r2, [r4, #20]
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d004      	beq.n	80092dc <__swbuf_r+0x5a>
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	07db      	lsls	r3, r3, #31
 80092d6:	d506      	bpl.n	80092e6 <__swbuf_r+0x64>
 80092d8:	2e0a      	cmp	r6, #10
 80092da:	d104      	bne.n	80092e6 <__swbuf_r+0x64>
 80092dc:	4621      	mov	r1, r4
 80092de:	4628      	mov	r0, r5
 80092e0:	f001 fda6 	bl	800ae30 <_fflush_r>
 80092e4:	b938      	cbnz	r0, 80092f6 <__swbuf_r+0x74>
 80092e6:	4638      	mov	r0, r7
 80092e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ea:	4621      	mov	r1, r4
 80092ec:	4628      	mov	r0, r5
 80092ee:	f000 f805 	bl	80092fc <__swsetup_r>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d0d5      	beq.n	80092a2 <__swbuf_r+0x20>
 80092f6:	f04f 37ff 	mov.w	r7, #4294967295
 80092fa:	e7f4      	b.n	80092e6 <__swbuf_r+0x64>

080092fc <__swsetup_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4b2a      	ldr	r3, [pc, #168]	; (80093a8 <__swsetup_r+0xac>)
 8009300:	4605      	mov	r5, r0
 8009302:	6818      	ldr	r0, [r3, #0]
 8009304:	460c      	mov	r4, r1
 8009306:	b118      	cbz	r0, 8009310 <__swsetup_r+0x14>
 8009308:	6a03      	ldr	r3, [r0, #32]
 800930a:	b90b      	cbnz	r3, 8009310 <__swsetup_r+0x14>
 800930c:	f7ff feca 	bl	80090a4 <__sinit>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009316:	0718      	lsls	r0, r3, #28
 8009318:	d422      	bmi.n	8009360 <__swsetup_r+0x64>
 800931a:	06d9      	lsls	r1, r3, #27
 800931c:	d407      	bmi.n	800932e <__swsetup_r+0x32>
 800931e:	2309      	movs	r3, #9
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	f04f 30ff 	mov.w	r0, #4294967295
 800932c:	e034      	b.n	8009398 <__swsetup_r+0x9c>
 800932e:	0758      	lsls	r0, r3, #29
 8009330:	d512      	bpl.n	8009358 <__swsetup_r+0x5c>
 8009332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009334:	b141      	cbz	r1, 8009348 <__swsetup_r+0x4c>
 8009336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800933a:	4299      	cmp	r1, r3
 800933c:	d002      	beq.n	8009344 <__swsetup_r+0x48>
 800933e:	4628      	mov	r0, r5
 8009340:	f000 ff30 	bl	800a1a4 <_free_r>
 8009344:	2300      	movs	r3, #0
 8009346:	6363      	str	r3, [r4, #52]	; 0x34
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	2300      	movs	r3, #0
 8009352:	6063      	str	r3, [r4, #4]
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	6023      	str	r3, [r4, #0]
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	f043 0308 	orr.w	r3, r3, #8
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	b94b      	cbnz	r3, 8009378 <__swsetup_r+0x7c>
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800936a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800936e:	d003      	beq.n	8009378 <__swsetup_r+0x7c>
 8009370:	4621      	mov	r1, r4
 8009372:	4628      	mov	r0, r5
 8009374:	f001 fdaa 	bl	800aecc <__smakebuf_r>
 8009378:	89a0      	ldrh	r0, [r4, #12]
 800937a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800937e:	f010 0301 	ands.w	r3, r0, #1
 8009382:	d00a      	beq.n	800939a <__swsetup_r+0x9e>
 8009384:	2300      	movs	r3, #0
 8009386:	60a3      	str	r3, [r4, #8]
 8009388:	6963      	ldr	r3, [r4, #20]
 800938a:	425b      	negs	r3, r3
 800938c:	61a3      	str	r3, [r4, #24]
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	b943      	cbnz	r3, 80093a4 <__swsetup_r+0xa8>
 8009392:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009396:	d1c4      	bne.n	8009322 <__swsetup_r+0x26>
 8009398:	bd38      	pop	{r3, r4, r5, pc}
 800939a:	0781      	lsls	r1, r0, #30
 800939c:	bf58      	it	pl
 800939e:	6963      	ldrpl	r3, [r4, #20]
 80093a0:	60a3      	str	r3, [r4, #8]
 80093a2:	e7f4      	b.n	800938e <__swsetup_r+0x92>
 80093a4:	2000      	movs	r0, #0
 80093a6:	e7f7      	b.n	8009398 <__swsetup_r+0x9c>
 80093a8:	20000064 	.word	0x20000064

080093ac <memset>:
 80093ac:	4402      	add	r2, r0
 80093ae:	4603      	mov	r3, r0
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d100      	bne.n	80093b6 <memset+0xa>
 80093b4:	4770      	bx	lr
 80093b6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ba:	e7f9      	b.n	80093b0 <memset+0x4>

080093bc <_localeconv_r>:
 80093bc:	4800      	ldr	r0, [pc, #0]	; (80093c0 <_localeconv_r+0x4>)
 80093be:	4770      	bx	lr
 80093c0:	20000158 	.word	0x20000158

080093c4 <_close_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d06      	ldr	r5, [pc, #24]	; (80093e0 <_close_r+0x1c>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	602b      	str	r3, [r5, #0]
 80093d0:	f7f9 f885 	bl	80024de <_close>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	d102      	bne.n	80093de <_close_r+0x1a>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	b103      	cbz	r3, 80093de <_close_r+0x1a>
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	20000674 	.word	0x20000674

080093e4 <_lseek_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4d07      	ldr	r5, [pc, #28]	; (8009404 <_lseek_r+0x20>)
 80093e8:	4604      	mov	r4, r0
 80093ea:	4608      	mov	r0, r1
 80093ec:	4611      	mov	r1, r2
 80093ee:	2200      	movs	r2, #0
 80093f0:	602a      	str	r2, [r5, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f7f9 f89a 	bl	800252c <_lseek>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_lseek_r+0x1e>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_lseek_r+0x1e>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	20000674 	.word	0x20000674

08009408 <_read_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d07      	ldr	r5, [pc, #28]	; (8009428 <_read_r+0x20>)
 800940c:	4604      	mov	r4, r0
 800940e:	4608      	mov	r0, r1
 8009410:	4611      	mov	r1, r2
 8009412:	2200      	movs	r2, #0
 8009414:	602a      	str	r2, [r5, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	f7f9 f828 	bl	800246c <_read>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	d102      	bne.n	8009426 <_read_r+0x1e>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	b103      	cbz	r3, 8009426 <_read_r+0x1e>
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	20000674 	.word	0x20000674

0800942c <_write_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d07      	ldr	r5, [pc, #28]	; (800944c <_write_r+0x20>)
 8009430:	4604      	mov	r4, r0
 8009432:	4608      	mov	r0, r1
 8009434:	4611      	mov	r1, r2
 8009436:	2200      	movs	r2, #0
 8009438:	602a      	str	r2, [r5, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	f7f9 f833 	bl	80024a6 <_write>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_write_r+0x1e>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_write_r+0x1e>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20000674 	.word	0x20000674

08009450 <__errno>:
 8009450:	4b01      	ldr	r3, [pc, #4]	; (8009458 <__errno+0x8>)
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	20000064 	.word	0x20000064

0800945c <__libc_init_array>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	4d0d      	ldr	r5, [pc, #52]	; (8009494 <__libc_init_array+0x38>)
 8009460:	4c0d      	ldr	r4, [pc, #52]	; (8009498 <__libc_init_array+0x3c>)
 8009462:	1b64      	subs	r4, r4, r5
 8009464:	10a4      	asrs	r4, r4, #2
 8009466:	2600      	movs	r6, #0
 8009468:	42a6      	cmp	r6, r4
 800946a:	d109      	bne.n	8009480 <__libc_init_array+0x24>
 800946c:	4d0b      	ldr	r5, [pc, #44]	; (800949c <__libc_init_array+0x40>)
 800946e:	4c0c      	ldr	r4, [pc, #48]	; (80094a0 <__libc_init_array+0x44>)
 8009470:	f001 fe8e 	bl	800b190 <_init>
 8009474:	1b64      	subs	r4, r4, r5
 8009476:	10a4      	asrs	r4, r4, #2
 8009478:	2600      	movs	r6, #0
 800947a:	42a6      	cmp	r6, r4
 800947c:	d105      	bne.n	800948a <__libc_init_array+0x2e>
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	f855 3b04 	ldr.w	r3, [r5], #4
 8009484:	4798      	blx	r3
 8009486:	3601      	adds	r6, #1
 8009488:	e7ee      	b.n	8009468 <__libc_init_array+0xc>
 800948a:	f855 3b04 	ldr.w	r3, [r5], #4
 800948e:	4798      	blx	r3
 8009490:	3601      	adds	r6, #1
 8009492:	e7f2      	b.n	800947a <__libc_init_array+0x1e>
 8009494:	0800b714 	.word	0x0800b714
 8009498:	0800b714 	.word	0x0800b714
 800949c:	0800b714 	.word	0x0800b714
 80094a0:	0800b718 	.word	0x0800b718

080094a4 <__retarget_lock_init_recursive>:
 80094a4:	4770      	bx	lr

080094a6 <__retarget_lock_acquire_recursive>:
 80094a6:	4770      	bx	lr

080094a8 <__retarget_lock_release_recursive>:
 80094a8:	4770      	bx	lr

080094aa <quorem>:
 80094aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ae:	6903      	ldr	r3, [r0, #16]
 80094b0:	690c      	ldr	r4, [r1, #16]
 80094b2:	42a3      	cmp	r3, r4
 80094b4:	4607      	mov	r7, r0
 80094b6:	db7e      	blt.n	80095b6 <quorem+0x10c>
 80094b8:	3c01      	subs	r4, #1
 80094ba:	f101 0814 	add.w	r8, r1, #20
 80094be:	f100 0514 	add.w	r5, r0, #20
 80094c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094d0:	3301      	adds	r3, #1
 80094d2:	429a      	cmp	r2, r3
 80094d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80094e0:	d331      	bcc.n	8009546 <quorem+0x9c>
 80094e2:	f04f 0e00 	mov.w	lr, #0
 80094e6:	4640      	mov	r0, r8
 80094e8:	46ac      	mov	ip, r5
 80094ea:	46f2      	mov	sl, lr
 80094ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80094f0:	b293      	uxth	r3, r2
 80094f2:	fb06 e303 	mla	r3, r6, r3, lr
 80094f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094fa:	0c1a      	lsrs	r2, r3, #16
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	ebaa 0303 	sub.w	r3, sl, r3
 8009502:	f8dc a000 	ldr.w	sl, [ip]
 8009506:	fa13 f38a 	uxtah	r3, r3, sl
 800950a:	fb06 220e 	mla	r2, r6, lr, r2
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	9b00      	ldr	r3, [sp, #0]
 8009512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009516:	b292      	uxth	r2, r2
 8009518:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800951c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009520:	f8bd 3000 	ldrh.w	r3, [sp]
 8009524:	4581      	cmp	r9, r0
 8009526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800952a:	f84c 3b04 	str.w	r3, [ip], #4
 800952e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009532:	d2db      	bcs.n	80094ec <quorem+0x42>
 8009534:	f855 300b 	ldr.w	r3, [r5, fp]
 8009538:	b92b      	cbnz	r3, 8009546 <quorem+0x9c>
 800953a:	9b01      	ldr	r3, [sp, #4]
 800953c:	3b04      	subs	r3, #4
 800953e:	429d      	cmp	r5, r3
 8009540:	461a      	mov	r2, r3
 8009542:	d32c      	bcc.n	800959e <quorem+0xf4>
 8009544:	613c      	str	r4, [r7, #16]
 8009546:	4638      	mov	r0, r7
 8009548:	f001 f9a8 	bl	800a89c <__mcmp>
 800954c:	2800      	cmp	r0, #0
 800954e:	db22      	blt.n	8009596 <quorem+0xec>
 8009550:	3601      	adds	r6, #1
 8009552:	4629      	mov	r1, r5
 8009554:	2000      	movs	r0, #0
 8009556:	f858 2b04 	ldr.w	r2, [r8], #4
 800955a:	f8d1 c000 	ldr.w	ip, [r1]
 800955e:	b293      	uxth	r3, r2
 8009560:	1ac3      	subs	r3, r0, r3
 8009562:	0c12      	lsrs	r2, r2, #16
 8009564:	fa13 f38c 	uxtah	r3, r3, ip
 8009568:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800956c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009570:	b29b      	uxth	r3, r3
 8009572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009576:	45c1      	cmp	r9, r8
 8009578:	f841 3b04 	str.w	r3, [r1], #4
 800957c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009580:	d2e9      	bcs.n	8009556 <quorem+0xac>
 8009582:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009586:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800958a:	b922      	cbnz	r2, 8009596 <quorem+0xec>
 800958c:	3b04      	subs	r3, #4
 800958e:	429d      	cmp	r5, r3
 8009590:	461a      	mov	r2, r3
 8009592:	d30a      	bcc.n	80095aa <quorem+0x100>
 8009594:	613c      	str	r4, [r7, #16]
 8009596:	4630      	mov	r0, r6
 8009598:	b003      	add	sp, #12
 800959a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959e:	6812      	ldr	r2, [r2, #0]
 80095a0:	3b04      	subs	r3, #4
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	d1ce      	bne.n	8009544 <quorem+0x9a>
 80095a6:	3c01      	subs	r4, #1
 80095a8:	e7c9      	b.n	800953e <quorem+0x94>
 80095aa:	6812      	ldr	r2, [r2, #0]
 80095ac:	3b04      	subs	r3, #4
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	d1f0      	bne.n	8009594 <quorem+0xea>
 80095b2:	3c01      	subs	r4, #1
 80095b4:	e7eb      	b.n	800958e <quorem+0xe4>
 80095b6:	2000      	movs	r0, #0
 80095b8:	e7ee      	b.n	8009598 <quorem+0xee>
 80095ba:	0000      	movs	r0, r0
 80095bc:	0000      	movs	r0, r0
	...

080095c0 <_dtoa_r>:
 80095c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	ed2d 8b04 	vpush	{d8-d9}
 80095c8:	69c5      	ldr	r5, [r0, #28]
 80095ca:	b093      	sub	sp, #76	; 0x4c
 80095cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80095d0:	ec57 6b10 	vmov	r6, r7, d0
 80095d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095d8:	9107      	str	r1, [sp, #28]
 80095da:	4604      	mov	r4, r0
 80095dc:	920a      	str	r2, [sp, #40]	; 0x28
 80095de:	930d      	str	r3, [sp, #52]	; 0x34
 80095e0:	b975      	cbnz	r5, 8009600 <_dtoa_r+0x40>
 80095e2:	2010      	movs	r0, #16
 80095e4:	f000 fe2a 	bl	800a23c <malloc>
 80095e8:	4602      	mov	r2, r0
 80095ea:	61e0      	str	r0, [r4, #28]
 80095ec:	b920      	cbnz	r0, 80095f8 <_dtoa_r+0x38>
 80095ee:	4bae      	ldr	r3, [pc, #696]	; (80098a8 <_dtoa_r+0x2e8>)
 80095f0:	21ef      	movs	r1, #239	; 0xef
 80095f2:	48ae      	ldr	r0, [pc, #696]	; (80098ac <_dtoa_r+0x2ec>)
 80095f4:	f001 fd1a 	bl	800b02c <__assert_func>
 80095f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095fc:	6005      	str	r5, [r0, #0]
 80095fe:	60c5      	str	r5, [r0, #12]
 8009600:	69e3      	ldr	r3, [r4, #28]
 8009602:	6819      	ldr	r1, [r3, #0]
 8009604:	b151      	cbz	r1, 800961c <_dtoa_r+0x5c>
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	604a      	str	r2, [r1, #4]
 800960a:	2301      	movs	r3, #1
 800960c:	4093      	lsls	r3, r2
 800960e:	608b      	str	r3, [r1, #8]
 8009610:	4620      	mov	r0, r4
 8009612:	f000 ff07 	bl	800a424 <_Bfree>
 8009616:	69e3      	ldr	r3, [r4, #28]
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]
 800961c:	1e3b      	subs	r3, r7, #0
 800961e:	bfbb      	ittet	lt
 8009620:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009624:	9303      	strlt	r3, [sp, #12]
 8009626:	2300      	movge	r3, #0
 8009628:	2201      	movlt	r2, #1
 800962a:	bfac      	ite	ge
 800962c:	f8c8 3000 	strge.w	r3, [r8]
 8009630:	f8c8 2000 	strlt.w	r2, [r8]
 8009634:	4b9e      	ldr	r3, [pc, #632]	; (80098b0 <_dtoa_r+0x2f0>)
 8009636:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800963a:	ea33 0308 	bics.w	r3, r3, r8
 800963e:	d11b      	bne.n	8009678 <_dtoa_r+0xb8>
 8009640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009642:	f242 730f 	movw	r3, #9999	; 0x270f
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800964c:	4333      	orrs	r3, r6
 800964e:	f000 8593 	beq.w	800a178 <_dtoa_r+0xbb8>
 8009652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009654:	b963      	cbnz	r3, 8009670 <_dtoa_r+0xb0>
 8009656:	4b97      	ldr	r3, [pc, #604]	; (80098b4 <_dtoa_r+0x2f4>)
 8009658:	e027      	b.n	80096aa <_dtoa_r+0xea>
 800965a:	4b97      	ldr	r3, [pc, #604]	; (80098b8 <_dtoa_r+0x2f8>)
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	3308      	adds	r3, #8
 8009660:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	9800      	ldr	r0, [sp, #0]
 8009666:	b013      	add	sp, #76	; 0x4c
 8009668:	ecbd 8b04 	vpop	{d8-d9}
 800966c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009670:	4b90      	ldr	r3, [pc, #576]	; (80098b4 <_dtoa_r+0x2f4>)
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	3303      	adds	r3, #3
 8009676:	e7f3      	b.n	8009660 <_dtoa_r+0xa0>
 8009678:	ed9d 7b02 	vldr	d7, [sp, #8]
 800967c:	2200      	movs	r2, #0
 800967e:	ec51 0b17 	vmov	r0, r1, d7
 8009682:	eeb0 8a47 	vmov.f32	s16, s14
 8009686:	eef0 8a67 	vmov.f32	s17, s15
 800968a:	2300      	movs	r3, #0
 800968c:	f7f7 fa34 	bl	8000af8 <__aeabi_dcmpeq>
 8009690:	4681      	mov	r9, r0
 8009692:	b160      	cbz	r0, 80096ae <_dtoa_r+0xee>
 8009694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009696:	2301      	movs	r3, #1
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 8568 	beq.w	800a172 <_dtoa_r+0xbb2>
 80096a2:	4b86      	ldr	r3, [pc, #536]	; (80098bc <_dtoa_r+0x2fc>)
 80096a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	e7da      	b.n	8009664 <_dtoa_r+0xa4>
 80096ae:	aa10      	add	r2, sp, #64	; 0x40
 80096b0:	a911      	add	r1, sp, #68	; 0x44
 80096b2:	4620      	mov	r0, r4
 80096b4:	eeb0 0a48 	vmov.f32	s0, s16
 80096b8:	eef0 0a68 	vmov.f32	s1, s17
 80096bc:	f001 f994 	bl	800a9e8 <__d2b>
 80096c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80096c4:	4682      	mov	sl, r0
 80096c6:	2d00      	cmp	r5, #0
 80096c8:	d07f      	beq.n	80097ca <_dtoa_r+0x20a>
 80096ca:	ee18 3a90 	vmov	r3, s17
 80096ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80096d6:	ec51 0b18 	vmov	r0, r1, d8
 80096da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80096de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80096e6:	4619      	mov	r1, r3
 80096e8:	2200      	movs	r2, #0
 80096ea:	4b75      	ldr	r3, [pc, #468]	; (80098c0 <_dtoa_r+0x300>)
 80096ec:	f7f6 fde4 	bl	80002b8 <__aeabi_dsub>
 80096f0:	a367      	add	r3, pc, #412	; (adr r3, 8009890 <_dtoa_r+0x2d0>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	f7f6 ff97 	bl	8000628 <__aeabi_dmul>
 80096fa:	a367      	add	r3, pc, #412	; (adr r3, 8009898 <_dtoa_r+0x2d8>)
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	f7f6 fddc 	bl	80002bc <__adddf3>
 8009704:	4606      	mov	r6, r0
 8009706:	4628      	mov	r0, r5
 8009708:	460f      	mov	r7, r1
 800970a:	f7f6 ff23 	bl	8000554 <__aeabi_i2d>
 800970e:	a364      	add	r3, pc, #400	; (adr r3, 80098a0 <_dtoa_r+0x2e0>)
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	f7f6 ff88 	bl	8000628 <__aeabi_dmul>
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f6 fdcc 	bl	80002bc <__adddf3>
 8009724:	4606      	mov	r6, r0
 8009726:	460f      	mov	r7, r1
 8009728:	f7f7 fa2e 	bl	8000b88 <__aeabi_d2iz>
 800972c:	2200      	movs	r2, #0
 800972e:	4683      	mov	fp, r0
 8009730:	2300      	movs	r3, #0
 8009732:	4630      	mov	r0, r6
 8009734:	4639      	mov	r1, r7
 8009736:	f7f7 f9e9 	bl	8000b0c <__aeabi_dcmplt>
 800973a:	b148      	cbz	r0, 8009750 <_dtoa_r+0x190>
 800973c:	4658      	mov	r0, fp
 800973e:	f7f6 ff09 	bl	8000554 <__aeabi_i2d>
 8009742:	4632      	mov	r2, r6
 8009744:	463b      	mov	r3, r7
 8009746:	f7f7 f9d7 	bl	8000af8 <__aeabi_dcmpeq>
 800974a:	b908      	cbnz	r0, 8009750 <_dtoa_r+0x190>
 800974c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009750:	f1bb 0f16 	cmp.w	fp, #22
 8009754:	d857      	bhi.n	8009806 <_dtoa_r+0x246>
 8009756:	4b5b      	ldr	r3, [pc, #364]	; (80098c4 <_dtoa_r+0x304>)
 8009758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	ec51 0b18 	vmov	r0, r1, d8
 8009764:	f7f7 f9d2 	bl	8000b0c <__aeabi_dcmplt>
 8009768:	2800      	cmp	r0, #0
 800976a:	d04e      	beq.n	800980a <_dtoa_r+0x24a>
 800976c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009770:	2300      	movs	r3, #0
 8009772:	930c      	str	r3, [sp, #48]	; 0x30
 8009774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009776:	1b5b      	subs	r3, r3, r5
 8009778:	1e5a      	subs	r2, r3, #1
 800977a:	bf45      	ittet	mi
 800977c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009780:	9305      	strmi	r3, [sp, #20]
 8009782:	2300      	movpl	r3, #0
 8009784:	2300      	movmi	r3, #0
 8009786:	9206      	str	r2, [sp, #24]
 8009788:	bf54      	ite	pl
 800978a:	9305      	strpl	r3, [sp, #20]
 800978c:	9306      	strmi	r3, [sp, #24]
 800978e:	f1bb 0f00 	cmp.w	fp, #0
 8009792:	db3c      	blt.n	800980e <_dtoa_r+0x24e>
 8009794:	9b06      	ldr	r3, [sp, #24]
 8009796:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800979a:	445b      	add	r3, fp
 800979c:	9306      	str	r3, [sp, #24]
 800979e:	2300      	movs	r3, #0
 80097a0:	9308      	str	r3, [sp, #32]
 80097a2:	9b07      	ldr	r3, [sp, #28]
 80097a4:	2b09      	cmp	r3, #9
 80097a6:	d868      	bhi.n	800987a <_dtoa_r+0x2ba>
 80097a8:	2b05      	cmp	r3, #5
 80097aa:	bfc4      	itt	gt
 80097ac:	3b04      	subgt	r3, #4
 80097ae:	9307      	strgt	r3, [sp, #28]
 80097b0:	9b07      	ldr	r3, [sp, #28]
 80097b2:	f1a3 0302 	sub.w	r3, r3, #2
 80097b6:	bfcc      	ite	gt
 80097b8:	2500      	movgt	r5, #0
 80097ba:	2501      	movle	r5, #1
 80097bc:	2b03      	cmp	r3, #3
 80097be:	f200 8085 	bhi.w	80098cc <_dtoa_r+0x30c>
 80097c2:	e8df f003 	tbb	[pc, r3]
 80097c6:	3b2e      	.short	0x3b2e
 80097c8:	5839      	.short	0x5839
 80097ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80097ce:	441d      	add	r5, r3
 80097d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	bfc1      	itttt	gt
 80097d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80097e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80097e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80097e8:	bfd6      	itet	le
 80097ea:	f1c3 0320 	rsble	r3, r3, #32
 80097ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80097f2:	fa06 f003 	lslle.w	r0, r6, r3
 80097f6:	f7f6 fe9d 	bl	8000534 <__aeabi_ui2d>
 80097fa:	2201      	movs	r2, #1
 80097fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009800:	3d01      	subs	r5, #1
 8009802:	920e      	str	r2, [sp, #56]	; 0x38
 8009804:	e76f      	b.n	80096e6 <_dtoa_r+0x126>
 8009806:	2301      	movs	r3, #1
 8009808:	e7b3      	b.n	8009772 <_dtoa_r+0x1b2>
 800980a:	900c      	str	r0, [sp, #48]	; 0x30
 800980c:	e7b2      	b.n	8009774 <_dtoa_r+0x1b4>
 800980e:	9b05      	ldr	r3, [sp, #20]
 8009810:	eba3 030b 	sub.w	r3, r3, fp
 8009814:	9305      	str	r3, [sp, #20]
 8009816:	f1cb 0300 	rsb	r3, fp, #0
 800981a:	9308      	str	r3, [sp, #32]
 800981c:	2300      	movs	r3, #0
 800981e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009820:	e7bf      	b.n	80097a2 <_dtoa_r+0x1e2>
 8009822:	2300      	movs	r3, #0
 8009824:	9309      	str	r3, [sp, #36]	; 0x24
 8009826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009828:	2b00      	cmp	r3, #0
 800982a:	dc52      	bgt.n	80098d2 <_dtoa_r+0x312>
 800982c:	2301      	movs	r3, #1
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	461a      	mov	r2, r3
 8009834:	920a      	str	r2, [sp, #40]	; 0x28
 8009836:	e00b      	b.n	8009850 <_dtoa_r+0x290>
 8009838:	2301      	movs	r3, #1
 800983a:	e7f3      	b.n	8009824 <_dtoa_r+0x264>
 800983c:	2300      	movs	r3, #0
 800983e:	9309      	str	r3, [sp, #36]	; 0x24
 8009840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009842:	445b      	add	r3, fp
 8009844:	9301      	str	r3, [sp, #4]
 8009846:	3301      	adds	r3, #1
 8009848:	2b01      	cmp	r3, #1
 800984a:	9304      	str	r3, [sp, #16]
 800984c:	bfb8      	it	lt
 800984e:	2301      	movlt	r3, #1
 8009850:	69e0      	ldr	r0, [r4, #28]
 8009852:	2100      	movs	r1, #0
 8009854:	2204      	movs	r2, #4
 8009856:	f102 0614 	add.w	r6, r2, #20
 800985a:	429e      	cmp	r6, r3
 800985c:	d93d      	bls.n	80098da <_dtoa_r+0x31a>
 800985e:	6041      	str	r1, [r0, #4]
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fd9f 	bl	800a3a4 <_Balloc>
 8009866:	9000      	str	r0, [sp, #0]
 8009868:	2800      	cmp	r0, #0
 800986a:	d139      	bne.n	80098e0 <_dtoa_r+0x320>
 800986c:	4b16      	ldr	r3, [pc, #88]	; (80098c8 <_dtoa_r+0x308>)
 800986e:	4602      	mov	r2, r0
 8009870:	f240 11af 	movw	r1, #431	; 0x1af
 8009874:	e6bd      	b.n	80095f2 <_dtoa_r+0x32>
 8009876:	2301      	movs	r3, #1
 8009878:	e7e1      	b.n	800983e <_dtoa_r+0x27e>
 800987a:	2501      	movs	r5, #1
 800987c:	2300      	movs	r3, #0
 800987e:	9307      	str	r3, [sp, #28]
 8009880:	9509      	str	r5, [sp, #36]	; 0x24
 8009882:	f04f 33ff 	mov.w	r3, #4294967295
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	2200      	movs	r2, #0
 800988c:	2312      	movs	r3, #18
 800988e:	e7d1      	b.n	8009834 <_dtoa_r+0x274>
 8009890:	636f4361 	.word	0x636f4361
 8009894:	3fd287a7 	.word	0x3fd287a7
 8009898:	8b60c8b3 	.word	0x8b60c8b3
 800989c:	3fc68a28 	.word	0x3fc68a28
 80098a0:	509f79fb 	.word	0x509f79fb
 80098a4:	3fd34413 	.word	0x3fd34413
 80098a8:	0800b3da 	.word	0x0800b3da
 80098ac:	0800b3f1 	.word	0x0800b3f1
 80098b0:	7ff00000 	.word	0x7ff00000
 80098b4:	0800b3d6 	.word	0x0800b3d6
 80098b8:	0800b3cd 	.word	0x0800b3cd
 80098bc:	0800b3aa 	.word	0x0800b3aa
 80098c0:	3ff80000 	.word	0x3ff80000
 80098c4:	0800b4e0 	.word	0x0800b4e0
 80098c8:	0800b449 	.word	0x0800b449
 80098cc:	2301      	movs	r3, #1
 80098ce:	9309      	str	r3, [sp, #36]	; 0x24
 80098d0:	e7d7      	b.n	8009882 <_dtoa_r+0x2c2>
 80098d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	9304      	str	r3, [sp, #16]
 80098d8:	e7ba      	b.n	8009850 <_dtoa_r+0x290>
 80098da:	3101      	adds	r1, #1
 80098dc:	0052      	lsls	r2, r2, #1
 80098de:	e7ba      	b.n	8009856 <_dtoa_r+0x296>
 80098e0:	69e3      	ldr	r3, [r4, #28]
 80098e2:	9a00      	ldr	r2, [sp, #0]
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	9b04      	ldr	r3, [sp, #16]
 80098e8:	2b0e      	cmp	r3, #14
 80098ea:	f200 80a8 	bhi.w	8009a3e <_dtoa_r+0x47e>
 80098ee:	2d00      	cmp	r5, #0
 80098f0:	f000 80a5 	beq.w	8009a3e <_dtoa_r+0x47e>
 80098f4:	f1bb 0f00 	cmp.w	fp, #0
 80098f8:	dd38      	ble.n	800996c <_dtoa_r+0x3ac>
 80098fa:	4bc0      	ldr	r3, [pc, #768]	; (8009bfc <_dtoa_r+0x63c>)
 80098fc:	f00b 020f 	and.w	r2, fp, #15
 8009900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009904:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009908:	e9d3 6700 	ldrd	r6, r7, [r3]
 800990c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009910:	d019      	beq.n	8009946 <_dtoa_r+0x386>
 8009912:	4bbb      	ldr	r3, [pc, #748]	; (8009c00 <_dtoa_r+0x640>)
 8009914:	ec51 0b18 	vmov	r0, r1, d8
 8009918:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800991c:	f7f6 ffae 	bl	800087c <__aeabi_ddiv>
 8009920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009924:	f008 080f 	and.w	r8, r8, #15
 8009928:	2503      	movs	r5, #3
 800992a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009c00 <_dtoa_r+0x640>
 800992e:	f1b8 0f00 	cmp.w	r8, #0
 8009932:	d10a      	bne.n	800994a <_dtoa_r+0x38a>
 8009934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009938:	4632      	mov	r2, r6
 800993a:	463b      	mov	r3, r7
 800993c:	f7f6 ff9e 	bl	800087c <__aeabi_ddiv>
 8009940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009944:	e02b      	b.n	800999e <_dtoa_r+0x3de>
 8009946:	2502      	movs	r5, #2
 8009948:	e7ef      	b.n	800992a <_dtoa_r+0x36a>
 800994a:	f018 0f01 	tst.w	r8, #1
 800994e:	d008      	beq.n	8009962 <_dtoa_r+0x3a2>
 8009950:	4630      	mov	r0, r6
 8009952:	4639      	mov	r1, r7
 8009954:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009958:	f7f6 fe66 	bl	8000628 <__aeabi_dmul>
 800995c:	3501      	adds	r5, #1
 800995e:	4606      	mov	r6, r0
 8009960:	460f      	mov	r7, r1
 8009962:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009966:	f109 0908 	add.w	r9, r9, #8
 800996a:	e7e0      	b.n	800992e <_dtoa_r+0x36e>
 800996c:	f000 809f 	beq.w	8009aae <_dtoa_r+0x4ee>
 8009970:	f1cb 0600 	rsb	r6, fp, #0
 8009974:	4ba1      	ldr	r3, [pc, #644]	; (8009bfc <_dtoa_r+0x63c>)
 8009976:	4fa2      	ldr	r7, [pc, #648]	; (8009c00 <_dtoa_r+0x640>)
 8009978:	f006 020f 	and.w	r2, r6, #15
 800997c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	ec51 0b18 	vmov	r0, r1, d8
 8009988:	f7f6 fe4e 	bl	8000628 <__aeabi_dmul>
 800998c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009990:	1136      	asrs	r6, r6, #4
 8009992:	2300      	movs	r3, #0
 8009994:	2502      	movs	r5, #2
 8009996:	2e00      	cmp	r6, #0
 8009998:	d17e      	bne.n	8009a98 <_dtoa_r+0x4d8>
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1d0      	bne.n	8009940 <_dtoa_r+0x380>
 800999e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 8084 	beq.w	8009ab2 <_dtoa_r+0x4f2>
 80099aa:	4b96      	ldr	r3, [pc, #600]	; (8009c04 <_dtoa_r+0x644>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	4640      	mov	r0, r8
 80099b0:	4649      	mov	r1, r9
 80099b2:	f7f7 f8ab 	bl	8000b0c <__aeabi_dcmplt>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d07b      	beq.n	8009ab2 <_dtoa_r+0x4f2>
 80099ba:	9b04      	ldr	r3, [sp, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d078      	beq.n	8009ab2 <_dtoa_r+0x4f2>
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dd39      	ble.n	8009a3a <_dtoa_r+0x47a>
 80099c6:	4b90      	ldr	r3, [pc, #576]	; (8009c08 <_dtoa_r+0x648>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	4640      	mov	r0, r8
 80099cc:	4649      	mov	r1, r9
 80099ce:	f7f6 fe2b 	bl	8000628 <__aeabi_dmul>
 80099d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099d6:	9e01      	ldr	r6, [sp, #4]
 80099d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80099dc:	3501      	adds	r5, #1
 80099de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099e2:	4628      	mov	r0, r5
 80099e4:	f7f6 fdb6 	bl	8000554 <__aeabi_i2d>
 80099e8:	4642      	mov	r2, r8
 80099ea:	464b      	mov	r3, r9
 80099ec:	f7f6 fe1c 	bl	8000628 <__aeabi_dmul>
 80099f0:	4b86      	ldr	r3, [pc, #536]	; (8009c0c <_dtoa_r+0x64c>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	f7f6 fc62 	bl	80002bc <__adddf3>
 80099f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80099fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a00:	9303      	str	r3, [sp, #12]
 8009a02:	2e00      	cmp	r6, #0
 8009a04:	d158      	bne.n	8009ab8 <_dtoa_r+0x4f8>
 8009a06:	4b82      	ldr	r3, [pc, #520]	; (8009c10 <_dtoa_r+0x650>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	f7f6 fc53 	bl	80002b8 <__aeabi_dsub>
 8009a12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a16:	4680      	mov	r8, r0
 8009a18:	4689      	mov	r9, r1
 8009a1a:	f7f7 f895 	bl	8000b48 <__aeabi_dcmpgt>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f040 8296 	bne.w	8009f50 <_dtoa_r+0x990>
 8009a24:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009a28:	4640      	mov	r0, r8
 8009a2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a2e:	4649      	mov	r1, r9
 8009a30:	f7f7 f86c 	bl	8000b0c <__aeabi_dcmplt>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	f040 8289 	bne.w	8009f4c <_dtoa_r+0x98c>
 8009a3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009a3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f2c0 814e 	blt.w	8009ce2 <_dtoa_r+0x722>
 8009a46:	f1bb 0f0e 	cmp.w	fp, #14
 8009a4a:	f300 814a 	bgt.w	8009ce2 <_dtoa_r+0x722>
 8009a4e:	4b6b      	ldr	r3, [pc, #428]	; (8009bfc <_dtoa_r+0x63c>)
 8009a50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f280 80dc 	bge.w	8009c18 <_dtoa_r+0x658>
 8009a60:	9b04      	ldr	r3, [sp, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f300 80d8 	bgt.w	8009c18 <_dtoa_r+0x658>
 8009a68:	f040 826f 	bne.w	8009f4a <_dtoa_r+0x98a>
 8009a6c:	4b68      	ldr	r3, [pc, #416]	; (8009c10 <_dtoa_r+0x650>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	4640      	mov	r0, r8
 8009a72:	4649      	mov	r1, r9
 8009a74:	f7f6 fdd8 	bl	8000628 <__aeabi_dmul>
 8009a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a7c:	f7f7 f85a 	bl	8000b34 <__aeabi_dcmpge>
 8009a80:	9e04      	ldr	r6, [sp, #16]
 8009a82:	4637      	mov	r7, r6
 8009a84:	2800      	cmp	r0, #0
 8009a86:	f040 8245 	bne.w	8009f14 <_dtoa_r+0x954>
 8009a8a:	9d00      	ldr	r5, [sp, #0]
 8009a8c:	2331      	movs	r3, #49	; 0x31
 8009a8e:	f805 3b01 	strb.w	r3, [r5], #1
 8009a92:	f10b 0b01 	add.w	fp, fp, #1
 8009a96:	e241      	b.n	8009f1c <_dtoa_r+0x95c>
 8009a98:	07f2      	lsls	r2, r6, #31
 8009a9a:	d505      	bpl.n	8009aa8 <_dtoa_r+0x4e8>
 8009a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aa0:	f7f6 fdc2 	bl	8000628 <__aeabi_dmul>
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	1076      	asrs	r6, r6, #1
 8009aaa:	3708      	adds	r7, #8
 8009aac:	e773      	b.n	8009996 <_dtoa_r+0x3d6>
 8009aae:	2502      	movs	r5, #2
 8009ab0:	e775      	b.n	800999e <_dtoa_r+0x3de>
 8009ab2:	9e04      	ldr	r6, [sp, #16]
 8009ab4:	465f      	mov	r7, fp
 8009ab6:	e792      	b.n	80099de <_dtoa_r+0x41e>
 8009ab8:	9900      	ldr	r1, [sp, #0]
 8009aba:	4b50      	ldr	r3, [pc, #320]	; (8009bfc <_dtoa_r+0x63c>)
 8009abc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ac0:	4431      	add	r1, r6
 8009ac2:	9102      	str	r1, [sp, #8]
 8009ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ac6:	eeb0 9a47 	vmov.f32	s18, s14
 8009aca:	eef0 9a67 	vmov.f32	s19, s15
 8009ace:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ad2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ad6:	2900      	cmp	r1, #0
 8009ad8:	d044      	beq.n	8009b64 <_dtoa_r+0x5a4>
 8009ada:	494e      	ldr	r1, [pc, #312]	; (8009c14 <_dtoa_r+0x654>)
 8009adc:	2000      	movs	r0, #0
 8009ade:	f7f6 fecd 	bl	800087c <__aeabi_ddiv>
 8009ae2:	ec53 2b19 	vmov	r2, r3, d9
 8009ae6:	f7f6 fbe7 	bl	80002b8 <__aeabi_dsub>
 8009aea:	9d00      	ldr	r5, [sp, #0]
 8009aec:	ec41 0b19 	vmov	d9, r0, r1
 8009af0:	4649      	mov	r1, r9
 8009af2:	4640      	mov	r0, r8
 8009af4:	f7f7 f848 	bl	8000b88 <__aeabi_d2iz>
 8009af8:	4606      	mov	r6, r0
 8009afa:	f7f6 fd2b 	bl	8000554 <__aeabi_i2d>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4640      	mov	r0, r8
 8009b04:	4649      	mov	r1, r9
 8009b06:	f7f6 fbd7 	bl	80002b8 <__aeabi_dsub>
 8009b0a:	3630      	adds	r6, #48	; 0x30
 8009b0c:	f805 6b01 	strb.w	r6, [r5], #1
 8009b10:	ec53 2b19 	vmov	r2, r3, d9
 8009b14:	4680      	mov	r8, r0
 8009b16:	4689      	mov	r9, r1
 8009b18:	f7f6 fff8 	bl	8000b0c <__aeabi_dcmplt>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d164      	bne.n	8009bea <_dtoa_r+0x62a>
 8009b20:	4642      	mov	r2, r8
 8009b22:	464b      	mov	r3, r9
 8009b24:	4937      	ldr	r1, [pc, #220]	; (8009c04 <_dtoa_r+0x644>)
 8009b26:	2000      	movs	r0, #0
 8009b28:	f7f6 fbc6 	bl	80002b8 <__aeabi_dsub>
 8009b2c:	ec53 2b19 	vmov	r2, r3, d9
 8009b30:	f7f6 ffec 	bl	8000b0c <__aeabi_dcmplt>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f040 80b6 	bne.w	8009ca6 <_dtoa_r+0x6e6>
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	429d      	cmp	r5, r3
 8009b3e:	f43f af7c 	beq.w	8009a3a <_dtoa_r+0x47a>
 8009b42:	4b31      	ldr	r3, [pc, #196]	; (8009c08 <_dtoa_r+0x648>)
 8009b44:	ec51 0b19 	vmov	r0, r1, d9
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f7f6 fd6d 	bl	8000628 <__aeabi_dmul>
 8009b4e:	4b2e      	ldr	r3, [pc, #184]	; (8009c08 <_dtoa_r+0x648>)
 8009b50:	ec41 0b19 	vmov	d9, r0, r1
 8009b54:	2200      	movs	r2, #0
 8009b56:	4640      	mov	r0, r8
 8009b58:	4649      	mov	r1, r9
 8009b5a:	f7f6 fd65 	bl	8000628 <__aeabi_dmul>
 8009b5e:	4680      	mov	r8, r0
 8009b60:	4689      	mov	r9, r1
 8009b62:	e7c5      	b.n	8009af0 <_dtoa_r+0x530>
 8009b64:	ec51 0b17 	vmov	r0, r1, d7
 8009b68:	f7f6 fd5e 	bl	8000628 <__aeabi_dmul>
 8009b6c:	9b02      	ldr	r3, [sp, #8]
 8009b6e:	9d00      	ldr	r5, [sp, #0]
 8009b70:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b72:	ec41 0b19 	vmov	d9, r0, r1
 8009b76:	4649      	mov	r1, r9
 8009b78:	4640      	mov	r0, r8
 8009b7a:	f7f7 f805 	bl	8000b88 <__aeabi_d2iz>
 8009b7e:	4606      	mov	r6, r0
 8009b80:	f7f6 fce8 	bl	8000554 <__aeabi_i2d>
 8009b84:	3630      	adds	r6, #48	; 0x30
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	f7f6 fb93 	bl	80002b8 <__aeabi_dsub>
 8009b92:	f805 6b01 	strb.w	r6, [r5], #1
 8009b96:	9b02      	ldr	r3, [sp, #8]
 8009b98:	429d      	cmp	r5, r3
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	4689      	mov	r9, r1
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	d124      	bne.n	8009bee <_dtoa_r+0x62e>
 8009ba4:	4b1b      	ldr	r3, [pc, #108]	; (8009c14 <_dtoa_r+0x654>)
 8009ba6:	ec51 0b19 	vmov	r0, r1, d9
 8009baa:	f7f6 fb87 	bl	80002bc <__adddf3>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	f7f6 ffc7 	bl	8000b48 <__aeabi_dcmpgt>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d173      	bne.n	8009ca6 <_dtoa_r+0x6e6>
 8009bbe:	ec53 2b19 	vmov	r2, r3, d9
 8009bc2:	4914      	ldr	r1, [pc, #80]	; (8009c14 <_dtoa_r+0x654>)
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f7f6 fb77 	bl	80002b8 <__aeabi_dsub>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4640      	mov	r0, r8
 8009bd0:	4649      	mov	r1, r9
 8009bd2:	f7f6 ff9b 	bl	8000b0c <__aeabi_dcmplt>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f43f af2f 	beq.w	8009a3a <_dtoa_r+0x47a>
 8009bdc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bde:	1e6b      	subs	r3, r5, #1
 8009be0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009be2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009be6:	2b30      	cmp	r3, #48	; 0x30
 8009be8:	d0f8      	beq.n	8009bdc <_dtoa_r+0x61c>
 8009bea:	46bb      	mov	fp, r7
 8009bec:	e04a      	b.n	8009c84 <_dtoa_r+0x6c4>
 8009bee:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <_dtoa_r+0x648>)
 8009bf0:	f7f6 fd1a 	bl	8000628 <__aeabi_dmul>
 8009bf4:	4680      	mov	r8, r0
 8009bf6:	4689      	mov	r9, r1
 8009bf8:	e7bd      	b.n	8009b76 <_dtoa_r+0x5b6>
 8009bfa:	bf00      	nop
 8009bfc:	0800b4e0 	.word	0x0800b4e0
 8009c00:	0800b4b8 	.word	0x0800b4b8
 8009c04:	3ff00000 	.word	0x3ff00000
 8009c08:	40240000 	.word	0x40240000
 8009c0c:	401c0000 	.word	0x401c0000
 8009c10:	40140000 	.word	0x40140000
 8009c14:	3fe00000 	.word	0x3fe00000
 8009c18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c1c:	9d00      	ldr	r5, [sp, #0]
 8009c1e:	4642      	mov	r2, r8
 8009c20:	464b      	mov	r3, r9
 8009c22:	4630      	mov	r0, r6
 8009c24:	4639      	mov	r1, r7
 8009c26:	f7f6 fe29 	bl	800087c <__aeabi_ddiv>
 8009c2a:	f7f6 ffad 	bl	8000b88 <__aeabi_d2iz>
 8009c2e:	9001      	str	r0, [sp, #4]
 8009c30:	f7f6 fc90 	bl	8000554 <__aeabi_i2d>
 8009c34:	4642      	mov	r2, r8
 8009c36:	464b      	mov	r3, r9
 8009c38:	f7f6 fcf6 	bl	8000628 <__aeabi_dmul>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4630      	mov	r0, r6
 8009c42:	4639      	mov	r1, r7
 8009c44:	f7f6 fb38 	bl	80002b8 <__aeabi_dsub>
 8009c48:	9e01      	ldr	r6, [sp, #4]
 8009c4a:	9f04      	ldr	r7, [sp, #16]
 8009c4c:	3630      	adds	r6, #48	; 0x30
 8009c4e:	f805 6b01 	strb.w	r6, [r5], #1
 8009c52:	9e00      	ldr	r6, [sp, #0]
 8009c54:	1bae      	subs	r6, r5, r6
 8009c56:	42b7      	cmp	r7, r6
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	d134      	bne.n	8009cc8 <_dtoa_r+0x708>
 8009c5e:	f7f6 fb2d 	bl	80002bc <__adddf3>
 8009c62:	4642      	mov	r2, r8
 8009c64:	464b      	mov	r3, r9
 8009c66:	4606      	mov	r6, r0
 8009c68:	460f      	mov	r7, r1
 8009c6a:	f7f6 ff6d 	bl	8000b48 <__aeabi_dcmpgt>
 8009c6e:	b9c8      	cbnz	r0, 8009ca4 <_dtoa_r+0x6e4>
 8009c70:	4642      	mov	r2, r8
 8009c72:	464b      	mov	r3, r9
 8009c74:	4630      	mov	r0, r6
 8009c76:	4639      	mov	r1, r7
 8009c78:	f7f6 ff3e 	bl	8000af8 <__aeabi_dcmpeq>
 8009c7c:	b110      	cbz	r0, 8009c84 <_dtoa_r+0x6c4>
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	07db      	lsls	r3, r3, #31
 8009c82:	d40f      	bmi.n	8009ca4 <_dtoa_r+0x6e4>
 8009c84:	4651      	mov	r1, sl
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 fbcc 	bl	800a424 <_Bfree>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c90:	702b      	strb	r3, [r5, #0]
 8009c92:	f10b 0301 	add.w	r3, fp, #1
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f43f ace2 	beq.w	8009664 <_dtoa_r+0xa4>
 8009ca0:	601d      	str	r5, [r3, #0]
 8009ca2:	e4df      	b.n	8009664 <_dtoa_r+0xa4>
 8009ca4:	465f      	mov	r7, fp
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	461d      	mov	r5, r3
 8009caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cae:	2a39      	cmp	r2, #57	; 0x39
 8009cb0:	d106      	bne.n	8009cc0 <_dtoa_r+0x700>
 8009cb2:	9a00      	ldr	r2, [sp, #0]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d1f7      	bne.n	8009ca8 <_dtoa_r+0x6e8>
 8009cb8:	9900      	ldr	r1, [sp, #0]
 8009cba:	2230      	movs	r2, #48	; 0x30
 8009cbc:	3701      	adds	r7, #1
 8009cbe:	700a      	strb	r2, [r1, #0]
 8009cc0:	781a      	ldrb	r2, [r3, #0]
 8009cc2:	3201      	adds	r2, #1
 8009cc4:	701a      	strb	r2, [r3, #0]
 8009cc6:	e790      	b.n	8009bea <_dtoa_r+0x62a>
 8009cc8:	4ba3      	ldr	r3, [pc, #652]	; (8009f58 <_dtoa_r+0x998>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f7f6 fcac 	bl	8000628 <__aeabi_dmul>
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	460f      	mov	r7, r1
 8009cd8:	f7f6 ff0e 	bl	8000af8 <__aeabi_dcmpeq>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d09e      	beq.n	8009c1e <_dtoa_r+0x65e>
 8009ce0:	e7d0      	b.n	8009c84 <_dtoa_r+0x6c4>
 8009ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	f000 80ca 	beq.w	8009e7e <_dtoa_r+0x8be>
 8009cea:	9a07      	ldr	r2, [sp, #28]
 8009cec:	2a01      	cmp	r2, #1
 8009cee:	f300 80ad 	bgt.w	8009e4c <_dtoa_r+0x88c>
 8009cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	f000 80a5 	beq.w	8009e44 <_dtoa_r+0x884>
 8009cfa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cfe:	9e08      	ldr	r6, [sp, #32]
 8009d00:	9d05      	ldr	r5, [sp, #20]
 8009d02:	9a05      	ldr	r2, [sp, #20]
 8009d04:	441a      	add	r2, r3
 8009d06:	9205      	str	r2, [sp, #20]
 8009d08:	9a06      	ldr	r2, [sp, #24]
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	441a      	add	r2, r3
 8009d0e:	4620      	mov	r0, r4
 8009d10:	9206      	str	r2, [sp, #24]
 8009d12:	f000 fc3d 	bl	800a590 <__i2b>
 8009d16:	4607      	mov	r7, r0
 8009d18:	b165      	cbz	r5, 8009d34 <_dtoa_r+0x774>
 8009d1a:	9b06      	ldr	r3, [sp, #24]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	dd09      	ble.n	8009d34 <_dtoa_r+0x774>
 8009d20:	42ab      	cmp	r3, r5
 8009d22:	9a05      	ldr	r2, [sp, #20]
 8009d24:	bfa8      	it	ge
 8009d26:	462b      	movge	r3, r5
 8009d28:	1ad2      	subs	r2, r2, r3
 8009d2a:	9205      	str	r2, [sp, #20]
 8009d2c:	9a06      	ldr	r2, [sp, #24]
 8009d2e:	1aed      	subs	r5, r5, r3
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	9306      	str	r3, [sp, #24]
 8009d34:	9b08      	ldr	r3, [sp, #32]
 8009d36:	b1f3      	cbz	r3, 8009d76 <_dtoa_r+0x7b6>
 8009d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 80a3 	beq.w	8009e86 <_dtoa_r+0x8c6>
 8009d40:	2e00      	cmp	r6, #0
 8009d42:	dd10      	ble.n	8009d66 <_dtoa_r+0x7a6>
 8009d44:	4639      	mov	r1, r7
 8009d46:	4632      	mov	r2, r6
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 fce1 	bl	800a710 <__pow5mult>
 8009d4e:	4652      	mov	r2, sl
 8009d50:	4601      	mov	r1, r0
 8009d52:	4607      	mov	r7, r0
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fc31 	bl	800a5bc <__multiply>
 8009d5a:	4651      	mov	r1, sl
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f000 fb60 	bl	800a424 <_Bfree>
 8009d64:	46c2      	mov	sl, r8
 8009d66:	9b08      	ldr	r3, [sp, #32]
 8009d68:	1b9a      	subs	r2, r3, r6
 8009d6a:	d004      	beq.n	8009d76 <_dtoa_r+0x7b6>
 8009d6c:	4651      	mov	r1, sl
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 fcce 	bl	800a710 <__pow5mult>
 8009d74:	4682      	mov	sl, r0
 8009d76:	2101      	movs	r1, #1
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f000 fc09 	bl	800a590 <__i2b>
 8009d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	4606      	mov	r6, r0
 8009d84:	f340 8081 	ble.w	8009e8a <_dtoa_r+0x8ca>
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4601      	mov	r1, r0
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f000 fcbf 	bl	800a710 <__pow5mult>
 8009d92:	9b07      	ldr	r3, [sp, #28]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	4606      	mov	r6, r0
 8009d98:	dd7a      	ble.n	8009e90 <_dtoa_r+0x8d0>
 8009d9a:	f04f 0800 	mov.w	r8, #0
 8009d9e:	6933      	ldr	r3, [r6, #16]
 8009da0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009da4:	6918      	ldr	r0, [r3, #16]
 8009da6:	f000 fba5 	bl	800a4f4 <__hi0bits>
 8009daa:	f1c0 0020 	rsb	r0, r0, #32
 8009dae:	9b06      	ldr	r3, [sp, #24]
 8009db0:	4418      	add	r0, r3
 8009db2:	f010 001f 	ands.w	r0, r0, #31
 8009db6:	f000 8094 	beq.w	8009ee2 <_dtoa_r+0x922>
 8009dba:	f1c0 0320 	rsb	r3, r0, #32
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	f340 8085 	ble.w	8009ece <_dtoa_r+0x90e>
 8009dc4:	9b05      	ldr	r3, [sp, #20]
 8009dc6:	f1c0 001c 	rsb	r0, r0, #28
 8009dca:	4403      	add	r3, r0
 8009dcc:	9305      	str	r3, [sp, #20]
 8009dce:	9b06      	ldr	r3, [sp, #24]
 8009dd0:	4403      	add	r3, r0
 8009dd2:	4405      	add	r5, r0
 8009dd4:	9306      	str	r3, [sp, #24]
 8009dd6:	9b05      	ldr	r3, [sp, #20]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	dd05      	ble.n	8009de8 <_dtoa_r+0x828>
 8009ddc:	4651      	mov	r1, sl
 8009dde:	461a      	mov	r2, r3
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 fcef 	bl	800a7c4 <__lshift>
 8009de6:	4682      	mov	sl, r0
 8009de8:	9b06      	ldr	r3, [sp, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dd05      	ble.n	8009dfa <_dtoa_r+0x83a>
 8009dee:	4631      	mov	r1, r6
 8009df0:	461a      	mov	r2, r3
 8009df2:	4620      	mov	r0, r4
 8009df4:	f000 fce6 	bl	800a7c4 <__lshift>
 8009df8:	4606      	mov	r6, r0
 8009dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d072      	beq.n	8009ee6 <_dtoa_r+0x926>
 8009e00:	4631      	mov	r1, r6
 8009e02:	4650      	mov	r0, sl
 8009e04:	f000 fd4a 	bl	800a89c <__mcmp>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	da6c      	bge.n	8009ee6 <_dtoa_r+0x926>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4651      	mov	r1, sl
 8009e10:	220a      	movs	r2, #10
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 fb28 	bl	800a468 <__multadd>
 8009e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e1e:	4682      	mov	sl, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 81b0 	beq.w	800a186 <_dtoa_r+0xbc6>
 8009e26:	2300      	movs	r3, #0
 8009e28:	4639      	mov	r1, r7
 8009e2a:	220a      	movs	r2, #10
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fb1b 	bl	800a468 <__multadd>
 8009e32:	9b01      	ldr	r3, [sp, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	4607      	mov	r7, r0
 8009e38:	f300 8096 	bgt.w	8009f68 <_dtoa_r+0x9a8>
 8009e3c:	9b07      	ldr	r3, [sp, #28]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	dc59      	bgt.n	8009ef6 <_dtoa_r+0x936>
 8009e42:	e091      	b.n	8009f68 <_dtoa_r+0x9a8>
 8009e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e4a:	e758      	b.n	8009cfe <_dtoa_r+0x73e>
 8009e4c:	9b04      	ldr	r3, [sp, #16]
 8009e4e:	1e5e      	subs	r6, r3, #1
 8009e50:	9b08      	ldr	r3, [sp, #32]
 8009e52:	42b3      	cmp	r3, r6
 8009e54:	bfbf      	itttt	lt
 8009e56:	9b08      	ldrlt	r3, [sp, #32]
 8009e58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009e5a:	9608      	strlt	r6, [sp, #32]
 8009e5c:	1af3      	sublt	r3, r6, r3
 8009e5e:	bfb4      	ite	lt
 8009e60:	18d2      	addlt	r2, r2, r3
 8009e62:	1b9e      	subge	r6, r3, r6
 8009e64:	9b04      	ldr	r3, [sp, #16]
 8009e66:	bfbc      	itt	lt
 8009e68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009e6a:	2600      	movlt	r6, #0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	bfb7      	itett	lt
 8009e70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009e74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009e78:	1a9d      	sublt	r5, r3, r2
 8009e7a:	2300      	movlt	r3, #0
 8009e7c:	e741      	b.n	8009d02 <_dtoa_r+0x742>
 8009e7e:	9e08      	ldr	r6, [sp, #32]
 8009e80:	9d05      	ldr	r5, [sp, #20]
 8009e82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e84:	e748      	b.n	8009d18 <_dtoa_r+0x758>
 8009e86:	9a08      	ldr	r2, [sp, #32]
 8009e88:	e770      	b.n	8009d6c <_dtoa_r+0x7ac>
 8009e8a:	9b07      	ldr	r3, [sp, #28]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	dc19      	bgt.n	8009ec4 <_dtoa_r+0x904>
 8009e90:	9b02      	ldr	r3, [sp, #8]
 8009e92:	b9bb      	cbnz	r3, 8009ec4 <_dtoa_r+0x904>
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e9a:	b99b      	cbnz	r3, 8009ec4 <_dtoa_r+0x904>
 8009e9c:	9b03      	ldr	r3, [sp, #12]
 8009e9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ea2:	0d1b      	lsrs	r3, r3, #20
 8009ea4:	051b      	lsls	r3, r3, #20
 8009ea6:	b183      	cbz	r3, 8009eca <_dtoa_r+0x90a>
 8009ea8:	9b05      	ldr	r3, [sp, #20]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	9305      	str	r3, [sp, #20]
 8009eae:	9b06      	ldr	r3, [sp, #24]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	9306      	str	r3, [sp, #24]
 8009eb4:	f04f 0801 	mov.w	r8, #1
 8009eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f47f af6f 	bne.w	8009d9e <_dtoa_r+0x7de>
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	e774      	b.n	8009dae <_dtoa_r+0x7ee>
 8009ec4:	f04f 0800 	mov.w	r8, #0
 8009ec8:	e7f6      	b.n	8009eb8 <_dtoa_r+0x8f8>
 8009eca:	4698      	mov	r8, r3
 8009ecc:	e7f4      	b.n	8009eb8 <_dtoa_r+0x8f8>
 8009ece:	d082      	beq.n	8009dd6 <_dtoa_r+0x816>
 8009ed0:	9a05      	ldr	r2, [sp, #20]
 8009ed2:	331c      	adds	r3, #28
 8009ed4:	441a      	add	r2, r3
 8009ed6:	9205      	str	r2, [sp, #20]
 8009ed8:	9a06      	ldr	r2, [sp, #24]
 8009eda:	441a      	add	r2, r3
 8009edc:	441d      	add	r5, r3
 8009ede:	9206      	str	r2, [sp, #24]
 8009ee0:	e779      	b.n	8009dd6 <_dtoa_r+0x816>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	e7f4      	b.n	8009ed0 <_dtoa_r+0x910>
 8009ee6:	9b04      	ldr	r3, [sp, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	dc37      	bgt.n	8009f5c <_dtoa_r+0x99c>
 8009eec:	9b07      	ldr	r3, [sp, #28]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	dd34      	ble.n	8009f5c <_dtoa_r+0x99c>
 8009ef2:	9b04      	ldr	r3, [sp, #16]
 8009ef4:	9301      	str	r3, [sp, #4]
 8009ef6:	9b01      	ldr	r3, [sp, #4]
 8009ef8:	b963      	cbnz	r3, 8009f14 <_dtoa_r+0x954>
 8009efa:	4631      	mov	r1, r6
 8009efc:	2205      	movs	r2, #5
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 fab2 	bl	800a468 <__multadd>
 8009f04:	4601      	mov	r1, r0
 8009f06:	4606      	mov	r6, r0
 8009f08:	4650      	mov	r0, sl
 8009f0a:	f000 fcc7 	bl	800a89c <__mcmp>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f73f adbb 	bgt.w	8009a8a <_dtoa_r+0x4ca>
 8009f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f16:	9d00      	ldr	r5, [sp, #0]
 8009f18:	ea6f 0b03 	mvn.w	fp, r3
 8009f1c:	f04f 0800 	mov.w	r8, #0
 8009f20:	4631      	mov	r1, r6
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 fa7e 	bl	800a424 <_Bfree>
 8009f28:	2f00      	cmp	r7, #0
 8009f2a:	f43f aeab 	beq.w	8009c84 <_dtoa_r+0x6c4>
 8009f2e:	f1b8 0f00 	cmp.w	r8, #0
 8009f32:	d005      	beq.n	8009f40 <_dtoa_r+0x980>
 8009f34:	45b8      	cmp	r8, r7
 8009f36:	d003      	beq.n	8009f40 <_dtoa_r+0x980>
 8009f38:	4641      	mov	r1, r8
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fa72 	bl	800a424 <_Bfree>
 8009f40:	4639      	mov	r1, r7
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 fa6e 	bl	800a424 <_Bfree>
 8009f48:	e69c      	b.n	8009c84 <_dtoa_r+0x6c4>
 8009f4a:	2600      	movs	r6, #0
 8009f4c:	4637      	mov	r7, r6
 8009f4e:	e7e1      	b.n	8009f14 <_dtoa_r+0x954>
 8009f50:	46bb      	mov	fp, r7
 8009f52:	4637      	mov	r7, r6
 8009f54:	e599      	b.n	8009a8a <_dtoa_r+0x4ca>
 8009f56:	bf00      	nop
 8009f58:	40240000 	.word	0x40240000
 8009f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 80c8 	beq.w	800a0f4 <_dtoa_r+0xb34>
 8009f64:	9b04      	ldr	r3, [sp, #16]
 8009f66:	9301      	str	r3, [sp, #4]
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	dd05      	ble.n	8009f78 <_dtoa_r+0x9b8>
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	462a      	mov	r2, r5
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 fc27 	bl	800a7c4 <__lshift>
 8009f76:	4607      	mov	r7, r0
 8009f78:	f1b8 0f00 	cmp.w	r8, #0
 8009f7c:	d05b      	beq.n	800a036 <_dtoa_r+0xa76>
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 fa0f 	bl	800a3a4 <_Balloc>
 8009f86:	4605      	mov	r5, r0
 8009f88:	b928      	cbnz	r0, 8009f96 <_dtoa_r+0x9d6>
 8009f8a:	4b83      	ldr	r3, [pc, #524]	; (800a198 <_dtoa_r+0xbd8>)
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009f92:	f7ff bb2e 	b.w	80095f2 <_dtoa_r+0x32>
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	3202      	adds	r2, #2
 8009f9a:	0092      	lsls	r2, r2, #2
 8009f9c:	f107 010c 	add.w	r1, r7, #12
 8009fa0:	300c      	adds	r0, #12
 8009fa2:	f001 f835 	bl	800b010 <memcpy>
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	4629      	mov	r1, r5
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 fc0a 	bl	800a7c4 <__lshift>
 8009fb0:	9b00      	ldr	r3, [sp, #0]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	9304      	str	r3, [sp, #16]
 8009fb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fba:	4413      	add	r3, r2
 8009fbc:	9308      	str	r3, [sp, #32]
 8009fbe:	9b02      	ldr	r3, [sp, #8]
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	46b8      	mov	r8, r7
 8009fc6:	9306      	str	r3, [sp, #24]
 8009fc8:	4607      	mov	r7, r0
 8009fca:	9b04      	ldr	r3, [sp, #16]
 8009fcc:	4631      	mov	r1, r6
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	f7ff fa69 	bl	80094aa <quorem>
 8009fd8:	4641      	mov	r1, r8
 8009fda:	9002      	str	r0, [sp, #8]
 8009fdc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	f000 fc5b 	bl	800a89c <__mcmp>
 8009fe6:	463a      	mov	r2, r7
 8009fe8:	9005      	str	r0, [sp, #20]
 8009fea:	4631      	mov	r1, r6
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 fc71 	bl	800a8d4 <__mdiff>
 8009ff2:	68c2      	ldr	r2, [r0, #12]
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	bb02      	cbnz	r2, 800a03a <_dtoa_r+0xa7a>
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	4650      	mov	r0, sl
 8009ffc:	f000 fc4e 	bl	800a89c <__mcmp>
 800a000:	4602      	mov	r2, r0
 800a002:	4629      	mov	r1, r5
 800a004:	4620      	mov	r0, r4
 800a006:	9209      	str	r2, [sp, #36]	; 0x24
 800a008:	f000 fa0c 	bl	800a424 <_Bfree>
 800a00c:	9b07      	ldr	r3, [sp, #28]
 800a00e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a010:	9d04      	ldr	r5, [sp, #16]
 800a012:	ea43 0102 	orr.w	r1, r3, r2
 800a016:	9b06      	ldr	r3, [sp, #24]
 800a018:	4319      	orrs	r1, r3
 800a01a:	d110      	bne.n	800a03e <_dtoa_r+0xa7e>
 800a01c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a020:	d029      	beq.n	800a076 <_dtoa_r+0xab6>
 800a022:	9b05      	ldr	r3, [sp, #20]
 800a024:	2b00      	cmp	r3, #0
 800a026:	dd02      	ble.n	800a02e <_dtoa_r+0xa6e>
 800a028:	9b02      	ldr	r3, [sp, #8]
 800a02a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a02e:	9b01      	ldr	r3, [sp, #4]
 800a030:	f883 9000 	strb.w	r9, [r3]
 800a034:	e774      	b.n	8009f20 <_dtoa_r+0x960>
 800a036:	4638      	mov	r0, r7
 800a038:	e7ba      	b.n	8009fb0 <_dtoa_r+0x9f0>
 800a03a:	2201      	movs	r2, #1
 800a03c:	e7e1      	b.n	800a002 <_dtoa_r+0xa42>
 800a03e:	9b05      	ldr	r3, [sp, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	db04      	blt.n	800a04e <_dtoa_r+0xa8e>
 800a044:	9907      	ldr	r1, [sp, #28]
 800a046:	430b      	orrs	r3, r1
 800a048:	9906      	ldr	r1, [sp, #24]
 800a04a:	430b      	orrs	r3, r1
 800a04c:	d120      	bne.n	800a090 <_dtoa_r+0xad0>
 800a04e:	2a00      	cmp	r2, #0
 800a050:	dded      	ble.n	800a02e <_dtoa_r+0xa6e>
 800a052:	4651      	mov	r1, sl
 800a054:	2201      	movs	r2, #1
 800a056:	4620      	mov	r0, r4
 800a058:	f000 fbb4 	bl	800a7c4 <__lshift>
 800a05c:	4631      	mov	r1, r6
 800a05e:	4682      	mov	sl, r0
 800a060:	f000 fc1c 	bl	800a89c <__mcmp>
 800a064:	2800      	cmp	r0, #0
 800a066:	dc03      	bgt.n	800a070 <_dtoa_r+0xab0>
 800a068:	d1e1      	bne.n	800a02e <_dtoa_r+0xa6e>
 800a06a:	f019 0f01 	tst.w	r9, #1
 800a06e:	d0de      	beq.n	800a02e <_dtoa_r+0xa6e>
 800a070:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a074:	d1d8      	bne.n	800a028 <_dtoa_r+0xa68>
 800a076:	9a01      	ldr	r2, [sp, #4]
 800a078:	2339      	movs	r3, #57	; 0x39
 800a07a:	7013      	strb	r3, [r2, #0]
 800a07c:	462b      	mov	r3, r5
 800a07e:	461d      	mov	r5, r3
 800a080:	3b01      	subs	r3, #1
 800a082:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a086:	2a39      	cmp	r2, #57	; 0x39
 800a088:	d06c      	beq.n	800a164 <_dtoa_r+0xba4>
 800a08a:	3201      	adds	r2, #1
 800a08c:	701a      	strb	r2, [r3, #0]
 800a08e:	e747      	b.n	8009f20 <_dtoa_r+0x960>
 800a090:	2a00      	cmp	r2, #0
 800a092:	dd07      	ble.n	800a0a4 <_dtoa_r+0xae4>
 800a094:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a098:	d0ed      	beq.n	800a076 <_dtoa_r+0xab6>
 800a09a:	9a01      	ldr	r2, [sp, #4]
 800a09c:	f109 0301 	add.w	r3, r9, #1
 800a0a0:	7013      	strb	r3, [r2, #0]
 800a0a2:	e73d      	b.n	8009f20 <_dtoa_r+0x960>
 800a0a4:	9b04      	ldr	r3, [sp, #16]
 800a0a6:	9a08      	ldr	r2, [sp, #32]
 800a0a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d043      	beq.n	800a138 <_dtoa_r+0xb78>
 800a0b0:	4651      	mov	r1, sl
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	220a      	movs	r2, #10
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f000 f9d6 	bl	800a468 <__multadd>
 800a0bc:	45b8      	cmp	r8, r7
 800a0be:	4682      	mov	sl, r0
 800a0c0:	f04f 0300 	mov.w	r3, #0
 800a0c4:	f04f 020a 	mov.w	r2, #10
 800a0c8:	4641      	mov	r1, r8
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	d107      	bne.n	800a0de <_dtoa_r+0xb1e>
 800a0ce:	f000 f9cb 	bl	800a468 <__multadd>
 800a0d2:	4680      	mov	r8, r0
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	9b04      	ldr	r3, [sp, #16]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	e775      	b.n	8009fca <_dtoa_r+0xa0a>
 800a0de:	f000 f9c3 	bl	800a468 <__multadd>
 800a0e2:	4639      	mov	r1, r7
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	220a      	movs	r2, #10
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f000 f9bc 	bl	800a468 <__multadd>
 800a0f0:	4607      	mov	r7, r0
 800a0f2:	e7f0      	b.n	800a0d6 <_dtoa_r+0xb16>
 800a0f4:	9b04      	ldr	r3, [sp, #16]
 800a0f6:	9301      	str	r3, [sp, #4]
 800a0f8:	9d00      	ldr	r5, [sp, #0]
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4650      	mov	r0, sl
 800a0fe:	f7ff f9d4 	bl	80094aa <quorem>
 800a102:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a106:	9b00      	ldr	r3, [sp, #0]
 800a108:	f805 9b01 	strb.w	r9, [r5], #1
 800a10c:	1aea      	subs	r2, r5, r3
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	4293      	cmp	r3, r2
 800a112:	dd07      	ble.n	800a124 <_dtoa_r+0xb64>
 800a114:	4651      	mov	r1, sl
 800a116:	2300      	movs	r3, #0
 800a118:	220a      	movs	r2, #10
 800a11a:	4620      	mov	r0, r4
 800a11c:	f000 f9a4 	bl	800a468 <__multadd>
 800a120:	4682      	mov	sl, r0
 800a122:	e7ea      	b.n	800a0fa <_dtoa_r+0xb3a>
 800a124:	9b01      	ldr	r3, [sp, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	bfc8      	it	gt
 800a12a:	461d      	movgt	r5, r3
 800a12c:	9b00      	ldr	r3, [sp, #0]
 800a12e:	bfd8      	it	le
 800a130:	2501      	movle	r5, #1
 800a132:	441d      	add	r5, r3
 800a134:	f04f 0800 	mov.w	r8, #0
 800a138:	4651      	mov	r1, sl
 800a13a:	2201      	movs	r2, #1
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 fb41 	bl	800a7c4 <__lshift>
 800a142:	4631      	mov	r1, r6
 800a144:	4682      	mov	sl, r0
 800a146:	f000 fba9 	bl	800a89c <__mcmp>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	dc96      	bgt.n	800a07c <_dtoa_r+0xabc>
 800a14e:	d102      	bne.n	800a156 <_dtoa_r+0xb96>
 800a150:	f019 0f01 	tst.w	r9, #1
 800a154:	d192      	bne.n	800a07c <_dtoa_r+0xabc>
 800a156:	462b      	mov	r3, r5
 800a158:	461d      	mov	r5, r3
 800a15a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a15e:	2a30      	cmp	r2, #48	; 0x30
 800a160:	d0fa      	beq.n	800a158 <_dtoa_r+0xb98>
 800a162:	e6dd      	b.n	8009f20 <_dtoa_r+0x960>
 800a164:	9a00      	ldr	r2, [sp, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d189      	bne.n	800a07e <_dtoa_r+0xabe>
 800a16a:	f10b 0b01 	add.w	fp, fp, #1
 800a16e:	2331      	movs	r3, #49	; 0x31
 800a170:	e796      	b.n	800a0a0 <_dtoa_r+0xae0>
 800a172:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <_dtoa_r+0xbdc>)
 800a174:	f7ff ba99 	b.w	80096aa <_dtoa_r+0xea>
 800a178:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f47f aa6d 	bne.w	800965a <_dtoa_r+0x9a>
 800a180:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <_dtoa_r+0xbe0>)
 800a182:	f7ff ba92 	b.w	80096aa <_dtoa_r+0xea>
 800a186:	9b01      	ldr	r3, [sp, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	dcb5      	bgt.n	800a0f8 <_dtoa_r+0xb38>
 800a18c:	9b07      	ldr	r3, [sp, #28]
 800a18e:	2b02      	cmp	r3, #2
 800a190:	f73f aeb1 	bgt.w	8009ef6 <_dtoa_r+0x936>
 800a194:	e7b0      	b.n	800a0f8 <_dtoa_r+0xb38>
 800a196:	bf00      	nop
 800a198:	0800b449 	.word	0x0800b449
 800a19c:	0800b3a9 	.word	0x0800b3a9
 800a1a0:	0800b3cd 	.word	0x0800b3cd

0800a1a4 <_free_r>:
 800a1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1a6:	2900      	cmp	r1, #0
 800a1a8:	d044      	beq.n	800a234 <_free_r+0x90>
 800a1aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ae:	9001      	str	r0, [sp, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1b6:	bfb8      	it	lt
 800a1b8:	18e4      	addlt	r4, r4, r3
 800a1ba:	f000 f8e7 	bl	800a38c <__malloc_lock>
 800a1be:	4a1e      	ldr	r2, [pc, #120]	; (800a238 <_free_r+0x94>)
 800a1c0:	9801      	ldr	r0, [sp, #4]
 800a1c2:	6813      	ldr	r3, [r2, #0]
 800a1c4:	b933      	cbnz	r3, 800a1d4 <_free_r+0x30>
 800a1c6:	6063      	str	r3, [r4, #4]
 800a1c8:	6014      	str	r4, [r2, #0]
 800a1ca:	b003      	add	sp, #12
 800a1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1d0:	f000 b8e2 	b.w	800a398 <__malloc_unlock>
 800a1d4:	42a3      	cmp	r3, r4
 800a1d6:	d908      	bls.n	800a1ea <_free_r+0x46>
 800a1d8:	6825      	ldr	r5, [r4, #0]
 800a1da:	1961      	adds	r1, r4, r5
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	bf01      	itttt	eq
 800a1e0:	6819      	ldreq	r1, [r3, #0]
 800a1e2:	685b      	ldreq	r3, [r3, #4]
 800a1e4:	1949      	addeq	r1, r1, r5
 800a1e6:	6021      	streq	r1, [r4, #0]
 800a1e8:	e7ed      	b.n	800a1c6 <_free_r+0x22>
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	b10b      	cbz	r3, 800a1f4 <_free_r+0x50>
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	d9fa      	bls.n	800a1ea <_free_r+0x46>
 800a1f4:	6811      	ldr	r1, [r2, #0]
 800a1f6:	1855      	adds	r5, r2, r1
 800a1f8:	42a5      	cmp	r5, r4
 800a1fa:	d10b      	bne.n	800a214 <_free_r+0x70>
 800a1fc:	6824      	ldr	r4, [r4, #0]
 800a1fe:	4421      	add	r1, r4
 800a200:	1854      	adds	r4, r2, r1
 800a202:	42a3      	cmp	r3, r4
 800a204:	6011      	str	r1, [r2, #0]
 800a206:	d1e0      	bne.n	800a1ca <_free_r+0x26>
 800a208:	681c      	ldr	r4, [r3, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	6053      	str	r3, [r2, #4]
 800a20e:	440c      	add	r4, r1
 800a210:	6014      	str	r4, [r2, #0]
 800a212:	e7da      	b.n	800a1ca <_free_r+0x26>
 800a214:	d902      	bls.n	800a21c <_free_r+0x78>
 800a216:	230c      	movs	r3, #12
 800a218:	6003      	str	r3, [r0, #0]
 800a21a:	e7d6      	b.n	800a1ca <_free_r+0x26>
 800a21c:	6825      	ldr	r5, [r4, #0]
 800a21e:	1961      	adds	r1, r4, r5
 800a220:	428b      	cmp	r3, r1
 800a222:	bf04      	itt	eq
 800a224:	6819      	ldreq	r1, [r3, #0]
 800a226:	685b      	ldreq	r3, [r3, #4]
 800a228:	6063      	str	r3, [r4, #4]
 800a22a:	bf04      	itt	eq
 800a22c:	1949      	addeq	r1, r1, r5
 800a22e:	6021      	streq	r1, [r4, #0]
 800a230:	6054      	str	r4, [r2, #4]
 800a232:	e7ca      	b.n	800a1ca <_free_r+0x26>
 800a234:	b003      	add	sp, #12
 800a236:	bd30      	pop	{r4, r5, pc}
 800a238:	2000067c 	.word	0x2000067c

0800a23c <malloc>:
 800a23c:	4b02      	ldr	r3, [pc, #8]	; (800a248 <malloc+0xc>)
 800a23e:	4601      	mov	r1, r0
 800a240:	6818      	ldr	r0, [r3, #0]
 800a242:	f000 b823 	b.w	800a28c <_malloc_r>
 800a246:	bf00      	nop
 800a248:	20000064 	.word	0x20000064

0800a24c <sbrk_aligned>:
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	4e0e      	ldr	r6, [pc, #56]	; (800a288 <sbrk_aligned+0x3c>)
 800a250:	460c      	mov	r4, r1
 800a252:	6831      	ldr	r1, [r6, #0]
 800a254:	4605      	mov	r5, r0
 800a256:	b911      	cbnz	r1, 800a25e <sbrk_aligned+0x12>
 800a258:	f000 feca 	bl	800aff0 <_sbrk_r>
 800a25c:	6030      	str	r0, [r6, #0]
 800a25e:	4621      	mov	r1, r4
 800a260:	4628      	mov	r0, r5
 800a262:	f000 fec5 	bl	800aff0 <_sbrk_r>
 800a266:	1c43      	adds	r3, r0, #1
 800a268:	d00a      	beq.n	800a280 <sbrk_aligned+0x34>
 800a26a:	1cc4      	adds	r4, r0, #3
 800a26c:	f024 0403 	bic.w	r4, r4, #3
 800a270:	42a0      	cmp	r0, r4
 800a272:	d007      	beq.n	800a284 <sbrk_aligned+0x38>
 800a274:	1a21      	subs	r1, r4, r0
 800a276:	4628      	mov	r0, r5
 800a278:	f000 feba 	bl	800aff0 <_sbrk_r>
 800a27c:	3001      	adds	r0, #1
 800a27e:	d101      	bne.n	800a284 <sbrk_aligned+0x38>
 800a280:	f04f 34ff 	mov.w	r4, #4294967295
 800a284:	4620      	mov	r0, r4
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	20000680 	.word	0x20000680

0800a28c <_malloc_r>:
 800a28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a290:	1ccd      	adds	r5, r1, #3
 800a292:	f025 0503 	bic.w	r5, r5, #3
 800a296:	3508      	adds	r5, #8
 800a298:	2d0c      	cmp	r5, #12
 800a29a:	bf38      	it	cc
 800a29c:	250c      	movcc	r5, #12
 800a29e:	2d00      	cmp	r5, #0
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	db01      	blt.n	800a2a8 <_malloc_r+0x1c>
 800a2a4:	42a9      	cmp	r1, r5
 800a2a6:	d905      	bls.n	800a2b4 <_malloc_r+0x28>
 800a2a8:	230c      	movs	r3, #12
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	2600      	movs	r6, #0
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a388 <_malloc_r+0xfc>
 800a2b8:	f000 f868 	bl	800a38c <__malloc_lock>
 800a2bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a2c0:	461c      	mov	r4, r3
 800a2c2:	bb5c      	cbnz	r4, 800a31c <_malloc_r+0x90>
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f7ff ffc0 	bl	800a24c <sbrk_aligned>
 800a2cc:	1c43      	adds	r3, r0, #1
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	d155      	bne.n	800a37e <_malloc_r+0xf2>
 800a2d2:	f8d8 4000 	ldr.w	r4, [r8]
 800a2d6:	4626      	mov	r6, r4
 800a2d8:	2e00      	cmp	r6, #0
 800a2da:	d145      	bne.n	800a368 <_malloc_r+0xdc>
 800a2dc:	2c00      	cmp	r4, #0
 800a2de:	d048      	beq.n	800a372 <_malloc_r+0xe6>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	eb04 0903 	add.w	r9, r4, r3
 800a2ea:	f000 fe81 	bl	800aff0 <_sbrk_r>
 800a2ee:	4581      	cmp	r9, r0
 800a2f0:	d13f      	bne.n	800a372 <_malloc_r+0xe6>
 800a2f2:	6821      	ldr	r1, [r4, #0]
 800a2f4:	1a6d      	subs	r5, r5, r1
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f7ff ffa7 	bl	800a24c <sbrk_aligned>
 800a2fe:	3001      	adds	r0, #1
 800a300:	d037      	beq.n	800a372 <_malloc_r+0xe6>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	442b      	add	r3, r5
 800a306:	6023      	str	r3, [r4, #0]
 800a308:	f8d8 3000 	ldr.w	r3, [r8]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d038      	beq.n	800a382 <_malloc_r+0xf6>
 800a310:	685a      	ldr	r2, [r3, #4]
 800a312:	42a2      	cmp	r2, r4
 800a314:	d12b      	bne.n	800a36e <_malloc_r+0xe2>
 800a316:	2200      	movs	r2, #0
 800a318:	605a      	str	r2, [r3, #4]
 800a31a:	e00f      	b.n	800a33c <_malloc_r+0xb0>
 800a31c:	6822      	ldr	r2, [r4, #0]
 800a31e:	1b52      	subs	r2, r2, r5
 800a320:	d41f      	bmi.n	800a362 <_malloc_r+0xd6>
 800a322:	2a0b      	cmp	r2, #11
 800a324:	d917      	bls.n	800a356 <_malloc_r+0xca>
 800a326:	1961      	adds	r1, r4, r5
 800a328:	42a3      	cmp	r3, r4
 800a32a:	6025      	str	r5, [r4, #0]
 800a32c:	bf18      	it	ne
 800a32e:	6059      	strne	r1, [r3, #4]
 800a330:	6863      	ldr	r3, [r4, #4]
 800a332:	bf08      	it	eq
 800a334:	f8c8 1000 	streq.w	r1, [r8]
 800a338:	5162      	str	r2, [r4, r5]
 800a33a:	604b      	str	r3, [r1, #4]
 800a33c:	4638      	mov	r0, r7
 800a33e:	f104 060b 	add.w	r6, r4, #11
 800a342:	f000 f829 	bl	800a398 <__malloc_unlock>
 800a346:	f026 0607 	bic.w	r6, r6, #7
 800a34a:	1d23      	adds	r3, r4, #4
 800a34c:	1af2      	subs	r2, r6, r3
 800a34e:	d0ae      	beq.n	800a2ae <_malloc_r+0x22>
 800a350:	1b9b      	subs	r3, r3, r6
 800a352:	50a3      	str	r3, [r4, r2]
 800a354:	e7ab      	b.n	800a2ae <_malloc_r+0x22>
 800a356:	42a3      	cmp	r3, r4
 800a358:	6862      	ldr	r2, [r4, #4]
 800a35a:	d1dd      	bne.n	800a318 <_malloc_r+0x8c>
 800a35c:	f8c8 2000 	str.w	r2, [r8]
 800a360:	e7ec      	b.n	800a33c <_malloc_r+0xb0>
 800a362:	4623      	mov	r3, r4
 800a364:	6864      	ldr	r4, [r4, #4]
 800a366:	e7ac      	b.n	800a2c2 <_malloc_r+0x36>
 800a368:	4634      	mov	r4, r6
 800a36a:	6876      	ldr	r6, [r6, #4]
 800a36c:	e7b4      	b.n	800a2d8 <_malloc_r+0x4c>
 800a36e:	4613      	mov	r3, r2
 800a370:	e7cc      	b.n	800a30c <_malloc_r+0x80>
 800a372:	230c      	movs	r3, #12
 800a374:	603b      	str	r3, [r7, #0]
 800a376:	4638      	mov	r0, r7
 800a378:	f000 f80e 	bl	800a398 <__malloc_unlock>
 800a37c:	e797      	b.n	800a2ae <_malloc_r+0x22>
 800a37e:	6025      	str	r5, [r4, #0]
 800a380:	e7dc      	b.n	800a33c <_malloc_r+0xb0>
 800a382:	605b      	str	r3, [r3, #4]
 800a384:	deff      	udf	#255	; 0xff
 800a386:	bf00      	nop
 800a388:	2000067c 	.word	0x2000067c

0800a38c <__malloc_lock>:
 800a38c:	4801      	ldr	r0, [pc, #4]	; (800a394 <__malloc_lock+0x8>)
 800a38e:	f7ff b88a 	b.w	80094a6 <__retarget_lock_acquire_recursive>
 800a392:	bf00      	nop
 800a394:	20000678 	.word	0x20000678

0800a398 <__malloc_unlock>:
 800a398:	4801      	ldr	r0, [pc, #4]	; (800a3a0 <__malloc_unlock+0x8>)
 800a39a:	f7ff b885 	b.w	80094a8 <__retarget_lock_release_recursive>
 800a39e:	bf00      	nop
 800a3a0:	20000678 	.word	0x20000678

0800a3a4 <_Balloc>:
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	69c6      	ldr	r6, [r0, #28]
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	b976      	cbnz	r6, 800a3cc <_Balloc+0x28>
 800a3ae:	2010      	movs	r0, #16
 800a3b0:	f7ff ff44 	bl	800a23c <malloc>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	61e0      	str	r0, [r4, #28]
 800a3b8:	b920      	cbnz	r0, 800a3c4 <_Balloc+0x20>
 800a3ba:	4b18      	ldr	r3, [pc, #96]	; (800a41c <_Balloc+0x78>)
 800a3bc:	4818      	ldr	r0, [pc, #96]	; (800a420 <_Balloc+0x7c>)
 800a3be:	216b      	movs	r1, #107	; 0x6b
 800a3c0:	f000 fe34 	bl	800b02c <__assert_func>
 800a3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3c8:	6006      	str	r6, [r0, #0]
 800a3ca:	60c6      	str	r6, [r0, #12]
 800a3cc:	69e6      	ldr	r6, [r4, #28]
 800a3ce:	68f3      	ldr	r3, [r6, #12]
 800a3d0:	b183      	cbz	r3, 800a3f4 <_Balloc+0x50>
 800a3d2:	69e3      	ldr	r3, [r4, #28]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3da:	b9b8      	cbnz	r0, 800a40c <_Balloc+0x68>
 800a3dc:	2101      	movs	r1, #1
 800a3de:	fa01 f605 	lsl.w	r6, r1, r5
 800a3e2:	1d72      	adds	r2, r6, #5
 800a3e4:	0092      	lsls	r2, r2, #2
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f000 fe3e 	bl	800b068 <_calloc_r>
 800a3ec:	b160      	cbz	r0, 800a408 <_Balloc+0x64>
 800a3ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3f2:	e00e      	b.n	800a412 <_Balloc+0x6e>
 800a3f4:	2221      	movs	r2, #33	; 0x21
 800a3f6:	2104      	movs	r1, #4
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f000 fe35 	bl	800b068 <_calloc_r>
 800a3fe:	69e3      	ldr	r3, [r4, #28]
 800a400:	60f0      	str	r0, [r6, #12]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1e4      	bne.n	800a3d2 <_Balloc+0x2e>
 800a408:	2000      	movs	r0, #0
 800a40a:	bd70      	pop	{r4, r5, r6, pc}
 800a40c:	6802      	ldr	r2, [r0, #0]
 800a40e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a412:	2300      	movs	r3, #0
 800a414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a418:	e7f7      	b.n	800a40a <_Balloc+0x66>
 800a41a:	bf00      	nop
 800a41c:	0800b3da 	.word	0x0800b3da
 800a420:	0800b45a 	.word	0x0800b45a

0800a424 <_Bfree>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	69c6      	ldr	r6, [r0, #28]
 800a428:	4605      	mov	r5, r0
 800a42a:	460c      	mov	r4, r1
 800a42c:	b976      	cbnz	r6, 800a44c <_Bfree+0x28>
 800a42e:	2010      	movs	r0, #16
 800a430:	f7ff ff04 	bl	800a23c <malloc>
 800a434:	4602      	mov	r2, r0
 800a436:	61e8      	str	r0, [r5, #28]
 800a438:	b920      	cbnz	r0, 800a444 <_Bfree+0x20>
 800a43a:	4b09      	ldr	r3, [pc, #36]	; (800a460 <_Bfree+0x3c>)
 800a43c:	4809      	ldr	r0, [pc, #36]	; (800a464 <_Bfree+0x40>)
 800a43e:	218f      	movs	r1, #143	; 0x8f
 800a440:	f000 fdf4 	bl	800b02c <__assert_func>
 800a444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a448:	6006      	str	r6, [r0, #0]
 800a44a:	60c6      	str	r6, [r0, #12]
 800a44c:	b13c      	cbz	r4, 800a45e <_Bfree+0x3a>
 800a44e:	69eb      	ldr	r3, [r5, #28]
 800a450:	6862      	ldr	r2, [r4, #4]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a458:	6021      	str	r1, [r4, #0]
 800a45a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a45e:	bd70      	pop	{r4, r5, r6, pc}
 800a460:	0800b3da 	.word	0x0800b3da
 800a464:	0800b45a 	.word	0x0800b45a

0800a468 <__multadd>:
 800a468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a46c:	690d      	ldr	r5, [r1, #16]
 800a46e:	4607      	mov	r7, r0
 800a470:	460c      	mov	r4, r1
 800a472:	461e      	mov	r6, r3
 800a474:	f101 0c14 	add.w	ip, r1, #20
 800a478:	2000      	movs	r0, #0
 800a47a:	f8dc 3000 	ldr.w	r3, [ip]
 800a47e:	b299      	uxth	r1, r3
 800a480:	fb02 6101 	mla	r1, r2, r1, r6
 800a484:	0c1e      	lsrs	r6, r3, #16
 800a486:	0c0b      	lsrs	r3, r1, #16
 800a488:	fb02 3306 	mla	r3, r2, r6, r3
 800a48c:	b289      	uxth	r1, r1
 800a48e:	3001      	adds	r0, #1
 800a490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a494:	4285      	cmp	r5, r0
 800a496:	f84c 1b04 	str.w	r1, [ip], #4
 800a49a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a49e:	dcec      	bgt.n	800a47a <__multadd+0x12>
 800a4a0:	b30e      	cbz	r6, 800a4e6 <__multadd+0x7e>
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	42ab      	cmp	r3, r5
 800a4a6:	dc19      	bgt.n	800a4dc <__multadd+0x74>
 800a4a8:	6861      	ldr	r1, [r4, #4]
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	3101      	adds	r1, #1
 800a4ae:	f7ff ff79 	bl	800a3a4 <_Balloc>
 800a4b2:	4680      	mov	r8, r0
 800a4b4:	b928      	cbnz	r0, 800a4c2 <__multadd+0x5a>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	4b0c      	ldr	r3, [pc, #48]	; (800a4ec <__multadd+0x84>)
 800a4ba:	480d      	ldr	r0, [pc, #52]	; (800a4f0 <__multadd+0x88>)
 800a4bc:	21ba      	movs	r1, #186	; 0xba
 800a4be:	f000 fdb5 	bl	800b02c <__assert_func>
 800a4c2:	6922      	ldr	r2, [r4, #16]
 800a4c4:	3202      	adds	r2, #2
 800a4c6:	f104 010c 	add.w	r1, r4, #12
 800a4ca:	0092      	lsls	r2, r2, #2
 800a4cc:	300c      	adds	r0, #12
 800a4ce:	f000 fd9f 	bl	800b010 <memcpy>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4638      	mov	r0, r7
 800a4d6:	f7ff ffa5 	bl	800a424 <_Bfree>
 800a4da:	4644      	mov	r4, r8
 800a4dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4e0:	3501      	adds	r5, #1
 800a4e2:	615e      	str	r6, [r3, #20]
 800a4e4:	6125      	str	r5, [r4, #16]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ec:	0800b449 	.word	0x0800b449
 800a4f0:	0800b45a 	.word	0x0800b45a

0800a4f4 <__hi0bits>:
 800a4f4:	0c03      	lsrs	r3, r0, #16
 800a4f6:	041b      	lsls	r3, r3, #16
 800a4f8:	b9d3      	cbnz	r3, 800a530 <__hi0bits+0x3c>
 800a4fa:	0400      	lsls	r0, r0, #16
 800a4fc:	2310      	movs	r3, #16
 800a4fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a502:	bf04      	itt	eq
 800a504:	0200      	lsleq	r0, r0, #8
 800a506:	3308      	addeq	r3, #8
 800a508:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a50c:	bf04      	itt	eq
 800a50e:	0100      	lsleq	r0, r0, #4
 800a510:	3304      	addeq	r3, #4
 800a512:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a516:	bf04      	itt	eq
 800a518:	0080      	lsleq	r0, r0, #2
 800a51a:	3302      	addeq	r3, #2
 800a51c:	2800      	cmp	r0, #0
 800a51e:	db05      	blt.n	800a52c <__hi0bits+0x38>
 800a520:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a524:	f103 0301 	add.w	r3, r3, #1
 800a528:	bf08      	it	eq
 800a52a:	2320      	moveq	r3, #32
 800a52c:	4618      	mov	r0, r3
 800a52e:	4770      	bx	lr
 800a530:	2300      	movs	r3, #0
 800a532:	e7e4      	b.n	800a4fe <__hi0bits+0xa>

0800a534 <__lo0bits>:
 800a534:	6803      	ldr	r3, [r0, #0]
 800a536:	f013 0207 	ands.w	r2, r3, #7
 800a53a:	d00c      	beq.n	800a556 <__lo0bits+0x22>
 800a53c:	07d9      	lsls	r1, r3, #31
 800a53e:	d422      	bmi.n	800a586 <__lo0bits+0x52>
 800a540:	079a      	lsls	r2, r3, #30
 800a542:	bf49      	itett	mi
 800a544:	085b      	lsrmi	r3, r3, #1
 800a546:	089b      	lsrpl	r3, r3, #2
 800a548:	6003      	strmi	r3, [r0, #0]
 800a54a:	2201      	movmi	r2, #1
 800a54c:	bf5c      	itt	pl
 800a54e:	6003      	strpl	r3, [r0, #0]
 800a550:	2202      	movpl	r2, #2
 800a552:	4610      	mov	r0, r2
 800a554:	4770      	bx	lr
 800a556:	b299      	uxth	r1, r3
 800a558:	b909      	cbnz	r1, 800a55e <__lo0bits+0x2a>
 800a55a:	0c1b      	lsrs	r3, r3, #16
 800a55c:	2210      	movs	r2, #16
 800a55e:	b2d9      	uxtb	r1, r3
 800a560:	b909      	cbnz	r1, 800a566 <__lo0bits+0x32>
 800a562:	3208      	adds	r2, #8
 800a564:	0a1b      	lsrs	r3, r3, #8
 800a566:	0719      	lsls	r1, r3, #28
 800a568:	bf04      	itt	eq
 800a56a:	091b      	lsreq	r3, r3, #4
 800a56c:	3204      	addeq	r2, #4
 800a56e:	0799      	lsls	r1, r3, #30
 800a570:	bf04      	itt	eq
 800a572:	089b      	lsreq	r3, r3, #2
 800a574:	3202      	addeq	r2, #2
 800a576:	07d9      	lsls	r1, r3, #31
 800a578:	d403      	bmi.n	800a582 <__lo0bits+0x4e>
 800a57a:	085b      	lsrs	r3, r3, #1
 800a57c:	f102 0201 	add.w	r2, r2, #1
 800a580:	d003      	beq.n	800a58a <__lo0bits+0x56>
 800a582:	6003      	str	r3, [r0, #0]
 800a584:	e7e5      	b.n	800a552 <__lo0bits+0x1e>
 800a586:	2200      	movs	r2, #0
 800a588:	e7e3      	b.n	800a552 <__lo0bits+0x1e>
 800a58a:	2220      	movs	r2, #32
 800a58c:	e7e1      	b.n	800a552 <__lo0bits+0x1e>
	...

0800a590 <__i2b>:
 800a590:	b510      	push	{r4, lr}
 800a592:	460c      	mov	r4, r1
 800a594:	2101      	movs	r1, #1
 800a596:	f7ff ff05 	bl	800a3a4 <_Balloc>
 800a59a:	4602      	mov	r2, r0
 800a59c:	b928      	cbnz	r0, 800a5aa <__i2b+0x1a>
 800a59e:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <__i2b+0x24>)
 800a5a0:	4805      	ldr	r0, [pc, #20]	; (800a5b8 <__i2b+0x28>)
 800a5a2:	f240 1145 	movw	r1, #325	; 0x145
 800a5a6:	f000 fd41 	bl	800b02c <__assert_func>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	6144      	str	r4, [r0, #20]
 800a5ae:	6103      	str	r3, [r0, #16]
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	bf00      	nop
 800a5b4:	0800b449 	.word	0x0800b449
 800a5b8:	0800b45a 	.word	0x0800b45a

0800a5bc <__multiply>:
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	4691      	mov	r9, r2
 800a5c2:	690a      	ldr	r2, [r1, #16]
 800a5c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	bfb8      	it	lt
 800a5cc:	460b      	movlt	r3, r1
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	bfbc      	itt	lt
 800a5d2:	464c      	movlt	r4, r9
 800a5d4:	4699      	movlt	r9, r3
 800a5d6:	6927      	ldr	r7, [r4, #16]
 800a5d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5dc:	68a3      	ldr	r3, [r4, #8]
 800a5de:	6861      	ldr	r1, [r4, #4]
 800a5e0:	eb07 060a 	add.w	r6, r7, sl
 800a5e4:	42b3      	cmp	r3, r6
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	bfb8      	it	lt
 800a5ea:	3101      	addlt	r1, #1
 800a5ec:	f7ff feda 	bl	800a3a4 <_Balloc>
 800a5f0:	b930      	cbnz	r0, 800a600 <__multiply+0x44>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	4b44      	ldr	r3, [pc, #272]	; (800a708 <__multiply+0x14c>)
 800a5f6:	4845      	ldr	r0, [pc, #276]	; (800a70c <__multiply+0x150>)
 800a5f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a5fc:	f000 fd16 	bl	800b02c <__assert_func>
 800a600:	f100 0514 	add.w	r5, r0, #20
 800a604:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a608:	462b      	mov	r3, r5
 800a60a:	2200      	movs	r2, #0
 800a60c:	4543      	cmp	r3, r8
 800a60e:	d321      	bcc.n	800a654 <__multiply+0x98>
 800a610:	f104 0314 	add.w	r3, r4, #20
 800a614:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a618:	f109 0314 	add.w	r3, r9, #20
 800a61c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a620:	9202      	str	r2, [sp, #8]
 800a622:	1b3a      	subs	r2, r7, r4
 800a624:	3a15      	subs	r2, #21
 800a626:	f022 0203 	bic.w	r2, r2, #3
 800a62a:	3204      	adds	r2, #4
 800a62c:	f104 0115 	add.w	r1, r4, #21
 800a630:	428f      	cmp	r7, r1
 800a632:	bf38      	it	cc
 800a634:	2204      	movcc	r2, #4
 800a636:	9201      	str	r2, [sp, #4]
 800a638:	9a02      	ldr	r2, [sp, #8]
 800a63a:	9303      	str	r3, [sp, #12]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d80c      	bhi.n	800a65a <__multiply+0x9e>
 800a640:	2e00      	cmp	r6, #0
 800a642:	dd03      	ble.n	800a64c <__multiply+0x90>
 800a644:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d05b      	beq.n	800a704 <__multiply+0x148>
 800a64c:	6106      	str	r6, [r0, #16]
 800a64e:	b005      	add	sp, #20
 800a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a654:	f843 2b04 	str.w	r2, [r3], #4
 800a658:	e7d8      	b.n	800a60c <__multiply+0x50>
 800a65a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a65e:	f1ba 0f00 	cmp.w	sl, #0
 800a662:	d024      	beq.n	800a6ae <__multiply+0xf2>
 800a664:	f104 0e14 	add.w	lr, r4, #20
 800a668:	46a9      	mov	r9, r5
 800a66a:	f04f 0c00 	mov.w	ip, #0
 800a66e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a672:	f8d9 1000 	ldr.w	r1, [r9]
 800a676:	fa1f fb82 	uxth.w	fp, r2
 800a67a:	b289      	uxth	r1, r1
 800a67c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a680:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a684:	f8d9 2000 	ldr.w	r2, [r9]
 800a688:	4461      	add	r1, ip
 800a68a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a68e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a692:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a696:	b289      	uxth	r1, r1
 800a698:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a69c:	4577      	cmp	r7, lr
 800a69e:	f849 1b04 	str.w	r1, [r9], #4
 800a6a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6a6:	d8e2      	bhi.n	800a66e <__multiply+0xb2>
 800a6a8:	9a01      	ldr	r2, [sp, #4]
 800a6aa:	f845 c002 	str.w	ip, [r5, r2]
 800a6ae:	9a03      	ldr	r2, [sp, #12]
 800a6b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	f1b9 0f00 	cmp.w	r9, #0
 800a6ba:	d021      	beq.n	800a700 <__multiply+0x144>
 800a6bc:	6829      	ldr	r1, [r5, #0]
 800a6be:	f104 0c14 	add.w	ip, r4, #20
 800a6c2:	46ae      	mov	lr, r5
 800a6c4:	f04f 0a00 	mov.w	sl, #0
 800a6c8:	f8bc b000 	ldrh.w	fp, [ip]
 800a6cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6d0:	fb09 220b 	mla	r2, r9, fp, r2
 800a6d4:	4452      	add	r2, sl
 800a6d6:	b289      	uxth	r1, r1
 800a6d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6dc:	f84e 1b04 	str.w	r1, [lr], #4
 800a6e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6e8:	f8be 1000 	ldrh.w	r1, [lr]
 800a6ec:	fb09 110a 	mla	r1, r9, sl, r1
 800a6f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a6f4:	4567      	cmp	r7, ip
 800a6f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6fa:	d8e5      	bhi.n	800a6c8 <__multiply+0x10c>
 800a6fc:	9a01      	ldr	r2, [sp, #4]
 800a6fe:	50a9      	str	r1, [r5, r2]
 800a700:	3504      	adds	r5, #4
 800a702:	e799      	b.n	800a638 <__multiply+0x7c>
 800a704:	3e01      	subs	r6, #1
 800a706:	e79b      	b.n	800a640 <__multiply+0x84>
 800a708:	0800b449 	.word	0x0800b449
 800a70c:	0800b45a 	.word	0x0800b45a

0800a710 <__pow5mult>:
 800a710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a714:	4615      	mov	r5, r2
 800a716:	f012 0203 	ands.w	r2, r2, #3
 800a71a:	4606      	mov	r6, r0
 800a71c:	460f      	mov	r7, r1
 800a71e:	d007      	beq.n	800a730 <__pow5mult+0x20>
 800a720:	4c25      	ldr	r4, [pc, #148]	; (800a7b8 <__pow5mult+0xa8>)
 800a722:	3a01      	subs	r2, #1
 800a724:	2300      	movs	r3, #0
 800a726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a72a:	f7ff fe9d 	bl	800a468 <__multadd>
 800a72e:	4607      	mov	r7, r0
 800a730:	10ad      	asrs	r5, r5, #2
 800a732:	d03d      	beq.n	800a7b0 <__pow5mult+0xa0>
 800a734:	69f4      	ldr	r4, [r6, #28]
 800a736:	b97c      	cbnz	r4, 800a758 <__pow5mult+0x48>
 800a738:	2010      	movs	r0, #16
 800a73a:	f7ff fd7f 	bl	800a23c <malloc>
 800a73e:	4602      	mov	r2, r0
 800a740:	61f0      	str	r0, [r6, #28]
 800a742:	b928      	cbnz	r0, 800a750 <__pow5mult+0x40>
 800a744:	4b1d      	ldr	r3, [pc, #116]	; (800a7bc <__pow5mult+0xac>)
 800a746:	481e      	ldr	r0, [pc, #120]	; (800a7c0 <__pow5mult+0xb0>)
 800a748:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a74c:	f000 fc6e 	bl	800b02c <__assert_func>
 800a750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a754:	6004      	str	r4, [r0, #0]
 800a756:	60c4      	str	r4, [r0, #12]
 800a758:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a75c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a760:	b94c      	cbnz	r4, 800a776 <__pow5mult+0x66>
 800a762:	f240 2171 	movw	r1, #625	; 0x271
 800a766:	4630      	mov	r0, r6
 800a768:	f7ff ff12 	bl	800a590 <__i2b>
 800a76c:	2300      	movs	r3, #0
 800a76e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a772:	4604      	mov	r4, r0
 800a774:	6003      	str	r3, [r0, #0]
 800a776:	f04f 0900 	mov.w	r9, #0
 800a77a:	07eb      	lsls	r3, r5, #31
 800a77c:	d50a      	bpl.n	800a794 <__pow5mult+0x84>
 800a77e:	4639      	mov	r1, r7
 800a780:	4622      	mov	r2, r4
 800a782:	4630      	mov	r0, r6
 800a784:	f7ff ff1a 	bl	800a5bc <__multiply>
 800a788:	4639      	mov	r1, r7
 800a78a:	4680      	mov	r8, r0
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7ff fe49 	bl	800a424 <_Bfree>
 800a792:	4647      	mov	r7, r8
 800a794:	106d      	asrs	r5, r5, #1
 800a796:	d00b      	beq.n	800a7b0 <__pow5mult+0xa0>
 800a798:	6820      	ldr	r0, [r4, #0]
 800a79a:	b938      	cbnz	r0, 800a7ac <__pow5mult+0x9c>
 800a79c:	4622      	mov	r2, r4
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7ff ff0b 	bl	800a5bc <__multiply>
 800a7a6:	6020      	str	r0, [r4, #0]
 800a7a8:	f8c0 9000 	str.w	r9, [r0]
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	e7e4      	b.n	800a77a <__pow5mult+0x6a>
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b6:	bf00      	nop
 800a7b8:	0800b5a8 	.word	0x0800b5a8
 800a7bc:	0800b3da 	.word	0x0800b3da
 800a7c0:	0800b45a 	.word	0x0800b45a

0800a7c4 <__lshift>:
 800a7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	6849      	ldr	r1, [r1, #4]
 800a7cc:	6923      	ldr	r3, [r4, #16]
 800a7ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	4607      	mov	r7, r0
 800a7d6:	4691      	mov	r9, r2
 800a7d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7dc:	f108 0601 	add.w	r6, r8, #1
 800a7e0:	42b3      	cmp	r3, r6
 800a7e2:	db0b      	blt.n	800a7fc <__lshift+0x38>
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f7ff fddd 	bl	800a3a4 <_Balloc>
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	b948      	cbnz	r0, 800a802 <__lshift+0x3e>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	4b28      	ldr	r3, [pc, #160]	; (800a894 <__lshift+0xd0>)
 800a7f2:	4829      	ldr	r0, [pc, #164]	; (800a898 <__lshift+0xd4>)
 800a7f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a7f8:	f000 fc18 	bl	800b02c <__assert_func>
 800a7fc:	3101      	adds	r1, #1
 800a7fe:	005b      	lsls	r3, r3, #1
 800a800:	e7ee      	b.n	800a7e0 <__lshift+0x1c>
 800a802:	2300      	movs	r3, #0
 800a804:	f100 0114 	add.w	r1, r0, #20
 800a808:	f100 0210 	add.w	r2, r0, #16
 800a80c:	4618      	mov	r0, r3
 800a80e:	4553      	cmp	r3, sl
 800a810:	db33      	blt.n	800a87a <__lshift+0xb6>
 800a812:	6920      	ldr	r0, [r4, #16]
 800a814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a818:	f104 0314 	add.w	r3, r4, #20
 800a81c:	f019 091f 	ands.w	r9, r9, #31
 800a820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a828:	d02b      	beq.n	800a882 <__lshift+0xbe>
 800a82a:	f1c9 0e20 	rsb	lr, r9, #32
 800a82e:	468a      	mov	sl, r1
 800a830:	2200      	movs	r2, #0
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	fa00 f009 	lsl.w	r0, r0, r9
 800a838:	4310      	orrs	r0, r2
 800a83a:	f84a 0b04 	str.w	r0, [sl], #4
 800a83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a842:	459c      	cmp	ip, r3
 800a844:	fa22 f20e 	lsr.w	r2, r2, lr
 800a848:	d8f3      	bhi.n	800a832 <__lshift+0x6e>
 800a84a:	ebac 0304 	sub.w	r3, ip, r4
 800a84e:	3b15      	subs	r3, #21
 800a850:	f023 0303 	bic.w	r3, r3, #3
 800a854:	3304      	adds	r3, #4
 800a856:	f104 0015 	add.w	r0, r4, #21
 800a85a:	4584      	cmp	ip, r0
 800a85c:	bf38      	it	cc
 800a85e:	2304      	movcc	r3, #4
 800a860:	50ca      	str	r2, [r1, r3]
 800a862:	b10a      	cbz	r2, 800a868 <__lshift+0xa4>
 800a864:	f108 0602 	add.w	r6, r8, #2
 800a868:	3e01      	subs	r6, #1
 800a86a:	4638      	mov	r0, r7
 800a86c:	612e      	str	r6, [r5, #16]
 800a86e:	4621      	mov	r1, r4
 800a870:	f7ff fdd8 	bl	800a424 <_Bfree>
 800a874:	4628      	mov	r0, r5
 800a876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a87e:	3301      	adds	r3, #1
 800a880:	e7c5      	b.n	800a80e <__lshift+0x4a>
 800a882:	3904      	subs	r1, #4
 800a884:	f853 2b04 	ldr.w	r2, [r3], #4
 800a888:	f841 2f04 	str.w	r2, [r1, #4]!
 800a88c:	459c      	cmp	ip, r3
 800a88e:	d8f9      	bhi.n	800a884 <__lshift+0xc0>
 800a890:	e7ea      	b.n	800a868 <__lshift+0xa4>
 800a892:	bf00      	nop
 800a894:	0800b449 	.word	0x0800b449
 800a898:	0800b45a 	.word	0x0800b45a

0800a89c <__mcmp>:
 800a89c:	b530      	push	{r4, r5, lr}
 800a89e:	6902      	ldr	r2, [r0, #16]
 800a8a0:	690c      	ldr	r4, [r1, #16]
 800a8a2:	1b12      	subs	r2, r2, r4
 800a8a4:	d10e      	bne.n	800a8c4 <__mcmp+0x28>
 800a8a6:	f100 0314 	add.w	r3, r0, #20
 800a8aa:	3114      	adds	r1, #20
 800a8ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8bc:	42a5      	cmp	r5, r4
 800a8be:	d003      	beq.n	800a8c8 <__mcmp+0x2c>
 800a8c0:	d305      	bcc.n	800a8ce <__mcmp+0x32>
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	4610      	mov	r0, r2
 800a8c6:	bd30      	pop	{r4, r5, pc}
 800a8c8:	4283      	cmp	r3, r0
 800a8ca:	d3f3      	bcc.n	800a8b4 <__mcmp+0x18>
 800a8cc:	e7fa      	b.n	800a8c4 <__mcmp+0x28>
 800a8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d2:	e7f7      	b.n	800a8c4 <__mcmp+0x28>

0800a8d4 <__mdiff>:
 800a8d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	460c      	mov	r4, r1
 800a8da:	4606      	mov	r6, r0
 800a8dc:	4611      	mov	r1, r2
 800a8de:	4620      	mov	r0, r4
 800a8e0:	4690      	mov	r8, r2
 800a8e2:	f7ff ffdb 	bl	800a89c <__mcmp>
 800a8e6:	1e05      	subs	r5, r0, #0
 800a8e8:	d110      	bne.n	800a90c <__mdiff+0x38>
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f7ff fd59 	bl	800a3a4 <_Balloc>
 800a8f2:	b930      	cbnz	r0, 800a902 <__mdiff+0x2e>
 800a8f4:	4b3a      	ldr	r3, [pc, #232]	; (800a9e0 <__mdiff+0x10c>)
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	f240 2137 	movw	r1, #567	; 0x237
 800a8fc:	4839      	ldr	r0, [pc, #228]	; (800a9e4 <__mdiff+0x110>)
 800a8fe:	f000 fb95 	bl	800b02c <__assert_func>
 800a902:	2301      	movs	r3, #1
 800a904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90c:	bfa4      	itt	ge
 800a90e:	4643      	movge	r3, r8
 800a910:	46a0      	movge	r8, r4
 800a912:	4630      	mov	r0, r6
 800a914:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a918:	bfa6      	itte	ge
 800a91a:	461c      	movge	r4, r3
 800a91c:	2500      	movge	r5, #0
 800a91e:	2501      	movlt	r5, #1
 800a920:	f7ff fd40 	bl	800a3a4 <_Balloc>
 800a924:	b920      	cbnz	r0, 800a930 <__mdiff+0x5c>
 800a926:	4b2e      	ldr	r3, [pc, #184]	; (800a9e0 <__mdiff+0x10c>)
 800a928:	4602      	mov	r2, r0
 800a92a:	f240 2145 	movw	r1, #581	; 0x245
 800a92e:	e7e5      	b.n	800a8fc <__mdiff+0x28>
 800a930:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a934:	6926      	ldr	r6, [r4, #16]
 800a936:	60c5      	str	r5, [r0, #12]
 800a938:	f104 0914 	add.w	r9, r4, #20
 800a93c:	f108 0514 	add.w	r5, r8, #20
 800a940:	f100 0e14 	add.w	lr, r0, #20
 800a944:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a948:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a94c:	f108 0210 	add.w	r2, r8, #16
 800a950:	46f2      	mov	sl, lr
 800a952:	2100      	movs	r1, #0
 800a954:	f859 3b04 	ldr.w	r3, [r9], #4
 800a958:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a95c:	fa11 f88b 	uxtah	r8, r1, fp
 800a960:	b299      	uxth	r1, r3
 800a962:	0c1b      	lsrs	r3, r3, #16
 800a964:	eba8 0801 	sub.w	r8, r8, r1
 800a968:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a96c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a970:	fa1f f888 	uxth.w	r8, r8
 800a974:	1419      	asrs	r1, r3, #16
 800a976:	454e      	cmp	r6, r9
 800a978:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a97c:	f84a 3b04 	str.w	r3, [sl], #4
 800a980:	d8e8      	bhi.n	800a954 <__mdiff+0x80>
 800a982:	1b33      	subs	r3, r6, r4
 800a984:	3b15      	subs	r3, #21
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	3304      	adds	r3, #4
 800a98c:	3415      	adds	r4, #21
 800a98e:	42a6      	cmp	r6, r4
 800a990:	bf38      	it	cc
 800a992:	2304      	movcc	r3, #4
 800a994:	441d      	add	r5, r3
 800a996:	4473      	add	r3, lr
 800a998:	469e      	mov	lr, r3
 800a99a:	462e      	mov	r6, r5
 800a99c:	4566      	cmp	r6, ip
 800a99e:	d30e      	bcc.n	800a9be <__mdiff+0xea>
 800a9a0:	f10c 0203 	add.w	r2, ip, #3
 800a9a4:	1b52      	subs	r2, r2, r5
 800a9a6:	f022 0203 	bic.w	r2, r2, #3
 800a9aa:	3d03      	subs	r5, #3
 800a9ac:	45ac      	cmp	ip, r5
 800a9ae:	bf38      	it	cc
 800a9b0:	2200      	movcc	r2, #0
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a9b8:	b17a      	cbz	r2, 800a9da <__mdiff+0x106>
 800a9ba:	6107      	str	r7, [r0, #16]
 800a9bc:	e7a4      	b.n	800a908 <__mdiff+0x34>
 800a9be:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9c2:	fa11 f288 	uxtah	r2, r1, r8
 800a9c6:	1414      	asrs	r4, r2, #16
 800a9c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9cc:	b292      	uxth	r2, r2
 800a9ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9d2:	f84e 2b04 	str.w	r2, [lr], #4
 800a9d6:	1421      	asrs	r1, r4, #16
 800a9d8:	e7e0      	b.n	800a99c <__mdiff+0xc8>
 800a9da:	3f01      	subs	r7, #1
 800a9dc:	e7ea      	b.n	800a9b4 <__mdiff+0xe0>
 800a9de:	bf00      	nop
 800a9e0:	0800b449 	.word	0x0800b449
 800a9e4:	0800b45a 	.word	0x0800b45a

0800a9e8 <__d2b>:
 800a9e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9ec:	460f      	mov	r7, r1
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	ec59 8b10 	vmov	r8, r9, d0
 800a9f4:	4616      	mov	r6, r2
 800a9f6:	f7ff fcd5 	bl	800a3a4 <_Balloc>
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	b930      	cbnz	r0, 800aa0c <__d2b+0x24>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	4b24      	ldr	r3, [pc, #144]	; (800aa94 <__d2b+0xac>)
 800aa02:	4825      	ldr	r0, [pc, #148]	; (800aa98 <__d2b+0xb0>)
 800aa04:	f240 310f 	movw	r1, #783	; 0x30f
 800aa08:	f000 fb10 	bl	800b02c <__assert_func>
 800aa0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa14:	bb2d      	cbnz	r5, 800aa62 <__d2b+0x7a>
 800aa16:	9301      	str	r3, [sp, #4]
 800aa18:	f1b8 0300 	subs.w	r3, r8, #0
 800aa1c:	d026      	beq.n	800aa6c <__d2b+0x84>
 800aa1e:	4668      	mov	r0, sp
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	f7ff fd87 	bl	800a534 <__lo0bits>
 800aa26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa2a:	b1e8      	cbz	r0, 800aa68 <__d2b+0x80>
 800aa2c:	f1c0 0320 	rsb	r3, r0, #32
 800aa30:	fa02 f303 	lsl.w	r3, r2, r3
 800aa34:	430b      	orrs	r3, r1
 800aa36:	40c2      	lsrs	r2, r0
 800aa38:	6163      	str	r3, [r4, #20]
 800aa3a:	9201      	str	r2, [sp, #4]
 800aa3c:	9b01      	ldr	r3, [sp, #4]
 800aa3e:	61a3      	str	r3, [r4, #24]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	bf14      	ite	ne
 800aa44:	2202      	movne	r2, #2
 800aa46:	2201      	moveq	r2, #1
 800aa48:	6122      	str	r2, [r4, #16]
 800aa4a:	b1bd      	cbz	r5, 800aa7c <__d2b+0x94>
 800aa4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa50:	4405      	add	r5, r0
 800aa52:	603d      	str	r5, [r7, #0]
 800aa54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa58:	6030      	str	r0, [r6, #0]
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	b003      	add	sp, #12
 800aa5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa66:	e7d6      	b.n	800aa16 <__d2b+0x2e>
 800aa68:	6161      	str	r1, [r4, #20]
 800aa6a:	e7e7      	b.n	800aa3c <__d2b+0x54>
 800aa6c:	a801      	add	r0, sp, #4
 800aa6e:	f7ff fd61 	bl	800a534 <__lo0bits>
 800aa72:	9b01      	ldr	r3, [sp, #4]
 800aa74:	6163      	str	r3, [r4, #20]
 800aa76:	3020      	adds	r0, #32
 800aa78:	2201      	movs	r2, #1
 800aa7a:	e7e5      	b.n	800aa48 <__d2b+0x60>
 800aa7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa84:	6038      	str	r0, [r7, #0]
 800aa86:	6918      	ldr	r0, [r3, #16]
 800aa88:	f7ff fd34 	bl	800a4f4 <__hi0bits>
 800aa8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa90:	e7e2      	b.n	800aa58 <__d2b+0x70>
 800aa92:	bf00      	nop
 800aa94:	0800b449 	.word	0x0800b449
 800aa98:	0800b45a 	.word	0x0800b45a

0800aa9c <__sfputc_r>:
 800aa9c:	6893      	ldr	r3, [r2, #8]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	b410      	push	{r4}
 800aaa4:	6093      	str	r3, [r2, #8]
 800aaa6:	da08      	bge.n	800aaba <__sfputc_r+0x1e>
 800aaa8:	6994      	ldr	r4, [r2, #24]
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	db01      	blt.n	800aab2 <__sfputc_r+0x16>
 800aaae:	290a      	cmp	r1, #10
 800aab0:	d103      	bne.n	800aaba <__sfputc_r+0x1e>
 800aab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aab6:	f7fe bbe4 	b.w	8009282 <__swbuf_r>
 800aaba:	6813      	ldr	r3, [r2, #0]
 800aabc:	1c58      	adds	r0, r3, #1
 800aabe:	6010      	str	r0, [r2, #0]
 800aac0:	7019      	strb	r1, [r3, #0]
 800aac2:	4608      	mov	r0, r1
 800aac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <__sfputs_r>:
 800aaca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aacc:	4606      	mov	r6, r0
 800aace:	460f      	mov	r7, r1
 800aad0:	4614      	mov	r4, r2
 800aad2:	18d5      	adds	r5, r2, r3
 800aad4:	42ac      	cmp	r4, r5
 800aad6:	d101      	bne.n	800aadc <__sfputs_r+0x12>
 800aad8:	2000      	movs	r0, #0
 800aada:	e007      	b.n	800aaec <__sfputs_r+0x22>
 800aadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae0:	463a      	mov	r2, r7
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7ff ffda 	bl	800aa9c <__sfputc_r>
 800aae8:	1c43      	adds	r3, r0, #1
 800aaea:	d1f3      	bne.n	800aad4 <__sfputs_r+0xa>
 800aaec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aaf0 <_vfiprintf_r>:
 800aaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf4:	460d      	mov	r5, r1
 800aaf6:	b09d      	sub	sp, #116	; 0x74
 800aaf8:	4614      	mov	r4, r2
 800aafa:	4698      	mov	r8, r3
 800aafc:	4606      	mov	r6, r0
 800aafe:	b118      	cbz	r0, 800ab08 <_vfiprintf_r+0x18>
 800ab00:	6a03      	ldr	r3, [r0, #32]
 800ab02:	b90b      	cbnz	r3, 800ab08 <_vfiprintf_r+0x18>
 800ab04:	f7fe face 	bl	80090a4 <__sinit>
 800ab08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab0a:	07d9      	lsls	r1, r3, #31
 800ab0c:	d405      	bmi.n	800ab1a <_vfiprintf_r+0x2a>
 800ab0e:	89ab      	ldrh	r3, [r5, #12]
 800ab10:	059a      	lsls	r2, r3, #22
 800ab12:	d402      	bmi.n	800ab1a <_vfiprintf_r+0x2a>
 800ab14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab16:	f7fe fcc6 	bl	80094a6 <__retarget_lock_acquire_recursive>
 800ab1a:	89ab      	ldrh	r3, [r5, #12]
 800ab1c:	071b      	lsls	r3, r3, #28
 800ab1e:	d501      	bpl.n	800ab24 <_vfiprintf_r+0x34>
 800ab20:	692b      	ldr	r3, [r5, #16]
 800ab22:	b99b      	cbnz	r3, 800ab4c <_vfiprintf_r+0x5c>
 800ab24:	4629      	mov	r1, r5
 800ab26:	4630      	mov	r0, r6
 800ab28:	f7fe fbe8 	bl	80092fc <__swsetup_r>
 800ab2c:	b170      	cbz	r0, 800ab4c <_vfiprintf_r+0x5c>
 800ab2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab30:	07dc      	lsls	r4, r3, #31
 800ab32:	d504      	bpl.n	800ab3e <_vfiprintf_r+0x4e>
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	b01d      	add	sp, #116	; 0x74
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	89ab      	ldrh	r3, [r5, #12]
 800ab40:	0598      	lsls	r0, r3, #22
 800ab42:	d4f7      	bmi.n	800ab34 <_vfiprintf_r+0x44>
 800ab44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab46:	f7fe fcaf 	bl	80094a8 <__retarget_lock_release_recursive>
 800ab4a:	e7f3      	b.n	800ab34 <_vfiprintf_r+0x44>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab50:	2320      	movs	r3, #32
 800ab52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab5a:	2330      	movs	r3, #48	; 0x30
 800ab5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ad10 <_vfiprintf_r+0x220>
 800ab60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab64:	f04f 0901 	mov.w	r9, #1
 800ab68:	4623      	mov	r3, r4
 800ab6a:	469a      	mov	sl, r3
 800ab6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab70:	b10a      	cbz	r2, 800ab76 <_vfiprintf_r+0x86>
 800ab72:	2a25      	cmp	r2, #37	; 0x25
 800ab74:	d1f9      	bne.n	800ab6a <_vfiprintf_r+0x7a>
 800ab76:	ebba 0b04 	subs.w	fp, sl, r4
 800ab7a:	d00b      	beq.n	800ab94 <_vfiprintf_r+0xa4>
 800ab7c:	465b      	mov	r3, fp
 800ab7e:	4622      	mov	r2, r4
 800ab80:	4629      	mov	r1, r5
 800ab82:	4630      	mov	r0, r6
 800ab84:	f7ff ffa1 	bl	800aaca <__sfputs_r>
 800ab88:	3001      	adds	r0, #1
 800ab8a:	f000 80a9 	beq.w	800ace0 <_vfiprintf_r+0x1f0>
 800ab8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab90:	445a      	add	r2, fp
 800ab92:	9209      	str	r2, [sp, #36]	; 0x24
 800ab94:	f89a 3000 	ldrb.w	r3, [sl]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 80a1 	beq.w	800ace0 <_vfiprintf_r+0x1f0>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f04f 32ff 	mov.w	r2, #4294967295
 800aba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aba8:	f10a 0a01 	add.w	sl, sl, #1
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	9307      	str	r3, [sp, #28]
 800abb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abb4:	931a      	str	r3, [sp, #104]	; 0x68
 800abb6:	4654      	mov	r4, sl
 800abb8:	2205      	movs	r2, #5
 800abba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abbe:	4854      	ldr	r0, [pc, #336]	; (800ad10 <_vfiprintf_r+0x220>)
 800abc0:	f7f5 fb1e 	bl	8000200 <memchr>
 800abc4:	9a04      	ldr	r2, [sp, #16]
 800abc6:	b9d8      	cbnz	r0, 800ac00 <_vfiprintf_r+0x110>
 800abc8:	06d1      	lsls	r1, r2, #27
 800abca:	bf44      	itt	mi
 800abcc:	2320      	movmi	r3, #32
 800abce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abd2:	0713      	lsls	r3, r2, #28
 800abd4:	bf44      	itt	mi
 800abd6:	232b      	movmi	r3, #43	; 0x2b
 800abd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abdc:	f89a 3000 	ldrb.w	r3, [sl]
 800abe0:	2b2a      	cmp	r3, #42	; 0x2a
 800abe2:	d015      	beq.n	800ac10 <_vfiprintf_r+0x120>
 800abe4:	9a07      	ldr	r2, [sp, #28]
 800abe6:	4654      	mov	r4, sl
 800abe8:	2000      	movs	r0, #0
 800abea:	f04f 0c0a 	mov.w	ip, #10
 800abee:	4621      	mov	r1, r4
 800abf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abf4:	3b30      	subs	r3, #48	; 0x30
 800abf6:	2b09      	cmp	r3, #9
 800abf8:	d94d      	bls.n	800ac96 <_vfiprintf_r+0x1a6>
 800abfa:	b1b0      	cbz	r0, 800ac2a <_vfiprintf_r+0x13a>
 800abfc:	9207      	str	r2, [sp, #28]
 800abfe:	e014      	b.n	800ac2a <_vfiprintf_r+0x13a>
 800ac00:	eba0 0308 	sub.w	r3, r0, r8
 800ac04:	fa09 f303 	lsl.w	r3, r9, r3
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	9304      	str	r3, [sp, #16]
 800ac0c:	46a2      	mov	sl, r4
 800ac0e:	e7d2      	b.n	800abb6 <_vfiprintf_r+0xc6>
 800ac10:	9b03      	ldr	r3, [sp, #12]
 800ac12:	1d19      	adds	r1, r3, #4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	9103      	str	r1, [sp, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	bfbb      	ittet	lt
 800ac1c:	425b      	neglt	r3, r3
 800ac1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac22:	9307      	strge	r3, [sp, #28]
 800ac24:	9307      	strlt	r3, [sp, #28]
 800ac26:	bfb8      	it	lt
 800ac28:	9204      	strlt	r2, [sp, #16]
 800ac2a:	7823      	ldrb	r3, [r4, #0]
 800ac2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac2e:	d10c      	bne.n	800ac4a <_vfiprintf_r+0x15a>
 800ac30:	7863      	ldrb	r3, [r4, #1]
 800ac32:	2b2a      	cmp	r3, #42	; 0x2a
 800ac34:	d134      	bne.n	800aca0 <_vfiprintf_r+0x1b0>
 800ac36:	9b03      	ldr	r3, [sp, #12]
 800ac38:	1d1a      	adds	r2, r3, #4
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	9203      	str	r2, [sp, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bfb8      	it	lt
 800ac42:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac46:	3402      	adds	r4, #2
 800ac48:	9305      	str	r3, [sp, #20]
 800ac4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ad20 <_vfiprintf_r+0x230>
 800ac4e:	7821      	ldrb	r1, [r4, #0]
 800ac50:	2203      	movs	r2, #3
 800ac52:	4650      	mov	r0, sl
 800ac54:	f7f5 fad4 	bl	8000200 <memchr>
 800ac58:	b138      	cbz	r0, 800ac6a <_vfiprintf_r+0x17a>
 800ac5a:	9b04      	ldr	r3, [sp, #16]
 800ac5c:	eba0 000a 	sub.w	r0, r0, sl
 800ac60:	2240      	movs	r2, #64	; 0x40
 800ac62:	4082      	lsls	r2, r0
 800ac64:	4313      	orrs	r3, r2
 800ac66:	3401      	adds	r4, #1
 800ac68:	9304      	str	r3, [sp, #16]
 800ac6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac6e:	4829      	ldr	r0, [pc, #164]	; (800ad14 <_vfiprintf_r+0x224>)
 800ac70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac74:	2206      	movs	r2, #6
 800ac76:	f7f5 fac3 	bl	8000200 <memchr>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d03f      	beq.n	800acfe <_vfiprintf_r+0x20e>
 800ac7e:	4b26      	ldr	r3, [pc, #152]	; (800ad18 <_vfiprintf_r+0x228>)
 800ac80:	bb1b      	cbnz	r3, 800acca <_vfiprintf_r+0x1da>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	3307      	adds	r3, #7
 800ac86:	f023 0307 	bic.w	r3, r3, #7
 800ac8a:	3308      	adds	r3, #8
 800ac8c:	9303      	str	r3, [sp, #12]
 800ac8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac90:	443b      	add	r3, r7
 800ac92:	9309      	str	r3, [sp, #36]	; 0x24
 800ac94:	e768      	b.n	800ab68 <_vfiprintf_r+0x78>
 800ac96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	2001      	movs	r0, #1
 800ac9e:	e7a6      	b.n	800abee <_vfiprintf_r+0xfe>
 800aca0:	2300      	movs	r3, #0
 800aca2:	3401      	adds	r4, #1
 800aca4:	9305      	str	r3, [sp, #20]
 800aca6:	4619      	mov	r1, r3
 800aca8:	f04f 0c0a 	mov.w	ip, #10
 800acac:	4620      	mov	r0, r4
 800acae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acb2:	3a30      	subs	r2, #48	; 0x30
 800acb4:	2a09      	cmp	r2, #9
 800acb6:	d903      	bls.n	800acc0 <_vfiprintf_r+0x1d0>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d0c6      	beq.n	800ac4a <_vfiprintf_r+0x15a>
 800acbc:	9105      	str	r1, [sp, #20]
 800acbe:	e7c4      	b.n	800ac4a <_vfiprintf_r+0x15a>
 800acc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800acc4:	4604      	mov	r4, r0
 800acc6:	2301      	movs	r3, #1
 800acc8:	e7f0      	b.n	800acac <_vfiprintf_r+0x1bc>
 800acca:	ab03      	add	r3, sp, #12
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	462a      	mov	r2, r5
 800acd0:	4b12      	ldr	r3, [pc, #72]	; (800ad1c <_vfiprintf_r+0x22c>)
 800acd2:	a904      	add	r1, sp, #16
 800acd4:	4630      	mov	r0, r6
 800acd6:	f7fd fd93 	bl	8008800 <_printf_float>
 800acda:	4607      	mov	r7, r0
 800acdc:	1c78      	adds	r0, r7, #1
 800acde:	d1d6      	bne.n	800ac8e <_vfiprintf_r+0x19e>
 800ace0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ace2:	07d9      	lsls	r1, r3, #31
 800ace4:	d405      	bmi.n	800acf2 <_vfiprintf_r+0x202>
 800ace6:	89ab      	ldrh	r3, [r5, #12]
 800ace8:	059a      	lsls	r2, r3, #22
 800acea:	d402      	bmi.n	800acf2 <_vfiprintf_r+0x202>
 800acec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acee:	f7fe fbdb 	bl	80094a8 <__retarget_lock_release_recursive>
 800acf2:	89ab      	ldrh	r3, [r5, #12]
 800acf4:	065b      	lsls	r3, r3, #25
 800acf6:	f53f af1d 	bmi.w	800ab34 <_vfiprintf_r+0x44>
 800acfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acfc:	e71c      	b.n	800ab38 <_vfiprintf_r+0x48>
 800acfe:	ab03      	add	r3, sp, #12
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	462a      	mov	r2, r5
 800ad04:	4b05      	ldr	r3, [pc, #20]	; (800ad1c <_vfiprintf_r+0x22c>)
 800ad06:	a904      	add	r1, sp, #16
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f7fe f81d 	bl	8008d48 <_printf_i>
 800ad0e:	e7e4      	b.n	800acda <_vfiprintf_r+0x1ea>
 800ad10:	0800b5b4 	.word	0x0800b5b4
 800ad14:	0800b5be 	.word	0x0800b5be
 800ad18:	08008801 	.word	0x08008801
 800ad1c:	0800aacb 	.word	0x0800aacb
 800ad20:	0800b5ba 	.word	0x0800b5ba

0800ad24 <__sflush_r>:
 800ad24:	898a      	ldrh	r2, [r1, #12]
 800ad26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	0710      	lsls	r0, r2, #28
 800ad2e:	460c      	mov	r4, r1
 800ad30:	d458      	bmi.n	800ade4 <__sflush_r+0xc0>
 800ad32:	684b      	ldr	r3, [r1, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dc05      	bgt.n	800ad44 <__sflush_r+0x20>
 800ad38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	dc02      	bgt.n	800ad44 <__sflush_r+0x20>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad46:	2e00      	cmp	r6, #0
 800ad48:	d0f9      	beq.n	800ad3e <__sflush_r+0x1a>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad50:	682f      	ldr	r7, [r5, #0]
 800ad52:	6a21      	ldr	r1, [r4, #32]
 800ad54:	602b      	str	r3, [r5, #0]
 800ad56:	d032      	beq.n	800adbe <__sflush_r+0x9a>
 800ad58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	075a      	lsls	r2, r3, #29
 800ad5e:	d505      	bpl.n	800ad6c <__sflush_r+0x48>
 800ad60:	6863      	ldr	r3, [r4, #4]
 800ad62:	1ac0      	subs	r0, r0, r3
 800ad64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad66:	b10b      	cbz	r3, 800ad6c <__sflush_r+0x48>
 800ad68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad6a:	1ac0      	subs	r0, r0, r3
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4602      	mov	r2, r0
 800ad70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad72:	6a21      	ldr	r1, [r4, #32]
 800ad74:	4628      	mov	r0, r5
 800ad76:	47b0      	blx	r6
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	d106      	bne.n	800ad8c <__sflush_r+0x68>
 800ad7e:	6829      	ldr	r1, [r5, #0]
 800ad80:	291d      	cmp	r1, #29
 800ad82:	d82b      	bhi.n	800addc <__sflush_r+0xb8>
 800ad84:	4a29      	ldr	r2, [pc, #164]	; (800ae2c <__sflush_r+0x108>)
 800ad86:	410a      	asrs	r2, r1
 800ad88:	07d6      	lsls	r6, r2, #31
 800ad8a:	d427      	bmi.n	800addc <__sflush_r+0xb8>
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	6062      	str	r2, [r4, #4]
 800ad90:	04d9      	lsls	r1, r3, #19
 800ad92:	6922      	ldr	r2, [r4, #16]
 800ad94:	6022      	str	r2, [r4, #0]
 800ad96:	d504      	bpl.n	800ada2 <__sflush_r+0x7e>
 800ad98:	1c42      	adds	r2, r0, #1
 800ad9a:	d101      	bne.n	800ada0 <__sflush_r+0x7c>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b903      	cbnz	r3, 800ada2 <__sflush_r+0x7e>
 800ada0:	6560      	str	r0, [r4, #84]	; 0x54
 800ada2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ada4:	602f      	str	r7, [r5, #0]
 800ada6:	2900      	cmp	r1, #0
 800ada8:	d0c9      	beq.n	800ad3e <__sflush_r+0x1a>
 800adaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adae:	4299      	cmp	r1, r3
 800adb0:	d002      	beq.n	800adb8 <__sflush_r+0x94>
 800adb2:	4628      	mov	r0, r5
 800adb4:	f7ff f9f6 	bl	800a1a4 <_free_r>
 800adb8:	2000      	movs	r0, #0
 800adba:	6360      	str	r0, [r4, #52]	; 0x34
 800adbc:	e7c0      	b.n	800ad40 <__sflush_r+0x1c>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b0      	blx	r6
 800adc4:	1c41      	adds	r1, r0, #1
 800adc6:	d1c8      	bne.n	800ad5a <__sflush_r+0x36>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0c5      	beq.n	800ad5a <__sflush_r+0x36>
 800adce:	2b1d      	cmp	r3, #29
 800add0:	d001      	beq.n	800add6 <__sflush_r+0xb2>
 800add2:	2b16      	cmp	r3, #22
 800add4:	d101      	bne.n	800adda <__sflush_r+0xb6>
 800add6:	602f      	str	r7, [r5, #0]
 800add8:	e7b1      	b.n	800ad3e <__sflush_r+0x1a>
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	e7ad      	b.n	800ad40 <__sflush_r+0x1c>
 800ade4:	690f      	ldr	r7, [r1, #16]
 800ade6:	2f00      	cmp	r7, #0
 800ade8:	d0a9      	beq.n	800ad3e <__sflush_r+0x1a>
 800adea:	0793      	lsls	r3, r2, #30
 800adec:	680e      	ldr	r6, [r1, #0]
 800adee:	bf08      	it	eq
 800adf0:	694b      	ldreq	r3, [r1, #20]
 800adf2:	600f      	str	r7, [r1, #0]
 800adf4:	bf18      	it	ne
 800adf6:	2300      	movne	r3, #0
 800adf8:	eba6 0807 	sub.w	r8, r6, r7
 800adfc:	608b      	str	r3, [r1, #8]
 800adfe:	f1b8 0f00 	cmp.w	r8, #0
 800ae02:	dd9c      	ble.n	800ad3e <__sflush_r+0x1a>
 800ae04:	6a21      	ldr	r1, [r4, #32]
 800ae06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae08:	4643      	mov	r3, r8
 800ae0a:	463a      	mov	r2, r7
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	47b0      	blx	r6
 800ae10:	2800      	cmp	r0, #0
 800ae12:	dc06      	bgt.n	800ae22 <__sflush_r+0xfe>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	e78e      	b.n	800ad40 <__sflush_r+0x1c>
 800ae22:	4407      	add	r7, r0
 800ae24:	eba8 0800 	sub.w	r8, r8, r0
 800ae28:	e7e9      	b.n	800adfe <__sflush_r+0xda>
 800ae2a:	bf00      	nop
 800ae2c:	dfbffffe 	.word	0xdfbffffe

0800ae30 <_fflush_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	690b      	ldr	r3, [r1, #16]
 800ae34:	4605      	mov	r5, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	b913      	cbnz	r3, 800ae40 <_fflush_r+0x10>
 800ae3a:	2500      	movs	r5, #0
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	b118      	cbz	r0, 800ae4a <_fflush_r+0x1a>
 800ae42:	6a03      	ldr	r3, [r0, #32]
 800ae44:	b90b      	cbnz	r3, 800ae4a <_fflush_r+0x1a>
 800ae46:	f7fe f92d 	bl	80090a4 <__sinit>
 800ae4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0f3      	beq.n	800ae3a <_fflush_r+0xa>
 800ae52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae54:	07d0      	lsls	r0, r2, #31
 800ae56:	d404      	bmi.n	800ae62 <_fflush_r+0x32>
 800ae58:	0599      	lsls	r1, r3, #22
 800ae5a:	d402      	bmi.n	800ae62 <_fflush_r+0x32>
 800ae5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5e:	f7fe fb22 	bl	80094a6 <__retarget_lock_acquire_recursive>
 800ae62:	4628      	mov	r0, r5
 800ae64:	4621      	mov	r1, r4
 800ae66:	f7ff ff5d 	bl	800ad24 <__sflush_r>
 800ae6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae6c:	07da      	lsls	r2, r3, #31
 800ae6e:	4605      	mov	r5, r0
 800ae70:	d4e4      	bmi.n	800ae3c <_fflush_r+0xc>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	059b      	lsls	r3, r3, #22
 800ae76:	d4e1      	bmi.n	800ae3c <_fflush_r+0xc>
 800ae78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae7a:	f7fe fb15 	bl	80094a8 <__retarget_lock_release_recursive>
 800ae7e:	e7dd      	b.n	800ae3c <_fflush_r+0xc>

0800ae80 <__swhatbuf_r>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	460c      	mov	r4, r1
 800ae84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae88:	2900      	cmp	r1, #0
 800ae8a:	b096      	sub	sp, #88	; 0x58
 800ae8c:	4615      	mov	r5, r2
 800ae8e:	461e      	mov	r6, r3
 800ae90:	da0d      	bge.n	800aeae <__swhatbuf_r+0x2e>
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ae98:	f04f 0100 	mov.w	r1, #0
 800ae9c:	bf0c      	ite	eq
 800ae9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aea2:	2340      	movne	r3, #64	; 0x40
 800aea4:	2000      	movs	r0, #0
 800aea6:	6031      	str	r1, [r6, #0]
 800aea8:	602b      	str	r3, [r5, #0]
 800aeaa:	b016      	add	sp, #88	; 0x58
 800aeac:	bd70      	pop	{r4, r5, r6, pc}
 800aeae:	466a      	mov	r2, sp
 800aeb0:	f000 f87c 	bl	800afac <_fstat_r>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	dbec      	blt.n	800ae92 <__swhatbuf_r+0x12>
 800aeb8:	9901      	ldr	r1, [sp, #4]
 800aeba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aebe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aec2:	4259      	negs	r1, r3
 800aec4:	4159      	adcs	r1, r3
 800aec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeca:	e7eb      	b.n	800aea4 <__swhatbuf_r+0x24>

0800aecc <__smakebuf_r>:
 800aecc:	898b      	ldrh	r3, [r1, #12]
 800aece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aed0:	079d      	lsls	r5, r3, #30
 800aed2:	4606      	mov	r6, r0
 800aed4:	460c      	mov	r4, r1
 800aed6:	d507      	bpl.n	800aee8 <__smakebuf_r+0x1c>
 800aed8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	6123      	str	r3, [r4, #16]
 800aee0:	2301      	movs	r3, #1
 800aee2:	6163      	str	r3, [r4, #20]
 800aee4:	b002      	add	sp, #8
 800aee6:	bd70      	pop	{r4, r5, r6, pc}
 800aee8:	ab01      	add	r3, sp, #4
 800aeea:	466a      	mov	r2, sp
 800aeec:	f7ff ffc8 	bl	800ae80 <__swhatbuf_r>
 800aef0:	9900      	ldr	r1, [sp, #0]
 800aef2:	4605      	mov	r5, r0
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7ff f9c9 	bl	800a28c <_malloc_r>
 800aefa:	b948      	cbnz	r0, 800af10 <__smakebuf_r+0x44>
 800aefc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af00:	059a      	lsls	r2, r3, #22
 800af02:	d4ef      	bmi.n	800aee4 <__smakebuf_r+0x18>
 800af04:	f023 0303 	bic.w	r3, r3, #3
 800af08:	f043 0302 	orr.w	r3, r3, #2
 800af0c:	81a3      	strh	r3, [r4, #12]
 800af0e:	e7e3      	b.n	800aed8 <__smakebuf_r+0xc>
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	6020      	str	r0, [r4, #0]
 800af14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af18:	81a3      	strh	r3, [r4, #12]
 800af1a:	9b00      	ldr	r3, [sp, #0]
 800af1c:	6163      	str	r3, [r4, #20]
 800af1e:	9b01      	ldr	r3, [sp, #4]
 800af20:	6120      	str	r0, [r4, #16]
 800af22:	b15b      	cbz	r3, 800af3c <__smakebuf_r+0x70>
 800af24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af28:	4630      	mov	r0, r6
 800af2a:	f000 f851 	bl	800afd0 <_isatty_r>
 800af2e:	b128      	cbz	r0, 800af3c <__smakebuf_r+0x70>
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f023 0303 	bic.w	r3, r3, #3
 800af36:	f043 0301 	orr.w	r3, r3, #1
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	431d      	orrs	r5, r3
 800af40:	81a5      	strh	r5, [r4, #12]
 800af42:	e7cf      	b.n	800aee4 <__smakebuf_r+0x18>

0800af44 <_putc_r>:
 800af44:	b570      	push	{r4, r5, r6, lr}
 800af46:	460d      	mov	r5, r1
 800af48:	4614      	mov	r4, r2
 800af4a:	4606      	mov	r6, r0
 800af4c:	b118      	cbz	r0, 800af56 <_putc_r+0x12>
 800af4e:	6a03      	ldr	r3, [r0, #32]
 800af50:	b90b      	cbnz	r3, 800af56 <_putc_r+0x12>
 800af52:	f7fe f8a7 	bl	80090a4 <__sinit>
 800af56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af58:	07d8      	lsls	r0, r3, #31
 800af5a:	d405      	bmi.n	800af68 <_putc_r+0x24>
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	0599      	lsls	r1, r3, #22
 800af60:	d402      	bmi.n	800af68 <_putc_r+0x24>
 800af62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af64:	f7fe fa9f 	bl	80094a6 <__retarget_lock_acquire_recursive>
 800af68:	68a3      	ldr	r3, [r4, #8]
 800af6a:	3b01      	subs	r3, #1
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	60a3      	str	r3, [r4, #8]
 800af70:	da05      	bge.n	800af7e <_putc_r+0x3a>
 800af72:	69a2      	ldr	r2, [r4, #24]
 800af74:	4293      	cmp	r3, r2
 800af76:	db12      	blt.n	800af9e <_putc_r+0x5a>
 800af78:	b2eb      	uxtb	r3, r5
 800af7a:	2b0a      	cmp	r3, #10
 800af7c:	d00f      	beq.n	800af9e <_putc_r+0x5a>
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	1c5a      	adds	r2, r3, #1
 800af82:	6022      	str	r2, [r4, #0]
 800af84:	701d      	strb	r5, [r3, #0]
 800af86:	b2ed      	uxtb	r5, r5
 800af88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af8a:	07da      	lsls	r2, r3, #31
 800af8c:	d405      	bmi.n	800af9a <_putc_r+0x56>
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	059b      	lsls	r3, r3, #22
 800af92:	d402      	bmi.n	800af9a <_putc_r+0x56>
 800af94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af96:	f7fe fa87 	bl	80094a8 <__retarget_lock_release_recursive>
 800af9a:	4628      	mov	r0, r5
 800af9c:	bd70      	pop	{r4, r5, r6, pc}
 800af9e:	4629      	mov	r1, r5
 800afa0:	4622      	mov	r2, r4
 800afa2:	4630      	mov	r0, r6
 800afa4:	f7fe f96d 	bl	8009282 <__swbuf_r>
 800afa8:	4605      	mov	r5, r0
 800afaa:	e7ed      	b.n	800af88 <_putc_r+0x44>

0800afac <_fstat_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4d07      	ldr	r5, [pc, #28]	; (800afcc <_fstat_r+0x20>)
 800afb0:	2300      	movs	r3, #0
 800afb2:	4604      	mov	r4, r0
 800afb4:	4608      	mov	r0, r1
 800afb6:	4611      	mov	r1, r2
 800afb8:	602b      	str	r3, [r5, #0]
 800afba:	f7f7 fa9c 	bl	80024f6 <_fstat>
 800afbe:	1c43      	adds	r3, r0, #1
 800afc0:	d102      	bne.n	800afc8 <_fstat_r+0x1c>
 800afc2:	682b      	ldr	r3, [r5, #0]
 800afc4:	b103      	cbz	r3, 800afc8 <_fstat_r+0x1c>
 800afc6:	6023      	str	r3, [r4, #0]
 800afc8:	bd38      	pop	{r3, r4, r5, pc}
 800afca:	bf00      	nop
 800afcc:	20000674 	.word	0x20000674

0800afd0 <_isatty_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4d06      	ldr	r5, [pc, #24]	; (800afec <_isatty_r+0x1c>)
 800afd4:	2300      	movs	r3, #0
 800afd6:	4604      	mov	r4, r0
 800afd8:	4608      	mov	r0, r1
 800afda:	602b      	str	r3, [r5, #0]
 800afdc:	f7f7 fa9b 	bl	8002516 <_isatty>
 800afe0:	1c43      	adds	r3, r0, #1
 800afe2:	d102      	bne.n	800afea <_isatty_r+0x1a>
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	b103      	cbz	r3, 800afea <_isatty_r+0x1a>
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	bd38      	pop	{r3, r4, r5, pc}
 800afec:	20000674 	.word	0x20000674

0800aff0 <_sbrk_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4d06      	ldr	r5, [pc, #24]	; (800b00c <_sbrk_r+0x1c>)
 800aff4:	2300      	movs	r3, #0
 800aff6:	4604      	mov	r4, r0
 800aff8:	4608      	mov	r0, r1
 800affa:	602b      	str	r3, [r5, #0]
 800affc:	f7f7 faa4 	bl	8002548 <_sbrk>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	d102      	bne.n	800b00a <_sbrk_r+0x1a>
 800b004:	682b      	ldr	r3, [r5, #0]
 800b006:	b103      	cbz	r3, 800b00a <_sbrk_r+0x1a>
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	bd38      	pop	{r3, r4, r5, pc}
 800b00c:	20000674 	.word	0x20000674

0800b010 <memcpy>:
 800b010:	440a      	add	r2, r1
 800b012:	4291      	cmp	r1, r2
 800b014:	f100 33ff 	add.w	r3, r0, #4294967295
 800b018:	d100      	bne.n	800b01c <memcpy+0xc>
 800b01a:	4770      	bx	lr
 800b01c:	b510      	push	{r4, lr}
 800b01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b022:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b026:	4291      	cmp	r1, r2
 800b028:	d1f9      	bne.n	800b01e <memcpy+0xe>
 800b02a:	bd10      	pop	{r4, pc}

0800b02c <__assert_func>:
 800b02c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b02e:	4614      	mov	r4, r2
 800b030:	461a      	mov	r2, r3
 800b032:	4b09      	ldr	r3, [pc, #36]	; (800b058 <__assert_func+0x2c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4605      	mov	r5, r0
 800b038:	68d8      	ldr	r0, [r3, #12]
 800b03a:	b14c      	cbz	r4, 800b050 <__assert_func+0x24>
 800b03c:	4b07      	ldr	r3, [pc, #28]	; (800b05c <__assert_func+0x30>)
 800b03e:	9100      	str	r1, [sp, #0]
 800b040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b044:	4906      	ldr	r1, [pc, #24]	; (800b060 <__assert_func+0x34>)
 800b046:	462b      	mov	r3, r5
 800b048:	f000 f844 	bl	800b0d4 <fiprintf>
 800b04c:	f000 f854 	bl	800b0f8 <abort>
 800b050:	4b04      	ldr	r3, [pc, #16]	; (800b064 <__assert_func+0x38>)
 800b052:	461c      	mov	r4, r3
 800b054:	e7f3      	b.n	800b03e <__assert_func+0x12>
 800b056:	bf00      	nop
 800b058:	20000064 	.word	0x20000064
 800b05c:	0800b5cf 	.word	0x0800b5cf
 800b060:	0800b5dc 	.word	0x0800b5dc
 800b064:	0800b60a 	.word	0x0800b60a

0800b068 <_calloc_r>:
 800b068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b06a:	fba1 2402 	umull	r2, r4, r1, r2
 800b06e:	b94c      	cbnz	r4, 800b084 <_calloc_r+0x1c>
 800b070:	4611      	mov	r1, r2
 800b072:	9201      	str	r2, [sp, #4]
 800b074:	f7ff f90a 	bl	800a28c <_malloc_r>
 800b078:	9a01      	ldr	r2, [sp, #4]
 800b07a:	4605      	mov	r5, r0
 800b07c:	b930      	cbnz	r0, 800b08c <_calloc_r+0x24>
 800b07e:	4628      	mov	r0, r5
 800b080:	b003      	add	sp, #12
 800b082:	bd30      	pop	{r4, r5, pc}
 800b084:	220c      	movs	r2, #12
 800b086:	6002      	str	r2, [r0, #0]
 800b088:	2500      	movs	r5, #0
 800b08a:	e7f8      	b.n	800b07e <_calloc_r+0x16>
 800b08c:	4621      	mov	r1, r4
 800b08e:	f7fe f98d 	bl	80093ac <memset>
 800b092:	e7f4      	b.n	800b07e <_calloc_r+0x16>

0800b094 <__ascii_mbtowc>:
 800b094:	b082      	sub	sp, #8
 800b096:	b901      	cbnz	r1, 800b09a <__ascii_mbtowc+0x6>
 800b098:	a901      	add	r1, sp, #4
 800b09a:	b142      	cbz	r2, 800b0ae <__ascii_mbtowc+0x1a>
 800b09c:	b14b      	cbz	r3, 800b0b2 <__ascii_mbtowc+0x1e>
 800b09e:	7813      	ldrb	r3, [r2, #0]
 800b0a0:	600b      	str	r3, [r1, #0]
 800b0a2:	7812      	ldrb	r2, [r2, #0]
 800b0a4:	1e10      	subs	r0, r2, #0
 800b0a6:	bf18      	it	ne
 800b0a8:	2001      	movne	r0, #1
 800b0aa:	b002      	add	sp, #8
 800b0ac:	4770      	bx	lr
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	e7fb      	b.n	800b0aa <__ascii_mbtowc+0x16>
 800b0b2:	f06f 0001 	mvn.w	r0, #1
 800b0b6:	e7f8      	b.n	800b0aa <__ascii_mbtowc+0x16>

0800b0b8 <__ascii_wctomb>:
 800b0b8:	b149      	cbz	r1, 800b0ce <__ascii_wctomb+0x16>
 800b0ba:	2aff      	cmp	r2, #255	; 0xff
 800b0bc:	bf85      	ittet	hi
 800b0be:	238a      	movhi	r3, #138	; 0x8a
 800b0c0:	6003      	strhi	r3, [r0, #0]
 800b0c2:	700a      	strbls	r2, [r1, #0]
 800b0c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0c8:	bf98      	it	ls
 800b0ca:	2001      	movls	r0, #1
 800b0cc:	4770      	bx	lr
 800b0ce:	4608      	mov	r0, r1
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <fiprintf>:
 800b0d4:	b40e      	push	{r1, r2, r3}
 800b0d6:	b503      	push	{r0, r1, lr}
 800b0d8:	4601      	mov	r1, r0
 800b0da:	ab03      	add	r3, sp, #12
 800b0dc:	4805      	ldr	r0, [pc, #20]	; (800b0f4 <fiprintf+0x20>)
 800b0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e2:	6800      	ldr	r0, [r0, #0]
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	f7ff fd03 	bl	800aaf0 <_vfiprintf_r>
 800b0ea:	b002      	add	sp, #8
 800b0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0f0:	b003      	add	sp, #12
 800b0f2:	4770      	bx	lr
 800b0f4:	20000064 	.word	0x20000064

0800b0f8 <abort>:
 800b0f8:	b508      	push	{r3, lr}
 800b0fa:	2006      	movs	r0, #6
 800b0fc:	f000 f82c 	bl	800b158 <raise>
 800b100:	2001      	movs	r0, #1
 800b102:	f7f7 f9a9 	bl	8002458 <_exit>

0800b106 <_raise_r>:
 800b106:	291f      	cmp	r1, #31
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4604      	mov	r4, r0
 800b10c:	460d      	mov	r5, r1
 800b10e:	d904      	bls.n	800b11a <_raise_r+0x14>
 800b110:	2316      	movs	r3, #22
 800b112:	6003      	str	r3, [r0, #0]
 800b114:	f04f 30ff 	mov.w	r0, #4294967295
 800b118:	bd38      	pop	{r3, r4, r5, pc}
 800b11a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b11c:	b112      	cbz	r2, 800b124 <_raise_r+0x1e>
 800b11e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b122:	b94b      	cbnz	r3, 800b138 <_raise_r+0x32>
 800b124:	4620      	mov	r0, r4
 800b126:	f000 f831 	bl	800b18c <_getpid_r>
 800b12a:	462a      	mov	r2, r5
 800b12c:	4601      	mov	r1, r0
 800b12e:	4620      	mov	r0, r4
 800b130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b134:	f000 b818 	b.w	800b168 <_kill_r>
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d00a      	beq.n	800b152 <_raise_r+0x4c>
 800b13c:	1c59      	adds	r1, r3, #1
 800b13e:	d103      	bne.n	800b148 <_raise_r+0x42>
 800b140:	2316      	movs	r3, #22
 800b142:	6003      	str	r3, [r0, #0]
 800b144:	2001      	movs	r0, #1
 800b146:	e7e7      	b.n	800b118 <_raise_r+0x12>
 800b148:	2400      	movs	r4, #0
 800b14a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b14e:	4628      	mov	r0, r5
 800b150:	4798      	blx	r3
 800b152:	2000      	movs	r0, #0
 800b154:	e7e0      	b.n	800b118 <_raise_r+0x12>
	...

0800b158 <raise>:
 800b158:	4b02      	ldr	r3, [pc, #8]	; (800b164 <raise+0xc>)
 800b15a:	4601      	mov	r1, r0
 800b15c:	6818      	ldr	r0, [r3, #0]
 800b15e:	f7ff bfd2 	b.w	800b106 <_raise_r>
 800b162:	bf00      	nop
 800b164:	20000064 	.word	0x20000064

0800b168 <_kill_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4d07      	ldr	r5, [pc, #28]	; (800b188 <_kill_r+0x20>)
 800b16c:	2300      	movs	r3, #0
 800b16e:	4604      	mov	r4, r0
 800b170:	4608      	mov	r0, r1
 800b172:	4611      	mov	r1, r2
 800b174:	602b      	str	r3, [r5, #0]
 800b176:	f7f7 f95f 	bl	8002438 <_kill>
 800b17a:	1c43      	adds	r3, r0, #1
 800b17c:	d102      	bne.n	800b184 <_kill_r+0x1c>
 800b17e:	682b      	ldr	r3, [r5, #0]
 800b180:	b103      	cbz	r3, 800b184 <_kill_r+0x1c>
 800b182:	6023      	str	r3, [r4, #0]
 800b184:	bd38      	pop	{r3, r4, r5, pc}
 800b186:	bf00      	nop
 800b188:	20000674 	.word	0x20000674

0800b18c <_getpid_r>:
 800b18c:	f7f7 b94c 	b.w	8002428 <_getpid>

0800b190 <_init>:
 800b190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b192:	bf00      	nop
 800b194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b196:	bc08      	pop	{r3}
 800b198:	469e      	mov	lr, r3
 800b19a:	4770      	bx	lr

0800b19c <_fini>:
 800b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19e:	bf00      	nop
 800b1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1a2:	bc08      	pop	{r3}
 800b1a4:	469e      	mov	lr, r3
 800b1a6:	4770      	bx	lr
