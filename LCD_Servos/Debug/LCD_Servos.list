
LCD_Servos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003238  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003434  08003434  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003434  08003434  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003434  08003434  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800343c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08003448  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08003448  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ac2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000192d  00000000  00000000  00029b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002b470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000782  00000000  00000000  0002be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281c2  00000000  00000000  0002c5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bfce  00000000  00000000  00054794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5ed6  00000000  00000000  00060762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002790  00000000  00000000  00156638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00158dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080033dc 	.word	0x080033dc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080033dc 	.word	0x080033dc

080001fc <lcd_command>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void lcd_command(uint8_t lcd_addr, uint8_t cmd) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af02      	add	r7, sp, #8
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	4613      	mov	r3, r2
 800020a:	71bb      	strb	r3, [r7, #6]
	uint8_t lcd_write_addr = lcd_addr << 1;
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	73fb      	strb	r3, [r7, #15]

	uint8_t cmd_buffer[5];
	uint8_t upper_nibble = cmd & 0xf0; // keep upper 4 bits of cmd and set lower 4 bits to 0
 8000212:	79bb      	ldrb	r3, [r7, #6]
 8000214:	f023 030f 	bic.w	r3, r3, #15
 8000218:	73bb      	strb	r3, [r7, #14]
	uint8_t lower_nibble = cmd << 4; // shift lower 4 bits of cmd into upper 4 bits and set lower 4 bits to 0
 800021a:	79bb      	ldrb	r3, [r7, #6]
 800021c:	011b      	lsls	r3, r3, #4
 800021e:	737b      	strb	r3, [r7, #13]

	cmd_buffer[0] = upper_nibble | (0b1100);
 8000220:	7bbb      	ldrb	r3, [r7, #14]
 8000222:	f043 030c 	orr.w	r3, r3, #12
 8000226:	b2db      	uxtb	r3, r3
 8000228:	723b      	strb	r3, [r7, #8]
	cmd_buffer[1] = upper_nibble | (0b1000);
 800022a:	7bbb      	ldrb	r3, [r7, #14]
 800022c:	f043 0308 	orr.w	r3, r3, #8
 8000230:	b2db      	uxtb	r3, r3
 8000232:	727b      	strb	r3, [r7, #9]
	cmd_buffer[2] = lower_nibble | (0b1100);
 8000234:	7b7b      	ldrb	r3, [r7, #13]
 8000236:	f043 030c 	orr.w	r3, r3, #12
 800023a:	b2db      	uxtb	r3, r3
 800023c:	72bb      	strb	r3, [r7, #10]
	cmd_buffer[3] = lower_nibble | (0b1000);
 800023e:	7b7b      	ldrb	r3, [r7, #13]
 8000240:	f043 0308 	orr.w	r3, r3, #8
 8000244:	b2db      	uxtb	r3, r3
 8000246:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, lcd_write_addr, cmd_buffer, 4, 10);
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	b299      	uxth	r1, r3
 800024c:	f107 0208 	add.w	r2, r7, #8
 8000250:	230a      	movs	r3, #10
 8000252:	9300      	str	r3, [sp, #0]
 8000254:	2304      	movs	r3, #4
 8000256:	4805      	ldr	r0, [pc, #20]	; (800026c <lcd_command+0x70>)
 8000258:	f001 f848 	bl	80012ec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800025c:	200a      	movs	r0, #10
 800025e:	f000 fd0d 	bl	8000c7c <HAL_Delay>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20000028 	.word	0x20000028

08000270 <lcd_data>:

void lcd_data(uint8_t lcd_addr, uint8_t cmd) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	460a      	mov	r2, r1
 800027a:	71fb      	strb	r3, [r7, #7]
 800027c:	4613      	mov	r3, r2
 800027e:	71bb      	strb	r3, [r7, #6]
	uint8_t lcd_write_addr = lcd_addr << 1;
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]

	uint8_t data_buffer[5];
	uint8_t upper_nibble = cmd & 0xf0; // keep upper 4 bits of cmd and set lower 4 bits to 0
 8000286:	79bb      	ldrb	r3, [r7, #6]
 8000288:	f023 030f 	bic.w	r3, r3, #15
 800028c:	73bb      	strb	r3, [r7, #14]
	uint8_t lower_nibble = cmd << 4; // shift lower 4 bits of cmd into upper 4 bits and set lower 4 bits to 0
 800028e:	79bb      	ldrb	r3, [r7, #6]
 8000290:	011b      	lsls	r3, r3, #4
 8000292:	737b      	strb	r3, [r7, #13]

	data_buffer[0] = upper_nibble | (0b1101);
 8000294:	7bbb      	ldrb	r3, [r7, #14]
 8000296:	f043 030d 	orr.w	r3, r3, #13
 800029a:	b2db      	uxtb	r3, r3
 800029c:	723b      	strb	r3, [r7, #8]
	data_buffer[1] = upper_nibble | (0b1001);
 800029e:	7bbb      	ldrb	r3, [r7, #14]
 80002a0:	f043 0309 	orr.w	r3, r3, #9
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	727b      	strb	r3, [r7, #9]
	data_buffer[2] = lower_nibble | (0b1101);
 80002a8:	7b7b      	ldrb	r3, [r7, #13]
 80002aa:	f043 030d 	orr.w	r3, r3, #13
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	72bb      	strb	r3, [r7, #10]
	data_buffer[3] = lower_nibble | (0b1001);
 80002b2:	7b7b      	ldrb	r3, [r7, #13]
 80002b4:	f043 0309 	orr.w	r3, r3, #9
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, lcd_write_addr, data_buffer, 4, 10);
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	b299      	uxth	r1, r3
 80002c0:	f107 0208 	add.w	r2, r7, #8
 80002c4:	230a      	movs	r3, #10
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2304      	movs	r3, #4
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <lcd_data+0x70>)
 80002cc:	f001 f80e 	bl	80012ec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80002d0:	200a      	movs	r0, #10
 80002d2:	f000 fcd3 	bl	8000c7c <HAL_Delay>
}
 80002d6:	bf00      	nop
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028

080002e4 <lcd_string>:

// Writes a C-string to the lcd at the given row and col
void lcd_string(uint8_t lcd_addr, uint8_t row, uint8_t col, const char* message) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	603b      	str	r3, [r7, #0]
 80002ec:	4603      	mov	r3, r0
 80002ee:	71fb      	strb	r3, [r7, #7]
 80002f0:	460b      	mov	r3, r1
 80002f2:	71bb      	strb	r3, [r7, #6]
 80002f4:	4613      	mov	r3, r2
 80002f6:	717b      	strb	r3, [r7, #5]

	uint8_t start_pos = 0x80 + (row * 0x40) + col;
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	3302      	adds	r3, #2
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	019b      	lsls	r3, r3, #6
 8000300:	b2da      	uxtb	r2, r3
 8000302:	797b      	ldrb	r3, [r7, #5]
 8000304:	4413      	add	r3, r2
 8000306:	73fb      	strb	r3, [r7, #15]

	lcd_command(lcd_addr, start_pos); // bring cursor to start
 8000308:	7bfa      	ldrb	r2, [r7, #15]
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4611      	mov	r1, r2
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff74 	bl	80001fc <lcd_command>

	while(*message != '\0') {
 8000314:	e009      	b.n	800032a <lcd_string+0x46>
		lcd_data(lcd_addr, message[0]);
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	781a      	ldrb	r2, [r3, #0]
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	4611      	mov	r1, r2
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ffa6 	bl	8000270 <lcd_data>
		message ++ ;
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	3301      	adds	r3, #1
 8000328:	603b      	str	r3, [r7, #0]
	while(*message != '\0') {
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d1f1      	bne.n	8000316 <lcd_string+0x32>
	}
}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3710      	adds	r7, #16
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <lcd_init>:


void lcd_init(uint8_t lcd_addr) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	uint8_t lcd_write_addr = lcd_addr << 1;
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	73fb      	strb	r3, [r7, #15]
//	// 6. Write data to CGRAM/DDRAM
//	uint8_t data6[] = {0b01000000, 0b10000000};
//	HAL_I2C_Master_Transmit(&hi2c1, lcd_write_addr, data6, 2, 10);

	// 1. Set to 4 bit operation (only this instruction executes as 8 bit)
	HAL_Delay(100); // must wait at least 40 ms after booting
 800034c:	2064      	movs	r0, #100	; 0x64
 800034e:	f000 fc95 	bl	8000c7c <HAL_Delay>
	lcd_command(lcd_addr, 0x30);
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2130      	movs	r1, #48	; 0x30
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff50 	bl	80001fc <lcd_command>
	HAL_Delay(10);
 800035c:	200a      	movs	r0, #10
 800035e:	f000 fc8d 	bl	8000c7c <HAL_Delay>
	lcd_command(lcd_addr, 0x28); // 0x28 -> function set 4 bits, 2 lines // 0010,1000
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2128      	movs	r1, #40	; 0x28
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff48 	bl	80001fc <lcd_command>
	HAL_Delay(10);
 800036c:	200a      	movs	r0, #10
 800036e:	f000 fc85 	bl	8000c7c <HAL_Delay>
	lcd_command(lcd_addr, 0x08); // 0x08 -> Clear display (without clearing DDRAM)
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	2108      	movs	r1, #8
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff40 	bl	80001fc <lcd_command>
	HAL_Delay(10);
 800037c:	200a      	movs	r0, #10
 800037e:	f000 fc7d 	bl	8000c7c <HAL_Delay>
	lcd_command(lcd_addr, 0x01); // 0x01 -> Clear display (and clear DDRAM)
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	2101      	movs	r1, #1
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff38 	bl	80001fc <lcd_command>
	HAL_Delay(10);
 800038c:	200a      	movs	r0, #10
 800038e:	f000 fc75 	bl	8000c7c <HAL_Delay>
	lcd_command(lcd_addr, 0x06); // 0x06 -> entry mode
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	2106      	movs	r1, #6
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff30 	bl	80001fc <lcd_command>
	HAL_Delay(10);
 800039c:	200a      	movs	r0, #10
 800039e:	f000 fc6d 	bl	8000c7c <HAL_Delay>
	lcd_command(lcd_addr, 0x0C); // 0x0C -> display on cursor off
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	210c      	movs	r1, #12
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff28 	bl	80001fc <lcd_command>
	HAL_Delay(10);
 80003ac:	200a      	movs	r0, #10
 80003ae:	f000 fc65 	bl	8000c7c <HAL_Delay>

	lcd_command(0x27, 0x80);
 80003b2:	2180      	movs	r1, #128	; 0x80
 80003b4:	2027      	movs	r0, #39	; 0x27
 80003b6:	f7ff ff21 	bl	80001fc <lcd_command>
	HAL_Delay(10);
 80003ba:	200a      	movs	r0, #10
 80003bc:	f000 fc5e 	bl	8000c7c <HAL_Delay>
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ce:	f000 fbe0 	bl	8000b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d2:	f000 f827 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d6:	f000 f8a9 	bl	800052c <MX_GPIO_Init>
  MX_I2C1_Init();
 80003da:	f000 f869 	bl	80004b0 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 80003de:	2064      	movs	r0, #100	; 0x64
 80003e0:	f000 fc4c 	bl	8000c7c <HAL_Delay>
  lcd_init(0x27);
 80003e4:	2027      	movs	r0, #39	; 0x27
 80003e6:	f7ff ffa9 	bl	800033c <lcd_init>
  HAL_Delay(100);
 80003ea:	2064      	movs	r0, #100	; 0x64
 80003ec:	f000 fc46 	bl	8000c7c <HAL_Delay>
//	  HAL_I2C_Master_Transmit(&hi2c1, LCD_WRITE_ADDR, write_data1, 0, 1000);
//	  int ret = HAL_I2C_Master_Transmit(&hi2c1, LCD_WRITE_ADDR, write_data2, 1, 1000);
//	  HAL_Delay(50);
	  //lcd_data(0x27, 'H');

	 for(int i = 0; i < 26; i++) {
 80003f0:	2300      	movs	r3, #0
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	e012      	b.n	800041c <main+0x54>
		 char c[2];
		 c[0] = 'A' + i;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	3341      	adds	r3, #65	; 0x41
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	703b      	strb	r3, [r7, #0]
		 c[1] = '\0';
 8000400:	2300      	movs	r3, #0
 8000402:	707b      	strb	r3, [r7, #1]
		lcd_string(0x27, 0, 0, c);
 8000404:	463b      	mov	r3, r7
 8000406:	2200      	movs	r2, #0
 8000408:	2100      	movs	r1, #0
 800040a:	2027      	movs	r0, #39	; 0x27
 800040c:	f7ff ff6a 	bl	80002e4 <lcd_string>
		HAL_Delay(200);
 8000410:	20c8      	movs	r0, #200	; 0xc8
 8000412:	f000 fc33 	bl	8000c7c <HAL_Delay>
	 for(int i = 0; i < 26; i++) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3301      	adds	r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b19      	cmp	r3, #25
 8000420:	dde9      	ble.n	80003f6 <main+0x2e>
 8000422:	e7e5      	b.n	80003f0 <main+0x28>

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b096      	sub	sp, #88	; 0x58
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	2244      	movs	r2, #68	; 0x44
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f002 ffa6 	bl	8003384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	463b      	mov	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000446:	f44f 7000 	mov.w	r0, #512	; 0x200
 800044a:	f001 fb2f 	bl	8001aac <HAL_PWREx_ControlVoltageScaling>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000454:	f000 fab0 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000458:	2310      	movs	r3, #16
 800045a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800045c:	2301      	movs	r3, #1
 800045e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000464:	2360      	movs	r3, #96	; 0x60
 8000466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000468:	2300      	movs	r3, #0
 800046a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4618      	mov	r0, r3
 8000472:	f001 fbcf 	bl	8001c14 <HAL_RCC_OscConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800047c:	f000 fa9c 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	230f      	movs	r3, #15
 8000482:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000494:	463b      	mov	r3, r7
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f001 ffd5 	bl	8002448 <HAL_RCC_ClockConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004a4:	f000 fa88 	bl	80009b8 <Error_Handler>
  }
}
 80004a8:	bf00      	nop
 80004aa:	3758      	adds	r7, #88	; 0x58
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_I2C1_Init+0x74>)
 80004b6:	4a1c      	ldr	r2, [pc, #112]	; (8000528 <MX_I2C1_Init+0x78>)
 80004b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80004ba:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <MX_I2C1_Init+0x74>)
 80004bc:	f640 6214 	movw	r2, #3604	; 0xe14
 80004c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_I2C1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c8:	4b16      	ldr	r3, [pc, #88]	; (8000524 <MX_I2C1_Init+0x74>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_I2C1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_I2C1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <MX_I2C1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_I2C1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_I2C1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <MX_I2C1_Init+0x74>)
 80004ee:	f000 fe61 	bl	80011b4 <HAL_I2C_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004f8:	f000 fa5e 	bl	80009b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004fc:	2100      	movs	r1, #0
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <MX_I2C1_Init+0x74>)
 8000500:	f001 fa1c 	bl	800193c <HAL_I2CEx_ConfigAnalogFilter>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800050a:	f000 fa55 	bl	80009b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800050e:	2100      	movs	r1, #0
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <MX_I2C1_Init+0x74>)
 8000512:	f001 fa5e 	bl	80019d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800051c:	f000 fa4c 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000028 	.word	0x20000028
 8000528:	40005400 	.word	0x40005400

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08e      	sub	sp, #56	; 0x38
 8000530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000542:	4bb2      	ldr	r3, [pc, #712]	; (800080c <MX_GPIO_Init+0x2e0>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4ab1      	ldr	r2, [pc, #708]	; (800080c <MX_GPIO_Init+0x2e0>)
 8000548:	f043 0310 	orr.w	r3, r3, #16
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4baf      	ldr	r3, [pc, #700]	; (800080c <MX_GPIO_Init+0x2e0>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0310 	and.w	r3, r3, #16
 8000556:	623b      	str	r3, [r7, #32]
 8000558:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4bac      	ldr	r3, [pc, #688]	; (800080c <MX_GPIO_Init+0x2e0>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4aab      	ldr	r2, [pc, #684]	; (800080c <MX_GPIO_Init+0x2e0>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4ba9      	ldr	r3, [pc, #676]	; (800080c <MX_GPIO_Init+0x2e0>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	61fb      	str	r3, [r7, #28]
 8000570:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000572:	4ba6      	ldr	r3, [pc, #664]	; (800080c <MX_GPIO_Init+0x2e0>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4aa5      	ldr	r2, [pc, #660]	; (800080c <MX_GPIO_Init+0x2e0>)
 8000578:	f043 0320 	orr.w	r3, r3, #32
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4ba3      	ldr	r3, [pc, #652]	; (800080c <MX_GPIO_Init+0x2e0>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0320 	and.w	r3, r3, #32
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058a:	4ba0      	ldr	r3, [pc, #640]	; (800080c <MX_GPIO_Init+0x2e0>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a9f      	ldr	r2, [pc, #636]	; (800080c <MX_GPIO_Init+0x2e0>)
 8000590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b9d      	ldr	r3, [pc, #628]	; (800080c <MX_GPIO_Init+0x2e0>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b9a      	ldr	r3, [pc, #616]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a99      	ldr	r2, [pc, #612]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b97      	ldr	r3, [pc, #604]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	4b94      	ldr	r3, [pc, #592]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a93      	ldr	r2, [pc, #588]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005c0:	f043 0302 	orr.w	r3, r3, #2
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b91      	ldr	r3, [pc, #580]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d2:	4b8e      	ldr	r3, [pc, #568]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a8d      	ldr	r2, [pc, #564]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b8b      	ldr	r3, [pc, #556]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0308 	and.w	r3, r3, #8
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ea:	4b88      	ldr	r3, [pc, #544]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a87      	ldr	r2, [pc, #540]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b85      	ldr	r3, [pc, #532]	; (800080c <MX_GPIO_Init+0x2e0>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000602:	f001 faf7 	bl	8001bf4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000606:	230c      	movs	r3, #12
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000616:	230d      	movs	r3, #13
 8000618:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800061a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061e:	4619      	mov	r1, r3
 8000620:	487b      	ldr	r0, [pc, #492]	; (8000810 <MX_GPIO_Init+0x2e4>)
 8000622:	f000 fc35 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000626:	2307      	movs	r3, #7
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800062a:	2312      	movs	r3, #18
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000636:	2304      	movs	r3, #4
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800063a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063e:	4619      	mov	r1, r3
 8000640:	4874      	ldr	r0, [pc, #464]	; (8000814 <MX_GPIO_Init+0x2e8>)
 8000642:	f000 fc25 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2302      	movs	r3, #2
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000656:	230d      	movs	r3, #13
 8000658:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800065a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065e:	4619      	mov	r1, r3
 8000660:	486c      	ldr	r0, [pc, #432]	; (8000814 <MX_GPIO_Init+0x2e8>)
 8000662:	f000 fc15 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000666:	233f      	movs	r3, #63	; 0x3f
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800066a:	230b      	movs	r3, #11
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000676:	4619      	mov	r1, r3
 8000678:	4867      	ldr	r0, [pc, #412]	; (8000818 <MX_GPIO_Init+0x2ec>)
 800067a:	f000 fc09 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800067e:	2301      	movs	r3, #1
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800068e:	2301      	movs	r3, #1
 8000690:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f000 fbf8 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80006a0:	230a      	movs	r3, #10
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006a4:	230b      	movs	r3, #11
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f000 fbeb 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006ba:	23f0      	movs	r3, #240	; 0xf0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006ca:	2305      	movs	r3, #5
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d2:	4619      	mov	r1, r3
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f000 fbda 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006dc:	2301      	movs	r3, #1
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80006ec:	2302      	movs	r3, #2
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	4619      	mov	r1, r3
 80006f6:	4849      	ldr	r0, [pc, #292]	; (800081c <MX_GPIO_Init+0x2f0>)
 80006f8:	f000 fbca 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006fc:	2302      	movs	r3, #2
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000700:	230b      	movs	r3, #11
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070c:	4619      	mov	r1, r3
 800070e:	4843      	ldr	r0, [pc, #268]	; (800081c <MX_GPIO_Init+0x2f0>)
 8000710:	f000 fbbe 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000714:	2344      	movs	r3, #68	; 0x44
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000724:	4619      	mov	r1, r3
 8000726:	483d      	ldr	r0, [pc, #244]	; (800081c <MX_GPIO_Init+0x2f0>)
 8000728:	f000 fbb2 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800072c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800073e:	2301      	movs	r3, #1
 8000740:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	4619      	mov	r1, r3
 8000748:	4831      	ldr	r0, [pc, #196]	; (8000810 <MX_GPIO_Init+0x2e4>)
 800074a:	f000 fba1 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800074e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000760:	2303      	movs	r3, #3
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4829      	ldr	r0, [pc, #164]	; (8000810 <MX_GPIO_Init+0x2e4>)
 800076c:	f000 fb90 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000782:	2301      	movs	r3, #1
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	4823      	ldr	r0, [pc, #140]	; (800081c <MX_GPIO_Init+0x2f0>)
 800078e:	f000 fb7f 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000792:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80007a4:	230d      	movs	r3, #13
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ac:	4619      	mov	r1, r3
 80007ae:	481b      	ldr	r0, [pc, #108]	; (800081c <MX_GPIO_Init+0x2f0>)
 80007b0:	f000 fb6e 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80007c6:	230e      	movs	r3, #14
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_GPIO_Init+0x2f0>)
 80007d2:	f000 fb5d 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007e8:	2307      	movs	r3, #7
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	4619      	mov	r1, r3
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0x2f4>)
 80007f4:	f000 fb4c 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80007f8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	e00c      	b.n	8000824 <MX_GPIO_Init+0x2f8>
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	48001000 	.word	0x48001000
 8000814:	48001400 	.word	0x48001400
 8000818:	48000800 	.word	0x48000800
 800081c:	48000400 	.word	0x48000400
 8000820:	48000c00 	.word	0x48000c00
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000826:	2302      	movs	r3, #2
 8000828:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	4619      	mov	r1, r3
 8000830:	485c      	ldr	r0, [pc, #368]	; (80009a4 <MX_GPIO_Init+0x478>)
 8000832:	f000 fb2d 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000836:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000848:	2308      	movs	r3, #8
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800084c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000850:	4619      	mov	r1, r3
 8000852:	4855      	ldr	r0, [pc, #340]	; (80009a8 <MX_GPIO_Init+0x47c>)
 8000854:	f000 fb1c 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000858:	2340      	movs	r3, #64	; 0x40
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000868:	230d      	movs	r3, #13
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	484e      	ldr	r0, [pc, #312]	; (80009ac <MX_GPIO_Init+0x480>)
 8000874:	f000 fb0c 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000888:	2302      	movs	r3, #2
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	4846      	ldr	r0, [pc, #280]	; (80009ac <MX_GPIO_Init+0x480>)
 8000894:	f000 fafc 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000898:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008aa:	230c      	movs	r3, #12
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	483d      	ldr	r0, [pc, #244]	; (80009ac <MX_GPIO_Init+0x480>)
 80008b6:	f000 faeb 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80008ba:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008cc:	230a      	movs	r3, #10
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f000 fad9 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f000 facb 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fa:	2301      	movs	r3, #1
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800090a:	2309      	movs	r3, #9
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	4823      	ldr	r0, [pc, #140]	; (80009a4 <MX_GPIO_Init+0x478>)
 8000916:	f000 fabb 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800091a:	2304      	movs	r3, #4
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800092a:	230c      	movs	r3, #12
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	4619      	mov	r1, r3
 8000934:	481b      	ldr	r0, [pc, #108]	; (80009a4 <MX_GPIO_Init+0x478>)
 8000936:	f000 faab 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800093a:	2378      	movs	r3, #120	; 0x78
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094a:	2307      	movs	r3, #7
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4619      	mov	r1, r3
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_GPIO_Init+0x478>)
 8000956:	f000 fa9b 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800095a:	2338      	movs	r3, #56	; 0x38
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800096a:	2306      	movs	r3, #6
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_GPIO_Init+0x484>)
 8000976:	f000 fa8b 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800097a:	2301      	movs	r3, #1
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800098a:	2302      	movs	r3, #2
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_GPIO_Init+0x488>)
 8000996:	f000 fa7b 	bl	8000e90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3738      	adds	r7, #56	; 0x38
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	48000c00 	.word	0x48000c00
 80009a8:	48001800 	.word	0x48001800
 80009ac:	48000800 	.word	0x48000800
 80009b0:	48000400 	.word	0x48000400
 80009b4:	48001000 	.word	0x48001000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x44>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HAL_MspInit+0x44>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6613      	str	r3, [r2, #96]	; 0x60
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x44>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6593      	str	r3, [r2, #88]	; 0x58
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0ae      	sub	sp, #184	; 0xb8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2294      	movs	r2, #148	; 0x94
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fca9 	bl	8003384 <memset>
  if(hi2c->Instance==I2C1)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a21      	ldr	r2, [pc, #132]	; (8000abc <HAL_I2C_MspInit+0xb0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d13b      	bne.n	8000ab4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a3c:	2340      	movs	r3, #64	; 0x40
 8000a3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 ff83 	bl	8002954 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a54:	f7ff ffb0 	bl	80009b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_I2C_MspInit+0xb4>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <HAL_I2C_MspInit+0xb4>)
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_I2C_MspInit+0xb4>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	f003 0302 	and.w	r3, r3, #2
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a94:	4619      	mov	r1, r3
 8000a96:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <HAL_I2C_MspInit+0xb8>)
 8000a98:	f000 f9fa 	bl	8000e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_I2C_MspInit+0xb4>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_I2C_MspInit+0xb4>)
 8000aa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_I2C_MspInit+0xb4>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	37b8      	adds	r7, #184	; 0xb8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f892 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b44:	f7ff ffea 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	; (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	; (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f002 fc11 	bl	8003394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b72:	f7ff fc29 	bl	80003c8 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b84:	0800343c 	.word	0x0800343c
  ldr r2, =_sbss
 8000b88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b8c:	20000080 	.word	0x20000080

08000b90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_IRQHandler>

08000b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f943 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 f80e 	bl	8000bc4 <HAL_InitTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e001      	b.n	8000bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb4:	f7ff ff06 	bl	80009c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d023      	beq.n	8000c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_InitTick+0x70>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f941 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10f      	bne.n	8000c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d809      	bhi.n	8000c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f919 	bl	8000e3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_InitTick+0x74>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e007      	b.n	8000c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e001      	b.n	8000c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000004 	.word	0x20000004

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x20>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x24>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_IncTick+0x24>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	2000007c 	.word	0x2000007c

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	2000007c 	.word	0x2000007c

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff ffee 	bl	8000c64 <HAL_GetTick>
 8000c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_Delay+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca2:	bf00      	nop
 8000ca4:	f7ff ffde 	bl	8000c64 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff47 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff5c 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffb0 	bl	8000de4 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9e:	e166      	b.n	800116e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8158 	beq.w	8001168 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d005      	beq.n	8000ed0 <HAL_GPIO_Init+0x40>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d130      	bne.n	8000f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f06:	2201      	movs	r2, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	f003 0201 	and.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d017      	beq.n	8000f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d123      	bne.n	8000fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	6939      	ldr	r1, [r7, #16]
 8000fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0203 	and.w	r2, r3, #3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80b2 	beq.w	8001168 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	4b61      	ldr	r3, [pc, #388]	; (800118c <HAL_GPIO_Init+0x2fc>)
 8001006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001008:	4a60      	ldr	r2, [pc, #384]	; (800118c <HAL_GPIO_Init+0x2fc>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6613      	str	r3, [r2, #96]	; 0x60
 8001010:	4b5e      	ldr	r3, [pc, #376]	; (800118c <HAL_GPIO_Init+0x2fc>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101c:	4a5c      	ldr	r2, [pc, #368]	; (8001190 <HAL_GPIO_Init+0x300>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001046:	d02b      	beq.n	80010a0 <HAL_GPIO_Init+0x210>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a52      	ldr	r2, [pc, #328]	; (8001194 <HAL_GPIO_Init+0x304>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d025      	beq.n	800109c <HAL_GPIO_Init+0x20c>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a51      	ldr	r2, [pc, #324]	; (8001198 <HAL_GPIO_Init+0x308>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d01f      	beq.n	8001098 <HAL_GPIO_Init+0x208>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a50      	ldr	r2, [pc, #320]	; (800119c <HAL_GPIO_Init+0x30c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d019      	beq.n	8001094 <HAL_GPIO_Init+0x204>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <HAL_GPIO_Init+0x310>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d013      	beq.n	8001090 <HAL_GPIO_Init+0x200>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <HAL_GPIO_Init+0x314>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d00d      	beq.n	800108c <HAL_GPIO_Init+0x1fc>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x318>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d007      	beq.n	8001088 <HAL_GPIO_Init+0x1f8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x31c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d101      	bne.n	8001084 <HAL_GPIO_Init+0x1f4>
 8001080:	2307      	movs	r3, #7
 8001082:	e00e      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 8001084:	2308      	movs	r3, #8
 8001086:	e00c      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 8001088:	2306      	movs	r3, #6
 800108a:	e00a      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 800108c:	2305      	movs	r3, #5
 800108e:	e008      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 8001090:	2304      	movs	r3, #4
 8001092:	e006      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 8001094:	2303      	movs	r3, #3
 8001096:	e004      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 8001098:	2302      	movs	r3, #2
 800109a:	e002      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 80010a0:	2300      	movs	r3, #0
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	f002 0203 	and.w	r2, r2, #3
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	4093      	lsls	r3, r2
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010b2:	4937      	ldr	r1, [pc, #220]	; (8001190 <HAL_GPIO_Init+0x300>)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010c0:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <HAL_GPIO_Init+0x320>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e4:	4a32      	ldr	r2, [pc, #200]	; (80011b0 <HAL_GPIO_Init+0x320>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_GPIO_Init+0x320>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800110e:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_GPIO_Init+0x320>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	f47f ae91 	bne.w	8000ea0 <HAL_GPIO_Init+0x10>
  }
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000
 8001194:	48000400 	.word	0x48000400
 8001198:	48000800 	.word	0x48000800
 800119c:	48000c00 	.word	0x48000c00
 80011a0:	48001000 	.word	0x48001000
 80011a4:	48001400 	.word	0x48001400
 80011a8:	48001800 	.word	0x48001800
 80011ac:	48001c00 	.word	0x48001c00
 80011b0:	40010400 	.word	0x40010400

080011b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e08d      	b.n	80012e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fc16 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2224      	movs	r2, #36	; 0x24
 80011e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0201 	bic.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001204:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001214:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d107      	bne.n	800122e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	e006      	b.n	800123c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800123a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d108      	bne.n	8001256 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	e007      	b.n	8001266 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001264:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001278:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001288:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69d9      	ldr	r1, [r3, #28]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1a      	ldr	r2, [r3, #32]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2220      	movs	r2, #32
 80012ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	461a      	mov	r2, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	817b      	strh	r3, [r7, #10]
 80012fc:	4613      	mov	r3, r2
 80012fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b20      	cmp	r3, #32
 800130a:	f040 80fd 	bne.w	8001508 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_I2C_Master_Transmit+0x30>
 8001318:	2302      	movs	r3, #2
 800131a:	e0f6      	b.n	800150a <HAL_I2C_Master_Transmit+0x21e>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001324:	f7ff fc9e 	bl	8000c64 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2319      	movs	r3, #25
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 f914 	bl	8001564 <I2C_WaitOnFlagUntilTimeout>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0e1      	b.n	800150a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2221      	movs	r2, #33	; 0x21
 800134a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2210      	movs	r2, #16
 8001352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	893a      	ldrh	r2, [r7, #8]
 8001366:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001372:	b29b      	uxth	r3, r3
 8001374:	2bff      	cmp	r3, #255	; 0xff
 8001376:	d906      	bls.n	8001386 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	22ff      	movs	r2, #255	; 0xff
 800137c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800137e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e007      	b.n	8001396 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138a:	b29a      	uxth	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001390:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001394:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139a:	2b00      	cmp	r3, #0
 800139c:	d024      	beq.n	80013e8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	3b01      	subs	r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	8979      	ldrh	r1, [r7, #10]
 80013da:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <HAL_I2C_Master_Transmit+0x228>)
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 fa79 	bl	80018d8 <I2C_TransferConfig>
 80013e6:	e066      	b.n	80014b6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	8979      	ldrh	r1, [r7, #10]
 80013f0:	4b48      	ldr	r3, [pc, #288]	; (8001514 <HAL_I2C_Master_Transmit+0x228>)
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 fa6e 	bl	80018d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80013fc:	e05b      	b.n	80014b6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	6a39      	ldr	r1, [r7, #32]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 f8fd 	bl	8001602 <I2C_WaitOnTXISFlagUntilTimeout>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e07b      	b.n	800150a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142c:	b29b      	uxth	r3, r3
 800142e:	3b01      	subs	r3, #1
 8001430:	b29a      	uxth	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143a:	3b01      	subs	r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001446:	b29b      	uxth	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d034      	beq.n	80014b6 <HAL_I2C_Master_Transmit+0x1ca>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001450:	2b00      	cmp	r3, #0
 8001452:	d130      	bne.n	80014b6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	2200      	movs	r2, #0
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 f880 	bl	8001564 <I2C_WaitOnFlagUntilTimeout>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e04d      	b.n	800150a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001472:	b29b      	uxth	r3, r3
 8001474:	2bff      	cmp	r3, #255	; 0xff
 8001476:	d90e      	bls.n	8001496 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001482:	b2da      	uxtb	r2, r3
 8001484:	8979      	ldrh	r1, [r7, #10]
 8001486:	2300      	movs	r3, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 fa22 	bl	80018d8 <I2C_TransferConfig>
 8001494:	e00f      	b.n	80014b6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149a:	b29a      	uxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	8979      	ldrh	r1, [r7, #10]
 80014a8:	2300      	movs	r3, #0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 fa11 	bl	80018d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d19e      	bne.n	80013fe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	6a39      	ldr	r1, [r7, #32]
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 f8e3 	bl	8001690 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e01a      	b.n	800150a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2220      	movs	r2, #32
 80014da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6859      	ldr	r1, [r3, #4]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_I2C_Master_Transmit+0x22c>)
 80014e8:	400b      	ands	r3, r1
 80014ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	e000      	b.n	800150a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001508:	2302      	movs	r3, #2
  }
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	80002000 	.word	0x80002000
 8001518:	fe00e800 	.word	0xfe00e800

0800151c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b02      	cmp	r3, #2
 8001530:	d103      	bne.n	800153a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d007      	beq.n	8001558 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	619a      	str	r2, [r3, #24]
  }
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001574:	e031      	b.n	80015da <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d02d      	beq.n	80015da <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800157e:	f7ff fb71 	bl	8000c64 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d302      	bcc.n	8001594 <I2C_WaitOnFlagUntilTimeout+0x30>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d122      	bne.n	80015da <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	4013      	ands	r3, r2
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	bf0c      	ite	eq
 80015a4:	2301      	moveq	r3, #1
 80015a6:	2300      	movne	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d113      	bne.n	80015da <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f043 0220 	orr.w	r2, r3, #32
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2220      	movs	r2, #32
 80015c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699a      	ldr	r2, [r3, #24]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4013      	ands	r3, r2
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	bf0c      	ite	eq
 80015ea:	2301      	moveq	r3, #1
 80015ec:	2300      	movne	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d0be      	beq.n	8001576 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800160e:	e033      	b.n	8001678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f87f 	bl	8001718 <I2C_IsErrorOccurred>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e031      	b.n	8001688 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162a:	d025      	beq.n	8001678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162c:	f7ff fb1a 	bl	8000c64 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	429a      	cmp	r2, r3
 800163a:	d302      	bcc.n	8001642 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11a      	bne.n	8001678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b02      	cmp	r3, #2
 800164e:	d013      	beq.n	8001678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	f043 0220 	orr.w	r2, r3, #32
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2220      	movs	r2, #32
 8001660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e007      	b.n	8001688 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b02      	cmp	r3, #2
 8001684:	d1c4      	bne.n	8001610 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800169c:	e02f      	b.n	80016fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f838 	bl	8001718 <I2C_IsErrorOccurred>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e02d      	b.n	800170e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b2:	f7ff fad7 	bl	8000c64 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d302      	bcc.n	80016c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11a      	bne.n	80016fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	d013      	beq.n	80016fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f043 0220 	orr.w	r2, r3, #32
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2220      	movs	r2, #32
 80016e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e007      	b.n	800170e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	2b20      	cmp	r3, #32
 800170a:	d1c8      	bne.n	800169e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d068      	beq.n	8001816 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2210      	movs	r2, #16
 800174a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800174c:	e049      	b.n	80017e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d045      	beq.n	80017e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001756:	f7ff fa85 	bl	8000c64 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	429a      	cmp	r2, r3
 8001764:	d302      	bcc.n	800176c <I2C_IsErrorOccurred+0x54>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d13a      	bne.n	80017e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800177e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800178a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800178e:	d121      	bne.n	80017d4 <I2C_IsErrorOccurred+0xbc>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001796:	d01d      	beq.n	80017d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001798:	7cfb      	ldrb	r3, [r7, #19]
 800179a:	2b20      	cmp	r3, #32
 800179c:	d01a      	beq.n	80017d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80017ae:	f7ff fa59 	bl	8000c64 <HAL_GetTick>
 80017b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017b4:	e00e      	b.n	80017d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80017b6:	f7ff fa55 	bl	8000c64 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b19      	cmp	r3, #25
 80017c2:	d907      	bls.n	80017d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80017d2:	e006      	b.n	80017e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	2b20      	cmp	r3, #32
 80017e0:	d1e9      	bne.n	80017b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0320 	and.w	r3, r3, #32
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	d003      	beq.n	80017f8 <I2C_IsErrorOccurred+0xe0>
 80017f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0aa      	beq.n	800174e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80017f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d103      	bne.n	8001808 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2220      	movs	r2, #32
 8001806:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00b      	beq.n	8001840 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001838:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00b      	beq.n	8001884 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001888:	2b00      	cmp	r3, #0
 800188a:	d01c      	beq.n	80018c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff fe45 	bl	800151c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <I2C_IsErrorOccurred+0x1bc>)
 800189e:	400b      	ands	r3, r1
 80018a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2220      	movs	r2, #32
 80018b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80018c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	fe00e800 	.word	0xfe00e800

080018d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80018d8:	b480      	push	{r7}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	817b      	strh	r3, [r7, #10]
 80018e6:	4613      	mov	r3, r2
 80018e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018ea:	897b      	ldrh	r3, [r7, #10]
 80018ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018f0:	7a7b      	ldrb	r3, [r7, #9]
 80018f2:	041b      	lsls	r3, r3, #16
 80018f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	4313      	orrs	r3, r2
 8001902:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001906:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	0d5b      	lsrs	r3, r3, #21
 8001912:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <I2C_TransferConfig+0x60>)
 8001918:	430b      	orrs	r3, r1
 800191a:	43db      	mvns	r3, r3
 800191c:	ea02 0103 	and.w	r1, r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	03ff63ff 	.word	0x03ff63ff

0800193c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b20      	cmp	r3, #32
 8001950:	d138      	bne.n	80019c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800195c:	2302      	movs	r3, #2
 800195e:	e032      	b.n	80019c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800198e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e000      	b.n	80019c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019c4:	2302      	movs	r3, #2
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	d139      	bne.n	8001a5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e033      	b.n	8001a5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2224      	movs	r2, #36	; 0x24
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e000      	b.n	8001a5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a5c:	2302      	movs	r3, #2
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7c:	d102      	bne.n	8001a84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a82:	e00b      	b.n	8001a9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a92:	d102      	bne.n	8001a9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a98:	e000      	b.n	8001a9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40007000 	.word	0x40007000

08001aac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d141      	bne.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aba:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac6:	d131      	bne.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac8:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ace:	4a46      	ldr	r2, [pc, #280]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad8:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ae0:	4a41      	ldr	r2, [pc, #260]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2232      	movs	r2, #50	; 0x32
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	4a3f      	ldr	r2, [pc, #252]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001af4:	fba2 2303 	umull	r2, r3, r2, r3
 8001af8:	0c9b      	lsrs	r3, r3, #18
 8001afa:	3301      	adds	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afe:	e002      	b.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b12:	d102      	bne.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f2      	bne.n	8001b00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b1a:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b26:	d158      	bne.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e057      	b.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b3c:	e04d      	b.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b44:	d141      	bne.n	8001bca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b46:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b52:	d131      	bne.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b5a:	4a23      	ldr	r2, [pc, #140]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b6c:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2232      	movs	r2, #50	; 0x32
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	0c9b      	lsrs	r3, r3, #18
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b8a:	e002      	b.n	8001b92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9e:	d102      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f2      	bne.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb2:	d112      	bne.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e011      	b.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bc8:	e007      	b.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40007000 	.word	0x40007000
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	431bde83 	.word	0x431bde83

08001bf4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c02:	6053      	str	r3, [r2, #4]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40007000 	.word	0x40007000

08001c14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f000 bc08 	b.w	8002438 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c28:	4b96      	ldr	r3, [pc, #600]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c32:	4b94      	ldr	r3, [pc, #592]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80e4 	beq.w	8001e12 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_RCC_OscConfig+0x4c>
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	f040 808b 	bne.w	8001d6e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	f040 8087 	bne.w	8001d6e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c60:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_OscConfig+0x64>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e3df      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1a      	ldr	r2, [r3, #32]
 8001c7c:	4b81      	ldr	r3, [pc, #516]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d004      	beq.n	8001c92 <HAL_RCC_OscConfig+0x7e>
 8001c88:	4b7e      	ldr	r3, [pc, #504]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c90:	e005      	b.n	8001c9e <HAL_RCC_OscConfig+0x8a>
 8001c92:	4b7c      	ldr	r3, [pc, #496]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d223      	bcs.n	8001cea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fd94 	bl	80027d4 <RCC_SetFlashLatencyFromMSIRange>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e3c0      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb6:	4b73      	ldr	r3, [pc, #460]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a72      	ldr	r2, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	f043 0308 	orr.w	r3, r3, #8
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	496d      	ldr	r1, [pc, #436]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd4:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	4968      	ldr	r1, [pc, #416]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
 8001ce8:	e025      	b.n	8001d36 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cea:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a65      	ldr	r2, [pc, #404]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4960      	ldr	r1, [pc, #384]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d08:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	495b      	ldr	r1, [pc, #364]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fd54 	bl	80027d4 <RCC_SetFlashLatencyFromMSIRange>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e380      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d36:	f000 fcc1 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	4950      	ldr	r1, [pc, #320]	; (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001d48:	5ccb      	ldrb	r3, [r1, r3]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	4a4e      	ldr	r2, [pc, #312]	; (8001e8c <HAL_RCC_OscConfig+0x278>)
 8001d54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d56:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <HAL_RCC_OscConfig+0x27c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ff32 	bl	8000bc4 <HAL_InitTick>
 8001d60:	4603      	mov	r3, r0
 8001d62:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d052      	beq.n	8001e10 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	e364      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d032      	beq.n	8001ddc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d76:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a42      	ldr	r2, [pc, #264]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d82:	f7fe ff6f 	bl	8000c64 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d8a:	f7fe ff6b 	bl	8000c64 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e34d      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a35      	ldr	r2, [pc, #212]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4930      	ldr	r1, [pc, #192]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	492b      	ldr	r1, [pc, #172]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
 8001dda:	e01a      	b.n	8001e12 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001de8:	f7fe ff3c 	bl	8000c64 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001df0:	f7fe ff38 	bl	8000c64 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e31a      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x1dc>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d073      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_OscConfig+0x21c>
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d10e      	bne.n	8001e48 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d10b      	bne.n	8001e48 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d063      	beq.n	8001f04 <HAL_RCC_OscConfig+0x2f0>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d15f      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e2f7      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e50:	d106      	bne.n	8001e60 <HAL_RCC_OscConfig+0x24c>
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e025      	b.n	8001eac <HAL_RCC_OscConfig+0x298>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e68:	d114      	bne.n	8001e94 <HAL_RCC_OscConfig+0x280>
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a02      	ldr	r2, [pc, #8]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e013      	b.n	8001eac <HAL_RCC_OscConfig+0x298>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	080033f4 	.word	0x080033f4
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000004 	.word	0x20000004
 8001e94:	4ba0      	ldr	r3, [pc, #640]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a9f      	ldr	r2, [pc, #636]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b9d      	ldr	r3, [pc, #628]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a9c      	ldr	r2, [pc, #624]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7fe fed6 	bl	8000c64 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7fe fed2 	bl	8000c64 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e2b4      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ece:	4b92      	ldr	r3, [pc, #584]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2a8>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7fe fec2 	bl	8000c64 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7fe febe 	bl	8000c64 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e2a0      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef6:	4b88      	ldr	r3, [pc, #544]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2d0>
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d060      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_OscConfig+0x310>
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d119      	bne.n	8001f52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d116      	bne.n	8001f52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f24:	4b7c      	ldr	r3, [pc, #496]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_OscConfig+0x328>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e27d      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b76      	ldr	r3, [pc, #472]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	061b      	lsls	r3, r3, #24
 8001f4a:	4973      	ldr	r1, [pc, #460]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f50:	e040      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d023      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5a:	4b6f      	ldr	r3, [pc, #444]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6e      	ldr	r2, [pc, #440]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe fe7d 	bl	8000c64 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7fe fe79 	bl	8000c64 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e25b      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f80:	4b65      	ldr	r3, [pc, #404]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b62      	ldr	r3, [pc, #392]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	495f      	ldr	r1, [pc, #380]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
 8001fa0:	e018      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a5c      	ldr	r2, [pc, #368]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7fe fe59 	bl	8000c64 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb6:	f7fe fe55 	bl	8000c64 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e237      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc8:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d03c      	beq.n	800205a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01c      	beq.n	8002022 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fee:	4a4a      	ldr	r2, [pc, #296]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fe34 	bl	8000c64 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7fe fe30 	bl	8000c64 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e212      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002012:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8002014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ef      	beq.n	8002000 <HAL_RCC_OscConfig+0x3ec>
 8002020:	e01b      	b.n	800205a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8002024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002028:	4a3b      	ldr	r2, [pc, #236]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7fe fe17 	bl	8000c64 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203a:	f7fe fe13 	bl	8000c64 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1f5      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800204c:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 800204e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ef      	bne.n	800203a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80a6 	beq.w	80021b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10d      	bne.n	8002094 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	4a26      	ldr	r2, [pc, #152]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002082:	6593      	str	r3, [r2, #88]	; 0x58
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002090:	2301      	movs	r3, #1
 8002092:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_RCC_OscConfig+0x508>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d118      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_RCC_OscConfig+0x508>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_RCC_OscConfig+0x508>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ac:	f7fe fdda 	bl	8000c64 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b4:	f7fe fdd6 	bl	8000c64 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1b8      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_RCC_OscConfig+0x508>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d108      	bne.n	80020ec <HAL_RCC_OscConfig+0x4d8>
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ea:	e029      	b.n	8002140 <HAL_RCC_OscConfig+0x52c>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d115      	bne.n	8002120 <HAL_RCC_OscConfig+0x50c>
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	4a03      	ldr	r2, [pc, #12]	; (8002118 <HAL_RCC_OscConfig+0x504>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002114:	e014      	b.n	8002140 <HAL_RCC_OscConfig+0x52c>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
 8002120:	4b9d      	ldr	r3, [pc, #628]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002126:	4a9c      	ldr	r2, [pc, #624]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002130:	4b99      	ldr	r3, [pc, #612]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	4a98      	ldr	r2, [pc, #608]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d016      	beq.n	8002176 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7fe fd8c 	bl	8000c64 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7fe fd88 	bl	8000c64 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e168      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002166:	4b8c      	ldr	r3, [pc, #560]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ed      	beq.n	8002150 <HAL_RCC_OscConfig+0x53c>
 8002174:	e015      	b.n	80021a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002176:	f7fe fd75 	bl	8000c64 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fd71 	bl	8000c64 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e151      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002194:	4b80      	ldr	r3, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ed      	bne.n	800217e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a2:	7ffb      	ldrb	r3, [r7, #31]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a8:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	4a7a      	ldr	r2, [pc, #488]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 80021ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d03c      	beq.n	800223a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01c      	beq.n	8002202 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021c8:	4b73      	ldr	r3, [pc, #460]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 80021ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ce:	4a72      	ldr	r2, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7fe fd44 	bl	8000c64 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e0:	f7fe fd40 	bl	8000c64 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e122      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021f2:	4b69      	ldr	r3, [pc, #420]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 80021f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ef      	beq.n	80021e0 <HAL_RCC_OscConfig+0x5cc>
 8002200:	e01b      	b.n	800223a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002208:	4a63      	ldr	r2, [pc, #396]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7fe fd27 	bl	8000c64 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800221a:	f7fe fd23 	bl	8000c64 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e105      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800222c:	4b5a      	ldr	r3, [pc, #360]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 800222e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ef      	bne.n	800221a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80f9 	beq.w	8002436 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	2b02      	cmp	r3, #2
 800224a:	f040 80cf 	bne.w	80023ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800224e:	4b52      	ldr	r3, [pc, #328]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f003 0203 	and.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	429a      	cmp	r2, r3
 8002260:	d12c      	bne.n	80022bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	3b01      	subs	r3, #1
 800226e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d123      	bne.n	80022bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d11b      	bne.n	80022bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d113      	bne.n	80022bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	3b01      	subs	r3, #1
 80022a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d109      	bne.n	80022bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	3b01      	subs	r3, #1
 80022b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d071      	beq.n	80023a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d068      	beq.n	8002394 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022c2:	4b35      	ldr	r3, [pc, #212]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022ce:	4b32      	ldr	r3, [pc, #200]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0ac      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 80022e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022ea:	f7fe fcbb 	bl	8000c64 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe fcb7 	bl	8000c64 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e099      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002310:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4b21      	ldr	r3, [pc, #132]	; (800239c <HAL_RCC_OscConfig+0x788>)
 8002316:	4013      	ands	r3, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002320:	3a01      	subs	r2, #1
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	4311      	orrs	r1, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800232a:	0212      	lsls	r2, r2, #8
 800232c:	4311      	orrs	r1, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002332:	0852      	lsrs	r2, r2, #1
 8002334:	3a01      	subs	r2, #1
 8002336:	0552      	lsls	r2, r2, #21
 8002338:	4311      	orrs	r1, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800233e:	0852      	lsrs	r2, r2, #1
 8002340:	3a01      	subs	r2, #1
 8002342:	0652      	lsls	r2, r2, #25
 8002344:	4311      	orrs	r1, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800234a:	06d2      	lsls	r2, r2, #27
 800234c:	430a      	orrs	r2, r1
 800234e:	4912      	ldr	r1, [pc, #72]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002350:	4313      	orrs	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800236a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800236c:	f7fe fc7a 	bl	8000c64 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe fc76 	bl	8000c64 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e058      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_RCC_OscConfig+0x784>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002392:	e050      	b.n	8002436 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e04f      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
 8002398:	40021000 	.word	0x40021000
 800239c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a0:	4b27      	ldr	r3, [pc, #156]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d144      	bne.n	8002436 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023ac:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a23      	ldr	r2, [pc, #140]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b8:	4b21      	ldr	r3, [pc, #132]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a20      	ldr	r2, [pc, #128]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023c4:	f7fe fc4e 	bl	8000c64 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe fc4a 	bl	8000c64 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e02c      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x7b8>
 80023ea:	e024      	b.n	8002436 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d01f      	beq.n	8002432 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 80023f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7fe fc31 	bl	8000c64 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7fe fc2d 	bl	8000c64 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e00f      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	4905      	ldr	r1, [pc, #20]	; (8002440 <HAL_RCC_OscConfig+0x82c>)
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_RCC_OscConfig+0x830>)
 800242c:	4013      	ands	r3, r2
 800242e:	60cb      	str	r3, [r1, #12]
 8002430:	e001      	b.n	8002436 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	feeefffc 	.word	0xfeeefffc

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e11d      	b.n	800269c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b90      	ldr	r3, [pc, #576]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b8d      	ldr	r3, [pc, #564]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 020f 	bic.w	r2, r3, #15
 8002476:	498b      	ldr	r1, [pc, #556]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b89      	ldr	r3, [pc, #548]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e105      	b.n	800269c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	4b81      	ldr	r3, [pc, #516]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d908      	bls.n	80024be <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b7e      	ldr	r3, [pc, #504]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	497b      	ldr	r1, [pc, #492]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d079      	beq.n	80025be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d11e      	bne.n	8002510 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d2:	4b75      	ldr	r3, [pc, #468]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0dc      	b.n	800269c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80024e2:	f000 f9d1 	bl	8002888 <RCC_GetSysClockFreqFromPLLSource>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4a70      	ldr	r2, [pc, #448]	; (80026ac <HAL_RCC_ClockConfig+0x264>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d946      	bls.n	800257c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024ee:	4b6e      	ldr	r3, [pc, #440]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d140      	bne.n	800257c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024fa:	4b6b      	ldr	r3, [pc, #428]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002502:	4a69      	ldr	r2, [pc, #420]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002508:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e035      	b.n	800257c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d107      	bne.n	8002528 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002518:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d115      	bne.n	8002550 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0b9      	b.n	800269c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002530:	4b5d      	ldr	r3, [pc, #372]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0ad      	b.n	800269c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002540:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0a5      	b.n	800269c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002550:	f000 f8b4 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 8002554:	4603      	mov	r3, r0
 8002556:	4a55      	ldr	r2, [pc, #340]	; (80026ac <HAL_RCC_ClockConfig+0x264>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d90f      	bls.n	800257c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800255c:	4b52      	ldr	r3, [pc, #328]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002568:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002570:	4a4d      	ldr	r2, [pc, #308]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002576:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800257c:	4b4a      	ldr	r3, [pc, #296]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 0203 	bic.w	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4947      	ldr	r1, [pc, #284]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258e:	f7fe fb69 	bl	8000c64 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002594:	e00a      	b.n	80025ac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002596:	f7fe fb65 	bl	8000c64 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e077      	b.n	800269c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ac:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 020c 	and.w	r2, r3, #12
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d1eb      	bne.n	8002596 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b80      	cmp	r3, #128	; 0x80
 80025c2:	d105      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025c4:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a37      	ldr	r2, [pc, #220]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80025ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d010      	beq.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d208      	bcs.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	492b      	ldr	r1, [pc, #172]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d210      	bcs.n	800262e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 020f 	bic.w	r2, r3, #15
 8002614:	4923      	ldr	r1, [pc, #140]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d001      	beq.n	800262e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e036      	b.n	800269c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	4918      	ldr	r1, [pc, #96]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d009      	beq.n	800266c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4910      	ldr	r1, [pc, #64]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800266c:	f000 f826 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	490c      	ldr	r1, [pc, #48]	; (80026b0 <HAL_RCC_ClockConfig+0x268>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <HAL_RCC_ClockConfig+0x26c>)
 800268a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_RCC_ClockConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fa97 	bl	8000bc4 <HAL_InitTick>
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]

  return status;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40022000 	.word	0x40022000
 80026a8:	40021000 	.word	0x40021000
 80026ac:	04c4b400 	.word	0x04c4b400
 80026b0:	080033f4 	.word	0x080033f4
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d4:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x34>
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d121      	bne.n	800272e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d11e      	bne.n	800272e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026f0:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d107      	bne.n	800270c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026fc:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	e005      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002718:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002720:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d102      	bne.n	800273a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	e004      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d101      	bne.n	8002744 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002742:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d134      	bne.n	80027b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d003      	beq.n	8002762 <HAL_RCC_GetSysClockFreq+0xa6>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d003      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0xac>
 8002760:	e005      	b.n	800276e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002762:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002764:	617b      	str	r3, [r7, #20]
      break;
 8002766:	e005      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800276a:	617b      	str	r3, [r7, #20]
      break;
 800276c:	e002      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	617b      	str	r3, [r7, #20]
      break;
 8002772:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3301      	adds	r3, #1
 8002780:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	fb03 f202 	mul.w	r2, r3, r2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	0e5b      	lsrs	r3, r3, #25
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	3301      	adds	r3, #1
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027b4:	69bb      	ldr	r3, [r7, #24]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08003404 	.word	0x08003404
 80027cc:	00f42400 	.word	0x00f42400
 80027d0:	007a1200 	.word	0x007a1200

080027d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027ec:	f7ff f93e 	bl	8001a6c <HAL_PWREx_GetVoltageRange>
 80027f0:	6178      	str	r0, [r7, #20]
 80027f2:	e014      	b.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	4a21      	ldr	r2, [pc, #132]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800280c:	f7ff f92e 	bl	8001a6c <HAL_PWREx_GetVoltageRange>
 8002810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002824:	d10b      	bne.n	800283e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d913      	bls.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2ba0      	cmp	r3, #160	; 0xa0
 8002830:	d902      	bls.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002832:	2302      	movs	r3, #2
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	e00d      	b.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002838:	2301      	movs	r3, #1
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	e00a      	b.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b7f      	cmp	r3, #127	; 0x7f
 8002842:	d902      	bls.n	800284a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002844:	2302      	movs	r3, #2
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e004      	b.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b70      	cmp	r3, #112	; 0x70
 800284e:	d101      	bne.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002850:	2301      	movs	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 020f 	bic.w	r2, r3, #15
 800285c:	4909      	ldr	r1, [pc, #36]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	40022000 	.word	0x40022000

08002888 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d00b      	beq.n	80028b6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d825      	bhi.n	80028f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d008      	beq.n	80028bc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d11f      	bne.n	80028f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028b2:	613b      	str	r3, [r7, #16]
    break;
 80028b4:	e01f      	b.n	80028f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80028b6:	4b25      	ldr	r3, [pc, #148]	; (800294c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80028b8:	613b      	str	r3, [r7, #16]
    break;
 80028ba:	e01c      	b.n	80028f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e005      	b.n	80028e4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80028e4:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ec:	613b      	str	r3, [r7, #16]
    break;
 80028ee:	e002      	b.n	80028f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
    break;
 80028f4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	3301      	adds	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	fb03 f202 	mul.w	r2, r3, r2
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0e5b      	lsrs	r3, r3, #25
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	3301      	adds	r3, #1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002936:	683b      	ldr	r3, [r7, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40021000 	.word	0x40021000
 8002948:	00f42400 	.word	0x00f42400
 800294c:	007a1200 	.word	0x007a1200
 8002950:	08003404 	.word	0x08003404

08002954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800295c:	2300      	movs	r3, #0
 800295e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002960:	2300      	movs	r3, #0
 8002962:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296c:	2b00      	cmp	r3, #0
 800296e:	d040      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d02a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d825      	bhi.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800297c:	2b60      	cmp	r3, #96	; 0x60
 800297e:	d026      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002980:	2b60      	cmp	r3, #96	; 0x60
 8002982:	d821      	bhi.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d006      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	d81d      	bhi.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002990:	2b20      	cmp	r3, #32
 8002992:	d010      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002994:	e018      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002996:	4b89      	ldr	r3, [pc, #548]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4a88      	ldr	r2, [pc, #544]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a2:	e015      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fb02 	bl	8002fb4 <RCCEx_PLLSAI1_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b4:	e00c      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3320      	adds	r3, #32
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fbed 	bl	800319c <RCCEx_PLLSAI2_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c6:	e003      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	74fb      	strb	r3, [r7, #19]
      break;
 80029cc:	e000      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80029ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d6:	4b79      	ldr	r3, [pc, #484]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029dc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e4:	4975      	ldr	r1, [pc, #468]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80029ec:	e001      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d047      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a06:	d030      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0c:	d82a      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a12:	d02a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a18:	d824      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a24:	d81e      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2e:	d010      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a30:	e018      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a32:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4a61      	ldr	r2, [pc, #388]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a3e:	e015      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fab4 	bl	8002fb4 <RCCEx_PLLSAI1_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a50:	e00c      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3320      	adds	r3, #32
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fb9f 	bl	800319c <RCCEx_PLLSAI2_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a62:	e003      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	74fb      	strb	r3, [r7, #19]
      break;
 8002a68:	e000      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10b      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a72:	4b52      	ldr	r3, [pc, #328]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	494e      	ldr	r1, [pc, #312]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a88:	e001      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 809f 	beq.w	8002bda <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aa0:	4b46      	ldr	r3, [pc, #280]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	4a40      	ldr	r2, [pc, #256]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a3a      	ldr	r2, [pc, #232]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ade:	f7fe f8c1 	bl	8000c64 <HAL_GetTick>
 8002ae2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ae4:	e009      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7fe f8bd 	bl	8000c64 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d902      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	74fb      	strb	r3, [r7, #19]
        break;
 8002af8:	e005      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0ef      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d15b      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b16:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01f      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d019      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b56:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d016      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe f87c 	bl	8000c64 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fe f878 	bl	8000c64 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d902      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	74fb      	strb	r3, [r7, #19]
            break;
 8002b86:	e006      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ec      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b9c:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	4903      	ldr	r1, [pc, #12]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	74bb      	strb	r3, [r7, #18]
 8002bba:	e005      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc8:	7c7b      	ldrb	r3, [r7, #17]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d105      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bce:	4ba0      	ldr	r3, [pc, #640]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	4a9f      	ldr	r2, [pc, #636]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be6:	4b9a      	ldr	r3, [pc, #616]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f023 0203 	bic.w	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	4996      	ldr	r1, [pc, #600]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c08:	4b91      	ldr	r3, [pc, #580]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f023 020c 	bic.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	498e      	ldr	r1, [pc, #568]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c2a:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	4985      	ldr	r1, [pc, #532]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c4c:	4b80      	ldr	r3, [pc, #512]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5a:	497d      	ldr	r1, [pc, #500]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c6e:	4b78      	ldr	r3, [pc, #480]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7c:	4974      	ldr	r1, [pc, #464]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9e:	496c      	ldr	r1, [pc, #432]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb2:	4b67      	ldr	r3, [pc, #412]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc0:	4963      	ldr	r1, [pc, #396]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cd4:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce2:	495b      	ldr	r1, [pc, #364]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf6:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	4952      	ldr	r1, [pc, #328]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d18:	4b4d      	ldr	r3, [pc, #308]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	494a      	ldr	r1, [pc, #296]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d3a:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	4941      	ldr	r1, [pc, #260]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d5c:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d62:	f023 0203 	bic.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6a:	4939      	ldr	r1, [pc, #228]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d028      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d7e:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8c:	4930      	ldr	r1, [pc, #192]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9c:	d106      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d9e:	4b2c      	ldr	r3, [pc, #176]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4a2b      	ldr	r2, [pc, #172]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da8:	60d3      	str	r3, [r2, #12]
 8002daa:	e011      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 f8f9 	bl	8002fb4 <RCCEx_PLLSAI1_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d04d      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de4:	d108      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002de6:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dec:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002df6:	e012      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002df8:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dfe:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e04:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e16:	490e      	ldr	r1, [pc, #56]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e26:	d106      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e32:	60d3      	str	r3, [r2, #12]
 8002e34:	e020      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e3e:	d109      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a02      	ldr	r2, [pc, #8]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	60d3      	str	r3, [r2, #12]
 8002e4c:	e014      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 f8a5 	bl	8002fb4 <RCCEx_PLLSAI1_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e6e:	7cfb      	ldrb	r3, [r7, #19]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d028      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e84:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e92:	4947      	ldr	r1, [pc, #284]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea4:	4b42      	ldr	r3, [pc, #264]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a41      	ldr	r2, [pc, #260]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eae:	60d3      	str	r3, [r2, #12]
 8002eb0:	e011      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f876 	bl	8002fb4 <RCCEx_PLLSAI1_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01e      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ee2:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef2:	492f      	ldr	r1, [pc, #188]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f851 	bl	8002fb4 <RCCEx_PLLSAI1_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f32:	f023 0204 	bic.w	r2, r3, #4
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3c:	491c      	ldr	r1, [pc, #112]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f50:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f56:	f023 0218 	bic.w	r2, r3, #24
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	4913      	ldr	r1, [pc, #76]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f84:	490a      	ldr	r1, [pc, #40]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fc2:	4b72      	ldr	r3, [pc, #456]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00e      	beq.n	8002fec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fce:	4b6f      	ldr	r3, [pc, #444]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0203 	and.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d103      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
       ||
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d142      	bne.n	800306c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e03f      	b.n	800306c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d018      	beq.n	8003026 <RCCEx_PLLSAI1_Config+0x72>
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d825      	bhi.n	8003044 <RCCEx_PLLSAI1_Config+0x90>
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d002      	beq.n	8003002 <RCCEx_PLLSAI1_Config+0x4e>
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d009      	beq.n	8003014 <RCCEx_PLLSAI1_Config+0x60>
 8003000:	e020      	b.n	8003044 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003002:	4b62      	ldr	r3, [pc, #392]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11d      	bne.n	800304a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003012:	e01a      	b.n	800304a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003014:	4b5d      	ldr	r3, [pc, #372]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	2b00      	cmp	r3, #0
 800301e:	d116      	bne.n	800304e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003024:	e013      	b.n	800304e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003026:	4b59      	ldr	r3, [pc, #356]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003032:	4b56      	ldr	r3, [pc, #344]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003042:	e006      	b.n	8003052 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      break;
 8003048:	e004      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800304a:	bf00      	nop
 800304c:	e002      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800304e:	bf00      	nop
 8003050:	e000      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003052:	bf00      	nop
    }

    if(status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d108      	bne.n	800306c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800305a:	4b4c      	ldr	r3, [pc, #304]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4949      	ldr	r1, [pc, #292]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003068:	4313      	orrs	r3, r2
 800306a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 8086 	bne.w	8003180 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003074:	4b45      	ldr	r3, [pc, #276]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a44      	ldr	r2, [pc, #272]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 800307a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800307e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003080:	f7fd fdf0 	bl	8000c64 <HAL_GetTick>
 8003084:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003086:	e009      	b.n	800309c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003088:	f7fd fdec 	bl	8000c64 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d902      	bls.n	800309c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	73fb      	strb	r3, [r7, #15]
        break;
 800309a:	e005      	b.n	80030a8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800309c:	4b3b      	ldr	r3, [pc, #236]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ef      	bne.n	8003088 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d168      	bne.n	8003180 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d113      	bne.n	80030dc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	4b35      	ldr	r3, [pc, #212]	; (8003190 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6892      	ldr	r2, [r2, #8]
 80030c0:	0211      	lsls	r1, r2, #8
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68d2      	ldr	r2, [r2, #12]
 80030c6:	06d2      	lsls	r2, r2, #27
 80030c8:	4311      	orrs	r1, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6852      	ldr	r2, [r2, #4]
 80030ce:	3a01      	subs	r2, #1
 80030d0:	0112      	lsls	r2, r2, #4
 80030d2:	430a      	orrs	r2, r1
 80030d4:	492d      	ldr	r1, [pc, #180]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	610b      	str	r3, [r1, #16]
 80030da:	e02d      	b.n	8003138 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d115      	bne.n	800310e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e2:	4b2a      	ldr	r3, [pc, #168]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6892      	ldr	r2, [r2, #8]
 80030ee:	0211      	lsls	r1, r2, #8
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6912      	ldr	r2, [r2, #16]
 80030f4:	0852      	lsrs	r2, r2, #1
 80030f6:	3a01      	subs	r2, #1
 80030f8:	0552      	lsls	r2, r2, #21
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6852      	ldr	r2, [r2, #4]
 8003100:	3a01      	subs	r2, #1
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	430a      	orrs	r2, r1
 8003106:	4921      	ldr	r1, [pc, #132]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003108:	4313      	orrs	r3, r2
 800310a:	610b      	str	r3, [r1, #16]
 800310c:	e014      	b.n	8003138 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800310e:	4b1f      	ldr	r3, [pc, #124]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003114:	4013      	ands	r3, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6892      	ldr	r2, [r2, #8]
 800311a:	0211      	lsls	r1, r2, #8
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6952      	ldr	r2, [r2, #20]
 8003120:	0852      	lsrs	r2, r2, #1
 8003122:	3a01      	subs	r2, #1
 8003124:	0652      	lsls	r2, r2, #25
 8003126:	4311      	orrs	r1, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6852      	ldr	r2, [r2, #4]
 800312c:	3a01      	subs	r2, #1
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	430a      	orrs	r2, r1
 8003132:	4916      	ldr	r1, [pc, #88]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003134:	4313      	orrs	r3, r2
 8003136:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a13      	ldr	r2, [pc, #76]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 800313e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003142:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fd fd8e 	bl	8000c64 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800314a:	e009      	b.n	8003160 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800314c:	f7fd fd8a 	bl	8000c64 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d902      	bls.n	8003160 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	73fb      	strb	r3, [r7, #15]
          break;
 800315e:	e005      	b.n	800316c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ef      	beq.n	800314c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	4904      	ldr	r1, [pc, #16]	; (800318c <RCCEx_PLLSAI1_Config+0x1d8>)
 800317c:	4313      	orrs	r3, r2
 800317e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	07ff800f 	.word	0x07ff800f
 8003194:	ff9f800f 	.word	0xff9f800f
 8003198:	f9ff800f 	.word	0xf9ff800f

0800319c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00e      	beq.n	80031d4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031b6:	4b6f      	ldr	r3, [pc, #444]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0203 	and.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d103      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
       ||
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d142      	bne.n	8003254 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e03f      	b.n	8003254 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d018      	beq.n	800320e <RCCEx_PLLSAI2_Config+0x72>
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d825      	bhi.n	800322c <RCCEx_PLLSAI2_Config+0x90>
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d002      	beq.n	80031ea <RCCEx_PLLSAI2_Config+0x4e>
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d009      	beq.n	80031fc <RCCEx_PLLSAI2_Config+0x60>
 80031e8:	e020      	b.n	800322c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ea:	4b62      	ldr	r3, [pc, #392]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d11d      	bne.n	8003232 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fa:	e01a      	b.n	8003232 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031fc:	4b5d      	ldr	r3, [pc, #372]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d116      	bne.n	8003236 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800320c:	e013      	b.n	8003236 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800320e:	4b59      	ldr	r3, [pc, #356]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10f      	bne.n	800323a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800321a:	4b56      	ldr	r3, [pc, #344]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800322a:	e006      	b.n	800323a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e004      	b.n	800323c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800323a:	bf00      	nop
    }

    if(status == HAL_OK)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d108      	bne.n	8003254 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003242:	4b4c      	ldr	r3, [pc, #304]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4949      	ldr	r1, [pc, #292]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003250:	4313      	orrs	r3, r2
 8003252:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 8086 	bne.w	8003368 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800325c:	4b45      	ldr	r3, [pc, #276]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a44      	ldr	r2, [pc, #272]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003268:	f7fd fcfc 	bl	8000c64 <HAL_GetTick>
 800326c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800326e:	e009      	b.n	8003284 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003270:	f7fd fcf8 	bl	8000c64 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d902      	bls.n	8003284 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	73fb      	strb	r3, [r7, #15]
        break;
 8003282:	e005      	b.n	8003290 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003284:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ef      	bne.n	8003270 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d168      	bne.n	8003368 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d113      	bne.n	80032c4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800329c:	4b35      	ldr	r3, [pc, #212]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	4b35      	ldr	r3, [pc, #212]	; (8003378 <RCCEx_PLLSAI2_Config+0x1dc>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6892      	ldr	r2, [r2, #8]
 80032a8:	0211      	lsls	r1, r2, #8
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68d2      	ldr	r2, [r2, #12]
 80032ae:	06d2      	lsls	r2, r2, #27
 80032b0:	4311      	orrs	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6852      	ldr	r2, [r2, #4]
 80032b6:	3a01      	subs	r2, #1
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	430a      	orrs	r2, r1
 80032bc:	492d      	ldr	r1, [pc, #180]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	614b      	str	r3, [r1, #20]
 80032c2:	e02d      	b.n	8003320 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d115      	bne.n	80032f6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	4b2b      	ldr	r3, [pc, #172]	; (800337c <RCCEx_PLLSAI2_Config+0x1e0>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6892      	ldr	r2, [r2, #8]
 80032d6:	0211      	lsls	r1, r2, #8
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6912      	ldr	r2, [r2, #16]
 80032dc:	0852      	lsrs	r2, r2, #1
 80032de:	3a01      	subs	r2, #1
 80032e0:	0552      	lsls	r2, r2, #21
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6852      	ldr	r2, [r2, #4]
 80032e8:	3a01      	subs	r2, #1
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	430a      	orrs	r2, r1
 80032ee:	4921      	ldr	r1, [pc, #132]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	614b      	str	r3, [r1, #20]
 80032f4:	e014      	b.n	8003320 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032f6:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	4b21      	ldr	r3, [pc, #132]	; (8003380 <RCCEx_PLLSAI2_Config+0x1e4>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6892      	ldr	r2, [r2, #8]
 8003302:	0211      	lsls	r1, r2, #8
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6952      	ldr	r2, [r2, #20]
 8003308:	0852      	lsrs	r2, r2, #1
 800330a:	3a01      	subs	r2, #1
 800330c:	0652      	lsls	r2, r2, #25
 800330e:	4311      	orrs	r1, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6852      	ldr	r2, [r2, #4]
 8003314:	3a01      	subs	r2, #1
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	430a      	orrs	r2, r1
 800331a:	4916      	ldr	r1, [pc, #88]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 800331c:	4313      	orrs	r3, r2
 800331e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a13      	ldr	r2, [pc, #76]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fd fc9a 	bl	8000c64 <HAL_GetTick>
 8003330:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003332:	e009      	b.n	8003348 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003334:	f7fd fc96 	bl	8000c64 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d902      	bls.n	8003348 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	73fb      	strb	r3, [r7, #15]
          break;
 8003346:	e005      	b.n	8003354 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ef      	beq.n	8003334 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	4904      	ldr	r1, [pc, #16]	; (8003374 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003364:	4313      	orrs	r3, r2
 8003366:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	07ff800f 	.word	0x07ff800f
 800337c:	ff9f800f 	.word	0xff9f800f
 8003380:	f9ff800f 	.word	0xf9ff800f

08003384 <memset>:
 8003384:	4402      	add	r2, r0
 8003386:	4603      	mov	r3, r0
 8003388:	4293      	cmp	r3, r2
 800338a:	d100      	bne.n	800338e <memset+0xa>
 800338c:	4770      	bx	lr
 800338e:	f803 1b01 	strb.w	r1, [r3], #1
 8003392:	e7f9      	b.n	8003388 <memset+0x4>

08003394 <__libc_init_array>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	4d0d      	ldr	r5, [pc, #52]	; (80033cc <__libc_init_array+0x38>)
 8003398:	4c0d      	ldr	r4, [pc, #52]	; (80033d0 <__libc_init_array+0x3c>)
 800339a:	1b64      	subs	r4, r4, r5
 800339c:	10a4      	asrs	r4, r4, #2
 800339e:	2600      	movs	r6, #0
 80033a0:	42a6      	cmp	r6, r4
 80033a2:	d109      	bne.n	80033b8 <__libc_init_array+0x24>
 80033a4:	4d0b      	ldr	r5, [pc, #44]	; (80033d4 <__libc_init_array+0x40>)
 80033a6:	4c0c      	ldr	r4, [pc, #48]	; (80033d8 <__libc_init_array+0x44>)
 80033a8:	f000 f818 	bl	80033dc <_init>
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	2600      	movs	r6, #0
 80033b2:	42a6      	cmp	r6, r4
 80033b4:	d105      	bne.n	80033c2 <__libc_init_array+0x2e>
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033bc:	4798      	blx	r3
 80033be:	3601      	adds	r6, #1
 80033c0:	e7ee      	b.n	80033a0 <__libc_init_array+0xc>
 80033c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c6:	4798      	blx	r3
 80033c8:	3601      	adds	r6, #1
 80033ca:	e7f2      	b.n	80033b2 <__libc_init_array+0x1e>
 80033cc:	08003434 	.word	0x08003434
 80033d0:	08003434 	.word	0x08003434
 80033d4:	08003434 	.word	0x08003434
 80033d8:	08003438 	.word	0x08003438

080033dc <_init>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	bf00      	nop
 80033e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e2:	bc08      	pop	{r3}
 80033e4:	469e      	mov	lr, r3
 80033e6:	4770      	bx	lr

080033e8 <_fini>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	bf00      	nop
 80033ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ee:	bc08      	pop	{r3}
 80033f0:	469e      	mov	lr, r3
 80033f2:	4770      	bx	lr
